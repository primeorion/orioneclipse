/*
SQLyog Community v11.25 (64 bit)
MySQL - 5.6.10 : Database - dev2_orionEclipseFirm_1020
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`dev2_orionEclipseFirm_1020` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `dev2_orionEclipseFirm_1020`;

/*Table structure for table `account` */

DROP TABLE IF EXISTS `account`;

CREATE TABLE `account` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `orionConnectExternalId` int(11) NOT NULL,
  `orionConnectFirmId` int(10) DEFAULT NULL,
  `accountId` varchar(100) DEFAULT NULL,
  `accountNumber` varchar(100) CHARACTER SET latin1 DEFAULT NULL,
  `name` varchar(500) CHARACTER SET latin1 DEFAULT NULL,
  `portfolioId` int(11) DEFAULT NULL,
  `householdId` int(11) DEFAULT NULL,
  `ytdRealizedStgl` decimal(10,0) DEFAULT NULL,
  `ytdRealizedLtgl` decimal(10,0) DEFAULT NULL,
  `ssn` varchar(225) CHARACTER SET latin1 DEFAULT NULL,
  `sweepSymbol` varchar(100) CHARACTER SET latin1 DEFAULT NULL,
  `custodianId` int(11) DEFAULT NULL,
  `custodialAccountNumber` varchar(100) CHARACTER SET latin1 DEFAULT NULL,
  `sleeveType` varchar(100) CHARACTER SET latin1 DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `householdName` varchar(500) CHARACTER SET latin1 DEFAULT NULL,
  `accountTypeId` int(11) DEFAULT NULL,
  `createdBy` int(11) DEFAULT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(11) DEFAULT NULL,
  `isDeleted` tinyint(1) DEFAULT NULL,
  `advisorId` int(11) DEFAULT NULL,
  `sweepSecurityId` int(11) DEFAULT NULL,
  `systematicAmount` varchar(255) DEFAULT NULL,
  `systematicDate` datetime DEFAULT NULL,
  `sma` tinyint(1) DEFAULT NULL,
  `smaTradeable` varchar(255) DEFAULT NULL,
  `billingAccount` varchar(255) DEFAULT NULL,
  `sleeveTarget` decimal(5,2) DEFAULT NULL,
  `sleeveContributionPercent` decimal(5,2) DEFAULT NULL,
  `sleeveDistributionPercent` decimal(5,2) DEFAULT NULL,
  `sleeveToleranceLower` decimal(5,2) DEFAULT NULL,
  `sleeveToleranceUpper` decimal(5,2) DEFAULT NULL,
  `modelId` int(11) DEFAULT NULL,
  `isDisabled` tinyint(1) DEFAULT NULL,
  `disabledReason` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UNIQUE` (`orionConnectExternalId`),
  KEY `accountTypeId` (`accountTypeId`),
  KEY `FK_account_custodian_idx` (`custodianId`),
  KEY `FK_account_advisor_id_idx` (`advisorId`),
  KEY `FK_account_portfolio_id_idx` (`portfolioId`),
  KEY `Fk_account_user_createdBy_idx` (`createdBy`),
  KEY `Fk_account_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_account_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_account_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=131071 DEFAULT CHARSET=utf8;

/*Table structure for table `accountExtension` */

DROP TABLE IF EXISTS `accountExtension`;

CREATE TABLE `accountExtension` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `accountId` int(11) NOT NULL,
  `portfolioId` int(11) DEFAULT NULL,
  `eclipseCreatedDate` datetime NOT NULL,
  `howPortfolioAssigned` int(11) NOT NULL,
  `tradingNotes` varchar(500) DEFAULT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_accountExtension_account_Id_idx` (`accountId`),
  KEY `FK_accountExtension_portfolio_id_idx` (`portfolioId`),
  KEY `Fk_accountExtension_user_createdBy_idx` (`createdBy`),
  KEY `Fk_accountExtension_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_accountExtension_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_accountExtension_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `accountFilterType` */

DROP TABLE IF EXISTS `accountFilterType`;

CREATE TABLE `accountFilterType` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `filterType` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=latin1;

/*Table structure for table `accountSMAAllocation` */

DROP TABLE IF EXISTS `accountSMAAllocation`;

CREATE TABLE `accountSMAAllocation` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `accountId` int(11) NOT NULL,
  `modelId` int(11) NOT NULL,
  `modelLevel` int(11) NOT NULL,
  `weightPercent` decimal(5,2) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `modelId` (`modelId`),
  KEY `FK_accountSMAAllocation_account_Id_idx` (`accountId`),
  KEY `Fk_accountSMAAllocation_user_createdBy_idx` (`createdBy`),
  KEY `Fk_accountSMAAllocation_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_accountSMAAllocation_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_accountSMAAllocation_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `accountTaxableType` */

DROP TABLE IF EXISTS `accountTaxableType`;

CREATE TABLE `accountTaxableType` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;

/*Table structure for table `accountType` */

DROP TABLE IF EXISTS `accountType`;

CREATE TABLE `accountType` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `taxableTypeID` int(11) DEFAULT NULL,
  `code` varchar(20) DEFAULT NULL,
  `isDeleted` tinyint(1) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `unique_type` (`name`),
  KEY `Fk_accountType_user_createdBy_idx` (`createdBy`),
  KEY `Fk_accountType_user_editedBy_idx` (`editedBy`),
  KEY `FK_accountTaxableType_ID` (`taxableTypeID`),
  CONSTRAINT `FK_accountTaxableType_ID` FOREIGN KEY (`taxableTypeID`) REFERENCES `accountTaxableType` (`id`),
  CONSTRAINT `Fk_accountType_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_accountType_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=3136 DEFAULT CHARSET=latin1;

/*Table structure for table `advisor` */

DROP TABLE IF EXISTS `advisor`;

CREATE TABLE `advisor` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `orionFirmId` int(11) DEFAULT NULL,
  `externalId` int(11) DEFAULT NULL,
  `advisorNumber` varchar(50) NOT NULL,
  `name` varchar(255) NOT NULL,
  `brokerDealer` varchar(255) DEFAULT NULL,
  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `externalId` (`externalId`),
  KEY `Fk_advisor_user_createdBy_idx` (`createdBy`),
  KEY `Fk_advisor_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_advisor_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_advisor_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=264 DEFAULT CHARSET=latin1;

/*Table structure for table `assetCategory` */

DROP TABLE IF EXISTS `assetCategory`;

CREATE TABLE `assetCategory` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `orionEclipseName` varchar(255) DEFAULT NULL,
  `color` varchar(25) DEFAULT NULL,
  `isDeleted` tinyint(1) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Fk_assetCategory_user_createdBy_idx` (`createdBy`),
  KEY `Fk_assetCategory_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_assetCategory_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_assetCategory_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=121 DEFAULT CHARSET=latin1;

/*Table structure for table `assetClass` */

DROP TABLE IF EXISTS `assetClass`;

CREATE TABLE `assetClass` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `assetCategoryId` int(11) DEFAULT NULL,
  `orionEclipseName` varchar(255) DEFAULT NULL,
  `color` varchar(25) DEFAULT NULL,
  `isDeleted` tinyint(1) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `IDX_AssetCategoryId` (`assetCategoryId`),
  KEY `Fk_assetClass_user_createdBy_idx` (`createdBy`),
  KEY `Fk_assetClass_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_assetClass_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_assetClass_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=441 DEFAULT CHARSET=latin1;

/*Table structure for table `assetSubClass` */

DROP TABLE IF EXISTS `assetSubClass`;

CREATE TABLE `assetSubClass` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `assetClassId` int(11) DEFAULT NULL,
  `orionEclipseName` varchar(255) DEFAULT NULL,
  `color` varchar(25) DEFAULT NULL,
  `isDeleted` tinyint(1) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `AssetClassId` (`assetClassId`),
  KEY `Fk_assetSubClass_user_createdBy_idx` (`createdBy`),
  KEY `Fk_assetSubClass_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_assetSubClass_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_assetSubClass_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=2482 DEFAULT CHARSET=latin1;

/*Table structure for table `assetWeighting` */

DROP TABLE IF EXISTS `assetWeighting`;

CREATE TABLE `assetWeighting` (
  `securityId` int(11) NOT NULL,
  `relatedType` varchar(25) NOT NULL,
  `relatedTypeId` int(11) NOT NULL,
  `weightingPercentage` decimal(10,0) DEFAULT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdBy` int(11) NOT NULL,
  `createdDate` datetime NOT NULL,
  `editedBy` int(11) NOT NULL,
  `editedDate` datetime NOT NULL,
  PRIMARY KEY (`securityId`,`relatedType`,`relatedTypeId`),
  KEY `Fk_assetWeighting_user_createdBy_idx` (`createdBy`),
  KEY `Fk_assetWeighting_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `FK_assetWeighting_security_id` FOREIGN KEY (`securityId`) REFERENCES `security` (`id`),
  CONSTRAINT `Fk_assetWeighting_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_assetWeighting_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `communityStrategistModel` */

DROP TABLE IF EXISTS `communityStrategistModel`;

CREATE TABLE `communityStrategistModel` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `communityStrategistPreferenceId` int(11) DEFAULT NULL,
  `modelId` int(11) DEFAULT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_communityStrategistModel_model_id` (`modelId`),
  KEY `FK_communityStrategistModel_communityStrategistPreference_id` (`communityStrategistPreferenceId`),
  KEY `Fk_communityStrategistModel_user_createdBy_idx` (`createdBy`),
  KEY `Fk_communityStrategistModel_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_communityStrategistModel_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_communityStrategistModel_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `communityStrategistPreferenceValue` */

DROP TABLE IF EXISTS `communityStrategistPreferenceValue`;

CREATE TABLE `communityStrategistPreferenceValue` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `preferenceValueId` int(11) DEFAULT NULL,
  `modelAccessLevel` int(11) NOT NULL DEFAULT '1' COMMENT '1 or 2 (1=All, 2=SelectedOnly)',
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_communityPreference_preferenceValue_id` (`preferenceValueId`),
  KEY `FK_communityPreference_modelAccessLevel_id` (`modelAccessLevel`),
  KEY `Fk_communityStrategistPreferenceValue_user_createdBy_idx` (`createdBy`),
  KEY `Fk_communityStrategistPreferenceValue_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_communityStrategistPreferenceValue_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_communityStrategistPreferenceValue_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `communityStrategistValue` */

DROP TABLE IF EXISTS `communityStrategistValue`;

CREATE TABLE `communityStrategistValue` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `communityStrategistpreferenceId` int(11) DEFAULT NULL,
  `strategistId` int(11) DEFAULT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_communityStrategistpreferences_communityStrategist` (`communityStrategistpreferenceId`),
  KEY `Fk_communityStrategistValue_user_createdBy_idx` (`createdBy`),
  KEY `Fk_communityStrategistValue_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_communityStrategistValue_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_communityStrategistValue_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `component` */

DROP TABLE IF EXISTS `component`;

CREATE TABLE `component` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=latin1;

/*Table structure for table `custodian` */

DROP TABLE IF EXISTS `custodian`;

CREATE TABLE `custodian` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `orionFirmId` int(11) DEFAULT NULL,
  `externalId` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `code` varchar(20) DEFAULT NULL,
  `isDeleted` tinyint(1) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  `tradeExecutionTypeId` int(11) DEFAULT NULL,
  `masterAccountNumber` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `Fk_custodian_user_createdBy_idx` (`createdBy`),
  KEY `Fk_custodian_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_custodian_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_custodian_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=74 DEFAULT CHARSET=latin1;

/*Table structure for table `custodianSecuritySymbol` */

DROP TABLE IF EXISTS `custodianSecuritySymbol`;

CREATE TABLE `custodianSecuritySymbol` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `custodianId` int(11) NOT NULL,
  `securityId` int(11) NOT NULL,
  `securitySymbol` varchar(100) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(11) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(11) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UQ_Security_Custodian` (`securityId`,`custodianId`),
  KEY `FK_custodianSecuritySymbol_custodian_Id_idx` (`custodianId`),
  KEY `Fk_custodianSecuritySymbol_user_createdBy_idx` (`createdBy`),
  KEY `Fk_custodianSecuritySymbol_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `FK_custodianSecuritySymbol_security_id` FOREIGN KEY (`securityId`) REFERENCES `security` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_custodianSecuritySymbol_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_custodianSecuritySymbol_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;

/*Table structure for table `custodianTradeExecutionTypeForSecurity` */

DROP TABLE IF EXISTS `custodianTradeExecutionTypeForSecurity`;

CREATE TABLE `custodianTradeExecutionTypeForSecurity` (
  `custodianId` int(11) NOT NULL,
  `tradeExecutionTypeId` int(11) NOT NULL,
  `securityTypeId` int(11) NOT NULL,
  `isDeleted` tinyint(1) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`custodianId`,`securityTypeId`),
  KEY `FK_custodianTETForSecurity_tET_custodianId` (`custodianId`),
  KEY `FK_custodianTETForSecurity_tET_tradeExecutionTypeId` (`tradeExecutionTypeId`),
  KEY `FK_custodianTETForSecurity_securityType_securityTypeId` (`securityTypeId`),
  KEY `Fk_custodianTETForSecurity_user_createdBy_idx` (`createdBy`),
  KEY `Fk_custodianTETForSecurityForSecurity_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_custodianTETForSecurityForSecurity_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_custodianTETForSecurityForSecurity_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `dbObjectType` */

DROP TABLE IF EXISTS `dbObjectType`;

CREATE TABLE `dbObjectType` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `objectType` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `entityIdSequence` */

DROP TABLE IF EXISTS `entityIdSequence`;

CREATE TABLE `entityIdSequence` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `entityName` varchar(100) CHARACTER SET latin1 DEFAULT NULL,
  `seqId` varchar(500) CHARACTER SET latin1 NOT NULL,
  KEY `id` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Table structure for table `gridView` */

DROP TABLE IF EXISTS `gridView`;

CREATE TABLE `gridView` (
  `id` int(11) NOT NULL,
  `name` varchar(100) NOT NULL,
  `gridType` int(11) NOT NULL,
  `public` tinyint(1) NOT NULL DEFAULT '0',
  `columnDefinition` varchar(255) NOT NULL,
  `ownerUserId` int(11) NOT NULL,
  `showOnDashboard` tinyint(1) NOT NULL DEFAULT '0',
  `isDefault` tinyint(1) NOT NULL DEFAULT '0',
  `sqlWhereClause` varchar(255) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `ownerUserId` (`ownerUserId`),
  CONSTRAINT `FK_gridView_user` FOREIGN KEY (`ownerUserId`) REFERENCES `user_old` (`userId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `locationOptimizationPreferenceOption` */

DROP TABLE IF EXISTS `locationOptimizationPreferenceOption`;

CREATE TABLE `locationOptimizationPreferenceOption` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `locationOptimizationPreferenceId` int(11) NOT NULL,
  `value` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_loppo_locationOptimizationPreferences_id` (`locationOptimizationPreferenceId`),
  CONSTRAINT `FK_loppo_locationOptimizationPreferences_id` FOREIGN KEY (`locationOptimizationPreferenceId`) REFERENCES `locationOptimizationPreferences` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=latin1;

/*Table structure for table `locationOptimizationPreferenceValue` */

DROP TABLE IF EXISTS `locationOptimizationPreferenceValue`;

CREATE TABLE `locationOptimizationPreferenceValue` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `preferenceValueId` int(11) DEFAULT '0',
  `subClassId` int(11) DEFAULT '0',
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK1_locationOptimizationPerferenceValue_PreferenceValue` (`preferenceValueId`),
  KEY `FK2_locationOptimizationPerferenceValue_assestSubClass` (`subClassId`),
  KEY `FK1_locationOptimizationPreferenceValue_user_createdBy` (`createdBy`),
  KEY `FK1_locationOptimizationPreferenceValue_user_editedBy` (`editedBy`),
  CONSTRAINT `FK_locationOptimizationPreferenceValue_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`),
  CONSTRAINT `FK_locationOptimizationPreferenceValue_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `locationOptimizationPreferences` */

DROP TABLE IF EXISTS `locationOptimizationPreferences`;

CREATE TABLE `locationOptimizationPreferences` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group` varchar(100) DEFAULT NULL,
  `name` varchar(100) DEFAULT NULL,
  `code` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;

/*Table structure for table `locationOptimizationValue` */

DROP TABLE IF EXISTS `locationOptimizationValue`;

CREATE TABLE `locationOptimizationValue` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `locationPreferenceValueId` int(11) DEFAULT '0',
  `locationPreferenceId` int(11) DEFAULT '0',
  `value` int(11) DEFAULT '0',
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK1_loPreferenceValue_locationOptimizationValue` (`locationPreferenceValueId`),
  KEY `FK2_locationOptimizationPreferenceValue_locationPreference` (`locationPreferenceId`),
  KEY `FK1_locationOptimizationValue_user_createdBy` (`createdBy`),
  KEY `FK1_locationOptimizationValue_user_editedBy` (`editedBy`),
  CONSTRAINT `FK_locationOptimizationValue_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`),
  CONSTRAINT `FK_locationOptimizationValue_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `locationpreference` */

DROP TABLE IF EXISTS `locationpreference`;

CREATE TABLE `locationpreference` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `symbol` varchar(200) DEFAULT NULL,
  `buyTaxablePriority` int(11) DEFAULT NULL,
  `buyTaxdefferedPriority` int(11) DEFAULT NULL,
  `buyTaxexemptPriority` int(11) DEFAULT NULL,
  `sellTaxablePriority` int(11) DEFAULT NULL,
  `sellTaxdefferedPriority` int(11) DEFAULT NULL,
  `sellTaxexemptPriority` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=latin1;

/*Table structure for table `model` */

DROP TABLE IF EXISTS `model`;

CREATE TABLE `model` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `status` int(11) NOT NULL,
  `communityModelled` int(11) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `ownerUserId` int(11) NOT NULL,
  `scope` varchar(15) DEFAULT NULL,
  `dynamicModel` tinyint(1) NOT NULL,
  `tags` varchar(255) DEFAULT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `isSubsitutedForPortfolio` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `IDX_createdBy` (`createdBy`),
  KEY `IDX_editedBy` (`editedBy`),
  KEY `Fk_model_user_createdBy_idx` (`createdBy`),
  KEY `Fk_model_user_editedBy_idx` (`editedBy`),
  KEY `FK_model_user_ownerUserId_idx` (`ownerUserId`),
  CONSTRAINT `FK_model_user_ownerUserId` FOREIGN KEY (`ownerUserId`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_model_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_model_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=latin1;

/*Table structure for table `modelDetails` */

DROP TABLE IF EXISTS `modelDetails`;

CREATE TABLE `modelDetails` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `modelId` int(11) NOT NULL,
  `modelElementId` int(11) NOT NULL,
  `leftValue` int(11) NOT NULL,
  `rightValue` int(11) NOT NULL,
  `rank` int(11) DEFAULT NULL,
  `level` varchar(100) DEFAULT NULL,
  `targetPercent` decimal(10,2) DEFAULT NULL,
  `lowerModelTolerancePercent` decimal(10,2) DEFAULT NULL,
  `upperModelTolerancePercent` decimal(10,2) DEFAULT NULL,
  `toleranceBand` decimal(10,2) DEFAULT NULL,
  `lowerModelToleranceAmount` decimal(10,2) DEFAULT NULL,
  `upperModelToleranceAmount` decimal(10,2) DEFAULT NULL,
  `lowerTradeTolerancePercent` decimal(10,2) DEFAULT NULL,
  `upperTradeTolerancePercent` decimal(10,2) DEFAULT NULL,
  `isDeleted` tinyint(4) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(11) DEFAULT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`,`modelId`,`modelElementId`),
  KEY `modelId` (`modelId`),
  KEY `modelElementId` (`modelElementId`),
  CONSTRAINT `FK_modelDetails_model` FOREIGN KEY (`modelId`) REFERENCES `model` (`id`),
  CONSTRAINT `FK_modelDetails_modelElements` FOREIGN KEY (`modelElementId`) REFERENCES `modelElements` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=122 DEFAULT CHARSET=latin1;

/*Table structure for table `modelElements` */

DROP TABLE IF EXISTS `modelElements`;

CREATE TABLE `modelElements` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `relatedType` varchar(25) DEFAULT NULL,
  `relatedTypeId` int(11) DEFAULT NULL,
  `validateTickerSet` tinyint(1) NOT NULL DEFAULT '1',
  `rebalancePriority` int(11) NOT NULL DEFAULT '0',
  `tags` varchar(255) DEFAULT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(11) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `id` (`id`),
  KEY `createdBy` (`createdBy`),
  KEY `editedBy` (`editedBy`),
  KEY `Fk_modelElements_user_createdBy_idx` (`createdBy`),
  KEY `Fk_modelElements_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_modelElements_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_modelElements_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=65 DEFAULT CHARSET=latin1;

/*Table structure for table `portfolio` */

DROP TABLE IF EXISTS `portfolio`;

CREATE TABLE `portfolio` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `description` varchar(8000) DEFAULT NULL,
  `modelId` int(11) DEFAULT NULL,
  `tags` varchar(500) DEFAULT NULL,
  `isDisabled` tinyint(1) NOT NULL,
  `disabledReason` varchar(500) DEFAULT NULL,
  `isSleevePortfolio` tinyint(1) NOT NULL DEFAULT '0',
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `IDX_modelIDX_modelIdId` (`modelId`),
  KEY `Fk_portfolio_user_createdBy_idx` (`createdBy`),
  KEY `Fk_portfolio_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_portfolio_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_portfolio_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=11211248 DEFAULT CHARSET=latin1;

/*Table structure for table `portfolioAnalytics` */

DROP TABLE IF EXISTS `portfolioAnalytics`;

CREATE TABLE `portfolioAnalytics` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `dateOfAnalytics` datetime DEFAULT NULL,
  `portfolioId` int(11) DEFAULT NULL,
  `outOfTolerance` bit(1) DEFAULT NULL,
  `outOfToleranceNoTrades` bit(1) DEFAULT NULL,
  `outOfBalance` bit(1) DEFAULT b'0',
  `cashNeed` decimal(10,0) DEFAULT NULL,
  `modelId` int(11) DEFAULT NULL,
  `autoRebalanceDate` datetime DEFAULT NULL,
  `cashPercent` decimal(10,0) DEFAULT NULL,
  `deviationPercent` decimal(10,0) DEFAULT NULL,
  `cashTargetPercent` decimal(10,0) DEFAULT NULL,
  `cashReserve` decimal(10,0) DEFAULT NULL,
  `cashValue` decimal(10,0) DEFAULT NULL,
  `hasTaxLossHarvest` bit(1) DEFAULT NULL,
  `hasPendings` bit(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_portfolioAnalytics_portfolio_id_idx` (`portfolioId`),
  CONSTRAINT `FK_portfolioAnalytics_portfolio_id` FOREIGN KEY (`portfolioId`) REFERENCES `portfolio` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;

/*Table structure for table `portfolioStatus` */

DROP TABLE IF EXISTS `portfolioStatus`;

CREATE TABLE `portfolioStatus` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `status` varchar(50) DEFAULT 'NULL',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=latin1;

/*Table structure for table `position` */

DROP TABLE IF EXISTS `position`;

CREATE TABLE `position` (
  `accountId` int(11) DEFAULT NULL,
  `securityId` int(11) NOT NULL,
  `orionFirmId` int(11) DEFAULT NULL,
  `externalId` int(11) NOT NULL,
  `price` decimal(22,7) NOT NULL,
  `priceDate` datetime NOT NULL,
  `marketValue` decimal(22,2) NOT NULL,
  `quantity` decimal(22,7) NOT NULL,
  `positionYtdRealizedStgl` decimal(22,7) NOT NULL,
  `positionYtdRealizedLtgl` decimal(22,7) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  UNIQUE KEY `IDXU_externalId` (`externalId`),
  KEY `FK_position_account_accountId` (`accountId`),
  KEY `FK_position_security_securityId` (`securityId`),
  KEY `Fk_position_user_createdBy_idx` (`createdBy`),
  KEY `Fk_position_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `FK_position_account_id` FOREIGN KEY (`accountId`) REFERENCES `account` (`id`),
  CONSTRAINT `FK_position_security_id` FOREIGN KEY (`securityId`) REFERENCES `security` (`id`),
  CONSTRAINT `Fk_position_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_position_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `preference` */

DROP TABLE IF EXISTS `preference`;

CREATE TABLE `preference` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `displayName` varchar(100) DEFAULT NULL,
  `categoryId` int(11) DEFAULT NULL,
  `dataType` varchar(50) DEFAULT NULL,
  `defaultValue` varchar(255) DEFAULT NULL,
  `symbol` varchar(50) DEFAULT NULL,
  `description` varchar(500) DEFAULT NULL,
  `displayOrder` int(11) DEFAULT '0',
  `allowedRecordTypes` int(11) DEFAULT NULL,
  `requiresApproval` tinyint(1) DEFAULT '0',
  `waterMark` varchar(150) DEFAULT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` varchar(100) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_preference_preferenceCategory12` (`categoryId`),
  CONSTRAINT `FK_preference_preferenceCategory12` FOREIGN KEY (`categoryId`) REFERENCES `preferencecategory` (`id`) ON DELETE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=109 DEFAULT CHARSET=latin1;

/*Table structure for table `preferenceCategory` */

DROP TABLE IF EXISTS `preferenceCategory`;

CREATE TABLE `preferenceCategory` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code` varchar(100) DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `displayOrder` int(11) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;

/*Table structure for table `preferenceComponent` */

DROP TABLE IF EXISTS `preferenceComponent`;

CREATE TABLE `preferenceComponent` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `preferenceId` int(11) NOT NULL,
  `componentId` int(11) NOT NULL,
  `customComponent` varchar(250) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK__preference1` (`preferenceId`),
  KEY `FK__component1` (`componentId`),
  CONSTRAINT `FK__component1` FOREIGN KEY (`componentId`) REFERENCES `component` (`id`) ON DELETE NO ACTION,
  CONSTRAINT `FK__preference1` FOREIGN KEY (`preferenceId`) REFERENCES `preference` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=124 DEFAULT CHARSET=latin1;

/*Table structure for table `preferenceDefaultOptionValue` */

DROP TABLE IF EXISTS `preferenceDefaultOptionValue`;

CREATE TABLE `preferenceDefaultOptionValue` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `preferenceDefaultValueId` int(11) NOT NULL,
  `preferenceOptionId` int(11) NOT NULL,
  `prefOrder` int(11) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `preferenceValueKey` (`preferenceDefaultValueId`),
  KEY `prefernceOptionKey` (`preferenceOptionId`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;

/*Table structure for table `preferenceDefaultValue` */

DROP TABLE IF EXISTS `preferenceDefaultValue`;

CREATE TABLE `preferenceDefaultValue` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `preferenceId` int(11) NOT NULL,
  `defaultValue` varchar(255) DEFAULT 'NULL',
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `preferenceDefaultValueId` (`preferenceId`),
  KEY `FK_preferenceDefaultValue_user_createdBy` (`createdBy`),
  KEY `FK_preferenceDefaultValue_user_editedBy` (`editedBy`),
  CONSTRAINT `FK_preferenceDefaultValue_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`),
  CONSTRAINT `FK_preferenceDefaultValue_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=131 DEFAULT CHARSET=latin1;

/*Table structure for table `preferenceIndicatorOptions` */

DROP TABLE IF EXISTS `preferenceIndicatorOptions`;

CREATE TABLE `preferenceIndicatorOptions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `preferenceId` int(11) DEFAULT NULL,
  `name` varchar(40) DEFAULT NULL,
  `minValue` int(11) DEFAULT NULL,
  `maxValue` int(11) DEFAULT NULL,
  `displayOrder` int(11) DEFAULT '0',
  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',
  `createdDate` datetime DEFAULT NULL,
  `createdBy` varchar(100) DEFAULT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;

/*Table structure for table `preferenceLevel` */

DROP TABLE IF EXISTS `preferenceLevel`;

CREATE TABLE `preferenceLevel` (
  `id` int(11) NOT NULL,
  `name` varchar(100) NOT NULL,
  `bitValue` int(11) NOT NULL,
  `shortName` varchar(45) DEFAULT NULL,
  `allowedRoleType` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `preferenceOption` */

DROP TABLE IF EXISTS `preferenceOption`;

CREATE TABLE `preferenceOption` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `preferenceId` int(11) DEFAULT NULL,
  `optionName` varchar(500) DEFAULT NULL,
  `optionValue` int(11) DEFAULT NULL,
  `displayOrder` int(11) DEFAULT '0',
  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',
  `createdDate` datetime DEFAULT NULL,
  `createdBy` varchar(100) DEFAULT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `preferenceId` (`preferenceId`)
) ENGINE=InnoDB AUTO_INCREMENT=81 DEFAULT CHARSET=latin1;

/*Table structure for table `preferenceOptionValue` */

DROP TABLE IF EXISTS `preferenceOptionValue`;

CREATE TABLE `preferenceOptionValue` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `preferenceValueId` int(11) NOT NULL,
  `preferenceOptionId` int(11) NOT NULL,
  `prefOrder` int(11) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `preferenceValueKey` (`preferenceValueId`),
  KEY `prefernceOptionKey` (`preferenceOptionId`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=latin1;

/*Table structure for table `preferenceTradeValue` */

DROP TABLE IF EXISTS `preferenceTradeValue`;

CREATE TABLE `preferenceTradeValue` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `preferenceId` int(11) NOT NULL DEFAULT '0',
  `preferenceType` varchar(100) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `FK__preference` (`preferenceId`),
  CONSTRAINT `FK__preference` FOREIGN KEY (`preferenceId`) REFERENCES `preference` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=latin1;

/*Table structure for table `preferenceValue` */

DROP TABLE IF EXISTS `preferenceValue`;

CREATE TABLE `preferenceValue` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `preferenceId` int(11) NOT NULL,
  `relatedType` int(11) NOT NULL,
  `relatedTypeId` int(11) NOT NULL,
  `value` varchar(255) DEFAULT 'NULL',
  `indicatorValue` varchar(40) DEFAULT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `preferenceId` (`preferenceId`),
  KEY `Fk_preferenceValue_user_createdBy_idx` (`createdBy`),
  KEY `Fk_preferenceValue_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_preferenceValue_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_preferenceValue_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=latin1;

/*Table structure for table `privilege` */

DROP TABLE IF EXISTS `privilege`;

CREATE TABLE `privilege` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code` varchar(15) NOT NULL,
  `name` varchar(100) NOT NULL,
  `type` int(11) NOT NULL,
  `userLevel` int(11) NOT NULL,
  `category` varchar(50) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Fk_privilege_user_createdBy_idx` (`createdBy`),
  KEY `Fk_privilege_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_privilege_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_privilege_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=87 DEFAULT CHARSET=latin1;

/*Table structure for table `realizedGainLoss` */

DROP TABLE IF EXISTS `realizedGainLoss`;

CREATE TABLE `realizedGainLoss` (
  `id` int(11) NOT NULL,
  `accountId` int(11) NOT NULL,
  `securityId` int(11) NOT NULL,
  `orionFirmId` int(11) DEFAULT NULL,
  `externalId` int(11) DEFAULT NULL,
  `grossProceeds` decimal(22,2) DEFAULT NULL,
  `netProceeds` decimal(22,2) DEFAULT NULL,
  `costAmount` decimal(22,2) DEFAULT NULL,
  `dateAcquired` datetime DEFAULT NULL,
  `sellDate` datetime DEFAULT NULL,
  `quantity` decimal(22,7) DEFAULT NULL,
  `longTerm` tinyint(1) DEFAULT NULL,
  `sellMethod` varchar(25) DEFAULT NULL,
  `totalGains` decimal(22,2) DEFAULT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_realizedGainLoss_account_accountId` (`accountId`),
  KEY `FK_realizedGainLoss_security_securityId` (`securityId`),
  KEY `Fk_realizedGainLoss_user_createdBy_idx` (`createdBy`),
  KEY `Fk_realizedGainLoss_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `FK_realizedGainLoss_security_id` FOREIGN KEY (`securityId`) REFERENCES `security` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_realizedGainLoss_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_realizedGainLoss_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `role` */

DROP TABLE IF EXISTS `role`;

CREATE TABLE `role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(11) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(11) NOT NULL,
  `roleTypeId` int(11) DEFAULT NULL,
  `startDate` date DEFAULT NULL,
  `expireDate` date DEFAULT '2050-12-31',
  `status` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_role_roleType_roleTypeId` (`roleTypeId`),
  KEY `Fk_role_user_createdBy_idx` (`createdBy`),
  KEY `Fk_role_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_role_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_role_roleType_roleTypeId` FOREIGN KEY (`roleTypeId`) REFERENCES `roleType` (`id`),
  CONSTRAINT `Fk_role_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=878 DEFAULT CHARSET=utf8;

/*Table structure for table `rolePrivilege` */

DROP TABLE IF EXISTS `rolePrivilege`;

CREATE TABLE `rolePrivilege` (
  `roleId` int(11) NOT NULL,
  `privilegeId` int(11) NOT NULL,
  `canAdd` tinyint(1) NOT NULL,
  `canUpdate` tinyint(1) NOT NULL,
  `canDelete` tinyint(1) NOT NULL,
  `canRead` tinyint(1) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(11) DEFAULT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(11) NOT NULL,
  PRIMARY KEY (`roleId`,`privilegeId`),
  KEY `IDX_roleId` (`roleId`),
  KEY `IDX_privilegeId` (`privilegeId`),
  KEY `FK_rolePrivilege_user_editedBy` (`editedBy`),
  KEY `FK_rolePrivilege_user_createdBy` (`createdBy`),
  KEY `Fk_rolePrivilege_user_createdBy_idx` (`createdBy`),
  KEY `Fk_rolePrivilege_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_rolePrivilege_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_rolePrivilege_privilege_privilegeId` FOREIGN KEY (`privilegeId`) REFERENCES `privilege` (`id`),
  CONSTRAINT `Fk_rolePrivilege_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `roleType` */

DROP TABLE IF EXISTS `roleType`;

CREATE TABLE `roleType` (
  `id` int(11) NOT NULL,
  `roleType` varchar(50) DEFAULT NULL,
  `bitValue` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `security` */

DROP TABLE IF EXISTS `security`;

CREATE TABLE `security` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `orionFirmId` int(11) DEFAULT NULL,
  `orionConnectExternalId` int(11) NOT NULL,
  `symbol` varchar(100) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `orionEclipseName` varchar(255) DEFAULT NULL,
  `custodialCash` tinyint(1) DEFAULT '0',
  `assetCategoryId` int(11) DEFAULT NULL,
  `assetClassId` int(11) DEFAULT NULL,
  `assetSubClassId` int(11) DEFAULT NULL,
  `securityTypeId` int(11) DEFAULT NULL,
  `statusId` tinyint(1) DEFAULT '2',
  `isDeleted` tinyint(1) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `assetCategoryId` (`assetCategoryId`),
  KEY `securityTypeId` (`securityTypeId`),
  KEY `Fk_security_user_createdBy_idx` (`createdBy`),
  KEY `Fk_security_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_security_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_security_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=31008 DEFAULT CHARSET=latin1;

/*Table structure for table `securityEquivalenceInSecuritySet` */

DROP TABLE IF EXISTS `securityEquivalenceInSecuritySet`;

CREATE TABLE `securityEquivalenceInSecuritySet` (
  `securitySetId` int(11) NOT NULL,
  `securityId` int(11) NOT NULL,
  `equivalentSecurityId` int(11) NOT NULL AUTO_INCREMENT,
  `taxableSecurityId` int(11) DEFAULT NULL,
  `taxDeferredSecurityId` int(11) DEFAULT NULL,
  `taxExemptSecurityId` int(11) DEFAULT NULL,
  `minTradeAmount` decimal(10,2) DEFAULT NULL,
  `minInitialBuyDollar` decimal(10,2) DEFAULT NULL,
  `buyPriority` tinyint(1) DEFAULT NULL,
  `sellPriority` tinyint(1) DEFAULT NULL,
  `rank` int(11) DEFAULT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(11) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(11) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  PRIMARY KEY (`securitySetId`,`securityId`,`equivalentSecurityId`),
  KEY `equivalentSecurityId` (`equivalentSecurityId`),
  KEY `FK_securityEQ_security_idx` (`securityId`),
  KEY `Fk_securityEquivalenceInSecuritySet_user_createdBy_idx` (`createdBy`),
  KEY `Fk_securityEquivalenceInSecuritySet_user_editedBy_idx` (`editedBy`),
  KEY `Fk_securityEquivalenceInSecuritySet_security_id_taxDeferred_idx` (`taxDeferredSecurityId`),
  KEY `Fk_securityEquivalenceInSecuritySet_security_id_taxable_idx` (`taxableSecurityId`),
  KEY `Fk_securityEquivalenceInSecuritySet_security_id_taxExempt_idx` (`taxExemptSecurityId`),
  CONSTRAINT `Fk_securityEquivalenceInSecuritySet_security_id` FOREIGN KEY (`securityId`) REFERENCES `security` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securityEquivalenceInSecuritySet_security_id_equivalent` FOREIGN KEY (`equivalentSecurityId`) REFERENCES `security` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securityEquivalenceInSecuritySet_security_id_taxable` FOREIGN KEY (`taxableSecurityId`) REFERENCES `security` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securityEquivalenceInSecuritySet_security_id_taxDeferred` FOREIGN KEY (`taxDeferredSecurityId`) REFERENCES `security` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securityEquivalenceInSecuritySet_security_id_taxExempt` FOREIGN KEY (`taxExemptSecurityId`) REFERENCES `security` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securityEquivalenceInSecuritySet_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securityEquivalenceInSecuritySet_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=31002 DEFAULT CHARSET=latin1;

/*Table structure for table `securityPrice` */

DROP TABLE IF EXISTS `securityPrice`;

CREATE TABLE `securityPrice` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `securityId` int(11) DEFAULT NULL,
  `price` decimal(10,2) DEFAULT NULL,
  `priceType` varchar(50) DEFAULT NULL,
  `priceDateTime` datetime DEFAULT NULL,
  `isDeleted` tinyint(1) DEFAULT NULL,
  `createddate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editeddate` datetime DEFAULT NULL,
  `updatedBy` varchar(255) DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `securityId` (`securityId`),
  KEY `Fk_securityPrice_user_createdBy_idx` (`createdBy`),
  KEY `Fk_securityPrice_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `FK_securityPrice_security_id` FOREIGN KEY (`securityId`) REFERENCES `security` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securityPrice_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securityPrice_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=350038 DEFAULT CHARSET=latin1;

/*Table structure for table `securitySet` */

DROP TABLE IF EXISTS `securitySet`;

CREATE TABLE `securitySet` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `description` varchar(1000) DEFAULT NULL,
  `isDynamic` tinyint(1) DEFAULT '0',
  `toleranceType` tinyint(1) DEFAULT '0',
  `toleranceTypeValue` decimal(10,2) DEFAULT '0.00',
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(11) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(11) NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `Fk_securitySet_user_createdBy_idx` (`createdBy`),
  KEY `Fk_securitySet_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_securitySet_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securitySet_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=latin1;

/*Table structure for table `securitySetDetail` */

DROP TABLE IF EXISTS `securitySetDetail`;

CREATE TABLE `securitySetDetail` (
  `securitySetId` int(11) NOT NULL,
  `securityId` int(11) NOT NULL,
  `rank` int(11) DEFAULT NULL,
  `targetPercent` decimal(10,2) DEFAULT NULL,
  `lowerModelTolerancePercent` decimal(10,2) DEFAULT NULL,
  `upperModelTolerancePercent` decimal(10,2) DEFAULT NULL,
  `minTradeAmount` decimal(10,2) DEFAULT NULL,
  `minInitialBuyDollar` decimal(10,2) DEFAULT NULL,
  `buyPriority` tinyint(1) DEFAULT NULL,
  `sellPriority` tinyint(1) DEFAULT NULL,
  `taxableSecurityId` int(11) DEFAULT NULL,
  `taxDeferredSecurityId` int(11) DEFAULT NULL,
  `taxExemptSecurityId` int(11) DEFAULT NULL,
  `lowerModelToleranceAmount` decimal(10,2) DEFAULT NULL,
  `upperModelToleranceAmount` decimal(10,2) DEFAULT NULL,
  `lowerTradeTolerancePercent` decimal(10,2) DEFAULT NULL,
  `upperTradeTolerancePercent` decimal(10,2) DEFAULT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(11) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(11) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  PRIMARY KEY (`securitySetId`,`securityId`),
  KEY `FK_securitySetDetail_security_idx` (`securityId`),
  KEY `Fk_securitySetDetail_user_createdBy_idx` (`createdBy`),
  KEY `Fk_securitySetDetail_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `FK_securitySetDetail_security_id` FOREIGN KEY (`securityId`) REFERENCES `security` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securitySetDetail_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securitySetDetail_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `securitySettingPreferenceOptions` */

DROP TABLE IF EXISTS `securitySettingPreferenceOptions`;

CREATE TABLE `securitySettingPreferenceOptions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `securitySettingPreferenceId` int(11) NOT NULL,
  `value` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_sspo_securitySettingPreferences_id` (`securitySettingPreferenceId`),
  CONSTRAINT `FK_sspo_securitySettingPreferences_id` FOREIGN KEY (`securitySettingPreferenceId`) REFERENCES `securitySettingPreferences` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=latin1;

/*Table structure for table `securitySettingPreferenceValue` */

DROP TABLE IF EXISTS `securitySettingPreferenceValue`;

CREATE TABLE `securitySettingPreferenceValue` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `preferenceValueId` int(11) NOT NULL,
  `securityId` int(11) NOT NULL,
  `custodianSecuritySymbolId` int(11) DEFAULT NULL,
  `securitySettingPreferenceId` int(11) NOT NULL,
  `securitySettingPreferenceOptionId` int(11) DEFAULT NULL,
  `value` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_sspv_preferenceValue_id` (`preferenceValueId`),
  KEY `FK_sspv_securitySettingPreferences_id` (`securitySettingPreferenceId`),
  KEY `FK_sspv_securitySettingPreferenceOptions_id` (`securitySettingPreferenceOptionId`),
  KEY `FK_sspv_security_id` (`securityId`)
) ENGINE=InnoDB AUTO_INCREMENT=212 DEFAULT CHARSET=latin1;

/*Table structure for table `securitySettingPreferences` */

DROP TABLE IF EXISTS `securitySettingPreferences`;

CREATE TABLE `securitySettingPreferences` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group` varchar(100) DEFAULT NULL,
  `displayName` varchar(100) DEFAULT NULL,
  `name` varchar(100) DEFAULT NULL,
  `allowedRecordTypes` int(11) DEFAULT NULL,
  `dataType` varchar(40) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=latin1;

/*Table structure for table `securityStatus` */

DROP TABLE IF EXISTS `securityStatus`;

CREATE TABLE `securityStatus` (
  `id` int(11) NOT NULL,
  `status` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `securityTLHInSecuritySet` */

DROP TABLE IF EXISTS `securityTLHInSecuritySet`;

CREATE TABLE `securityTLHInSecuritySet` (
  `securitySetId` int(11) NOT NULL,
  `securityId` int(11) NOT NULL,
  `tlhSecurityId` int(11) NOT NULL,
  `priority` int(11) DEFAULT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(11) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(11) DEFAULT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  PRIMARY KEY (`securitySetId`,`securityId`,`tlhSecurityId`),
  KEY `FK_securityTLH_security_idx` (`securityId`),
  KEY `Fk_securityTLHInSecuritySet_user_createdBy_idx` (`createdBy`),
  KEY `Fk_securityTLHInSecuritySet_user_editedBy_idx` (`editedBy`),
  KEY `FK_securityTLHInSecuritySet_security_id_tlh_idx` (`tlhSecurityId`),
  CONSTRAINT `FK_securityTLHInSecuritySet_security_id_tlh` FOREIGN KEY (`tlhSecurityId`) REFERENCES `security` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_securityTLHInSecuritySet_security_id` FOREIGN KEY (`securityId`) REFERENCES `security` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securityTLHInSecuritySet_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securityTLHInSecuritySet_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `securityType` */

DROP TABLE IF EXISTS `securityType`;

CREATE TABLE `securityType` (
  `id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `isDeleted` tinyint(1) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Fk_securityType_user_createdBy_idx` (`createdBy`),
  KEY `Fk_securityType_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_securityType_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_securityType_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `taxLot_2016_06_10` */

DROP TABLE IF EXISTS `taxLot_2016_06_10`;

CREATE TABLE `taxLot_2016_06_10` (
  `id` int(10) NOT NULL,
  `accountId` varchar(255) DEFAULT NULL,
  `securityId` int(10) NOT NULL,
  `orionFirmId` int(10) DEFAULT NULL,
  `externalId` int(10) DEFAULT NULL,
  `dateAcquired` datetime DEFAULT NULL,
  `quantity` float(22,7) DEFAULT NULL,
  `costAmount` float(22,2) DEFAULT NULL,
  `costPerShare` float(22,7) DEFAULT NULL,
  `price` float(22,7) DEFAULT NULL,
  `marketValue` float(22,7) DEFAULT NULL,
  `priceDate` datetime DEFAULT NULL,
  `isDeleted` bit(1) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `taxlot` */

DROP TABLE IF EXISTS `taxlot`;

CREATE TABLE `taxlot` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `accountId` int(11) DEFAULT NULL,
  `securityId` int(11) DEFAULT NULL,
  `orionFirmId` int(11) DEFAULT NULL,
  `externalId` int(11) DEFAULT NULL,
  `dateAcquired` datetime DEFAULT NULL,
  `quantity` decimal(22,7) DEFAULT NULL,
  `costAmount` decimal(22,2) DEFAULT NULL,
  `costPerShare` decimal(22,7) DEFAULT NULL,
  `price` decimal(22,7) DEFAULT NULL,
  `marketValue` decimal(22,7) DEFAULT NULL,
  `priceDate` datetime DEFAULT NULL,
  `isDeleted` tinyint(1) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_taxLot_account_accountId` (`accountId`),
  KEY `FK_taxLot_security_securityId` (`securityId`),
  KEY `Fk_taxlot_user_createdBy_idx` (`createdBy`),
  KEY `Fk_taxlot_user_editedBy_idx` (`editedBy`)
) ENGINE=InnoDB AUTO_INCREMENT=95 DEFAULT CHARSET=latin1;

/*Table structure for table `team` */

DROP TABLE IF EXISTS `team`;

CREATE TABLE `team` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `orionFirmId` int(11) DEFAULT NULL,
  `externalId` int(11) DEFAULT NULL,
  `portfolioAccess` int(11) NOT NULL,
  `modelAccess` int(11) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  `status` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `Fk_team_user_createdBy_idx` (`createdBy`),
  KEY `Fk_team_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_team_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_team_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=504 DEFAULT CHARSET=utf8;

/*Table structure for table `teamAdvisorAccess` */

DROP TABLE IF EXISTS `teamAdvisorAccess`;

CREATE TABLE `teamAdvisorAccess` (
  `teamId` int(11) NOT NULL,
  `advisorId` int(11) NOT NULL,
  `source` varchar(255) DEFAULT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`teamId`,`advisorId`),
  UNIQUE KEY `idx_name` (`teamId`,`advisorId`),
  KEY `FK_teamAdvisorAccess_team_teamId` (`teamId`),
  KEY `fk_teamAdvisorAccess_1_idx` (`advisorId`),
  KEY `Fk_teamAdvisorAccess_user_createdBy_idx` (`createdBy`),
  KEY `Fk_teamAdvisorAccess_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `FK_teamAdvisorAccess_advisor_id` FOREIGN KEY (`advisorId`) REFERENCES `advisor` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_teamAdvisorAccess_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_teamAdvisorAccess_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `teamModelAccess` */

DROP TABLE IF EXISTS `teamModelAccess`;

CREATE TABLE `teamModelAccess` (
  `teamId` int(11) NOT NULL,
  `modelId` int(11) NOT NULL,
  `access` tinyint(1) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`teamId`,`modelId`),
  UNIQUE KEY `idx_name` (`teamId`,`modelId`),
  KEY `TeamId` (`teamId`),
  KEY `ModelId` (`modelId`),
  KEY `Fk_teamModelAccess_user_createdBy_idx` (`createdBy`),
  KEY `Fk_teamModelAccess_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_teamModelAccess_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_teamModelAccess_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `teamPortfolioAccess` */

DROP TABLE IF EXISTS `teamPortfolioAccess`;

CREATE TABLE `teamPortfolioAccess` (
  `teamId` int(11) NOT NULL,
  `portfolioId` int(11) NOT NULL,
  `access` tinyint(1) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  `isPrimary` tinyint(1) DEFAULT NULL,
  `source` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`teamId`,`portfolioId`),
  UNIQUE KEY `idx_name` (`teamId`,`portfolioId`),
  KEY `TeamId` (`teamId`),
  KEY `FK_teamPortfolioAccess_portfolio_id_idx` (`portfolioId`),
  KEY `Fk_teamPortfolioAccess_user_createdBy_idx` (`createdBy`),
  KEY `Fk_teamPortfolioAccess_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_teamPortfolioAccess_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_teamPortfolioAccess_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `temp` */

DROP TABLE IF EXISTS `temp`;

CREATE TABLE `temp` (
  `PortfolioId` int(11) DEFAULT NULL,
  `ModelId` int(11) DEFAULT NULL,
  `AccountId` int(11) DEFAULT NULL,
  `TeamId` int(11) DEFAULT NULL,
  `securityId` int(11) DEFAULT NULL,
  `securitySettingPreferenceId` int(11) DEFAULT NULL,
  `securitySettingPreferenceOptionId` int(11) DEFAULT NULL,
  `value` varchar(150) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `temporarySecurityPreference` */

DROP TABLE IF EXISTS `temporarySecurityPreference`;

CREATE TABLE `temporarySecurityPreference` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `securityId` int(11) DEFAULT NULL,
  `securityName` varchar(100) DEFAULT NULL,
  `custodianId` int(11) DEFAULT NULL,
  `sellTradeMinAmtBySecurity` decimal(10,0) DEFAULT NULL,
  `buyTradeMinAmtBySecurity` decimal(10,0) DEFAULT NULL,
  `initialPurchaseAmountIn$` decimal(10,0) DEFAULT NULL,
  `sellUserPriority` int(11) DEFAULT NULL,
  `buyUserPriority` int(11) DEFAULT NULL,
  `sellTransactionFee` decimal(10,0) DEFAULT NULL,
  `isExcludeHolding` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=latin1;

/*Table structure for table `test` */

DROP TABLE IF EXISTS `test`;

CREATE TABLE `test` (
  `orionConnectExternalId` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `tradeExecutionType` */

DROP TABLE IF EXISTS `tradeExecutionType`;

CREATE TABLE `tradeExecutionType` (
  `id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `isDeleted` tinyint(1) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Fk_tradeExecutionType_user_createdBy_idx` (`createdBy`),
  KEY `Fk_tradeExecutionType_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_tradeExecutionType_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_tradeExecutionType_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `trades` */

DROP TABLE IF EXISTS `trades`;

CREATE TABLE `trades` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `portfolioId` int(11) DEFAULT NULL,
  `securityId` int(11) DEFAULT NULL,
  `accountId` int(11) DEFAULT NULL,
  `tradeAmount` decimal(10,2) DEFAULT NULL,
  `action` varchar(255) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `tradeCode` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `id` (`id`),
  KEY `FK_trades_portfolio_id` (`portfolioId`),
  KEY `FK_trades_security_id` (`securityId`),
  KEY `FK_trades_account_id` (`accountId`),
  CONSTRAINT `FK_trades_account_id` FOREIGN KEY (`accountId`) REFERENCES `account` (`id`),
  CONSTRAINT `FK_trades_portfolio_id` FOREIGN KEY (`portfolioId`) REFERENCES `portfolio` (`id`),
  CONSTRAINT `FK_trades_security_id` FOREIGN KEY (`securityId`) REFERENCES `security` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `transaction` */

DROP TABLE IF EXISTS `transaction`;

CREATE TABLE `transaction` (
  `accountId` int(11) DEFAULT NULL,
  `securityId` int(11) DEFAULT NULL,
  `orionFirmId` int(11) DEFAULT NULL,
  `externalId` int(11) DEFAULT NULL,
  `tradeDate` datetime DEFAULT NULL,
  `quantity` decimal(22,7) DEFAULT NULL,
  `amount` decimal(22,7) DEFAULT NULL,
  `type` varchar(100) DEFAULT NULL,
  `tradeCost` decimal(22,2) DEFAULT NULL,
  `action` varchar(255) DEFAULT NULL,
  `isDeleted` tinyint(1) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  KEY `FK_transaction_account_accountId` (`accountId`),
  KEY `FK_transaction_security_securityId` (`securityId`),
  KEY `Fk_transaction_user_createdBy_idx` (`createdBy`),
  KEY `Fk_transaction_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `FK_transaction_security_id` FOREIGN KEY (`securityId`) REFERENCES `security` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_transaction_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_transaction_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `transaction_2016_06_10` */

DROP TABLE IF EXISTS `transaction_2016_06_10`;

CREATE TABLE `transaction_2016_06_10` (
  `id` int(10) NOT NULL,
  `accountId` varchar(255) DEFAULT NULL,
  `securityId` int(10) DEFAULT NULL,
  `orionFirmId` int(10) DEFAULT NULL,
  `externalId` int(10) DEFAULT NULL,
  `tradeDate` datetime DEFAULT NULL,
  `quantity` float(22,7) DEFAULT NULL,
  `amount` float(22,7) DEFAULT NULL,
  `type` varchar(100) DEFAULT NULL,
  `tradeCost` float(22,2) DEFAULT NULL,
  `action` varchar(255) DEFAULT NULL,
  `isDeleted` bit(1) DEFAULT NULL,
  `createdDate` datetime DEFAULT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime DEFAULT NULL,
  `editedBy` int(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `orionConnectExternalId` int(11) DEFAULT NULL,
  `firstName` varchar(100) NOT NULL,
  `lastName` varchar(100) NOT NULL,
  `roleId` int(11) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) DEFAULT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL,
  `status` int(11) NOT NULL,
  `tags` varchar(255) DEFAULT NULL,
  `startDate` date DEFAULT NULL,
  `expireDate` date DEFAULT '2050-12-31',
  `userLoginId` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `IDX_roleId` (`roleId`),
  KEY `FK_user_user_createdBy` (`createdBy`),
  KEY `FK_user_user_editedBy` (`editedBy`),
  KEY `Fk_user_user_createdBy_idx` (`createdBy`),
  CONSTRAINT `FK_user_role` FOREIGN KEY (`roleId`) REFERENCES `role` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=801 DEFAULT CHARSET=utf8;

/*Table structure for table `userGridView` */

DROP TABLE IF EXISTS `userGridView`;

CREATE TABLE `userGridView` (
  `id` int(11) NOT NULL,
  `viewName` varchar(45) NOT NULL,
  `viewTypeId` int(11) NOT NULL,
  `isDefault` bit(1) NOT NULL,
  `isPublic` bit(1) NOT NULL,
  `filter` varchar(8000) DEFAULT NULL,
  `gridColumnDefs` varchar(8000) NOT NULL,
  `isDeleted` bit(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(11) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Fk_userGridView_user_createdBy_idx` (`createdBy`),
  KEY `Fk_userGridView_user_editedBy_idx` (`editedBy`),
  KEY `Fk_userGridView_userGridViewType_id` (`viewTypeId`),
  CONSTRAINT `Fk_userGridView_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_userGridView_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_userGridView_userGridViewType_id` FOREIGN KEY (`viewTypeId`) REFERENCES `userGridViewType` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `userGridViewDetails` */

DROP TABLE IF EXISTS `userGridViewDetails`;

CREATE TABLE `userGridViewDetails` (
  `userViewId` int(11) NOT NULL,
  `guiColumnName` varchar(1000) DEFAULT NULL,
  `dbObjectName` varchar(500) DEFAULT NULL,
  `dbObjectTypeId` tinyint(4) DEFAULT NULL,
  `dbColumnName` varchar(500) DEFAULT NULL,
  `inSelectClause` bit(1) DEFAULT NULL,
  PRIMARY KEY (`userViewId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `userGridViewType` */

DROP TABLE IF EXISTS `userGridViewType`;

CREATE TABLE `userGridViewType` (
  `id` int(11) NOT NULL,
  `typeName` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Table structure for table `userTeam` */

DROP TABLE IF EXISTS `userTeam`;

CREATE TABLE `userTeam` (
  `userId` int(11) NOT NULL,
  `teamId` int(11) NOT NULL,
  `isDeleted` tinyint(1) NOT NULL,
  `createdDate` datetime NOT NULL,
  `createdBy` int(10) NOT NULL,
  `editedDate` datetime NOT NULL,
  `editedBy` int(10) NOT NULL,
  `isPrimary` bit(1) DEFAULT NULL,
  PRIMARY KEY (`userId`,`teamId`),
  UNIQUE KEY `idx_name` (`userId`,`teamId`),
  KEY `userId` (`userId`),
  KEY `teamId` (`teamId`),
  KEY `Fk_userTeam_user_createdBy_idx` (`createdBy`),
  KEY `Fk_userTeam_user_editedBy_idx` (`editedBy`),
  CONSTRAINT `Fk_userTeam_user_editedBy` FOREIGN KEY (`editedBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Fk_userTeam_user_createdBy` FOREIGN KEY (`createdBy`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/* Trigger structure for table `custodian` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `trgBU_checkTradeExecutionTypeId` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'auroraadmin'@'%' */ /*!50003 TRIGGER `trgBU_checkTradeExecutionTypeId` BEFORE UPDATE ON `custodian` FOR EACH ROW begin
    if new.tradeExecutionTypeId NOT IN (SELECT id FROM tradeExecutionType) AND new.tradeExecutionTypeId <> -1 then
    SIGNAL SQLSTATE '45000';
    end if;
    end */$$


DELIMITER ;

/* Function  structure for function  `getInheritedValue` */

/*!50003 DROP FUNCTION IF EXISTS `getInheritedValue` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` FUNCTION `getInheritedValue`(varsecurityId INT , varsecuritySettingPreferenceId INT , varrelatedTypeId INT , varpreferenceId INT , varcustodianSecuritySymbolId VARCHAR(50)) RETURNS varchar(50) CHARSET latin1
BEGIN
DECLARE inheritedValue VARCHAR(50) ;
SELECT IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varrelatedTypeId AND preferenceId = varpreferenceId) = 1 ,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varrelatedTypeId AND preferenceId = varpreferenceId )  AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) , NULL) INTO inheritedValue ;
RETURN inheritedValue;
END */$$
DELIMITER ;

/* Function  structure for function  `getInheritedValueAccount` */

/*!50003 DROP FUNCTION IF EXISTS `getInheritedValueAccount` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` FUNCTION `getInheritedValueAccount`(varsecurityId INT , varsecuritySettingPreferenceId INT , varPortfolioId INT,varCustodianId INT,varModelId INT , varTeamId INT, varFirmId INT,varpreferenceId INT , varcustodianSecuritySymbolId VARCHAR(50)) RETURNS varchar(50) CHARSET latin1
BEGIN
DECLARE inheritedValue VARCHAR(50) ;
SET varPortfolioId = IF(varPortfolioId = -1,NULL,varPortfolioId);
SET varCustodianId = IF(varCustodianId = -1,NULL,varCustodianId);
SET varModelId = IF(varModelId = -1,NULL,varModelId);
SET varTeamId = IF(varTeamId = -1,NULL,varTeamId);
SELECT IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 16 AND relatedTypeId = varPortfolioId AND preferenceId = varpreferenceId) = 1 ,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 16 AND relatedTypeId = varPortfolioId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 16 AND relatedTypeId = varPortfolioId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
 IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 8 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId) = 1 ,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 8 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 8 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF(EXISTS( SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)),IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
))),
IF(EXISTS( SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)),IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)))),IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 8 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId) = 1 ,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 8 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 8 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF(EXISTS( SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)),IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
))),
IF(EXISTS( SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)),IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
))))
INTO inheritedValue;
 
 RETURN inheritedValue;
END */$$
DELIMITER ;

/* Function  structure for function  `getInheritedValueAccountBackup` */

/*!50003 DROP FUNCTION IF EXISTS `getInheritedValueAccountBackup` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` FUNCTION `getInheritedValueAccountBackup`(varsecurityId INT , varsecuritySettingPreferenceId INT , varPortfolioId INT,varCustodianId INT,varModelId INT , varTeamId INT, varFirmId INT,varpreferenceId INT , varcustodianSecuritySymbolId VARCHAR(50)) RETURNS varchar(50) CHARSET latin1
BEGIN
DECLARE inheritedValue VARCHAR(50) ;
SELECT IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 8 AND relatedTypeId = varPortfolioId AND preferenceId = varpreferenceId) = 1 ,
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 8 AND relatedTypeId = varPortfolioId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 8 AND relatedTypeId = varPortfolioId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
 IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId) = 1 ,
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF(EXISTS( SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
))),
IF(EXISTS( SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)))),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId) = 1 ,
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF(EXISTS( SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
))),
IF(EXISTS( SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
))))
INTO inheritedValue;
 
 RETURN inheritedValue;
END */$$
DELIMITER ;

/* Function  structure for function  `getInheritedValueAccountBackup8thSep` */

/*!50003 DROP FUNCTION IF EXISTS `getInheritedValueAccountBackup8thSep` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` FUNCTION `getInheritedValueAccountBackup8thSep`(varsecurityId INT , varsecuritySettingPreferenceId INT , varPortfolioId INT,varCustodianId INT,varModelId INT , varTeamId INT, varFirmId INT,varpreferenceId INT , varcustodianSecuritySymbolId VARCHAR(50)) RETURNS varchar(50) CHARSET latin1
BEGIN
DECLARE inheritedValue VARCHAR(50) ;
SELECT IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 8 AND relatedTypeId = varPortfolioId AND preferenceId = varpreferenceId) = 1 ,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 8 AND relatedTypeId = varPortfolioId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 8 AND relatedTypeId = varPortfolioId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
 IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId) = 1 ,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF(EXISTS( SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
))),
IF(EXISTS( SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)))),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId) = 1 ,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF(EXISTS( SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
))),
IF(EXISTS( SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,
( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
)),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 2 AND relatedTypeId = varCustodianId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
),
IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, 
IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)),NULL),NULL)
))))
INTO inheritedValue;
 
 RETURN inheritedValue;
END */$$
DELIMITER ;

/* Function  structure for function  `getInheritedValueBackup` */

/*!50003 DROP FUNCTION IF EXISTS `getInheritedValueBackup` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` FUNCTION `getInheritedValueBackup`(varsecurityId INT , varsecuritySettingPreferenceId INT , varrelatedTypeId INT , varpreferenceId INT , varcustodianSecuritySymbolId VARCHAR(50)) RETURNS varchar(50) CHARSET latin1
BEGIN
DECLARE inheritedValue VARCHAR(50) ;
SELECT IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varrelatedTypeId AND preferenceId = varpreferenceId) = 1 ,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varrelatedTypeId AND preferenceId = varpreferenceId )  AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) , NULL) INTO inheritedValue ;
RETURN inheritedValue;
END */$$
DELIMITER ;

/* Function  structure for function  `getInheritedValuePortFolio` */

/*!50003 DROP FUNCTION IF EXISTS `getInheritedValuePortFolio` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` FUNCTION `getInheritedValuePortFolio`(varsecurityId INT , varsecuritySettingPreferenceId INT , varModelId INT , varTeamId INT, varFirmId INT,varpreferenceId INT , varcustodianSecuritySymbolId VARCHAR(50)) RETURNS varchar(50) CHARSET latin1
BEGIN
DECLARE inheritedValue VARCHAR(50) ;
SET varModelId = IF(varModelId = -1,NULL,varModelId);
SET varTeamId = IF(varTeamId = -1,NULL,varTeamId);
SELECT IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 8 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId) = 1 ,IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 8 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 8 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),IF(EXISTS( SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),NULL),NULL)),IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),NULL),NULL))),IF(EXISTS( SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),NULL),NULL)),IF (EXISTS(SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE isDeleted = 0  AND  relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),NULL),NULL)))
 
 INTO inheritedValue;
 
 RETURN inheritedValue;
END */$$
DELIMITER ;

/* Function  structure for function  `getInheritedValuePortFolioBackup` */

/*!50003 DROP FUNCTION IF EXISTS `getInheritedValuePortFolioBackup` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` FUNCTION `getInheritedValuePortFolioBackup`(varsecurityId INT , varsecuritySettingPreferenceId INT , varModelId INT , varTeamId INT, varFirmId INT,varpreferenceId INT , varcustodianSecuritySymbolId VARCHAR(50)) RETURNS varchar(50) CHARSET latin1
BEGIN
DECLARE inheritedValue VARCHAR(50) ;
set varModelId = if(varModelId = -1,null,varModelId);
SELECT IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId) = 1 ,if(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),if(EXISTS( SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,if(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, if(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),NULL),NULL)),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, if(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),NULL),NULL))),if(EXISTS( SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,if(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, if(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),NULL),NULL)),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, if(EXISTS( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspo.value  FROM securitySettingPreferenceValue sspv INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
when varcustodianSecuritySymbolId is NULL
then 
sspv.custodianSecuritySymbolId is NULL
else 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),NULL),NULL)))
 
 INTO inheritedValue;
 
 RETURN inheritedValue;
END */$$
DELIMITER ;

/* Function  structure for function  `getInheritedValuePortFolioBackup8thSep` */

/*!50003 DROP FUNCTION IF EXISTS `getInheritedValuePortFolioBackup8thSep` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` FUNCTION `getInheritedValuePortFolioBackup8thSep`(varsecurityId INT , varsecuritySettingPreferenceId INT , varModelId INT , varTeamId INT, varFirmId INT,varpreferenceId INT , varcustodianSecuritySymbolId VARCHAR(50)) RETURNS varchar(50) CHARSET latin1
BEGIN
DECLARE inheritedValue VARCHAR(50) ;
SET varModelId = IF(varModelId = -1,NULL,varModelId);
SELECT IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId) = 1 ,IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 16 AND relatedTypeId = varModelId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),IF(EXISTS( SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),NULL),NULL)),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),NULL),NULL))),IF(EXISTS( SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId) = 1,IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 4 AND relatedTypeId = varTeamId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),NULL),NULL)),IF (EXISTS(SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId) = 1, IF(EXISTS( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
) =1,( SELECT  sspv.value  FROM securitySettingPreferenceValue sspv /* INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */  WHERE sspv.preferenceValueId  = (SELECT id FROM preferenceValue WHERE relatedType = 1 AND relatedTypeId = varFirmId AND preferenceId = varpreferenceId )
AND sspv.securityId = varsecurityId AND sspv.securitySettingPreferenceId = varsecuritySettingPreferenceId AND 
(
CASE 
WHEN varcustodianSecuritySymbolId IS NULL
THEN 
sspv.custodianSecuritySymbolId IS NULL
ELSE 
sspv.custodianSecuritySymbolId = varcustodianSecuritySymbolId
END
)
),NULL),NULL)))
 
 INTO inheritedValue;
 
 RETURN inheritedValue;
END */$$
DELIMITER ;

/* Function  structure for function  `getSecuritySymbol` */

/*!50003 DROP FUNCTION IF EXISTS `getSecuritySymbol` */;
DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` FUNCTION `getSecuritySymbol`(Security_id INT) RETURNS varchar(50) CHARSET latin1
BEGIN
DECLARE SYMBOL_FOUND VARCHAR(50) ;
 SELECT symbol INTO SYMBOL_FOUND FROM security WHERE id = Security_id;
  RETURN SYMBOL_FOUND ;
END */$$
DELIMITER ;

/* Procedure structure for procedure `getAccountDetailsForPortfolio` */

/*!50003 DROP PROCEDURE IF EXISTS  `getAccountDetailsForPortfolio` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getAccountDetailsForPortfolio`(p_portfolio_id INT)
BEGIN
--  ##-- Author: Jatin Singla
--  ##-- Created On: 26 August,2016
--  ##-- CALL getAccountDetailsForPortfolio (2)
--  ##-- Use: To fetch Accounts details for Portfolio
--  ##-----------------##
  
--  ##-- Variable Declaration --##
--	##-- Sql Exception Handler	
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
    @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
    SET @sql_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
    SELECT
      @sql_error AS sql_error,
      'Failed' AS `level`,
      '0' AS `code`,
      'Failed to fetch Accounts details for Portfolio.' AS message;
  END;
-- ---------------------------------------------------------------------------------------------
-- *************** Fetch Account Details for Portfolio ID passed***************-- 
-- ---------------------------------------------------------------------------------------------
SELECT acc.id
	,acc.name
	,acc.accountNumber
	,act.name AS accountType
--	,pos.accountId
--	,pos.securityId
--	,pos.quantity
--	,sp.price
	,pa.hasPendings AS tradesPending
-- ---------------------------------------------------------
    ,'5000' AS  cashValue 
    ,'1000'    cashReserve
    ,'6000'     totalCash
	,'100' AS pendingValue	 
	,'Ok' AS status	 
	,'2016-08-30' createdOn
    ,'2016-08-30' editedOn
-- --------------------------------------------------------		   
	,ss.status
	,CASE WHEN ss.status = 'ACTIVE'
		THEN SUM(pos.quantity * sp.price)
		ELSE 0
	END AS ManagedValue
	,CASE WHEN ss.status = 'EXCLUDED'
		THEN SUM(pos.quantity * sp.price)
		ELSE 0
	END AS ExcludedValue
	,SUM(pos.quantity * sp.price) AS TotalValue
	,acc.createdBy
	,acc.editedBy
FROM /* userTeam AS ut 
	INNER JOIN teamPortfolioAccess AS tpa
		ON ut.teamId = tpa.teamId
	INNER JOIN */ 
	portfolio
	--	ON portfolio.id = tpa.portfolioId
	INNER JOIN account AS acc
		ON portfolio.id = acc.portfolioId
		AND acc.isDeleted = 0 
		AND acc.isDisabled = 0
	LEFT JOIN accountType AS act
		ON act.id = acc.accountTypeId
		AND act.isDeleted = 0 
	LEFT JOIN `position` AS pos
		ON pos.accountId = acc.`id`
		AND pos.isDeleted = 0 
	LEFT JOIN `security` AS sec
		ON sec.`id` = pos.securityId
		AND sec.isDeleted = 0 
	LEFT JOIN securityPrice AS sp
		ON sp.securityId = sec.id
		AND sp.isDeleted = 0 
	LEFT JOIN `securityStatus` AS ss
		ON ss.id = sec.statusId
	LEFT JOIN portfolioAnalytics AS pa
		ON pa.portfolioId = portfolio.id
WHERE  
	acc.portfolioId = p_portfolio_id
--	AND ut.isDeleted = 0
--	AND tpa.isDeleted = 0
	AND portfolio.isDisabled = 0
	AND portfolio.isDeleted = 0
GROUP BY acc.id;
END */$$
DELIMITER ;

/* Procedure structure for procedure `getAccountsSecuritiesTaxLotsForPortfolio` */

/*!50003 DROP PROCEDURE IF EXISTS  `getAccountsSecuritiesTaxLotsForPortfolio` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getAccountsSecuritiesTaxLotsForPortfolio`(p_portfolio_id INT)
BEGIN
--  ##-- Author: Jatin Singla
--  ##-- Created On: 23 August,2016
--  ##-- CALL getAccountsSecuritiesTaxLotsForPortfolio (2)
--  ##-- Use: To fetch Accounts, Securities & Tax Lots for a Portfolio
--  ##-----------------##
  
--  ##-- Variable Declaration --##
--	##-- Sql Exception Handler	
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
    @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
    SET @sql_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
    SELECT
      @sql_error AS sql_error,
      'Failed' AS `level`,
      '0' AS `code`,
      'Failed to fetch Accounts, Securities & Tax Lots for a Portfolio.' AS message;
  END;
-- ----------------------------------------------------------------------------
-- ******************** Fetch Portfolio Details ********************-- 
-- ----------------------------------------------------------------------------
SELECT portfolio.id
	,portfolio.`name`
	,portfolio.modelId
	,portfolio.isSleevePortfolio
	,pa.cashPercent
	,pa.cashTargetPercent
	,pa.cashReserve
	,pa.cashValue
	,SUM(pos.quantity * sp.price) AS portfolioMarketValue
FROM `portfolio`
	LEFT JOIN `portfolioAnalytics` AS pa
		ON portfolio.id = pa.portfolioId
	LEFT JOIN account AS acc
		ON portfolio.id = acc.portfolioId
			AND acc.isDeleted = 0
			AND acc.isDisabled = 0
	LEFT JOIN`position` AS pos
		ON pos.accountId = acc.`id`
			AND pos.isDeleted = 0
	LEFT JOIN `security` AS sec
		ON sec.`id` = pos.securityId
			AND sec.isDeleted = 0
	LEFT JOIN securityPrice AS sp
		ON sec.id = sp.securityId
		AND sp.isDeleted = 0 
WHERE portfolio.id = p_portfolio_id
	AND portfolio.isDisabled = 0
	AND portfolio.isDeleted = 0
GROUP BY portfolio.id;
-- -----------------------------------------------------------------------------------
-- ******************** Fetch Account Details for a Portfolio ********************-- 
-- ------------------------------------------------------------------------------------
 
SELECT acc.id AS accountId
	,acc.accountNumber
	,acc.portfolioId
	,acc.ytdRealizedStgl
	,acc.ytdRealizedLtgl
	,acc.custodianId
	,acc.custodialAccountNumber
	,acc.advisorId
	,acc.modelId
--	,acty.id AS accountTypeId
--	,acty.name AS accountTypeName
--	,actt.name AS taxableType
	,(SELECT actt.name FROM accountTaxableType AS actt	WHERE actt.id = acty.taxableTypeID) AS taxableType
	,CASE 
		WHEN sec.custodialCash = 1 THEN SUM(pos.quantity * sp.price)
		ELSE 0
	END AS accountMarketValue
FROM account AS acc
	LEFT JOIN accountType AS acty
		ON acc.accountTypeId = acty.id
			AND acty.isDeleted = 0
/*
	LEFT JOIN accountTaxableType actt
		ON actt.id = acty.taxableTypeID
*/
	LEFT JOIN`position` AS pos
		ON pos.accountId = acc.`id`
			AND pos.isDeleted = 0
	LEFT JOIN `security` AS sec
		ON sec.`id` = pos.securityId
			AND sec.isDeleted = 0
/*	
	LEFT JOIN securityType AS st
		ON sec.securityTypeId = st.id
			AND st.isDeleted = 0
*/
	LEFT JOIN securityPrice AS sp
		ON sec.id = sp.securityId
		AND sp.isDeleted = 0 
WHERE  acc.portfolioId = p_portfolio_id
		AND acc.isDeleted = 0
		AND acc.isDisabled = 0
GROUP BY acc.`id`;
-- --------------------------------------------------------------------------------------
-- ********** Fetch Security Details for active Accounts of a Portfolio ************-- 
-- --------------------------------------------------------------------------------------
SELECT pos.accountId
	,acc.accountNumber
--	,acty.name AS accountTypeName
	,actt.name AS taxableType
	,pos.securityId
	,pos.price AS positionPrice
	,pos.priceDate
	,pos.marketValue
	,pos.quantity
	,pos.positionYtdRealizedStgl
	,pos.positionYtdRealizedLtgl
	,sec.symbol
	,sec.`name`
	,sec.custodialCash
	,sec.orionEclipseName
--	,sec.securityTypeId
--	,st.id
--	,st.name AS securityTypeName
	,sp.securityId
	,sp.price
	,sp.priceType
	,sp.priceDateTime
FROM account AS acc
	INNER JOIN accountType AS acty
		ON acc.accountTypeId = acty.id
			AND acty.isDeleted = 0
	INNER JOIN accountTaxableType actt
		ON actt.id = acty.taxableTypeID
	INNER JOIN `position` AS pos
		ON pos.accountId = acc.`id`
	INNER JOIN `security` AS sec
		ON sec.`id` = pos.securityId
/*	
	INNER JOIN securityType AS st
		ON sec.securityTypeId = st.id
*/	
	INNER JOIN securityPrice AS sp
		ON sp.securityId = sec.id
WHERE  acc.portfolioId = p_portfolio_id
	AND acc.isDeleted = 0
	AND sec.isDeleted = 0 
--	AND st.isDeleted = 0
	AND pos.isDeleted = 0
	AND sp.isDeleted = 0;
-- -------------------------------------------------------------------------------------
-- *********** Fetch Taxlot Details for active Accounts of a Portfolio ************-- 
-- -------------------------------------------------------------------------------------
SELECT 	tax.id
	,tax.accountId
	,acc.accountNumber
	,actt.name AS taxableType
	,tax.securityId
	,sec.symbol
	,tax.dateAcquired
	,tax.quantity
	,tax.costAmount
	,tax.costPerShare
	,tax.price AS taxlotPrice
	,tax.quantity * sp.price AS marketValue
	,tax.priceDate
FROM taxlot AS tax
	INNER JOIN account AS acc
		ON tax.accountId = acc.`id`
	INNER JOIN accountType AS acty
		ON acc.accountTypeId = acty.id
			AND acty.isDeleted = 0
	INNER JOIN accountTaxableType actt
		ON actt.id = acty.taxableTypeID
	INNER JOIN `security` AS sec
		ON sec.`id` = tax.securityId
	INNER JOIN securityPrice AS sp
		ON sp.securityId = sec.id
WHERE  acc.portfolioId = p_portfolio_id
	AND tax.isDeleted = 0
GROUP BY tax.id;
-- -------------------------------------------------------------------------------------
-- *********** Fetch Each Seurity Quantity Count for a Portfolio ************-- 
-- -------------------------------------------------------------------------------------
SELECT 
	pos.securityId
	,sec.name AS securityName
	,SUM(pos.quantity ) AS securityQuantityCount
	,sp.price
	,(SUM(pos.quantity ) * sp.price) AS totalMarketValue
FROM `portfolio`
	INNER JOIN account AS acc
		ON portfolio.id = acc.portfolioId
	INNER JOIN`position` AS pos
		ON pos.accountId = acc.`id`
	INNER JOIN `security` AS sec
		ON sec.id = pos.securityId
	INNER JOIN securityPrice AS sp
		ON sp.securityId = sec.id
WHERE portfolio.id = p_portfolio_id
	AND portfolio.isDisabled = 0
	AND portfolio.isDeleted = 0
	AND pos.isDeleted = 0
	AND acc.isDeleted = 0
	AND acc.isDisabled = 0
	AND sec.isDeleted = 0
GROUP BY pos.securityId
ORDER BY pos.securityId;
   SELECT
    'Success' AS `level`,
    '1' AS `code`,
    'Portfolio Accounts, Securities & Tax Lots details fetched successfully' AS message;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `getAllPortfolioCountByDateForUser` */

/*!50003 DROP PROCEDURE IF EXISTS  `getAllPortfolioCountByDateForUser` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getAllPortfolioCountByDateForUser`(p_user_id INT,p_date date)
BEGIN
--  ##-- Author: Jatin Singla
--  ##-- Created On: 30 August,2016
--  ##-- CALL getAllPortfolioCountByDateForUser (2)
--  ##-- Use: To fetch Portfolios count for login user
--  ##-----------------##
  
--  ##-- Variable Declaration --##
--	##-- Sql Exception Handler	
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
    @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
    SET @sql_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
    SELECT
      @sql_error AS sql_error,
      'Failed' AS `level`,
      '0' AS `code`,
      'Failed to fetch Portfolios count for login user.' AS message;
  END;
-- ----------------------------------------------------------------------------
-- ***************** Fetch Portfolio Details for Login User *****************-- 
-- ----------------------------------------------------------------------------
SELECT 	COUNT(portfolio.id) AS total
	,COUNT(CASE WHEN DATE_SUB(CURDATE(), INTERVAL 1 DAY) > portfolio.createdDate 
	THEN 1
	END) AS existing
	,COUNT(CASE WHEN DATE_SUB(CURDATE(), INTERVAL 1 DAY) <= DATE(portfolio.createdDate)
	THEN 1
	END) AS `new`
FROM userTeam AS ut 
	INNER JOIN teamPortfolioAccess AS tpa
		ON ut.teamId = tpa.teamId
	INNER JOIN portfolio
		ON portfolio.id = tpa.portfolioId
WHERE ut.userId = p_user_id 
	AND ut.isDeleted = 0
	AND tpa.isDeleted = 0
	AND portfolio.isDisabled = 0
	AND portfolio.isDeleted = 0
;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `getAllTypesPreferencesValuesForPortfolio` */

/*!50003 DROP PROCEDURE IF EXISTS  `getAllTypesPreferencesValuesForPortfolio` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getAllTypesPreferencesValuesForPortfolio`(varId INT)
BEGIN
--  ##-- Author: Jatin Singla
--  ##-- Created On: 08 September,2016
--  ##-- CALL getAllTypesPreferencesValuesForPortfolio (15)
--  ##-- Use: To fetch Preferences Values for a Portfolio
--  ##-----------------##
--  ##-- Variable Declaration --## 
DECLARE done INT DEFAULT FALSE;
DECLARE varPortfolioId, varModelId, varAccountId, varSecurityId, varTeamId, varCustodianId INT;
-- ######### Cursor to fetch data correspond to a portfolio ######### -----
DECLARE cur1 CURSOR FOR 
	SELECT DISTINCT portfolio.id
--			,portfolio.`name`
			,portfolio.modelId
			,acc.id AS accountId
			,sec.id AS securityId
			,tpa.teamId
			,acc.custodianId
	FROM `portfolio`
		INNER JOIN account AS acc
			ON portfolio.id = acc.portfolioId
				AND acc.isDeleted = 0
				AND acc.isDisabled = 0
		INNER JOIN`position` AS pos
			ON pos.accountId = acc.`id`
				AND pos.isDeleted = 0
		INNER JOIN `security` AS sec
			ON sec.`id` = pos.securityId
				AND sec.isDeleted = 0
		INNER JOIN teamPortfolioAccess AS tpa
			ON portfolio.id = tpa.portfolioId
				AND isPrimary = 1
	WHERE portfolio.id = varId
			/*		
				CASE 
					WHEN UPPER(varLevel) = 'SECURITY'
						THEN sec.id = varId
					WHEN UPPER(varLevel) = 'ACCOUNT'
						THEN acc.id = varId
					WHEN UPPER(varLevel) = 'PORTFOLIO'
						THEN portfolio.id = varId
					WHEN UPPER(varLevel) = 'MODEL'
						THEN portfolio.modelId = varId
					WHEN UPPER(varLevel) = 'TEAM'
						THEN tpa.teamId = varId
					END	
			*/
UNION
	SELECT DISTINCT portfolio.id
			,portfolio.modelId
			,acc.id AS accountId
			,ms.securityId
			,tpa.teamId
			,acc.custodianId
	FROM `portfolio`
		INNER JOIN account AS acc
			ON portfolio.id = acc.portfolioId
				AND acc.isDeleted = 0
				AND acc.isDisabled = 0
		INNER JOIN teamPortfolioAccess AS tpa
			ON portfolio.id = tpa.portfolioId
				AND isPrimary = 1
		INNER JOIN modelSecurities ms
			ON portfolio.id = ms.portfolioId
	WHERE portfolio.id = varId;
		
--	##-- Sql Exception Handler	
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
    @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
    SET @sql_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
    SELECT
      @sql_error AS sql_error,
      'Failed' AS `level`,
      '0' AS `code`,
      'Failed to fetch all types preferences values for a portfolio.' AS message;
  END;
 
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
  
SET SESSION group_concat_max_len = 8000;  
  DROP TABLE IF EXISTS preferenceList ;
  CREATE TEMPORARY TABLE preferenceList (portfolioId INT, modelId INT, teamId INT, accountId INT, custodianId INT-- ,row_number int
--	,id int
--	,relatedTypeId int
--	,relatedType int
--	,preferenceValueId int
	,preferenceName VARCHAR(100)
--	,PreferenceId INT
--	,securitySettingPreferenceOptionId INT
	,`value` VARCHAR(150));
	
	DROP TABLE IF EXISTS securityPreferenceList ;
	CREATE TEMPORARY TABLE securityPreferenceList (portfolioId INT, modelId INT, teamId INT, accountId INT, custodianId INT-- ,row_number int
--	,id int
--	,relatedTypeId int
--	,relatedType int
--	,preferenceValueId int
	,securityId INT
	,preferenceName VARCHAR(100)
--	,PreferenceId INT
--	,securitySettingPreferenceOptionId INT
	,`value` VARCHAR(150));
	
  OPEN cur1;
  read_loop1: LOOP
 FETCH cur1 INTO varPortfolioId, varModelId, varAccountId, varSecurityId, varTeamId, varCustodianId;
IF done THEN
      LEAVE read_loop1;
ELSE
 INSERT INTO securityPreferenceList  
	SELECT varPortfolioId, varModelId, varTeamId, varAccountId, varCustodianId -- ,row_number
	--	,id
	--	,relatedTypeId
	--	,relatedType
	--	,preferenceValueId
		,securityId
		,`Name`
--		,securitySettingPreferenceId
	--	,securitySettingPreferenceOptionId
		,CASE 
			WHEN `group` = 'Min' 
				THEN MAX(`value`)
			WHEN `group` = 'Max'
				THEN MIN(`value`) 
			ELSE IF(secPrefValue.row_number = 1,`value`,NULL)
		END AS `value`
	FROM 
		(
			SELECT @row_number := CASE 
						WHEN @SettingPreferenceId = pref.securitySettingPreferenceId
						THEN @row_number+1 
						ELSE 1 
					END AS row_number 
				,@SettingPreferenceId := pref.securitySettingPreferenceId AS SettingPreferenceId
				,pref.*
			 FROM 
				(SELECT
					sspv.id
					,pv.relatedTypeId
					,pv.relatedType
					,preferenceValueId
					,sspv.securityId
					,sspv.securitySettingPreferenceId
					,ssp.Name
	--				,sspv.securitySettingPreferenceOptionId
					,sspv.value
					,ssp.`group`
				FROM preference 
					INNER JOIN `preferenceValue` AS pv
						ON preference.id = pv.preferenceId
		/*			INNER JOIN preferenceLevel AS pl
						ON pl.bitValue = pv.relatedType	*/
					INNER JOIN `securitySettingPreferenceValue` AS sspv
						ON sspv.preferenceValueId = pv.id
					INNER JOIN securitySettingPreferences AS ssp
						ON ssp.id = sspv.securitySettingPreferenceId
				/*	INNER JOIN `securitySettingPreferenceOptions` AS sspo
						ON sspo.id = sspv.securitySettingPreferenceOptionId */
				WHERE preference.`name` = 'SecuritySetting'
					AND preference.isDeleted = 0 
					AND pv.isDeleted = 0
					AND sspv.securityId = varSecurityId
					AND CASE
						WHEN pv.relatedType = 1 THEN 1 = 1
						WHEN pv.relatedType = 2 THEN relatedTypeId = varCustodianId
						WHEN pv.relatedType = 4 THEN relatedTypeId = varTeamId
						WHEN pv.relatedType = 8 THEN relatedTypeId = varModelId
						WHEN pv.relatedType = 16 THEN relatedTypeId = varPortfolioId
						WHEN pv.relatedType = 32 THEN relatedTypeId = varAccountId
					END
				)pref 
				INNER JOIN
				(SELECT 
					@row_number:=0
					,@SettingPreferenceId:=0
				) rowGen
				ORDER BY pref.securitySettingPreferenceId, pref.relatedType DESC
	) secPrefValue 
	GROUP BY securitySettingPreferenceId,securityId;
	-- WHERE secPrefValue.row_number = 1
--	UNION
	INSERT INTO preferenceList 
	SELECT  varPortfolioId
		,varModelId
		,varTeamId
		,CASE WHEN allowedRecordTypes & 32 = 32 OR allowedRecordTypes & 2 = 2
			THEN varAccountId
			ELSE NULL
		END AS accountId
	--	,varCustodianId
		,CASE WHEN allowedRecordTypes & 32 = 32 OR allowedRecordTypes & 2 = 2
			THEN varCustodianId
			ELSE NULL
		END AS custodianId
		,`name`
	--	,preferenceId
	--	,NULL
	--	,pv.relatedTypeId
	--	,pv.relatedType
		,`value`	
	FROM	(SELECT
		@row_number := CASE 
				WHEN @preferenceId = pv.preferenceId
					THEN @row_number+1 
				ELSE 1 
			END AS row_number 
		,@preferenceId := pv.preferenceId AS dummyPreferenceId
		,preference.name
		,preference.allowedRecordTypes
		,pv.preferenceId
		,pv.relatedTypeId
		,pv.relatedType
		,pv.value		
	FROM preference 
		INNER JOIN `preferenceValue` AS pv
			ON preference.id = pv.preferenceId
		INNER JOIN (SELECT 
				@row_number:=0
				,@SettingPreferenceId:=0
			) rowGen
	WHERE preference.isDeleted = 0
		AND preference.`name` != 'SecuritySetting'
		AND pv.isDeleted = 0
		AND CASE
			WHEN pv.relatedType = 1 THEN 1 = 1
			WHEN pv.relatedType = 2 THEN relatedTypeId = varCustodianId
			WHEN pv.relatedType = 4 THEN relatedTypeId = varTeamId
			WHEN pv.relatedType = 8 THEN relatedTypeId = varModelId
			WHEN pv.relatedType = 16 THEN relatedTypeId = varPortfolioId
			WHEN pv.relatedType = 32 THEN relatedTypeId = varAccountId
		END
	ORDER BY pv.preferenceId, pv.relatedType DESC
	) prefValues WHERE prefValues.row_number = 1 ;
 END IF;
 END LOOP;
  SET done = FALSE; 
CLOSE cur1; 
  SET @preferenceSQL = NULL;
SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'MAX(case when pl.preferenceName = ''',
      `name`, ''' then pl.value  end) AS `' ,
    `name`,'`'
    )
  ) INTO @preferenceSQL
FROM
(
  SELECT `name` FROM preference
) inn;
 SET @SQL = CONCAT(' SELECT DISTINCT portfolioId
						,modelId
						,teamId
						,accountId
						,custodianId
						, ' ,@preferenceSQL, ' FROM preferenceList AS pl
	 GROUP BY pl.portfolioId,pl.modelId,pl.accountId,pl.teamId,pl.custodianId; ');
  #SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
  DROP TABLE IF EXISTS preferenceList ;
 SET @securityPreferenceSQL = NULL;
SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'MAX(case when spl.preferenceName = ''',
      `name`, ''' then spl.value  end) AS `' ,
    `name`,'`'
    )
  ) INTO @securityPreferenceSQL
FROM
(
  SELECT `name` FROM securitySettingPreferences
) inn;
  
   SET @SQL = CONCAT(' SELECT DISTINCT portfolioId
						,modelId
						,teamId
						,accountId
						,custodianId
						,securityId
						, ' ,@securityPreferenceSQL, ' FROM securityPreferenceList AS spl
	 GROUP BY spl.portfolioId,spl.modelId,spl.accountId,spl.teamId,spl.custodianId,spl.securityId; ');
  #SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
DROP TABLE IF EXISTS securityPreferenceList ;	
DROP TABLE IF EXISTS preferenceList ;
DROP TABLE IF EXISTS  modelSecurities;
 
SET SESSION group_concat_max_len = 1024;	
 END */$$
DELIMITER ;

/* Procedure structure for procedure `getDashboardSummary` */

/*!50003 DROP PROCEDURE IF EXISTS  `getDashboardSummary` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getDashboardSummary`(var_user_id INT)
BEGIN
CALL getDashboardSummaryUsers(var_user_id);
CALL getDashboardSummaryTeams(var_user_id);
CALL getDashboardSummaryRoles(var_user_id);
call getDashboardSummaryCustodians (var_user_id);
END */$$
DELIMITER ;

/* Procedure structure for procedure `getDashboardSummaryCustodians` */

/*!50003 DROP PROCEDURE IF EXISTS  `getDashboardSummaryCustodians` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getDashboardSummaryCustodians`(var_user_id INT)
BEGIN
##-- Author: Ashutosh Verma
##-- Created On: 3rd August,2016
##-- call getDashboardSummaryCustodians (1)
##----- SP to fetch Dashboard Summary for Custodians for a firm -----##
## -----  user_id will be passed as a parameter.
##-----Sql query to fetch Dashboard Summary for Custodians for a firm-----#
DECLARE var_roleType VARCHAR(20);
SELECT rt.roleType INTO var_roleType
FROM `user` ur
INNER JOIN `role` r ON ur.roleId = r.id
INNER JOIN roleType rt ON r.roleTypeId = rt.id
WHERE ur.id = var_user_id;
IF (var_roleType = 'FIRM ADMIN') THEN
SELECT totalCustodians,
       IFNULL(activeCustodians,0) as activeCustodians
FROM
  (SELECT COUNT(DISTINCT c.externalId) AS totalCustodians,
     (SELECT COUNT(DISTINCT c.externalId)  FROM `custodian` c INNER JOIN `account` a ON a.custodianId = c.externalId WHERE a.isDeleted =0 AND c.isDeleted = 0 ) AS activeCustodians
   FROM `custodian` c WHERE  c.isDeleted = 0  )a ;
ELSEIF (var_roleType = 'TEAM ADMIN') THEN
SELECT totalCustodians,
       IFNULL(activeCustodians,0) as activeCustodians
FROM
  (SELECT COUNT(1) AS totalCustodians,
     (SELECT COUNT(DISTINCT custodians)  FROM 
(SELECT DISTINCT c.externalId AS custodians FROM `userTeam` ut INNER JOIN team t ON ut.teamId = t.id  INNER JOIN `teamPortfolioAccess` tpa ON t.id = tpa.teamId  INNER JOIN  account a ON tpa.portfolioId = a.portfolioId INNER JOIN custodian c ON a.custodianId = c.externalId WHERE ut.userId =var_user_id AND   t.isDeleted =0 AND tpa.isDeleted =0  AND a.isDeleted =0 AND c.isDeleted =0
UNION 
SELECT DISTINCT c.externalId AS custodians FROM `userTeam` ut INNER JOIN team t ON ut.teamId = t.id  INNER JOIN `teamAdvisorAccess` taa ON t.id = taa.teamId  INNER JOIN  account a ON taa.advisorId = a.advisorId INNER JOIN custodian c ON a.custodianId = c.externalId WHERE ut.userId =var_user_id AND   t.isDeleted =0 AND taa.isDeleted =0  AND a.isDeleted =0 AND c.isDeleted =0
) t1 ) AS activeCustodians
   FROM custodian
   WHERE isDeleted = 0 ) a;
   
   ELSE
   select 0 as totalCustodians, 0 as 
       activeCustodians ;
END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `getDashboardSummaryRoles` */

/*!50003 DROP PROCEDURE IF EXISTS  `getDashboardSummaryRoles` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getDashboardSummaryRoles`(var_user_id INT)
BEGIN
##-- Author: Ashutosh Verma
##-- Created On: 3rd August,2016
##-- call getDashboardSummaryRoles (1)
##----- SP to fetch Dashboard Summary for Roles for a firm -----##
## -----  user_id will be passed as a parameter.
##-----Sql query to fetch Dashboard Summary for Roles for a firm-----#
DECLARE var_roleType VARCHAR(20);
SELECT rt.roleType INTO var_roleType FROM `user` ur INNER JOIN role r ON ur.roleId = r.id INNER JOIN roleType rt ON r.roleTypeId = rt.id WHERE ur.id = var_user_id;
IF (var_roleType = 'FIRM ADMIN')
THEN
SELECT  totalRoles ,(totalRoles - IFNULL(existingRoles,0)) AS newRoles , IFNULL(existingRoles,0) AS existingRoles  FROM 
(
SELECT COUNT(DISTINCT id )   AS totalRoles  ,
(SELECT COUNT(DISTINCT id )  FROM role r WHERE  r.createdDate < NOW() - INTERVAL 30 DAY AND r.isDeleted =0 ) AS  existingRoles  
FROM role WHERE isDeleted = 0
)a;
ELSEIF (var_roleType = 'TEAM ADMIN') 
THEN
SELECT  totalRoles ,(totalRoles - IFNULL(existingRoles,0)) AS newRoles , IFNULL(existingRoles,0) AS existingRoles    FROM 
(
SELECT COUNT(DISTINCT roleId )   AS totalRoles  ,
(SELECT COUNT(DISTINCT r.id )  FROM `user` ur INNER JOIN role r ON ur.roleId = r.id WHERE ur.id = var_user_id AND  r.createdDate < NOW() - INTERVAL 30 DAY AND r.isDeleted =0 ) AS  existingRoles 
FROM `user` WHERE userId = var_user_id AND  isDeleted = 0
)a;
ELSE
SELECT  0 AS totalRoles ,0 AS newRoles , 0 AS existingRoles ;
END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `getDashboardSummaryTeams` */

/*!50003 DROP PROCEDURE IF EXISTS  `getDashboardSummaryTeams` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getDashboardSummaryTeams`(var_user_id INT)
BEGIN
##-- Author: Ashutosh Verma
##-- Created On: 3rd August,2016
##-- call getDashboardSummaryTeams (1)
##----- SP to fetch Dashboard Summary for Teams for a firm -----##
## -----  user_id will be passed as a parameter.
##-----Sql query to fetch Dashboard Summary for Teams for a firm-----#
DECLARE var_roleType VARCHAR(20);
SELECT rt.roleType INTO var_roleType FROM `user` ur INNER JOIN role r ON ur.roleId = r.id INNER JOIN roleType rt ON r.roleTypeId = rt.id WHERE ur.id = var_user_id;
IF (var_roleType = 'FIRM ADMIN')
THEN
SELECT  totalTeams , IFNULL(existingTeams,0) AS existingTeams , ( totalTeams - IFNULL(existingTeams,0) ) AS newTeams   FROM
(
SELECT COUNT(DISTINCT id)   AS totalTeams , 
( SELECT COUNT(DISTINCT t.id) FROM  team t   WHERE  t.isDeleted = 0 AND t.createdDate < NOW() - INTERVAL 30 DAY AND t.status = 1
  ) AS existingTeams
FROM `team` WHERE isDeleted = 0
)a;
ELSEIF (var_roleType = 'TEAM ADMIN') THEN
SELECT  totalTeams , IFNULL(existingTeams,0) AS existingTeams , ( totalTeams - IFNULL(existingTeams,0) ) AS newTeams   FROM
(
SELECT COUNT(DISTINCT teamId)  AS totalTeams , 
( SELECT COUNT(DISTINCT t.id) FROM `userTeam` ut INNER JOIN team t ON ut.teamId = t.id  WHERE ut.userId = var_user_id AND t.isDeleted = 0 AND 
t.createdDate < NOW() - INTERVAL 30 DAY AND t.status = 1 
  ) AS existingTeams 
FROM `userTeam` WHERE userId = var_user_id AND  isDeleted = 0
)a;
ELSE 
SELECT  0 AS totalTeams , 0 AS existingTeams , 0 AS newTeams ;
END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `getDashboardSummaryUsers` */

/*!50003 DROP PROCEDURE IF EXISTS  `getDashboardSummaryUsers` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getDashboardSummaryUsers`(var_user_id INT)
BEGIN
##-- Author: Ashutosh Verma
##-- Created On: 3rd August,2016
##-- call getDashboardSummaryUsers (1)
##----- SP to fetch Dashboard Summary for Users for a firm -----##
## -----  user_id will be passed as a parameter.
##-----Sql query to fetch Dashboard Summary for Users for a firm-----#
DECLARE var_roleType VARCHAR(20);
SELECT rt.roleType INTO var_roleType FROM `user` ur INNER JOIN role r ON ur.roleId = r.id INNER JOIN roleType rt ON r.roleTypeId = rt.id WHERE ur.id = var_user_id;
IF (var_roleType = 'FIRM ADMIN')
THEN
SELECT totalUsers , (totalUsers - IFNULL(existingUsers,0)) AS newUsers , IFNULL(existingUsers,0) AS  existingUsers   FROM  
(
SELECT COUNT(1) AS totalUsers     , 
(SELECT COUNT(1)  FROM `user` WHERE createdDate < NOW() - INTERVAL 30 DAY AND isDeleted =0 ) AS existingUsers
FROM `user` WHERE isDeleted = 0 )a ;
ELSEIF (var_roleType = 'TEAM ADMIN')
THEN
SELECT totalUsers , (totalUsers - IFNULL(existingUsers,0)) AS newUsers , IFNULL(existingUsers,0) AS  existingUsers    FROM
(
SELECT COUNT(DISTINCT userId) AS totalUsers    , 
(SELECT COUNT(DISTINCT u.userId) FROM `user` u INNER JOIN userTeam ut ON u.userId  = ut.userId  WHERE u.isDeleted = 0 AND u.createdDate < NOW() - INTERVAL 30 DAY AND ut.teamId IN  (SELECT teamId FROM userTeam  WHERE userid = var_user_id AND isDeleted = 0)
 ) AS existingUsers
FROM userTeam WHERE  isDeleted = 0 AND teamId IN  (SELECT teamId FROM userTeam WHERE userid = var_user_id)  )a ;
ELSE
SELECT 0 AS totalUsers , 0 AS newUsers , 0 AS existingUsers  ;
END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `getPortfoliosForUser` */

/*!50003 DROP PROCEDURE IF EXISTS  `getPortfoliosForUser` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getPortfoliosForUser`(p_user_id INT)
BEGIN
--  ##-- Author: Jatin Singla
--  ##-- Created On: 26 August,2016
--  ##-- CALL getPortfoliosForUser (2)
--  ##-- Use: To fetch Accounts, Portfolios for login user
--  ##-----------------##
  
--  ##-- Variable Declaration --##
--	##-- Sql Exception Handler	
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
    @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
    SET @sql_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
    SELECT
      @sql_error AS sql_error,
      'Failed' AS `level`,
      '0' AS `code`,
      'Failed to fetch Portfolios for login user.' AS message;
  END;
-- ----------------------------------------------------------------------------
-- ***************** Fetch Portfolio Details for Login User *****************-- 
-- ----------------------------------------------------------------------------
SELECT 
	id
	,NAME
	,STATUS
	,modelName
	,primaryTeam
	,SUM(managedValue) AS managedValue
	,SUM(excludedValue) AS excludedValue
	,IFNULL(SUM(managedValue) + SUM(excludedValue),0) AS totalValue
	,ACTION
	,tradesPending
	,deviationPercent
	,SUM(cashDollar) AS cashDollar
	,ROUND((
		SUM(cashDollar)/SUM(managedValue)
	) * 100,2) AS cashPercent
	,SUM(minCashDollar) AS minCashDollar
	,ROUND((
		SUM(minCashDollar)/SUM(managedValue)
	) * 100,2) AS minCashPercent
	,autoRebalanceDate
	,outOfBalance
	,SUM(contribution) AS contribution
	,hasTaxLossHarvest
	,SUM(cashReserve) AS cashReserve
	,(SUM(cashDollar) + SUM(cashReserve)) AS totalCashDollar
	,ROUND(((SUM(cashDollar) + SUM(cashReserve))/SUM(managedValue)) * 100,2) AS totalCashPercent
	,createdBy
	,editedBy
		
	-- -------------------------------
	, cashNeed,
    tradeBlocked  ,
       advisor,
     `value`  ,
       style,
        lastRebalancedOn,
        isDeleted,
        createdOn,
        editedOn
-- ----------------------------------------------
FROM 
	(SELECT portfolio.id
			,portfolio.name
		--	,pos.accountId
		--	,pos.securityId
		--	,pos.quantity
		--	,sp.price
			,ss.status
			,model.name AS modelName
			,CASE 
				WHEN tpa.isPrimary THEN team.name
				ELSE NULL
			END AS primaryTeam
		-- -------------------------------
			,'8' AS cashNeed,
		--      '1000'  minCash,
			  '10' minCashPercent,
			  '11000' AS totalCashDollar,
			   '30' totalCashPercent ,
			   'true' tradeBlocked  ,
				"advisor" advisor,
			   '10000'  `VALUE`  ,
			   'style' AS style,
				'2016-08-30' lastRebalancedOn,
			   '0'  isDeleted,
				'2016-08-30' createdOn,
				'2016-08-30' editedOn
				
		-- ----------------------------------------------
				
			,CASE WHEN ss.status = 'ACTIVE'
				THEN IFNULL(SUM(pos.quantity * sp.price),0)
				ELSE 0
			END AS managedValue
			,CASE WHEN ss.status = 'EXCLUDED'
				THEN IFNULL(SUM(pos.quantity * sp.price),0)
				ELSE 0
			END AS excludedValue
			,CASE 
				WHEN outOfTolerance = 1
					THEN 'Out of Tolerance'
				WHEN cashNeed = 1
					THEN 'Cash Need'
				WHEN hasTaxLossHarvest = 1
					THEN 'Tax Loss Harvest Opportunity'
				WHEN hasPendings = 1
					THEN 'Pending Trades'
				ELSE 'Unknown'
			END AS ACTION
			,pa.hasPendings AS tradesPending
			,pa.deviationPercent
			,CASE WHEN sec.custodialCash = 1
				THEN SUM(pos.quantity * sp.price)
				ELSE 0
			END AS cashDollar
			,(	
				SELECT MAX(pv.value)  
				FROM preference
					INNER JOIN `preferenceValue` AS pv
					ON pv.preferenceId = preference.id
				WHERE `name` IN ('TaxableRebalanceCashMin' ,'TaxExemptRebalanceCashMin','TaxDeferredRebalanceCashMin')
					AND CASE WHEN pv.relatedType = 1 THEN 1 = 1
							WHEN pv.relatedType = 4 THEN relatedTypeId = IF(tpa.isPrimary = 1,tpa.teamId,NULL)
							WHEN pv.relatedType = 32 THEN relatedTypeId = acc.id
						ELSE NULL
						END
			) AS minCashDollar
			,pa.autoRebalanceDate
			,pa.outOfBalance
			,pa.hasTaxLossHarvest
			,CASE WHEN transaction.type = 'Client Contribution' AND sec.custodialCash = 1
				THEN SUM(amount)
				ELSE 0
			END AS contribution
			,@optionName := (SELECT po.optionName 
									FROM preference
										INNER JOIN `preferenceValue` AS pv
											ON pv.preferenceId = preference.id
										INNER JOIN `preferenceOption` AS po
											ON po.preferenceId = preference.id
										INNER JOIN `preferenceOptionValue` AS pov
											ON pov.`preferenceValueId` = pv.id
											AND pov.`preferenceOptionId` = po.id
									WHERE `name` = 'ReserveUsage'
										AND 
											CASE WHEN pv.relatedType = 1 THEN 1 = 1
												WHEN pv.relatedType = 4 THEN relatedTypeId = IF(tpa.isPrimary = 1,tpa.teamId,NULL)
											--	WHEN pv.relatedType = 32 THEN relatedTypeId = acc.id
												ELSE NULL
											END
							--		pv.preferenceId = 81
									ORDER BY relatedType DESC
									LIMIT 1) AS reserveUsageValue
			,(	
				SELECT CASE WHEN @optionName LIKE '%MAX%'
						THEN MAX(
									CASE WHEN indicatorValue = '%'
											THEN (
													pv.value * (
																	CASE WHEN ss.status = 'ACTIVE'
																		THEN IFNULL(SUM(pos.quantity * sp.price),0)
																	ELSE 0
																	END
																)
												)/100
									ELSE pv.value
									END
								)
							ELSE MIN(CASE WHEN indicatorValue = '%'
									THEN (pv.value * (CASE WHEN ss.status = 'ACTIVE'
												THEN IFNULL(SUM(pos.quantity * sp.price),0)
												ELSE 0
											END)
										)/100
									ELSE pv.value
								END)
							END
					FROM preference
						INNER JOIN `preferenceValue` AS pv
						ON pv.preferenceId = preference.id
					WHERE 
						CASE WHEN pv.relatedType = 1 THEN 1 = 1
							WHEN pv.relatedType = 4 THEN relatedTypeId = IF(tpa.isPrimary = 1,tpa.teamId,NULL)
							WHEN pv.relatedType = 32 THEN relatedTypeId = acc.id
							ELSE NULL
						END
						AND CASE 
							WHEN acc.billingAccount = 1 
								THEN preference.`name` = 'ReserveCashBillingAccount'
							WHEN att.name = 'Taxable'
								THEN preference.`name` = 'ReserveCashTaxable'
							WHEN att.name = 'TAXDEF'
								THEN preference.`name` = 'ReserveCashTaxDeferred'
							WHEN att.name = 'TAXEXMPT'	
								THEN preference.`name` = 'ReserveCashTaxExempt'
						END
			) AS cashReserve
			,portfolio.createdBy
			,portfolio.editedBy
	FROM userTeam AS ut 
		INNER JOIN teamPortfolioAccess AS tpa
			ON ut.teamId = tpa.teamId
		INNER JOIN team
			ON team.id = tpa.teamId
			AND team.isDeleted = 0
		INNER JOIN portfolio
			ON portfolio.id = tpa.portfolioId
		LEFT JOIN model
			ON model.id = portfolio.modelId
			AND model.isDeleted = 0 
		LEFT JOIN account AS acc
			ON portfolio.id = acc.portfolioId
			AND acc.isDeleted = 0 
			AND acc.isDisabled = 0
		LEFT JOIN `accountType` AS act
			ON act.id = acc.accountTypeId
			AND act.isDeleted = 0
		LEFT JOIN `accountTaxableType` AS att 
			ON act.taxableTypeId = att.id
		LEFT JOIN `position` AS pos
			ON pos.accountId = acc.`id`
			AND pos.isDeleted = 0 
		LEFT JOIN `security` AS sec
			ON sec.`id` = pos.securityId
			AND sec.isDeleted = 0 
		LEFT JOIN securityPrice AS sp
			ON sp.securityId = sec.id
			AND sp.isDeleted = 0 
		LEFT JOIN securityStatus AS ss
			ON ss.id = sec.statusId
		LEFT JOIN portfolioAnalytics AS pa
			ON pa.portfolioId = portfolio.id
		LEFT JOIN `transaction`
			ON transaction.securityId = sec.`id`
				AND transaction.accountId = acc.id
				AND transaction.isDeleted = 0
	WHERE ut.userId = p_user_id 
		AND ut.isDeleted = 0
		AND tpa.isDeleted = 0
		AND portfolio.isDisabled = 0
		AND portfolio.isDeleted = 0
	GROUP BY portfolio.id,acc.id
	) portfolios GROUP BY id;
END */$$
DELIMITER ;

/* Procedure structure for procedure `getPortfoliosWithAccountForUser` */

/*!50003 DROP PROCEDURE IF EXISTS  `getPortfoliosWithAccountForUser` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getPortfoliosWithAccountForUser`(p_user_id INT)
BEGIN
--  ##-- Author: Jatin Singla
--  ##-- Created On: 26 August,2016
--  ##-- CALL getPortfoliosWithAccountForUser (2)
--  ##-- Use: To fetch Accounts, Portfolios for login user
--  ##-----------------##
  
--  ##-- Variable Declaration --##
--	##-- Sql Exception Handler	
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
    @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
    SET @sql_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
    SELECT
      @sql_error AS sql_error,
      'Failed' AS `level`,
      '0' AS `code`,
      'Failed to fetch Accounts,Portfolios for login user.' AS message;
  END;
-- ----------------------------------------------------------------------------
-- ***************** Fetch Portfolio Details for Login User *****************-- 
-- ----------------------------------------------------------------------------
SELECT portfolio.id
	,portfolio.name
	,pos.accountId
	,pos.securityId
--	,pos.quantity
--	,sp.price
	,ss.status
	,CASE WHEN ss.status = 'ACTIVE'
		THEN SUM(pos.quantity * sp.price)
		ELSE 0
	END AS ManagedValue
	,CASE WHEN ss.status = 'EXCLUDED'
		THEN SUM(pos.quantity * sp.price)
		ELSE 0
	END AS ExcludedValue
	,hasPendings
	,deviationPercent
	,cashPercent
FROM userTeam AS ut 
	INNER JOIN teamPortfolioAccess AS tpa
		ON ut.teamId = tpa.teamId
	INNER JOIN portfolio
		ON portfolio.id = tpa.portfolioId
	LEFT JOIN account AS acc
		ON portfolio.id = acc.portfolioId
		AND acc.isDeleted = 0 
		AND acc.isDisabled = 0
	LEFT JOIN `position` AS pos
		ON pos.accountId = acc.`id`
		AND pos.isDeleted = 0 
	LEFT JOIN `security` AS sec
		ON sec.`id` = pos.securityId
		AND sec.isDeleted = 0 
	LEFT JOIN securityPrice AS sp
		ON sp.securityId = sec.id
		AND sp.isDeleted = 0 
	LEFT JOIN securityStatus AS ss
		ON ss.id = sec.statusId
	LEFT JOIN portfolioAnalytics AS pa
		ON pa.portfolioId = portfolio.id
WHERE ut.userId = p_user_id 
	AND ut.isDeleted = 0
	AND tpa.isDeleted = 0
	AND portfolio.isDisabled = 0
	AND portfolio.isDeleted = 0
GROUP BY portfolio.id;
	
-- ----------------------------------------------------------------------------
-- ***************** Fetch Portfolio Details for Login User *****************-- 
-- ----------------------------------------------------------------------------	
SELECT acc.id
	,pos.accountId
	,pos.securityId
--	,pos.quantity
--	,sp.price
	,ss.status
	,CASE WHEN ss.status = 'ACTIVE'
		THEN pos.quantity * sp.price
		ELSE 0
	END AS ManagedValue
	,CASE WHEN ss.status = 'EXCLUDED'
		THEN pos.quantity * sp.price
		ELSE 0
	END AS ExcludedValue
FROM userTeam AS ut 
	INNER JOIN teamPortfolioAccess AS tpa
		ON ut.teamId = tpa.teamId
	INNER JOIN portfolio
		ON portfolio.id = tpa.portfolioId
	INNER JOIN account AS acc
		ON portfolio.id = acc.portfolioId
		AND acc.isDeleted = 0 
		AND acc.isDisabled = 0
	LEFT JOIN `position` AS pos
		ON pos.accountId = acc.`id`
		AND pos.isDeleted = 0 
	LEFT JOIN `security` AS sec
		ON sec.`id` = pos.securityId
		AND sec.isDeleted = 0 
	LEFT JOIN securityPrice AS sp
		ON sp.securityId = sec.id
		AND sp.isDeleted = 0 
	LEFT JOIN `securityStatus` AS ss
		ON ss.id = sec.statusId
WHERE ut.userId = p_user_id 
	AND ut.isDeleted = 0
	AND tpa.isDeleted = 0
	AND portfolio.isDisabled = 0
	AND portfolio.isDeleted = 0
GROUP BY acc.id;
END */$$
DELIMITER ;

/* Procedure structure for procedure `getPreferencesValuesForPortfolio` */

/*!50003 DROP PROCEDURE IF EXISTS  `getPreferencesValuesForPortfolio` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getPreferencesValuesForPortfolio`(varId INT)
BEGIN
--  ##-- Author: Jatin Singla
--  ##-- Created On: 4 September,2016
--  ##-- CALL getPreferencesValuesForPortfolio (15)
--  ##-- Use: To fetch model securiteis id list and to call  getAllTypesPreferencesValuesForPortfolio (varId);Preferences Values for a Portfolio
--  ##-----------------##
-- ------------------------------------------ --
--  ##-- Variable Declaration --##
-- ------------------------------------------ --
	DECLARE id INT DEFAULT 0;
    DECLARE varSecurityIdList TEXT;
    DECLARE splitted_value INT;
	DECLARE done INT DEFAULT FALSE;
	DECLARE varPortfolioId, varModelId, varAccountId, varSecurityId, varTeamId, varCustodianId INT;
 -- ------------------------------------------ --
-- Cursor Declaration to fetch model securities
  -- ------------------------------------------ --
DECLARE curModelSecurity CURSOR FOR 
		SELECT DISTINCT portfolio.id AS portfolioId
		--	,portfolio.modelId
		--	,ss.id AS securitySetId
			,CONCAT(
				GROUP_CONCAT(DISTINCT ssd.securityId)
				,',',GROUP_CONCAT(DISTINCT ssd.taxableSecurityId)
				,',',GROUP_CONCAT(DISTINCT ssd.taxDeferredSecurityId)
				,',',GROUP_CONCAT(DISTINCT ssd.taxExemptSecurityId)
				,',',GROUP_CONCAT(DISTINCT stss.securityId)
				,',',GROUP_CONCAT(DISTINCT stss.tlhSecurityId)
				,',',GROUP_CONCAT(DISTINCT sess.securityId)
				,',',GROUP_CONCAT(DISTINCT sess.equivalentSecurityId)
				,',',GROUP_CONCAT(DISTINCT sess.taxableSecurityId)
				,',',GROUP_CONCAT(DISTINCT sess.taxDeferredSecurityId)
				,',',GROUP_CONCAT(DISTINCT sess.taxExemptSecurityId)
			) securityIdList 
		FROM portfolio INNER JOIN modelDetails AS md 
				ON portfolio.modelId = md.modelId
			INNER JOIN modelElements AS me
				ON me.id = md.modelElementId
			INNER JOIN securitySet AS ss
				ON ss.id = me.relatedTypeId
			INNER JOIN `securitySetDetail` AS ssd
				ON ssd.securitySetId = ss.id
			LEFT JOIN securityTLHInSecuritySet AS stss
				ON (ss.id = stss.securitySetId
					AND ssd.securityId = stss.securityId)
				OR (ss.id = stss.securitySetId
					AND ssd.taxableSecurityId = stss.securityId)
				OR (ss.id = stss.securitySetId
					AND ssd.taxDeferredSecurityId = stss.securityId)
				OR (ss.id = stss.securitySetId
						AND ssd.taxExemptSecurityId = stss.securityId)
			LEFT JOIN securityEquivalenceInSecuritySet AS sess
				ON (sess.securitySetId = ss.id
					AND ssd.securityId = sess.securityId)
				OR (ss.id = sess.securitySetId
					AND ssd.taxableSecurityId = sess.securityId)
				OR (ss.id = sess.securitySetId
					AND ssd.taxDeferredSecurityId = sess.securityId)
				OR (ss.id = sess.securitySetId
					AND ssd.taxExemptSecurityId = sess.securityId)
			WHERE rightValue - leftValue = 1
				AND relatedType = 'SECURITYSET'
				AND portfolio.id = varId
	 GROUP BY portfolioId;
-- ----------------------------------- --	 
--	##-- Sql Exception Handler	
-- ----------------------------------- --
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
    @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
    SET @sql_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
    SELECT
      @sql_error AS sql_error,
      'Failed' AS `level`,
      '0' AS `code`,
      'Failed to fetch preferences values for a portfolio.' AS message;
  END;	
  
 DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
 -- -------------------------------------------------------------------------------- --
 -- ######### Set Group_Concat default value for this session ###########---
 -- -------------------------------------------------------------------------------- --
 
 SET SESSION group_concat_max_len = 8000;  
-- -------------------------------------------------------------------------------- --
-- Create temp table to store Securties list correspond to a model for a portfolio 
-- -------------------------------------------------------------------------------- --
	DROP TEMPORARY TABLE IF EXISTS modelSecurities;
	
    CREATE TEMPORARY TABLE modelSecurities(
				    portfolioId INT NOT NULL,
				    securityId INT NOT NULL
				    ) ;
					
-- -------------------------------------------------------------------------------- --
-- Open cursor to convert comma separated model securities id into separate rows
-- -------------------------------------------------------------------------------- --					
    OPEN curModelSecurity;
    read_loop: LOOP
	FETCH curModelSecurity INTO id, varSecurityIdList;
        IF done THEN
          LEAVE read_loop;
        END IF;
        SET @occurance := (SELECT LENGTH(varSecurityIdList)
                                 - LENGTH(REPLACE(varSecurityIdList, ',' , ''))
                                 +1);
        SET @i := 1;
        WHILE @i <= @occurance DO
			SET splitted_value =(SELECT REPLACE(SUBSTRING(SUBSTRING_INDEX(varSecurityIdList, ',', @i),
										LENGTH(SUBSTRING_INDEX(varSecurityIdList, ',', @i - 1)) + 1), ',', ''));
-- -------------------------------------------------------------------------------- --
-- Insert securities id and portfolio id as separate row in temp table
-- -------------------------------------------------------------------------------- --
			INSERT INTO modelSecurities VALUES (id, splitted_value);
			SET @i = @i + 1;
        END WHILE;
	END LOOP;
    CLOSE curModelSecurity;
	
-- ---------------------------------------------------------------------------------------------------- --
-- SP to return all types of preferences values (general Preferences, security preferences
-- , model securities preferences) for portfolio. Model security id's fetched above is also used in SP
-- ---------------------------------------------------------------------------------------------------- --
CALL getAllTypesPreferencesValuesForPortfolio (varId);
SET SESSION group_concat_max_len = 1024;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `getPreferencesValuesForSecurity` */

/*!50003 DROP PROCEDURE IF EXISTS  `getPreferencesValuesForSecurity` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getPreferencesValuesForSecurity`(varId INT, varLevel VARCHAR(100))
BEGIN
DECLARE done INT DEFAULT FALSE;
DECLARE varPortfolioId, varModelId, varAccountId, varSecurityId, varTeamId INT;
DECLARE cur1 CURSOR FOR 
		SELECT DISTINCT portfolio.id
--			,portfolio.`name`
			,portfolio.modelId
			,acc.id AS accountId
			,sec.id AS securityId
			,teamId
		FROM `portfolio`
			INNER JOIN account AS acc
				ON portfolio.id = acc.portfolioId
					AND acc.isDeleted = 0
					AND acc.isDisabled = 0
			INNER JOIN`position` AS pos
				ON pos.accountId = acc.`id`
					AND pos.isDeleted = 0
			INNER JOIN `security` AS sec
				ON sec.`id` = pos.securityId
					AND sec.isDeleted = 0
			INNER JOIN teamPortfolioAccess AS tpa
				ON portfolio.id = tpa.portfolioId
		WHERE CASE 
			WHEN UPPER(varLevel) = 'SECURITY'
				THEN sec.id = varId
			WHEN UPPER(varLevel) = 'ACCOUNT'
				THEN acc.id = varId
			WHEN UPPER(varLevel) = 'PORTFOLIO'
				THEN portfolio.id = varId
			WHEN UPPER(varLevel) = 'MODEL'
				THEN portfolio.modelId = varId
			WHEN UPPER(varLevel) = 'TEAM'
				THEN tpa.teamId = varId
			END	
		;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
  
  DROP TABLE IF EXISTS preferenceList ;
  CREATE TABLE preferenceList (PortfolioId INT, ModelId INT, AccountId INT, TeamId INT -- ,row_number int
--	,id int
--	,relatedTypeId int
--	,relatedType int
--	,preferenceValueId int
	,securityId INT
	,PreferenceId INT
	,securitySettingPreferenceOptionId INT
	,`value` VARCHAR(150));
  OPEN cur1;
  read_loop1: LOOP
 FETCH cur1 INTO varPortfolioId, varModelId, varAccountId, varSecurityId, varTeamId;
IF done THEN
      LEAVE read_loop1;
ELSE
 INSERT INTO preferenceList  SELECT varPortfolioId, varModelId, varAccountId, varTeamId -- ,row_number
--	,id
--	,relatedTypeId
--	,relatedType
--	,preferenceValueId
	,securityId
	,securitySettingPreferenceId
	,securitySettingPreferenceOptionId
	,`value`
FROM 
	(
		SELECT @row_number := CASE 
					WHEN @SettingPreferenceId = pref.securitySettingPreferenceId
					THEN @row_number+1 
					ELSE 1 
				END AS row_number 
			,@SettingPreferenceId := pref.securitySettingPreferenceId AS SettingPreferenceId
			,pref.*
		 FROM 
			(SELECT
				sspv.id
				,pv.relatedTypeId
				,pv.relatedType
				,preferenceValueId
				,sspv.securityId
				,sspv.securitySettingPreferenceId
				,sspv.securitySettingPreferenceOptionId
				,sspo.value
			FROM preference 
				INNER JOIN `preferenceValue` AS pv
					ON preference.id = pv.preferenceId
				INNER JOIN preferenceLevel AS pl
					ON pl.bitValue = pv.relatedType
				INNER JOIN `securitySettingPreferenceValue` AS sspv
					ON sspv.preferenceValueId = pv.id
				INNER JOIN `securitySettingPreferenceOptions` AS sspo
					ON sspo.id = sspv.securitySettingPreferenceOptionId
			WHERE preference.`name` = 'SecuritySetting'
				AND preference.isDeleted = 0 
				AND pv.isDeleted = 0
				AND sspv.securityId = varSecurityId
				AND CASE
				--	WHEN pv.relatedType = 1 then relatedTypeId =
				--	WHEN pv.relatedType = 2 then relatedTypeId =
					WHEN pv.relatedType = 4 THEN relatedTypeId = varTeamId
					WHEN pv.relatedType = 8 THEN relatedTypeId = varModelId
					WHEN pv.relatedType = 16 THEN relatedTypeId = varPortfolioId
					WHEN pv.relatedType = 32 THEN relatedTypeId = varAccountId
				END
			)pref 
			INNER JOIN
			(SELECT 
				@row_number:=0
				,@SettingPreferenceId:=0
			) rowGen
			ORDER BY pref.securitySettingPreferenceId, pref.relatedType DESC
) secPrefValue WHERE secPrefValue.row_number = 1
UNION
-- INSERT INTO preferenceList(PortfolioId, ModelId, AccountId, TeamId, securityId, PreferenceId,securitySettingPreferenceOptionId, `value`)
SELECT  varPortfolioId
	,varModelId
	,varAccountId
	,varTeamId
	,NULL
	,preferenceId
	,NULL
--	,pv.relatedTypeId
--	,pv.relatedType
	,`value`	
FROM	(SELECT
	@row_number := CASE 
			WHEN @preferenceId = pv.preferenceId
				THEN @row_number+1 
			ELSE 1 
		END AS row_number 
	,@preferenceId := pv.preferenceId AS dummyPreferenceId
	,pv.preferenceId
	,pv.relatedTypeId
	,pv.relatedType
	,pv.value		
FROM preference 
	INNER JOIN `preferenceValue` AS pv
		ON preference.id = pv.preferenceId
	INNER JOIN (SELECT 
			@row_number:=0
			,@SettingPreferenceId:=0
		) rowGen
WHERE preference.isDeleted = 0
	AND preference.`name` != 'SecuritySetting'
	AND pv.isDeleted = 0
	AND CASE
	--	WHEN pv.relatedType = 1 then relatedTypeId =
	--	WHEN pv.relatedType = 2 then relatedTypeId =
	WHEN pv.relatedType = 4 THEN relatedTypeId = varTeamId
	WHEN pv.relatedType = 8 THEN relatedTypeId = varModelId
	WHEN pv.relatedType = 16 THEN relatedTypeId = varPortfolioId
	WHEN pv.relatedType = 32 THEN relatedTypeId = varAccountId
END
ORDER BY pv.preferenceId, pv.relatedType DESC
) prefValues WHERE prefValues.row_number = 1 ;
 END IF;
 END LOOP;
  SET done = FALSE; 
  SELECT DISTINCT * FROM preferenceList; 
  DROP TABLE IF EXISTS preferenceList ;
 CLOSE cur1; 
 END */$$
DELIMITER ;

/* Procedure structure for procedure `getPreferenceValue` */

/*!50003 DROP PROCEDURE IF EXISTS  `getPreferenceValue` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getPreferenceValue`(varUserId INT , varLevelName VARCHAR(30), varFirmId INT , varRecordTypeID INT)
BEGIN 
##-- Author: Ashutosh Verma ##-- Created ON: 17th August,2016
                                                                                                                                                           ##-- CALL getPreferenceValue (1,'account',999,1) 
																																						   ##----- SP TO FETCH preference value FOR a recordType -----##
## -----  user_id , level name , firmId , levelId will be passed as a parameter.
##-----SQL query TO FETCH preference value FOR a recordType-----#
 DECLARE varRecordType INT ; 
 DECLARE varModelName VARCHAR(100);
 DECLARE varPortfolioId INT;
 DECLARE varCustodianId INT;
 DECLARE varTeamName VARCHAR(100); 
 DECLARE varCustodianName VARCHAR(100); 
 DECLARE varPortfolioName VARCHAR(100); 
 DECLARE varModelId INT; 
 DECLARE varTeamId INT;
SELECT bitValue INTO varRecordType
FROM preferenceLevel
WHERE NAME = varLevelName; 
IF(varRecordType IN(4, 2,16)) THEN
  SELECT preferenceId,
         VALUE,
         inheritedVALUE,
         CASE
             WHEN inheritedVALUE IS NULL THEN FALSE
             ELSE TRUE
         END AS isInherited,
         CASE
             WHEN inheritedVALUE IS NULL THEN NULL
             ELSE 'firm'
         END AS inheritedFrom,
         CASE
             WHEN inheritedVALUE IS NULL THEN NULL
             ELSE ''
         END AS inheritedFromName,
         CASE
             WHEN inheritedVALUE IS NULL THEN NULL
             ELSE varFirmId
         END AS inheritedFromId,
         `name`,
         categoryType,
         displayOrder,
         dataType,
         symbol,
         OPTIONS,
         selectedOptions,
         inheritedSelectedOptions
  FROM
    (SELECT DISTINCT p7.id AS preferenceId,
                     t1.VALUE AS VALUE,
       (SELECT VALUE
        FROM `preferenceValue` p6
        WHERE `relatedType`=1
          AND `relatedTypeId` =varFirmId
          AND p6.preferenceId = p7.id) AS inheritedVALUE,
                     p7.`name` AS NAME,
                     pc.name AS categoryType,
                     pc.displayOrder AS displayOrder,
                     p7.dataType AS dataType,
                     p7.symbol AS symbol,
                     CASE
                         WHEN p7.dataType = 'OptionList' THEN
                                (SELECT GROUP_CONCAT(po.id, ":", po.optionName)
                                 FROM preferenceOption po
                                 WHERE po.preferenceId = p7.id )
                         ELSE NULL
                     END AS OPTIONS,
                     CASE
                         WHEN p7.dataType = 'OptionList' THEN
                                (SELECT GROUP_CONCAT(pov.preferenceOptionId,":", pov.prefOrder)
                                 FROM preferenceOptionValue pov
                                 INNER JOIN preferenceValue pv ON pv.id = pov.preferenceValueId
                                 WHERE pv.preferenceId = p7.id
                                   AND pv.relatedType =varRecordType
                                   AND pv.relatedTypeId =varRecordTypeID)
                         ELSE NULL
                     END AS selectedOptions,
                     CASE
                         WHEN p7.dataType = 'OptionList' THEN
                                (SELECT GROUP_CONCAT(pov.preferenceOptionId,":", pov.prefOrder)
                                 FROM preferenceOptionValue pov
                                 INNER JOIN preferenceValue pv ON pv.id = pov.preferenceValueId
                                 WHERE pv.preferenceId = p7.id
                                   AND pv.relatedType =1
                                   AND pv.relatedTypeId =varFirmId)
                         ELSE NULL
                     END AS inheritedSelectedOptions
     FROM preference p7
     INNER JOIN preferenceCategory pc ON p7.categoryId = pc.id
     LEFT OUTER JOIN
       (SELECT preferenceId,
               CASE
                   WHEN EXISTS
                          (SELECT VALUE
                           FROM `preferenceValue` p8
                           WHERE `relatedType`=varRecordType
                             AND `relatedTypeId` =varRecordTypeID
                             AND p8.`preferenceId`=p1.preferenceid) THEN VALUE
                   ELSE NULL
               END AS VALUE
        FROM `preferenceValue` p1
        WHERE `relatedType`=varRecordType
          AND `relatedTypeId` =varRecordTypeID
          AND `preferenceId` IN
            (SELECT id
             FROM preference
             WHERE (allowedRecordTypes & varRecordType) = varRecordType ) ) t1 ON p7.id = t1.preferenceId
     WHERE p7.id IN
         (SELECT id
          FROM preference
          WHERE (allowedRecordTypes & varRecordType) = varRecordType ) ) t2; ELSEIF (varRecordType = 1) THEN
  SELECT DISTINCT p7.id AS preferenceId,
                  t1.VALUE AS VALUE,
                  NULL AS inheritedVALUE,
                  p7.`name` AS NAME,
                  pc.name AS categoryType,
                  pc.displayOrder AS displayOrder,
                  p7.dataType AS dataType,
                  p7.symbol AS symbol,
                  CASE
                      WHEN p7.dataType = 'OptionList' THEN
                             (SELECT GROUP_CONCAT(po.id, ":", po.optionName)
                              FROM preferenceOption po
                              WHERE po.preferenceId = p7.id )
                      ELSE NULL
                  END AS OPTIONS,
                  CASE
                      WHEN p7.dataType = 'OptionList' THEN
                             (SELECT GROUP_CONCAT(pov.preferenceOptionId,":", pov.prefOrder)
                              FROM preferenceOptionValue pov
                              INNER JOIN preferenceValue pv ON pv.id = pov.preferenceValueId
                              WHERE pv.preferenceId = p7.id
                                AND pv.relatedType =varRecordType
                                AND pv.relatedTypeId =varRecordTypeID)
                      ELSE NULL
                  END AS selectedOptions,
                  NULL AS inheritedSelectedOptions,
                  FALSE AS isInherited,
                           NULL AS inheritedFrom,
                           NULL AS inheritedFromName,
                           NULL AS inheritedFromId
  FROM preference p7
  INNER JOIN preferenceCategory pc ON p7.categoryId = pc.id
  LEFT OUTER JOIN
    (SELECT preferenceId,
            CASE
                WHEN EXISTS
                       (SELECT VALUE
                        FROM `preferenceValue` p8
                        WHERE `relatedType`=varRecordType
                          AND `relatedTypeId` =varRecordTypeID
                          AND p8.`preferenceId`=p1.preferenceid) THEN VALUE
                ELSE NULL
            END AS VALUE
     FROM `preferenceValue` p1
     WHERE `relatedType`=varRecordType
       AND `relatedTypeId` =varRecordTypeID
       AND `preferenceId` IN
         (SELECT id
          FROM preference
          WHERE (allowedRecordTypes & varRecordType) = varRecordType )) t1 ON p7.id = t1.preferenceId WHERE p7.id IN
    (SELECT id
     FROM preference
     WHERE (allowedRecordTypes & varRecordType) = varRecordType ) ; /* -------------- for portfolio level --------*/ ELSEIF (varRecordType = 8) THEN
  SELECT modelId INTO varModelId
  FROM portfolio WHERE id = varRecordTypeID;
  SELECT NAME INTO varModelName
  FROM model WHERE id = varModelId;
  SELECT NAME INTO varTeamName
  FROM team WHERE id = varTeamId;
  SELECT teamId INTO varTeamId
  FROM teamPortfolioAccess WHERE isPrimary =1
  AND portfolioId = varRecordTypeID;
  SELECT preferenceId,
         VALUE,
         inheritedValue,
         t3.name,
         t3.categoryType,
         t3.displayOrder,
         t3.dataType,
         t3.symbol,
         t3.options,
         t3.selectedOptions,
         CASE
             WHEN t3.dataType = 'OptionList'
                  OR t3.dataType = 'List' THEN CASE
                                                   WHEN inheritedFrom = 16 THEN
                                                          (SELECT GROUP_CONCAT(pov.preferenceOptionId,":", pov.prefOrder)
                                                           FROM preferenceOptionValue pov
                                                           INNER JOIN preferenceValue pv ON pv.id = pov.preferenceValueId
                                                           WHERE pv.preferenceId = p10.id
                                                             AND pv.relatedType =16
                                                             AND pv.relatedTypeId =varModelId)
                                                   WHEN inheritedFrom = 4 THEN
                                                          (SELECT GROUP_CONCAT(pov.preferenceOptionId,":", pov.prefOrder)
                                                           FROM preferenceOptionValue pov
                                                           INNER JOIN preferenceValue pv ON pv.id = pov.preferenceValueId
                                                           WHERE pv.preferenceId = p10.id
                                                             AND pv.relatedType =4
                                                             AND pv.relatedTypeId =varTeamId)
                                                   WHEN inheritedFrom = 1 THEN
                                                          (SELECT GROUP_CONCAT(pov.preferenceOptionId,":", pov.prefOrder)
                                                           FROM preferenceOptionValue pov
                                                           INNER JOIN preferenceValue pv ON pv.id = pov.preferenceValueId
                                                           WHERE pv.preferenceId = p10.id
                                                             AND pv.relatedType =1
                                                             AND pv.relatedTypeId =varFirmId)
                                                   ELSE NULL
                                               END
             ELSE NULL
         END AS inheritedSelectedOptions,
         CASE
             WHEN inheritedValue IS NULL THEN FALSE
             ELSE TRUE
         END AS isInherited,
         CASE
             WHEN inheritedValue IS NULL THEN NULL
             ELSE CASE
                      WHEN inheritedFrom = 16 THEN 'Model'
                      WHEN inheritedFrom = 4 THEN 'Team'
                      WHEN inheritedFrom = 1 THEN 'Firm'
                  END
         END AS inheritedFrom,
         CASE
             WHEN inheritedValue IS NULL THEN NULL
             ELSE CASE
                      WHEN inheritedFrom = 16 THEN varModelName
                      WHEN inheritedFrom = 4 THEN varTeamName
                      WHEN inheritedFrom = 1 THEN ''
                  END
         END AS inheritedFromName,
         CASE
             WHEN inheritedValue IS NULL THEN NULL
             ELSE CASE
                      WHEN inheritedFrom = 16 THEN varModelId
                      WHEN inheritedFrom = 4 THEN varTeamId
                      WHEN inheritedFrom = 1 THEN varFirmId
                  END
         END AS inheritedFromId
  FROM preference p10
  INNER JOIN
    (SELECT DISTINCT p9.id AS preferenceId,
                     VALUE,
                     IF(a =1 ,
                          (SELECT VALUE
                           FROM `preferenceValue` p6
                           WHERE `relatedType`=16
                             AND `relatedTypeId` =varModelId
                             AND p6.preferenceId = p9.id) ,IF(EXISTS
                                                                (SELECT VALUE
                                                                 FROM `preferenceValue` p6
                                                                 WHERE `relatedType`=4
                                                                   AND `relatedTypeId` =varTeamId
                                                                   AND p6.preferenceId = p9.id) =1,
                                                                (SELECT VALUE
                                                                 FROM `preferenceValue` p6
                                                                 WHERE `relatedType`=4
                                                                   AND `relatedTypeId` =varTeamId
                                                                   AND p6.preferenceId = p9.id),
                                                                (SELECT VALUE
                                                                 FROM `preferenceValue` p6
                                                                 WHERE `relatedType`=1
                                                                   AND `relatedTypeId` =varFirmId
                                                                   AND p6.preferenceId = p9.id))) AS inheritedValue,
                     IF(a =1 ,
                          (SELECT relatedType
                           FROM `preferenceValue` p6
                           WHERE `relatedType`=16
                             AND `relatedTypeId` =varModelId
                             AND p6.preferenceId = p9.id) ,IF(EXISTS
                                                                (SELECT VALUE
                                                                 FROM `preferenceValue` p6
                                                                 WHERE `relatedType`=4
                                                                   AND `relatedTypeId` =varTeamId
                                                                   AND p6.preferenceId = p9.id) =1,
                                                                (SELECT relatedType
                                                                 FROM `preferenceValue` p6
                                                                 WHERE `relatedType`=4
                                                                   AND `relatedTypeId` =varTeamId
                                                                   AND p6.preferenceId = p9.id),
                                                                (SELECT relatedType
                                                                 FROM `preferenceValue` p6
                                                                 WHERE `relatedType`=1
                                                                   AND `relatedTypeId` =varFirmId
                                                                   AND p6.preferenceId = p9.id))) AS inheritedFrom,
                     t2.`name` AS NAME,
                     t2.categoryType AS categoryType,
                     t2.displayOrder AS displayOrder,
                     t2.dataType AS dataType,
                     t2.symbol AS symbol,
                     t2.OPTIONS AS OPTIONS,
                     t2.selectedOptions AS selectedOptions
     FROM preference p9
     INNER JOIN
       (SELECT DISTINCT p7.id AS preferenceId,
                        t1.VALUE AS VALUE,
          (SELECT COUNT(1)
           FROM `preferenceValue` p6
           WHERE `relatedType`=16
             AND `relatedTypeId` =varModelId
             AND p6.preferenceId = p7.id) AS a,
                        p7.`name` AS NAME,
                        pc.name AS categoryType,
                        pc.displayOrder AS displayOrder,
                        p7.dataType AS dataType,
                        p7.symbol AS symbol,
                        CASE
                            WHEN p7.dataType = 'OptionList'
                                 OR p7.dataType = 'List' THEN
                                   (SELECT GROUP_CONCAT(po.id, ":", po.optionName)
                                    FROM preferenceOption po
                                    WHERE po.preferenceId = p7.id )
                            ELSE NULL
                        END AS OPTIONS,
                        CASE
                            WHEN p7.dataType = 'OptionList'
                                 OR p7.dataType = 'List' THEN
                                   (SELECT GROUP_CONCAT(pov.preferenceOptionId,":", pov.prefOrder)
                                    FROM preferenceOptionValue pov
                                    INNER JOIN preferenceValue pv ON pv.id = pov.preferenceValueId
                                    WHERE pv.preferenceId = p7.id
                                      AND pv.relatedType =varRecordType
                                      AND pv.relatedTypeId =varRecordTypeID)
                            ELSE NULL
                        END AS selectedOptions
        FROM preference p7
        INNER JOIN preferenceCategory pc ON p7.categoryId = pc.id
        LEFT OUTER JOIN
          (SELECT preferenceId,
                  CASE
                      WHEN EXISTS
                             (SELECT VALUE
                              FROM `preferenceValue` p8
                              WHERE `relatedType`=varRecordType
                                AND `relatedTypeId` =varRecordTypeID
                                AND p8.`preferenceId`=p1.preferenceid) THEN VALUE
                      ELSE NULL
                  END AS VALUE
           FROM `preferenceValue` p1
           WHERE `relatedType`=varRecordType
             AND `relatedTypeId` =varRecordTypeID
             AND `preferenceId` IN
               (SELECT id
                FROM preference
                WHERE (allowedRecordTypes & varRecordType) = varRecordType ) ) t1 ON p7.id = t1.preferenceId
        WHERE p7.id IN
            (SELECT id
             FROM preference
             WHERE (allowedRecordTypes & varRecordType) = varRecordType ) ) t2 ON p9.id =t2.preferenceId
     WHERE p9.id IN
         (SELECT id
          FROM preference
          WHERE (allowedRecordTypes & varRecordType) = varRecordType )) t3 ON p10.id = t3.preferenceId WHERE p10.id IN
    (SELECT id
     FROM preference
     WHERE (allowedRecordTypes & varRecordType) = varRecordType ); /* -------------- for account level --------*/ ELSEIF (varRecordType = 32) THEN
  SELECT portfolioId,
         custodianId INTO varPortfolioId,
                          varCustodianId
  FROM account WHERE orionConnectExternalId = varRecordTypeID;
  SELECT modelId INTO varModelId
  FROM portfolio WHERE id = varPortfolioId;
  SELECT teamId INTO varTeamId
  FROM teamPortfolioAccess WHERE isPrimary =1
  AND portfolioId = varPortfolioId;
  SELECT NAME INTO varModelName
  FROM model WHERE id = varModelId;
  SELECT NAME INTO varTeamName
  FROM team WHERE id = varTeamId;
  SELECT NAME INTO varPortfolioName
  FROM portfolio WHERE id = varPortfolioId;
  SELECT NAME INTO varCustodianName
  FROM custodian WHERE externalId = varCustodianId;
  SELECT preferenceId,
         VALUE,
         inheritedValue,
         t3.name,
         t3.categoryType,
         t3.displayOrder,
         t3.dataType,
         t3.symbol,
         t3.options,
         t3.selectedOptions,
         CASE
             WHEN t3.dataType = 'OptionList'
                  OR t3.dataType = 'List' THEN CASE
                                                   WHEN inheritedFrom = 8 THEN
                                                          (SELECT GROUP_CONCAT(pov.preferenceOptionId,":", pov.prefOrder)
                                                           FROM preferenceOptionValue pov
                                                           INNER JOIN preferenceValue pv ON pv.id = pov.preferenceValueId
                                                           WHERE pv.preferenceId = p10.id
                                                             AND pv.relatedType =8
                                                             AND pv.relatedTypeId =varPortfolioId)
                                                   WHEN inheritedFrom = 16 THEN
                                                          (SELECT GROUP_CONCAT(pov.preferenceOptionId,":", pov.prefOrder)
                                                           FROM preferenceOptionValue pov
                                                           INNER JOIN preferenceValue pv ON pv.id = pov.preferenceValueId
                                                           WHERE pv.preferenceId = p10.id
                                                             AND pv.relatedType =16
                                                             AND pv.relatedTypeId =varModelId)
                                                   WHEN inheritedFrom = 4 THEN
                                                          (SELECT GROUP_CONCAT(pov.preferenceOptionId,":", pov.prefOrder)
                                                           FROM preferenceOptionValue pov
                                                           INNER JOIN preferenceValue pv ON pv.id = pov.preferenceValueId
                                                           WHERE pv.preferenceId = p10.id
                                                             AND pv.relatedType =4
                                                             AND pv.relatedTypeId =varTeamId)
                                                   WHEN inheritedFrom = 2 THEN
                                                          (SELECT GROUP_CONCAT(pov.preferenceOptionId,":", pov.prefOrder)
                                                           FROM preferenceOptionValue pov
                                                           INNER JOIN preferenceValue pv ON pv.id = pov.preferenceValueId
                                                           WHERE pv.preferenceId = p10.id
                                                             AND pv.relatedType =2
                                                             AND pv.relatedTypeId =varCustodianId)
                                                   WHEN inheritedFrom = 1 THEN
                                                          (SELECT GROUP_CONCAT(pov.preferenceOptionId,":", pov.prefOrder)
                                                           FROM preferenceOptionValue pov
                                                           INNER JOIN preferenceValue pv ON pv.id = pov.preferenceValueId
                                                           WHERE pv.preferenceId = p10.id
                                                             AND pv.relatedType =1
                                                             AND pv.relatedTypeId =varFirmId)
                                                   ELSE NULL
                                               END
             ELSE NULL
         END AS inheritedSelectedOptions,
         CASE
             WHEN inheritedValue IS NULL THEN FALSE
             ELSE TRUE
         END AS isInherited,
         CASE
             WHEN inheritedValue IS NULL THEN NULL
             ELSE CASE
                      WHEN inheritedFrom = 8 THEN 'Portfolio'
                      WHEN inheritedFrom = 16 THEN 'Model'
                      WHEN inheritedFrom = 4 THEN 'Team'
                      WHEN inheritedFrom = 2 THEN 'Custodian'
                      WHEN inheritedFrom = 1 THEN 'Firm'
                  END
         END AS inheritedFrom,
         CASE
             WHEN inheritedValue IS NULL THEN NULL
             ELSE CASE
                      WHEN inheritedFrom = 8 THEN varPortfolioName
                      WHEN inheritedFrom = 16 THEN varModelName
                      WHEN inheritedFrom = 4 THEN varTeamName
                      WHEN inheritedFrom = 2 THEN varCustodianName
                      WHEN inheritedFrom = 1 THEN ''
                  END
         END AS inheritedFromName,
         CASE
             WHEN inheritedValue IS NULL THEN NULL
             ELSE CASE
                      WHEN inheritedFrom = 8 THEN varPortfolioId
                      WHEN inheritedFrom = 16 THEN varModelId
                      WHEN inheritedFrom = 4 THEN varTeamId
                      WHEN inheritedFrom = 2 THEN varCustodianId
                      WHEN inheritedFrom = 1 THEN varFirmId
                  END
         END AS inheritedFromId
  FROM preference p10
  INNER JOIN
    (SELECT DISTINCT p9.id AS preferenceId,
                     VALUE,
                     IF(a =1 ,
                          (SELECT VALUE
                           FROM `preferenceValue` p6
                           WHERE `relatedType`=8
                             AND `relatedTypeId` = varPortfolioId
                             AND p6.preferenceId = p9.id) ,IF(EXISTS
                                                                (SELECT VALUE
                                                                 FROM `preferenceValue` p6
                                                                 WHERE `relatedType`=16
                                                                   AND `relatedTypeId` =varModelId
                                                                   AND p6.preferenceId = p9.id) =1,
                                                                (SELECT VALUE
                                                                 FROM `preferenceValue` p6
                                                                 WHERE `relatedType`=16
                                                                   AND `relatedTypeId` =varModelId
                                                                   AND p6.preferenceId = p9.id),IF(EXISTS
                                                                                                     (SELECT VALUE
                                                                                                      FROM `preferenceValue` p6
                                                                                                      WHERE `relatedType`=4
                                                                                                        AND `relatedTypeId` =varTeamId
                                                                                                        AND p6.preferenceId = p9.id) =1 ,
                                                                                                     (SELECT VALUE
                                                                                                      FROM `preferenceValue` p6
                                                                                                      WHERE `relatedType`=4
                                                                                                        AND `relatedTypeId` =varTeamId
                                                                                                        AND p6.preferenceId = p9.id), IF(EXISTS
                                                                                                                                           (SELECT VALUE
                                                                                                                                            FROM `preferenceValue` p6
                                                                                                                                            WHERE `relatedType`=2
                                                                                                                                              AND `relatedTypeId` =varCustodianId
                                                                                                                                              AND p6.preferenceId = p9.id) =1,
                                                                                                                                           (SELECT VALUE
                                                                                                                                            FROM `preferenceValue` p6
                                                                                                                                            WHERE `relatedType`=2
                                                                                                                                              AND `relatedTypeId` =varCustodianId
                                                                                                                                              AND p6.preferenceId = p9.id),
                                                                                                                                           (SELECT VALUE
                                                                                                                                            FROM `preferenceValue` p6
                                                                                                                                            WHERE `relatedType`=1
                                                                                                                                              AND `relatedTypeId` =varFirmId
                                                                                                                                              AND p6.preferenceId = p9.id))))) AS inheritedValue,
                     IF(a =1 ,
                          (SELECT relatedType
                           FROM `preferenceValue` p6
                           WHERE `relatedType`=8
                             AND `relatedTypeId` = varPortfolioId
                             AND p6.preferenceId = p9.id) ,IF(EXISTS
                                                                (SELECT VALUE
                                                                 FROM `preferenceValue` p6
                                                                 WHERE `relatedType`=16
                                                                   AND `relatedTypeId` =varModelId
                                                                   AND p6.preferenceId = p9.id) =1,
                                                                (SELECT relatedType
                                                                 FROM `preferenceValue` p6
                                                                 WHERE `relatedType`=16
                                                                   AND `relatedTypeId` =varModelId
                                                                   AND p6.preferenceId = p9.id),IF(EXISTS
                                                                                                     (SELECT VALUE
                                                                                                      FROM `preferenceValue` p6
                                                                                                      WHERE `relatedType`=4
                                                                                                        AND `relatedTypeId` =varTeamId
                                                                                                        AND p6.preferenceId = p9.id) =1 ,
                                                                                                     (SELECT relatedType
                                                                                                      FROM `preferenceValue` p6
                                                                                                      WHERE `relatedType`=4
                                                                                                        AND `relatedTypeId` =varTeamId
                                                                                                        AND p6.preferenceId = p9.id), IF(EXISTS
                                                                                                                                           (SELECT VALUE
                                                                                                                                            FROM `preferenceValue` p6
                                                                                                                                            WHERE `relatedType`=2
                                                                                                                                              AND `relatedTypeId` =varCustodianId
                                                                                                                                              AND p6.preferenceId = p9.id) =1,
                                                                                                                                           (SELECT relatedType
                                                                                                                                            FROM `preferenceValue` p6
                                                                                                                                            WHERE `relatedType`=2
                                                                                                                                              AND `relatedTypeId` =varCustodianId
                                                                                                                                              AND p6.preferenceId = p9.id),
                                                                                                                                           (SELECT relatedType
                                                                                                                                            FROM `preferenceValue` p6
                                                                                                                                            WHERE `relatedType`=1
                                                                                                                                              AND `relatedTypeId` =varFirmId
                                                                                                                                              AND p6.preferenceId = p9.id))))) AS inheritedFrom,
                     t2.`name` AS NAME,
                     t2.categoryType AS categoryType,
                     t2.displayOrder AS displayOrder,
                     t2.dataType AS dataType,
                     t2.symbol AS symbol,
                     t2.OPTIONS AS OPTIONS,
                     t2.selectedOptions AS selectedOptions
     FROM preference p9
     INNER JOIN
       (SELECT DISTINCT p7.id AS preferenceId,
                        t1.VALUE AS VALUE,
          (SELECT COUNT(1)
           FROM `preferenceValue` p6
           WHERE `relatedType`= 8
             AND `relatedTypeId` =varPortfolioId
             AND p6.preferenceId = p7.id) AS a,
                        p7.`name` AS NAME,
                        pc.name AS categoryType,
                        pc.displayOrder AS displayOrder,
                        p7.dataType AS dataType,
                        p7.symbol AS symbol,
                        CASE
                            WHEN p7.dataType = 'OptionList'
                                 OR p7.dataType = 'List' THEN
                                   (SELECT GROUP_CONCAT(po.id, ":", po.optionName)
                                    FROM preferenceOption po
                                    WHERE po.preferenceId = p7.id )
                            ELSE NULL
                        END AS OPTIONS,
                        CASE
                            WHEN p7.dataType = 'OptionList'
                                 OR p7.dataType = 'List' THEN
                                   (SELECT GROUP_CONCAT(pov.preferenceOptionId,":", pov.prefOrder)
                                    FROM preferenceOptionValue pov
                                    INNER JOIN preferenceValue pv ON pv.id = pov.preferenceValueId
                                    WHERE pv.preferenceId = p7.id
                                      AND pv.relatedType =varRecordType
                                      AND pv.relatedTypeId =varRecordTypeID)
                            ELSE NULL
                        END AS selectedOptions
        FROM preference p7
        INNER JOIN preferenceCategory pc ON p7.categoryId = pc.id
        LEFT OUTER JOIN
          (SELECT preferenceId,
                  CASE
                      WHEN EXISTS
                             (SELECT VALUE
                              FROM `preferenceValue` p8
                              WHERE `relatedType`=varRecordType
                                AND `relatedTypeId` =varRecordTypeID
                                AND p8.`preferenceId`=p1.preferenceid) THEN VALUE
                      ELSE NULL
                  END AS VALUE
           FROM `preferenceValue` p1
           WHERE `relatedType`=varRecordType
             AND `relatedTypeId` =varRecordTypeID
             AND `preferenceId` IN
               (SELECT id
                FROM preference
                WHERE (allowedRecordTypes & varRecordType) = varRecordType ) ) t1 ON p7.id = t1.preferenceId
        WHERE p7.id IN
            (SELECT id
             FROM preference
             WHERE (allowedRecordTypes & varRecordType) = varRecordType ) ) t2 ON p9.id =t2.preferenceId
     WHERE p9.id IN
         (SELECT id
          FROM preference
          WHERE (allowedRecordTypes & varRecordType) = varRecordType )) t3 ON p10.id = t3.preferenceId WHERE p10.id IN
    (SELECT id
     FROM preference
     WHERE (allowedRecordTypes & varRecordType) = varRecordType );
	 END IF; 
	 END */$$
DELIMITER ;

/* Procedure structure for procedure `getSecurityPreferenceValue` */

/*!50003 DROP PROCEDURE IF EXISTS  `getSecurityPreferenceValue` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` PROCEDURE `getSecurityPreferenceValue`(varUserId INT , varPreferenceValueId INT , varFirmId INT)
BEGIN 
  ##    -- Author: Ashutosh Verma --## 
  ##    -- Created ON: 26th August,2016 --## 
  ##    -- CALL  getSecurityPreferenceValue (1,159,999) ---## 
  ## -----  user_id , PreferenceValueId , firmId  will be passed as a parameter. 
  ## ----- SP to fetch security setting preference value for a preference value Id-----## 
  ## -----SQL query to fetch security setting preference value for a preference value Id-----# 
DECLARE varPreferenceId INT ; 
DECLARE varRelatedType INT ; 
DECLARE varRelatedTypeId INT ;
DECLARE varPortfolioId INT; 
DECLARE varModelId INT; 
DECLARE varTeamId INT;
DECLARE varCustodianId INT;
SET SESSION group_concat_max_len = 8000;
SELECT 
    preferenceId, relatedType, relatedTypeId
INTO varPreferenceId , varRelatedType , varRelatedTypeId FROM
    preferenceValue
WHERE
    id = varPreferenceValueId AND isDeleted = 0;
	
SET @preferenceSQL = NULL;
SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'MAX(case when ssp1.name = ''',
      `name`, ''' then t1.value  end) AS `' ,
    `name`,'`'
    )
  ) INTO @preferenceSQL
FROM
(
  SELECT `name`
  FROM securitySettingPreferences ssp1 WHERE 
  ssp1.allowedRecordTypes !=0 
  
  /*(ssp1.allowedRecordTypes & varRelatedType) = varRelatedType */
  ORDER BY `name`
) inn;
	
IF (varRelatedType IN (4,
                                                        2,
                                                        8)) THEN
	
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.name = ''',
		  `name`, ''' then getInheritedValue(sspv.securityId,ssp1.id,', varFirmId,',', varPreferenceId,', sspv.custodianSecuritySymbolId) end) AS `' ,
		`name`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `name`
	  FROM securitySettingPreferences ssp1 WHERE   ssp1.allowedRecordTypes !=0 
  
  /*(ssp1.allowedRecordTypes & varRelatedType) = varRelatedType */
	  ORDER BY `name`
	) inn;
	
	SET @SQL = CONCAT(' SELECT -- ssp1.id AS securitySettingPreferenceId,
         sspv.securityId AS securityId,
         s.name AS securityName,
         st.name AS securityType,
		 s.symbol AS symbol,
         sspv.custodianSecuritySymbolId,
    --     ssp1.group AS `group`,
		 ' ,@preferenceSQL,',
    --     ssp1.name AS securitySettingPreferenceName,
    --     sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
    --     t1.value,
      --  getInheritedValue(sspv.securityId,ssp1.id,', varFirmId,',', varPreferenceId,', sspv.custodianSecuritySymbolId) AS inheritedValue
	   ',@inheritedPreferenceSQL,'
  FROM securitySettingPreferences ssp1
  CROSS JOIN securitySettingPreferenceValue sspv
  -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
  INNER JOIN `security` s ON sspv.securityId = s.id  AND s.isDeleted = 0 
  INNER JOIN securityType st ON s.securityTypeId = st.id AND st.isDeleted = 0 
  LEFT OUTER JOIN
    (SELECT sspv.securitySettingPreferenceId,
            sspv.value AS VALUE
     FROM securitySettingPreferenceValue sspv
     -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
     WHERE sspv.preferenceValueId = ',varPreferenceValueId ,' ) t1 ON ssp1.id = t1.securitySettingPreferenceId
  WHERE 
  
  ssp1.allowedRecordTypes !=0 AND  
  /*(ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType,'
    AND */ sspv.preferenceValueId = ',varPreferenceValueId , '
	 GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	 
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;	 
	
	ELSEIF (varRelatedType = 1) THEN
	
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.name = ''',
		  `name`, ''' then NULL END) AS `' ,
		`name`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `name`
	  FROM securitySettingPreferences ssp1 WHERE   ssp1.allowedRecordTypes !=0 
  
  /*(ssp1.allowedRecordTypes & varRelatedType) = varRelatedType */
	  ORDER BY `name`
	) inn;
	SET @SQL = CONCAT('  SELECT -- ssp1.id AS securitySettingPreferenceId,
           sspv.securityId AS securityId,
           s.name AS securityName,
           st.name AS securityType,
		   s.symbol AS symbol,
           sspv.custodianSecuritySymbolId,
 --          ssp1.group AS `group`,
 --          ssp1.name AS securitySettingPreferenceName,
		   ' ,@preferenceSQL,',
 --          sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
 --          t1.value,
--           NULL AS inheritedValue
		   ',@inheritedPreferenceSQL,'
    FROM securitySettingPreferences ssp1
    CROSS JOIN securitySettingPreferenceValue sspv
    -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
    INNER JOIN `security` s ON sspv.securityId = s.id  AND s.isDeleted = 0 
    INNER JOIN securityType st ON s.securityTypeId = st.id AND st.isDeleted = 0 
    LEFT OUTER JOIN
      (SELECT sspv.securitySettingPreferenceId,
              sspv.value AS VALUE
       FROM securitySettingPreferenceValue sspv
       -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
       WHERE sspv.preferenceValueId = ',varPreferenceValueId,' ) t1 ON ssp1.id = t1.securitySettingPreferenceId WHERE 
	   
	   ssp1.allowedRecordTypes !=0 AND  
	   /* (ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType,'
     AND */ sspv.preferenceValueId = ',varPreferenceValueId, '
	 GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	
	ELSEIF (varRelatedType = 16) THEN
    SELECT IFNULL(modelId,-1) INTO varModelId
    FROM portfolio WHERE id = varRelatedTypeId;
SELECT 
    teamId
INTO varTeamId FROM
    teamPortfolioAccess
WHERE
    isPrimary = 1
        AND portfolioId = varRelatedTypeId;
		SET varTeamId = IFNULL(varTeamId,-1);
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.name = ''',`name`, ''' then getInheritedValuePortFolio(sspv.securityId,ssp1.id,',varModelId,',',varTeamId,',',varFirmId,',',varPreferenceId,',','sspv.custodianSecuritySymbolId)END) AS `' ,`name`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `name`
	  FROM securitySettingPreferences ssp1 WHERE   ssp1.allowedRecordTypes !=0 
  
  /*(ssp1.allowedRecordTypes & varRelatedType) = varRelatedType */
	  ORDER BY `name`
	) inn;
SET @SQL = CONCAT('SELECT 
--    ssp1.id AS securitySettingPreferenceId,
    sspv.securityId AS securityId,
    s.name AS securityName,
    st.name AS securityType,
	s.symbol AS symbol,
    sspv.custodianSecuritySymbolId,
--    ssp1.group AS `group`,
	' ,@preferenceSQL,',
--    ssp1.name AS securitySettingPreferenceName,
--    sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
--    t1.value,
/*    getInheritedValuePortFolio(sspv.securityId,
            ssp1.id,
            varModelId,
            varTeamId,
            varFirmId,
            varPreferenceId,
            sspv.custodianSecuritySymbolId) AS inheritedValue */
	',@inheritedPreferenceSQL,'
FROM
    securitySettingPreferences ssp1
        CROSS JOIN
    securitySettingPreferenceValue sspv
       /* INNER JOIN
    securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */
        INNER JOIN
    `security` s ON sspv.securityId = s.id AND s.isDeleted = 0 
        INNER JOIN
    securityType st ON s.securityTypeId = st.id AND st.isDeleted = 0 
        LEFT OUTER JOIN
    (SELECT 
        sspv.securitySettingPreferenceId, sspv.value AS VALUE
    FROM
        securitySettingPreferenceValue sspv
    -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
    WHERE
        sspv.preferenceValueId = ',varPreferenceValueId,') t1 ON ssp1.id = t1.securitySettingPreferenceId
WHERE
ssp1.allowedRecordTypes !=0 AND  
    /*(ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType
        ,' AND */ sspv.preferenceValueId = ',varPreferenceValueId,
		' GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	 
	# SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;	  
	
	ELSEIF (varRelatedType = 32) THEN
    SELECT portfolioId,
           custodianId INTO varPortfolioId,
                            varCustodianId
    FROM account WHERE id = varRelatedTypeId;
SELECT 
    IFNULL(modelId,-1)
INTO varModelId FROM
    portfolio
WHERE
    id = varPortfolioId;
SELECT 
    teamId
INTO varTeamId FROM
    teamPortfolioAccess
WHERE
    isPrimary = 1
        AND portfolioId = varPortfolioId;
	
	SET varPortfolioId = IFNULL(varPortfolioId,-1);
	SET varCustodianId = IFNULL(varCustodianId,-1);
	SET varTeamId = IFNULL(varTeamId,-1);
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.name = ''',
		  `name`, ''' then getInheritedValueAccount(sspv.securityId,
												ssp1.id,',
												varPortfolioId,',',
												varCustodianId,',',
												varModelId,',',
												varTeamId,',',
												varFirmId,',',
												varPreferenceId,',','
												sspv.custodianSecuritySymbolId) END) AS `' ,
		`name`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `name`
	  FROM securitySettingPreferences ssp1 WHERE   ssp1.allowedRecordTypes !=0 
  
  /*(ssp1.allowedRecordTypes & varRelatedType) = varRelatedType */
	  ORDER BY `name`
	) inn;
	# select @inheritedPreferenceSQL;
SET @SQL = CONCAT('
SELECT 
--    ssp1.id AS securitySettingPreferenceId,
    sspv.securityId AS securityId,
    s.name AS securityName,
    st.name AS securityType,
	s.symbol AS symbol,
    sspv.custodianSecuritySymbolId,
--    ssp1.group AS `group`,
--    ssp1.name AS securitySettingPreferenceName,
	' ,@preferenceSQL,',
--    sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
--    t1.value,
 /*   getInheritedValueAccount(sspv.securityId,
            ssp1.id,
            varPortfolioId,
            varCustodianId,
            varModelId,
            varTeamId,
            varFirmId,
            varPreferenceId,
            sspv.custodianSecuritySymbolId) AS inheritedValue */
		',@inheritedPreferenceSQL,'
FROM
    securitySettingPreferences ssp1
        CROSS JOIN
    securitySettingPreferenceValue sspv
        /* INNER JOIN
    securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */
        INNER JOIN
    `security` s ON sspv.securityId = s.id AND s.isDeleted = 0 
        INNER JOIN
    securityType st ON s.securityTypeId = st.id AND st.isDeleted = 0 
        LEFT OUTER JOIN
    (SELECT 
        sspv.securitySettingPreferenceId, sspv.value AS VALUE
    FROM
        securitySettingPreferenceValue sspv
    -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
    WHERE
        sspv.preferenceValueId = ',varPreferenceValueId,') t1 ON ssp1.id = t1.securitySettingPreferenceId
WHERE
ssp1.allowedRecordTypes !=0 AND  
    /* (ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType
       ,' AND */ sspv.preferenceValueId = ',varPreferenceValueId ,
		' GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	# SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;		
END IF; 
SET SESSION group_concat_max_len = 1024;		
END */$$
DELIMITER ;

/* Procedure structure for procedure `getSecurityPreferenceValueBackup` */

/*!50003 DROP PROCEDURE IF EXISTS  `getSecurityPreferenceValueBackup` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` PROCEDURE `getSecurityPreferenceValueBackup`(varUserId INT , varPreferenceValueId INT , varFirmId INT)
BEGIN 
  ##    -- Author: Ashutosh Verma --## 
  ##    -- Created ON: 26th August,2016 --## 
  ##    -- CALL  getSecurityPreferenceValue (1,159,999) ---## 
  ## -----  user_id , PreferenceValueId , firmId  will be passed as a parameter. 
  ## ----- SP to fetch security setting preference value for a preference value Id-----## 
  ## -----SQL query to fetch security setting preference value for a preference value Id-----# 
DECLARE varPreferenceId INT ; 
DECLARE varRelatedType INT ; 
DECLARE varRelatedTypeId INT ;
DECLARE varPortfolioId INT; 
DECLARE varModelId INT; 
DECLARE varTeamId INT;
DECLARE varCustodianId INT;
SET SESSION group_concat_max_len = 8000;
SELECT 
    preferenceId, relatedType, relatedTypeId
INTO varPreferenceId , varRelatedType , varRelatedTypeId FROM
    preferenceValue
WHERE
    id = varPreferenceValueId;
	
SET @preferenceSQL = NULL;
SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'MAX(case when ssp1.displayName = ''',
      `displayName`, ''' then t1.value  end) AS `' ,
    `displayName`,'`'
    )
  ) INTO @preferenceSQL
FROM
(
  SELECT `displayName`
  FROM securitySettingPreferences ssp1 WHERE (ssp1.allowedRecordTypes & varRelatedType) = varRelatedType
  ORDER BY `displayName`
) inn;
	
IF (varRelatedType IN (4,
                                                        2,
                                                        16)) THEN
	
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.displayName = ''',
		  `displayName`, ''' then getInheritedValue(sspv.securityId,ssp1.id,', varFirmId,',', varPreferenceId,', sspv.custodianSecuritySymbolId) end) AS `' ,
		`displayName`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `displayName`
	  FROM securitySettingPreferences ssp1 WHERE (ssp1.allowedRecordTypes & varRelatedType) = varRelatedType
	  ORDER BY `displayName`
	) inn;
	
	SET @SQL = CONCAT(' SELECT -- ssp1.id AS securitySettingPreferenceId,
         sspv.securityId AS securityId,
         s.name AS securityName,
         st.name AS securityType,
		 s.symbol AS symbol,
         sspv.custodianSecuritySymbolId,
    --     ssp1.group AS `group`,
		 ' ,@preferenceSQL,',
    --     ssp1.name AS securitySettingPreferenceName,
    --     sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
    --     t1.value,
      --  getInheritedValue(sspv.securityId,ssp1.id,', varFirmId,',', varPreferenceId,', sspv.custodianSecuritySymbolId) AS inheritedValue
	   ',@inheritedPreferenceSQL,'
  FROM securitySettingPreferences ssp1
  CROSS JOIN securitySettingPreferenceValue sspv
  INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
  INNER JOIN `security` s ON sspv.securityId = s.id
  INNER JOIN securityType st ON s.securityTypeId = st.id
  LEFT OUTER JOIN
    (SELECT sspv.securitySettingPreferenceId,
            sspo.value AS VALUE
     FROM securitySettingPreferenceValue sspv
     INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
     WHERE sspv.preferenceValueId = ',varPreferenceValueId ,' ) t1 ON ssp1.id = t1.securitySettingPreferenceId
  WHERE (ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType,'
    AND sspv.preferenceValueId = ',varPreferenceValueId , '
	 GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	 
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;	 
	
	ELSEIF (varRelatedType = 1) THEN
	
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.displayName = ''',
		  `displayName`, ''' then NULL END) AS `' ,
		`displayName`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `displayName`
	  FROM securitySettingPreferences ssp1 WHERE (ssp1.allowedRecordTypes & varRelatedType) = varRelatedType
	  ORDER BY `displayName`
	) inn;
	
	SET @SQL = CONCAT('  SELECT -- ssp1.id AS securitySettingPreferenceId,
           sspv.securityId AS securityId,
           s.name AS securityName,
           st.name AS securityType,
		   s.symbol AS symbol,
           sspv.custodianSecuritySymbolId,
 --          ssp1.group AS `group`,
 --          ssp1.name AS securitySettingPreferenceName,
		   ' ,@preferenceSQL,',
 --          sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
 --          t1.value,
--           NULL AS inheritedValue
		   ',@inheritedPreferenceSQL,'
    FROM securitySettingPreferences ssp1
    CROSS JOIN securitySettingPreferenceValue sspv
    INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
    INNER JOIN `security` s ON sspv.securityId = s.id
    INNER JOIN securityType st ON s.securityTypeId = st.id
    LEFT OUTER JOIN
      (SELECT sspv.securitySettingPreferenceId,
              sspo.value AS VALUE
       FROM securitySettingPreferenceValue sspv
       INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
       WHERE sspv.preferenceValueId = ',varPreferenceValueId,' ) t1 ON ssp1.id = t1.securitySettingPreferenceId WHERE (ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType,'
     AND sspv.preferenceValueId = ',varPreferenceValueId, '
	 GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	
	ELSEIF (varRelatedType = 8) THEN
    SELECT IFNULL(modelId,-1) INTO varModelId
    FROM portfolio WHERE id = varRelatedTypeId;
SELECT 
    teamId
INTO varTeamId FROM
    teamPortfolioAccess
WHERE
    isPrimary = 1
        AND portfolioId = varRelatedTypeId;
		
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.displayName = ''',`displayName`, ''' then getInheritedValuePortFolio(sspv.securityId,ssp1.id,',varModelId,',',varTeamId,',',varFirmId,',',varPreferenceId,',','sspv.custodianSecuritySymbolId)END) AS `' ,`displayName`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `displayName`
	  FROM securitySettingPreferences ssp1 WHERE (ssp1.allowedRecordTypes & varRelatedType) = varRelatedType
	  ORDER BY `displayName`
	) inn;
	
SET @SQL = CONCAT('SELECT 
--    ssp1.id AS securitySettingPreferenceId,
    sspv.securityId AS securityId,
    s.name AS securityName,
    st.name AS securityType,
	s.symbol AS symbol,
    sspv.custodianSecuritySymbolId,
--    ssp1.group AS `group`,
	' ,@preferenceSQL,',
--    ssp1.name AS securitySettingPreferenceName,
--    sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
--    t1.value,
/*    getInheritedValuePortFolio(sspv.securityId,
            ssp1.id,
            varModelId,
            varTeamId,
            varFirmId,
            varPreferenceId,
            sspv.custodianSecuritySymbolId) AS inheritedValue */
	',@inheritedPreferenceSQL,'
FROM
    securitySettingPreferences ssp1
        CROSS JOIN
    securitySettingPreferenceValue sspv
        INNER JOIN
    securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
        INNER JOIN
    `security` s ON sspv.securityId = s.id
        INNER JOIN
    securityType st ON s.securityTypeId = st.id
        LEFT OUTER JOIN
    (SELECT 
        sspv.securitySettingPreferenceId, sspo.value AS VALUE
    FROM
        securitySettingPreferenceValue sspv
    INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
    WHERE
        sspv.preferenceValueId = ',varPreferenceValueId,') t1 ON ssp1.id = t1.securitySettingPreferenceId
WHERE
    (ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType
        ,' AND sspv.preferenceValueId = ',varPreferenceValueId,
		' GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	 
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;	  
	
	ELSEIF (varRelatedType = 32) THEN
    SELECT portfolioId,
           custodianId INTO varPortfolioId,
                            varCustodianId
    FROM account WHERE id = varRelatedTypeId;
SELECT 
    IFNULL(modelId,-1)
INTO varModelId FROM
    portfolio
WHERE
    id = varPortfolioId;
SELECT 
    teamId
INTO varTeamId FROM
    teamPortfolioAccess
WHERE
    isPrimary = 1
        AND portfolioId = varPortfolioId;
	
	SET varPortfolioId = IFNULL(varPortfolioId,-1);
	SET varCustodianId = IFNULL(varCustodianId,-1);
	
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.displayName = ''',
		  `displayName`, ''' then getInheritedValueAccount(sspv.securityId,
												ssp1.id,',
												varPortfolioId,',',
												varCustodianId,',',
												varModelId,',',
												varTeamId,',',
												varFirmId,',',
												varPreferenceId,',','
												sspv.custodianSecuritySymbolId) END) AS `' ,
		`displayName`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `displayName`
	  FROM securitySettingPreferences ssp1 WHERE (ssp1.allowedRecordTypes & varRelatedType) = varRelatedType
	  ORDER BY `displayName`
	) inn;
	
SET @SQL = CONCAT('
SELECT 
--    ssp1.id AS securitySettingPreferenceId,
    sspv.securityId AS securityId,
    s.name AS securityName,
    st.name AS securityType,
	s.symbol AS symbol,
    sspv.custodianSecuritySymbolId,
--    ssp1.group AS `group`,
--    ssp1.name AS securitySettingPreferenceName,
	' ,@preferenceSQL,',
--    sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
--    t1.value,
 /*   getInheritedValueAccount(sspv.securityId,
            ssp1.id,
            varPortfolioId,
            varCustodianId,
            varModelId,
            varTeamId,
            varFirmId,
            varPreferenceId,
            sspv.custodianSecuritySymbolId) AS inheritedValue */
		',@inheritedPreferenceSQL,'
FROM
    securitySettingPreferences ssp1
        CROSS JOIN
    securitySettingPreferenceValue sspv
        INNER JOIN
    securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
        INNER JOIN
    `security` s ON sspv.securityId = s.id
        INNER JOIN
    securityType st ON s.securityTypeId = st.id
        LEFT OUTER JOIN
    (SELECT 
        sspv.securitySettingPreferenceId, sspo.value AS VALUE
    FROM
        securitySettingPreferenceValue sspv
    INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
    WHERE
        sspv.preferenceValueId = ',varPreferenceValueId,') t1 ON ssp1.id = t1.securitySettingPreferenceId
WHERE
    (ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType
       ,' AND sspv.preferenceValueId = ',varPreferenceValueId ,
		' GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;		
END IF; 
SET SESSION group_concat_max_len = 1024;		
END */$$
DELIMITER ;

/* Procedure structure for procedure `getSecurityPreferenceValueBackup7thSep` */

/*!50003 DROP PROCEDURE IF EXISTS  `getSecurityPreferenceValueBackup7thSep` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` PROCEDURE `getSecurityPreferenceValueBackup7thSep`(varUserId INT , varPreferenceValueId INT , varFirmId INT)
BEGIN 
  ##    -- Author: Ashutosh Verma --## 
  ##    -- Created ON: 26th August,2016 --## 
  ##    -- CALL  getSecurityPreferenceValue (1,159,999) ---## 
  ## -----  user_id , PreferenceValueId , firmId  will be passed as a parameter. 
  ## ----- SP to fetch security setting preference value for a preference value Id-----## 
  ## -----SQL query to fetch security setting preference value for a preference value Id-----# 
DECLARE varPreferenceId INT ; 
DECLARE varRelatedType INT ; 
DECLARE varRelatedTypeId INT ;
DECLARE varPortfolioId INT; 
DECLARE varModelId INT; 
DECLARE varTeamId INT;
DECLARE varCustodianId INT;
SET SESSION group_concat_max_len = 8000;
SELECT 
    preferenceId, relatedType, relatedTypeId
INTO varPreferenceId , varRelatedType , varRelatedTypeId FROM
    preferenceValue
WHERE
    id = varPreferenceValueId;
	
SET @preferenceSQL = NULL;
SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'MAX(case when ssp1.displayName = ''',
      `displayName`, ''' then t1.value  end) AS `' ,
    `displayName`,'`'
    )
  ) INTO @preferenceSQL
FROM
(
  SELECT `displayName`
  FROM securitySettingPreferences ssp1 WHERE (ssp1.allowedRecordTypes & varRelatedType) = varRelatedType
  ORDER BY `displayName`
) inn;
	
IF (varRelatedType IN (4,
                                                        2,
                                                        16)) THEN
	
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.displayName = ''',
		  `displayName`, ''' then getInheritedValue(sspv.securityId,ssp1.id,', varFirmId,',', varPreferenceId,', sspv.custodianSecuritySymbolId) end) AS `' ,
		`displayName`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `displayName`
	  FROM securitySettingPreferences ssp1 WHERE (ssp1.allowedRecordTypes & varRelatedType) = varRelatedType
	  ORDER BY `displayName`
	) inn;
	
	SET @SQL = CONCAT(' SELECT -- ssp1.id AS securitySettingPreferenceId,
         sspv.securityId AS securityId,
         s.name AS securityName,
         st.name AS securityType,
		 s.symbol AS symbol,
         sspv.custodianSecuritySymbolId,
    --     ssp1.group AS `group`,
		 ' ,@preferenceSQL,',
    --     ssp1.name AS securitySettingPreferenceName,
    --     sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
    --     t1.value,
      --  getInheritedValue(sspv.securityId,ssp1.id,', varFirmId,',', varPreferenceId,', sspv.custodianSecuritySymbolId) AS inheritedValue
	   ',@inheritedPreferenceSQL,'
  FROM securitySettingPreferences ssp1
  CROSS JOIN securitySettingPreferenceValue sspv
  -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
  INNER JOIN `security` s ON sspv.securityId = s.id
  INNER JOIN securityType st ON s.securityTypeId = st.id
  LEFT OUTER JOIN
    (SELECT sspv.securitySettingPreferenceId,
            sspv.value AS VALUE
     FROM securitySettingPreferenceValue sspv
     -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
     WHERE sspv.preferenceValueId = ',varPreferenceValueId ,' ) t1 ON ssp1.id = t1.securitySettingPreferenceId
  WHERE (ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType,'
    AND sspv.preferenceValueId = ',varPreferenceValueId , '
	 GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	 
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;	 
	
	ELSEIF (varRelatedType = 1) THEN
	
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.displayName = ''',
		  `displayName`, ''' then NULL END) AS `' ,
		`displayName`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `displayName`
	  FROM securitySettingPreferences ssp1 WHERE (ssp1.allowedRecordTypes & varRelatedType) = varRelatedType
	  ORDER BY `displayName`
	) inn;
	
	SET @SQL = CONCAT('  SELECT -- ssp1.id AS securitySettingPreferenceId,
           sspv.securityId AS securityId,
           s.name AS securityName,
           st.name AS securityType,
		   s.symbol AS symbol,
           sspv.custodianSecuritySymbolId,
 --          ssp1.group AS `group`,
 --          ssp1.name AS securitySettingPreferenceName,
		   ' ,@preferenceSQL,',
 --          sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
 --          t1.value,
--           NULL AS inheritedValue
		   ',@inheritedPreferenceSQL,'
    FROM securitySettingPreferences ssp1
    CROSS JOIN securitySettingPreferenceValue sspv
    -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
    INNER JOIN `security` s ON sspv.securityId = s.id
    INNER JOIN securityType st ON s.securityTypeId = st.id
    LEFT OUTER JOIN
      (SELECT sspv.securitySettingPreferenceId,
              sspv.value AS VALUE
       FROM securitySettingPreferenceValue sspv
       -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
       WHERE sspv.preferenceValueId = ',varPreferenceValueId,' ) t1 ON ssp1.id = t1.securitySettingPreferenceId WHERE (ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType,'
     AND sspv.preferenceValueId = ',varPreferenceValueId, '
	 GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	
	ELSEIF (varRelatedType = 8) THEN
    SELECT IFNULL(modelId,-1) INTO varModelId
    FROM portfolio WHERE id = varRelatedTypeId;
SELECT 
    teamId
INTO varTeamId FROM
    teamPortfolioAccess
WHERE
    isPrimary = 1
        AND portfolioId = varRelatedTypeId;
		
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.displayName = ''',`displayName`, ''' then getInheritedValuePortFolio(sspv.securityId,ssp1.id,',varModelId,',',varTeamId,',',varFirmId,',',varPreferenceId,',','sspv.custodianSecuritySymbolId)END) AS `' ,`displayName`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `displayName`
	  FROM securitySettingPreferences ssp1 WHERE (ssp1.allowedRecordTypes & varRelatedType) = varRelatedType
	  ORDER BY `displayName`
	) inn;
	
SET @SQL = CONCAT('SELECT 
--    ssp1.id AS securitySettingPreferenceId,
    sspv.securityId AS securityId,
    s.name AS securityName,
    st.name AS securityType,
	s.symbol AS symbol,
    sspv.custodianSecuritySymbolId,
--    ssp1.group AS `group`,
	' ,@preferenceSQL,',
--    ssp1.name AS securitySettingPreferenceName,
--    sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
--    t1.value,
/*    getInheritedValuePortFolio(sspv.securityId,
            ssp1.id,
            varModelId,
            varTeamId,
            varFirmId,
            varPreferenceId,
            sspv.custodianSecuritySymbolId) AS inheritedValue */
	',@inheritedPreferenceSQL,'
FROM
    securitySettingPreferences ssp1
        CROSS JOIN
    securitySettingPreferenceValue sspv
       /* INNER JOIN
    securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */
        INNER JOIN
    `security` s ON sspv.securityId = s.id
        INNER JOIN
    securityType st ON s.securityTypeId = st.id
        LEFT OUTER JOIN
    (SELECT 
        sspv.securitySettingPreferenceId, sspv.value AS VALUE
    FROM
        securitySettingPreferenceValue sspv
    -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
    WHERE
        sspv.preferenceValueId = ',varPreferenceValueId,') t1 ON ssp1.id = t1.securitySettingPreferenceId
WHERE
    (ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType
        ,' AND sspv.preferenceValueId = ',varPreferenceValueId,
		' GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	 
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;	  
	
	ELSEIF (varRelatedType = 32) THEN
    SELECT portfolioId,
           custodianId INTO varPortfolioId,
                            varCustodianId
    FROM account WHERE id = varRelatedTypeId;
SELECT 
    IFNULL(modelId,-1)
INTO varModelId FROM
    portfolio
WHERE
    id = varPortfolioId;
SELECT 
    teamId
INTO varTeamId FROM
    teamPortfolioAccess
WHERE
    isPrimary = 1
        AND portfolioId = varPortfolioId;
	
	SET varPortfolioId = IFNULL(varPortfolioId,-1);
	SET varCustodianId = IFNULL(varCustodianId,-1);
	
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.displayName = ''',
		  `displayName`, ''' then getInheritedValueAccount(sspv.securityId,
												ssp1.id,',
												varPortfolioId,',',
												varCustodianId,',',
												varModelId,',',
												varTeamId,',',
												varFirmId,',',
												varPreferenceId,',','
												sspv.custodianSecuritySymbolId) END) AS `' ,
		`displayName`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `displayName`
	  FROM securitySettingPreferences ssp1 WHERE (ssp1.allowedRecordTypes & varRelatedType) = varRelatedType
	  ORDER BY `displayName`
	) inn;
	
SET @SQL = CONCAT('
SELECT 
--    ssp1.id AS securitySettingPreferenceId,
    sspv.securityId AS securityId,
    s.name AS securityName,
    st.name AS securityType,
	s.symbol AS symbol,
    sspv.custodianSecuritySymbolId,
--    ssp1.group AS `group`,
--    ssp1.name AS securitySettingPreferenceName,
	' ,@preferenceSQL,',
--    sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
--    t1.value,
 /*   getInheritedValueAccount(sspv.securityId,
            ssp1.id,
            varPortfolioId,
            varCustodianId,
            varModelId,
            varTeamId,
            varFirmId,
            varPreferenceId,
            sspv.custodianSecuritySymbolId) AS inheritedValue */
		',@inheritedPreferenceSQL,'
FROM
    securitySettingPreferences ssp1
        CROSS JOIN
    securitySettingPreferenceValue sspv
        /* INNER JOIN
    securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */
        INNER JOIN
    `security` s ON sspv.securityId = s.id
        INNER JOIN
    securityType st ON s.securityTypeId = st.id
        LEFT OUTER JOIN
    (SELECT 
        sspv.securitySettingPreferenceId, sspv.value AS VALUE
    FROM
        securitySettingPreferenceValue sspv
    -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
    WHERE
        sspv.preferenceValueId = ',varPreferenceValueId,') t1 ON ssp1.id = t1.securitySettingPreferenceId
WHERE
    (ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType
       ,' AND sspv.preferenceValueId = ',varPreferenceValueId ,
		' GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;		
END IF; 
SET SESSION group_concat_max_len = 1024;		
END */$$
DELIMITER ;

/* Procedure structure for procedure `getSecurityPreferenceValueBackup8thSep` */

/*!50003 DROP PROCEDURE IF EXISTS  `getSecurityPreferenceValueBackup8thSep` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` PROCEDURE `getSecurityPreferenceValueBackup8thSep`(varUserId INT , varPreferenceValueId INT , varFirmId INT)
BEGIN 
  ##    -- Author: Ashutosh Verma --## 
  ##    -- Created ON: 26th August,2016 --## 
  ##    -- CALL  getSecurityPreferenceValue (1,159,999) ---## 
  ## -----  user_id , PreferenceValueId , firmId  will be passed as a parameter. 
  ## ----- SP to fetch security setting preference value for a preference value Id-----## 
  ## -----SQL query to fetch security setting preference value for a preference value Id-----# 
DECLARE varPreferenceId INT ; 
DECLARE varRelatedType INT ; 
DECLARE varRelatedTypeId INT ;
DECLARE varPortfolioId INT; 
DECLARE varModelId INT; 
DECLARE varTeamId INT;
DECLARE varCustodianId INT;
SET SESSION group_concat_max_len = 8000;
SELECT 
    preferenceId, relatedType, relatedTypeId
INTO varPreferenceId , varRelatedType , varRelatedTypeId FROM
    preferenceValue
WHERE
    id = varPreferenceValueId;
	
SET @preferenceSQL = NULL;
SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'MAX(case when ssp1.displayName = ''',
      `displayName`, ''' then t1.value  end) AS `' ,
    `displayName`,'`'
    )
  ) INTO @preferenceSQL
FROM
(
  SELECT `displayName`
  FROM securitySettingPreferences ssp1 WHERE 
  ssp1.allowedRecordTypes !=0 
  
  /*(ssp1.allowedRecordTypes & varRelatedType) = varRelatedType */
  ORDER BY `displayName`
) inn;
	
IF (varRelatedType IN (4,
                                                        2,
                                                        16)) THEN
	
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.displayName = ''',
		  `displayName`, ''' then getInheritedValue(sspv.securityId,ssp1.id,', varFirmId,',', varPreferenceId,', sspv.custodianSecuritySymbolId) end) AS `' ,
		`displayName`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `displayName`
	  FROM securitySettingPreferences ssp1 WHERE   ssp1.allowedRecordTypes !=0 
  
  /*(ssp1.allowedRecordTypes & varRelatedType) = varRelatedType */
	  ORDER BY `displayName`
	) inn;
	
	SET @SQL = CONCAT(' SELECT -- ssp1.id AS securitySettingPreferenceId,
         sspv.securityId AS securityId,
         s.name AS securityName,
         st.name AS securityType,
		 s.symbol AS symbol,
         sspv.custodianSecuritySymbolId,
    --     ssp1.group AS `group`,
		 ' ,@preferenceSQL,',
    --     ssp1.name AS securitySettingPreferenceName,
    --     sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
    --     t1.value,
      --  getInheritedValue(sspv.securityId,ssp1.id,', varFirmId,',', varPreferenceId,', sspv.custodianSecuritySymbolId) AS inheritedValue
	   ',@inheritedPreferenceSQL,'
  FROM securitySettingPreferences ssp1
  CROSS JOIN securitySettingPreferenceValue sspv
  -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
  INNER JOIN `security` s ON sspv.securityId = s.id
  INNER JOIN securityType st ON s.securityTypeId = st.id
  LEFT OUTER JOIN
    (SELECT sspv.securitySettingPreferenceId,
            sspv.value AS VALUE
     FROM securitySettingPreferenceValue sspv
     -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
     WHERE sspv.preferenceValueId = ',varPreferenceValueId ,' ) t1 ON ssp1.id = t1.securitySettingPreferenceId
  WHERE 
  
  ssp1.allowedRecordTypes !=0 AND  
  /*(ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType,'
    AND */ sspv.preferenceValueId = ',varPreferenceValueId , '
	 GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	 
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;	 
	
	ELSEIF (varRelatedType = 1) THEN
	
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.displayName = ''',
		  `displayName`, ''' then NULL END) AS `' ,
		`displayName`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `displayName`
	  FROM securitySettingPreferences ssp1 WHERE   ssp1.allowedRecordTypes !=0 
  
  /*(ssp1.allowedRecordTypes & varRelatedType) = varRelatedType */
	  ORDER BY `displayName`
	) inn;
	SET @SQL = CONCAT('  SELECT -- ssp1.id AS securitySettingPreferenceId,
           sspv.securityId AS securityId,
           s.name AS securityName,
           st.name AS securityType,
		   s.symbol AS symbol,
           sspv.custodianSecuritySymbolId,
 --          ssp1.group AS `group`,
 --          ssp1.name AS securitySettingPreferenceName,
		   ' ,@preferenceSQL,',
 --          sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
 --          t1.value,
--           NULL AS inheritedValue
		   ',@inheritedPreferenceSQL,'
    FROM securitySettingPreferences ssp1
    CROSS JOIN securitySettingPreferenceValue sspv
    -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
    INNER JOIN `security` s ON sspv.securityId = s.id
    INNER JOIN securityType st ON s.securityTypeId = st.id
    LEFT OUTER JOIN
      (SELECT sspv.securitySettingPreferenceId,
              sspv.value AS VALUE
       FROM securitySettingPreferenceValue sspv
       -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
       WHERE sspv.preferenceValueId = ',varPreferenceValueId,' ) t1 ON ssp1.id = t1.securitySettingPreferenceId WHERE 
	   
	   ssp1.allowedRecordTypes !=0 AND  
	   /* (ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType,'
     AND */ sspv.preferenceValueId = ',varPreferenceValueId, '
	 GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	
	ELSEIF (varRelatedType = 8) THEN
    SELECT IFNULL(modelId,-1) INTO varModelId
    FROM portfolio WHERE id = varRelatedTypeId;
SELECT 
    teamId
INTO varTeamId FROM
    teamPortfolioAccess
WHERE
    isPrimary = 1
        AND portfolioId = varRelatedTypeId;
		
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.displayName = ''',`displayName`, ''' then getInheritedValuePortFolio(sspv.securityId,ssp1.id,',varModelId,',',varTeamId,',',varFirmId,',',varPreferenceId,',','sspv.custodianSecuritySymbolId)END) AS `' ,`displayName`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `displayName`
	  FROM securitySettingPreferences ssp1 WHERE   ssp1.allowedRecordTypes !=0 
  
  /*(ssp1.allowedRecordTypes & varRelatedType) = varRelatedType */
	  ORDER BY `displayName`
	) inn;
	
SET @SQL = CONCAT('SELECT 
--    ssp1.id AS securitySettingPreferenceId,
    sspv.securityId AS securityId,
    s.name AS securityName,
    st.name AS securityType,
	s.symbol AS symbol,
    sspv.custodianSecuritySymbolId,
--    ssp1.group AS `group`,
	' ,@preferenceSQL,',
--    ssp1.name AS securitySettingPreferenceName,
--    sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
--    t1.value,
/*    getInheritedValuePortFolio(sspv.securityId,
            ssp1.id,
            varModelId,
            varTeamId,
            varFirmId,
            varPreferenceId,
            sspv.custodianSecuritySymbolId) AS inheritedValue */
	',@inheritedPreferenceSQL,'
FROM
    securitySettingPreferences ssp1
        CROSS JOIN
    securitySettingPreferenceValue sspv
       /* INNER JOIN
    securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */
        INNER JOIN
    `security` s ON sspv.securityId = s.id
        INNER JOIN
    securityType st ON s.securityTypeId = st.id
        LEFT OUTER JOIN
    (SELECT 
        sspv.securitySettingPreferenceId, sspv.value AS VALUE
    FROM
        securitySettingPreferenceValue sspv
    -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
    WHERE
        sspv.preferenceValueId = ',varPreferenceValueId,') t1 ON ssp1.id = t1.securitySettingPreferenceId
WHERE
ssp1.allowedRecordTypes !=0 AND  
    /*(ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType
        ,' AND */ sspv.preferenceValueId = ',varPreferenceValueId,
		' GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	 
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;	  
	
	ELSEIF (varRelatedType = 32) THEN
    SELECT portfolioId,
           custodianId INTO varPortfolioId,
                            varCustodianId
    FROM account WHERE id = varRelatedTypeId;
SELECT 
    IFNULL(modelId,-1)
INTO varModelId FROM
    portfolio
WHERE
    id = varPortfolioId;
SELECT 
    teamId
INTO varTeamId FROM
    teamPortfolioAccess
WHERE
    isPrimary = 1
        AND portfolioId = varPortfolioId;
	
	SET varPortfolioId = IFNULL(varPortfolioId,-1);
	SET varCustodianId = IFNULL(varCustodianId,-1);
	
	SET @inheritedPreferenceSQL = NULL;
	SELECT
	  GROUP_CONCAT(DISTINCT
		CONCAT(
		  'MAX(case when ssp1.displayName = ''',
		  `displayName`, ''' then getInheritedValueAccount(sspv.securityId,
												ssp1.id,',
												varPortfolioId,',',
												varCustodianId,',',
												varModelId,',',
												varTeamId,',',
												varFirmId,',',
												varPreferenceId,',','
												sspv.custodianSecuritySymbolId) END) AS `' ,
		`displayName`,'Inherited`'
		)
	  ) INTO @inheritedPreferenceSQL
	FROM
	(
	  SELECT `displayName`
	  FROM securitySettingPreferences ssp1 WHERE   ssp1.allowedRecordTypes !=0 
  
  /*(ssp1.allowedRecordTypes & varRelatedType) = varRelatedType */
	  ORDER BY `displayName`
	) inn;
	
SET @SQL = CONCAT('
SELECT 
--    ssp1.id AS securitySettingPreferenceId,
    sspv.securityId AS securityId,
    s.name AS securityName,
    st.name AS securityType,
	s.symbol AS symbol,
    sspv.custodianSecuritySymbolId,
--    ssp1.group AS `group`,
--    ssp1.name AS securitySettingPreferenceName,
	' ,@preferenceSQL,',
--    sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId,
--    t1.value,
 /*   getInheritedValueAccount(sspv.securityId,
            ssp1.id,
            varPortfolioId,
            varCustodianId,
            varModelId,
            varTeamId,
            varFirmId,
            varPreferenceId,
            sspv.custodianSecuritySymbolId) AS inheritedValue */
		',@inheritedPreferenceSQL,'
FROM
    securitySettingPreferences ssp1
        CROSS JOIN
    securitySettingPreferenceValue sspv
        /* INNER JOIN
    securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id */
        INNER JOIN
    `security` s ON sspv.securityId = s.id
        INNER JOIN
    securityType st ON s.securityTypeId = st.id
        LEFT OUTER JOIN
    (SELECT 
        sspv.securitySettingPreferenceId, sspv.value AS VALUE
    FROM
        securitySettingPreferenceValue sspv
    -- INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id
    WHERE
        sspv.preferenceValueId = ',varPreferenceValueId,') t1 ON ssp1.id = t1.securitySettingPreferenceId
WHERE
ssp1.allowedRecordTypes !=0 AND  
    /* (ssp1.allowedRecordTypes & ',varRelatedType,') = ',varRelatedType
       ,' AND */ sspv.preferenceValueId = ',varPreferenceValueId ,
		' GROUP BY sspv.securityId,sspv.custodianSecuritySymbolId; ');
	#SELECT @SQL;   
    PREPARE stmt FROM @SQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;		
END IF; 
SET SESSION group_concat_max_len = 1024;		
END */$$
DELIMITER ;

/* Procedure structure for procedure `getSecurityPreferenceValuetest` */

/*!50003 DROP PROCEDURE IF EXISTS  `getSecurityPreferenceValuetest` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` PROCEDURE `getSecurityPreferenceValuetest`(varUserId INT , varPreferenceValueId INT , varFirmId INT )
BEGIN
##-- Author: Ashutosh Verma
##-- CALL  getSecurityPreferenceValuetest (1,159,999) ---##
DECLARE varPreferenceId INT ;
DECLARE varRelatedType INT ;
DECLARE varRelatedTypeId INT ;
SELECT preferenceId , relatedType , relatedTypeId INTO varPreferenceId ,varRelatedType ,varRelatedTypeId FROM preferenceValue WHERE id = varPreferenceValueId;
IF (varRelatedType IN (4,2,16)) THEN
SELECT ssp1.id AS securitySettingPreferenceId ,
sspv.securityId AS securityId,sspv.custodianSecuritySymbolId, ssp1.group AS `group`, ssp1.name AS securitySettingPreferenceName ,sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId  ,t1.value ,s.symbol AS symbol , s.name AS securityName, st.name AS securityType,
 getIinheritedValue(sspv.securityId ,ssp1.id , varFirmId , varPreferenceId , sspv.custodianSecuritySymbolId) AS inheritedValue FROM  securitySettingPreferences ssp1 CROSS JOIN  securitySettingPreferenceValue sspv 
 
 INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id INNER JOIN `security` s ON sspv.securityId = s.orionConnectExternalId INNER JOIN securityType st ON s.securityTypeId = st.id 
 
 LEFT OUTER JOIN 
(	
SELECT  sspv.securitySettingPreferenceId , sspo.value AS VALUE  FROM securitySettingPreferenceValue sspv  INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = varPreferenceValueId ) t1 ON ssp1.id = t1.securitySettingPreferenceId  WHERE (ssp1.allowedRecordTypes & varRelatedType ) = varRelatedType AND   sspv.preferenceValueId  = varPreferenceValueId;
ELSEIF (varRelatedType = 1) THEN 
SELECT ssp1.id AS securitySettingPreferenceId ,
sspv.securityId AS securityId,sspv.custodianSecuritySymbolId, ssp1.group AS `group`, ssp1.name AS securitySettingPreferenceName ,sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId  ,t1.value ,s.symbol AS symbol , s.name AS securityName, st.name AS securityType,
 NULL AS inheritedValue FROM  securitySettingPreferences ssp1 CROSS JOIN  securitySettingPreferenceValue sspv 
 
 INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id INNER JOIN `security` s ON sspv.securityId = s.orionConnectExternalId INNER JOIN securityType st ON s.securityTypeId = st.id 
 
 LEFT OUTER JOIN 
(	
SELECT  sspv.securitySettingPreferenceId , sspo.value AS VALUE  FROM securitySettingPreferenceValue sspv  INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = varPreferenceValueId ) t1 ON ssp1.id = t1.securitySettingPreferenceId  WHERE   (ssp1.allowedRecordTypes & varRelatedType ) = varRelatedType AND   sspv.preferenceValueId  = varPreferenceValueId;
END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `getSecurityPreferenceValuetest1` */

/*!50003 DROP PROCEDURE IF EXISTS  `getSecurityPreferenceValuetest1` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getSecurityPreferenceValuetest1`(varUserId INT , varPreferenceValueId INT , varFirmId INT )
BEGIN
##-- Author: Ashutosh Verma
##-- CALL  getSecurityPreferenceValuetest (1,159,999) ---##
DECLARE varPreferenceId INT ;
DECLARE varRelatedType INT ;
DECLARE varRelatedTypeId INT ;
DECLARE varPortfolioId INT;
 DECLARE varModelId INT; 
 DECLARE varTeamId INT;
SELECT preferenceId , relatedType , relatedTypeId INTO varPreferenceId ,varRelatedType ,varRelatedTypeId FROM preferenceValue WHERE id = varPreferenceValueId;
SELECT modelId INTO varModelId
  FROM portfolio WHERE id = varRelatedTypeId;
  
  SELECT teamId INTO varTeamId
  FROM teamPortfolioAccess WHERE isPrimary =1
  AND portfolioId = varRelatedTypeId;
SELECT ssp1.id AS securitySettingPreferenceId ,
sspv.securityId AS securityId,sspv.custodianSecuritySymbolId, ssp1.group AS `group`, ssp1.name AS securitySettingPreferenceName ,sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId  ,t1.value ,s.symbol AS symbol , s.name AS securityName, st.name AS securityType,
 getInheritedValuePortFolio(sspv.securityId ,ssp1.id , varModelId  , varTeamId , varFirmId , varPreferenceId , sspv.custodianSecuritySymbolId) AS inheritedValue FROM  securitySettingPreferences ssp1 CROSS JOIN  securitySettingPreferenceValue sspv 
 
 INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id INNER JOIN `security` s ON sspv.securityId = s.orionConnectExternalId INNER JOIN securityType st ON s.securityTypeId = st.id 
 
 LEFT OUTER JOIN 
(	
SELECT  sspv.securitySettingPreferenceId , sspo.value AS VALUE  FROM securitySettingPreferenceValue sspv  INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = varPreferenceValueId ) t1 ON ssp1.id = t1.securitySettingPreferenceId   WHERE (ssp1.allowedRecordTypes & varRelatedType ) = varRelatedType AND sspv.preferenceValueId  = varPreferenceValueId;
END */$$
DELIMITER ;

/* Procedure structure for procedure `getSecurityPreferenceValuetest2` */

/*!50003 DROP PROCEDURE IF EXISTS  `getSecurityPreferenceValuetest2` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`auroraadmin`@`%` PROCEDURE `getSecurityPreferenceValuetest2`(varUserId INT , varPreferenceValueId INT , varFirmId INT )
BEGIN
##-- Author: Ashutosh Verma
##-- CALL  getSecurityPreferenceValuetest (1,159,999) ---##
DECLARE varPreferenceId INT ;
DECLARE varRelatedType INT ;
DECLARE varRelatedTypeId INT ;
DECLARE varPortfolioId INT;
 DECLARE varModelId INT; 
 DECLARE varTeamId INT;
 DECLARE varCustodianId INT;
SELECT preferenceId , relatedType , relatedTypeId INTO varPreferenceId ,varRelatedType ,varRelatedTypeId FROM preferenceValue WHERE id = varPreferenceValueId;
SELECT portfolioId,
         custodianId INTO varPortfolioId,
                          varCustodianId
  FROM account WHERE orionConnectExternalId = varRelatedTypeId;
  
SELECT modelId INTO varModelId
  FROM portfolio WHERE id = varPortfolioId;
  
  SELECT teamId INTO varTeamId
  FROM teamPortfolioAccess WHERE isPrimary =1
  AND portfolioId = varPortfolioId;
  
SELECT ssp1.id AS securitySettingPreferenceId ,
sspv.securityId AS securityId,sspv.custodianSecuritySymbolId, ssp1.group AS `group`, ssp1.name AS securitySettingPreferenceName ,sspv.securitySettingPreferenceOptionId AS securitySettingPreferenceOptionId  ,t1.value ,s.symbol AS symbol , s.name AS securityName, st.name AS securityType,
 getInheritedValueAccount(sspv.securityId ,ssp1.id ,varPortfolioId , varCustodianId, varModelId  , varTeamId , varFirmId , varPreferenceId , sspv.custodianSecuritySymbolId) AS inheritedValue FROM  securitySettingPreferences ssp1 CROSS JOIN  securitySettingPreferenceValue sspv 
 
 INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id INNER JOIN `security` s ON sspv.securityId = s.orionConnectExternalId INNER JOIN securityType st ON s.securityTypeId = st.id 
 
 LEFT OUTER JOIN 
(	
SELECT  sspv.securitySettingPreferenceId , sspo.value AS VALUE  FROM securitySettingPreferenceValue sspv  INNER JOIN securitySettingPreferenceOptions sspo ON sspv.securitySettingPreferenceOptionId = sspo.id  WHERE sspv.preferenceValueId  = varPreferenceValueId ) t1 ON ssp1.id = t1.securitySettingPreferenceId   WHERE (ssp1.allowedRecordTypes & varRelatedType ) = varRelatedType AND sspv.preferenceValueId  = varPreferenceValueId;
END */$$
DELIMITER ;

/* Procedure structure for procedure `updateUserStatus` */

/*!50003 DROP PROCEDURE IF EXISTS  `updateUserStatus` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`oEA`@`%` PROCEDURE `updateUserStatus`(varTeamId INT)
BEGIN
##-- Author: Ashutosh Verma
##-- Created On: 12 August,2016
##-- call updateUserStatus (1)
##----- SP to update status of user -----##
## -----  teamId will be passed as a parameter.
##-----Sql query to to update status of user -----#
UPDATE `user` SET STATUS = 0 WHERE isDeleted = 0 AND id IN ( 
SELECT userId FROM 
(
SELECT ut.userId , COUNT(t.id) AS teamCount ,
(SELECT COUNT(t1.id) FROM team t1 
INNER JOIN userTeam ut1 ON ut1.teamId = t1.id AND t1.status = 0 
WHERE ut1.userId = ut.userId AND ut.isDeleted = 0 AND  ut1.isDeleted = 0 AND t1.isDeleted = 0) AS statusCount 
FROM userTeam ut 
INNER JOIN team t ON t.id = ut.teamId
WHERE ut.userId IN ((SELECT userId FROM userTeam WHERE teamId = 1  and isDeleted = 0))
AND ut.isDeleted = 0
AND t.isDeleted = 0 
GROUP BY ut.userId ) tab1 WHERE tab1.teamCount = tab1.statusCount 
);
END */$$
DELIMITER ;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
