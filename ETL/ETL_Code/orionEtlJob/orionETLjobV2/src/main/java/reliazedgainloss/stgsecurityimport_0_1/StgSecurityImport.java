// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package reliazedgainloss.stgsecurityimport_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: StgSecurityImport Purpose: Stg Security Import<br>
 * Description: Stg Security Import <br>
 * @author user@talend.com
 * @version 6.2.0.20160510_1709
 * @status 
 */
public class StgSecurityImport implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (serverIp != null) {

				this.setProperty("serverIp", serverIp.toString());

			}

			if (database != null) {

				this.setProperty("database", database.toString());

			}

			if (filepath_advisor != null) {

				this.setProperty("filepath_advisor",
						filepath_advisor.toString());

			}

			if (positionpath != null) {

				this.setProperty("positionpath", positionpath.toString());

			}

			if (custodianpath != null) {

				this.setProperty("custodianpath", custodianpath.toString());

			}

			if (taxlotpath != null) {

				this.setProperty("taxlotpath", taxlotpath.toString());

			}

			if (transactionpath != null) {

				this.setProperty("transactionpath", transactionpath.toString());

			}

			if (securitypath != null) {

				this.setProperty("securitypath", securitypath.toString());

			}

			if (accountpath != null) {

				this.setProperty("accountpath", accountpath.toString());

			}

			if (inputDir != null) {

				this.setProperty("inputDir", inputDir.toString());

			}

			if (contextDir != null) {

				this.setProperty("contextDir", contextDir.toString());

			}

			if (password != null) {

				this.setProperty("password", password.toString());

			}

			if (username != null) {

				this.setProperty("username", username.toString());

			}

			if (localpath != null) {

				this.setProperty("localpath", localpath.toString());

			}

			if (commondb != null) {

				this.setProperty("commondb", commondb.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (stagingdb != null) {

				this.setProperty("stagingdb", stagingdb.toString());

			}

			if (host != null) {

				this.setProperty("host", host.toString());

			}

			if (rowCountRejectedFirm != null) {

				this.setProperty("rowCountRejectedFirm",
						rowCountRejectedFirm.toString());

			}

			if (firm != null) {

				this.setProperty("firm", firm.toString());

			}

			if (rowCountFirm != null) {

				this.setProperty("rowCountFirm", rowCountFirm.toString());

			}

			if (rowCountStaging != null) {

				this.setProperty("rowCountStaging", rowCountStaging.toString());

			}

			if (rowCountTSV != null) {

				this.setProperty("rowCountTSV", rowCountTSV.toString());

			}

			if (rowCountUpdated != null) {

				this.setProperty("rowCountUpdated", rowCountUpdated.toString());

			}

			if (teamPreferenceOption != null) {

				this.setProperty("teamPreferenceOption",
						teamPreferenceOption.toString());

			}

			if (date != null) {

				this.setProperty("date", date.toString());

			}

			if (firmId != null) {

				this.setProperty("firmId", firmId.toString());

			}

			if (pathforlocal != null) {

				this.setProperty("pathforlocal", pathforlocal.toString());

			}

			if (filestorage != null) {

				this.setProperty("filestorage", filestorage.toString());

			}

			if (filestorage2 != null) {

				this.setProperty("filestorage2", filestorage2.toString());

			}

		}

		public String serverIp;

		public String getServerIp() {
			return this.serverIp;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		public String filepath_advisor;

		public String getFilepath_advisor() {
			return this.filepath_advisor;
		}

		public String positionpath;

		public String getPositionpath() {
			return this.positionpath;
		}

		public String custodianpath;

		public String getCustodianpath() {
			return this.custodianpath;
		}

		public String taxlotpath;

		public String getTaxlotpath() {
			return this.taxlotpath;
		}

		public String transactionpath;

		public String getTransactionpath() {
			return this.transactionpath;
		}

		public String securitypath;

		public String getSecuritypath() {
			return this.securitypath;
		}

		public String accountpath;

		public String getAccountpath() {
			return this.accountpath;
		}

		public String inputDir;

		public String getInputDir() {
			return this.inputDir;
		}

		public String contextDir;

		public String getContextDir() {
			return this.contextDir;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String localpath;

		public String getLocalpath() {
			return this.localpath;
		}

		public String commondb;

		public String getCommondb() {
			return this.commondb;
		}

		public String port;

		public String getPort() {
			return this.port;
		}

		public String stagingdb;

		public String getStagingdb() {
			return this.stagingdb;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public Integer rowCountRejectedFirm;

		public Integer getRowCountRejectedFirm() {
			return this.rowCountRejectedFirm;
		}

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		public Integer rowCountFirm;

		public Integer getRowCountFirm() {
			return this.rowCountFirm;
		}

		public Integer rowCountStaging;

		public Integer getRowCountStaging() {
			return this.rowCountStaging;
		}

		public Integer rowCountTSV;

		public Integer getRowCountTSV() {
			return this.rowCountTSV;
		}

		public Integer rowCountUpdated;

		public Integer getRowCountUpdated() {
			return this.rowCountUpdated;
		}

		public String teamPreferenceOption;

		public String getTeamPreferenceOption() {
			return this.teamPreferenceOption;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String firmId;

		public String getFirmId() {
			return this.firmId;
		}

		public String pathforlocal;

		public String getPathforlocal() {
			return this.pathforlocal;
		}

		public String filestorage;

		public String getFilestorage() {
			return this.filestorage;
		}

		public String filestorage2;

		public String getFilestorage2() {
			return this.filestorage2;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "StgSecurityImport";
	private final String projectName = "RELIAZEDGAINLOSS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_PblAQC3_Eea736U70H88Eg", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					StgSecurityImport.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(StgSecurityImport.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutputBulkExec_1_tMOB_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tMysqlOutputBulkExec_1_tMBE_error(exception, errorComponent, globalMap);

	}

	public void tMysqlOutputBulkExec_1_tMBE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_2_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_2_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_2_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAmazonAuroraOutput_3_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_3_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_3_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class outtobulkStruct implements
			routines.system.IPersistableRow<outtobulkStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public String SecurityType;

		public String getSecurityType() {
			return this.SecurityType;
		}

		public String AssetCategory;

		public String getAssetCategory() {
			return this.AssetCategory;
		}

		public String AssetClass;

		public String getAssetClass() {
			return this.AssetClass;
		}

		public String SubClass;

		public String getSubClass() {
			return this.SubClass;
		}

		public java.util.Date MaturityDate;

		public java.util.Date getMaturityDate() {
			return this.MaturityDate;
		}

		public Boolean IsCustodialCash;

		public Boolean getIsCustodialCash() {
			return this.IsCustodialCash;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					this.Name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.SecurityType = readString(dis);

					this.AssetCategory = readString(dis);

					this.AssetClass = readString(dis);

					this.SubClass = readString(dis);

					this.MaturityDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IsCustodialCash = null;
					} else {
						this.IsCustodialCash = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// String

				writeString(this.Name, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// String

				writeString(this.SecurityType, dos);

				// String

				writeString(this.AssetCategory, dos);

				// String

				writeString(this.AssetClass, dos);

				// String

				writeString(this.SubClass, dos);

				// java.util.Date

				writeDate(this.MaturityDate, dos);

				// Boolean

				if (this.IsCustodialCash == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IsCustodialCash);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",Name=" + Name);
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",SecurityType=" + SecurityType);
			sb.append(",AssetCategory=" + AssetCategory);
			sb.append(",AssetClass=" + AssetClass);
			sb.append(",SubClass=" + SubClass);
			sb.append(",MaturityDate=" + String.valueOf(MaturityDate));
			sb.append(",IsCustodialCash=" + String.valueOf(IsCustodialCash));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outtobulkStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class input_rejected_countStruct implements
			routines.system.IPersistableRow<input_rejected_countStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		public String fileName;

		public String getFileName() {
			return this.fileName;
		}

		public String component;

		public String getComponent() {
			return this.component;
		}

		public String process;

		public String getProcess() {
			return this.process;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport) {

				try {

					int length = 0;

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

					this.firmName = readString(dis);

					this.fileName = readString(dis);

					this.component = readString(dis);

					this.process = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.firmName, dos);

				// String

				writeString(this.fileName, dos);

				// String

				writeString(this.component, dos);

				// String

				writeString(this.process, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append(",firmName=" + firmName);
			sb.append(",fileName=" + fileName);
			sb.append(",component=" + component);
			sb.append(",process=" + process);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(input_rejected_countStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public String SecurityType;

		public String getSecurityType() {
			return this.SecurityType;
		}

		public String AssetCategory;

		public String getAssetCategory() {
			return this.AssetCategory;
		}

		public String AssetClass;

		public String getAssetClass() {
			return this.AssetClass;
		}

		public String SubClass;

		public String getSubClass() {
			return this.SubClass;
		}

		public String MaturityDate;

		public String getMaturityDate() {
			return this.MaturityDate;
		}

		public Boolean IsCustodialCash;

		public Boolean getIsCustodialCash() {
			return this.IsCustodialCash;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					this.Name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.SecurityType = readString(dis);

					this.AssetCategory = readString(dis);

					this.AssetClass = readString(dis);

					this.SubClass = readString(dis);

					this.MaturityDate = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IsCustodialCash = null;
					} else {
						this.IsCustodialCash = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// String

				writeString(this.Name, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// String

				writeString(this.SecurityType, dos);

				// String

				writeString(this.AssetCategory, dos);

				// String

				writeString(this.AssetClass, dos);

				// String

				writeString(this.SubClass, dos);

				// String

				writeString(this.MaturityDate, dos);

				// Boolean

				if (this.IsCustodialCash == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IsCustodialCash);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",Name=" + Name);
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",SecurityType=" + SecurityType);
			sb.append(",AssetCategory=" + AssetCategory);
			sb.append(",AssetClass=" + AssetClass);
			sb.append(",SubClass=" + SubClass);
			sb.append(",MaturityDate=" + MaturityDate);
			sb.append(",IsCustodialCash=" + String.valueOf(IsCustodialCash));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public String SecurityType;

		public String getSecurityType() {
			return this.SecurityType;
		}

		public String AssetCategory;

		public String getAssetCategory() {
			return this.AssetCategory;
		}

		public String AssetClass;

		public String getAssetClass() {
			return this.AssetClass;
		}

		public String SubClass;

		public String getSubClass() {
			return this.SubClass;
		}

		public String MaturityDate;

		public String getMaturityDate() {
			return this.MaturityDate;
		}

		public Boolean IsCustodialCash;

		public Boolean getIsCustodialCash() {
			return this.IsCustodialCash;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					this.Name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.SecurityType = readString(dis);

					this.AssetCategory = readString(dis);

					this.AssetClass = readString(dis);

					this.SubClass = readString(dis);

					this.MaturityDate = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IsCustodialCash = null;
					} else {
						this.IsCustodialCash = dis.readBoolean();
					}

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// String

				writeString(this.Name, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// String

				writeString(this.SecurityType, dos);

				// String

				writeString(this.AssetCategory, dos);

				// String

				writeString(this.AssetClass, dos);

				// String

				writeString(this.SubClass, dos);

				// String

				writeString(this.MaturityDate, dos);

				// Boolean

				if (this.IsCustodialCash == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IsCustodialCash);
				}

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",Name=" + Name);
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",SecurityType=" + SecurityType);
			sb.append(",AssetCategory=" + AssetCategory);
			sb.append(",AssetClass=" + AssetClass);
			sb.append(",SubClass=" + SubClass);
			sb.append(",MaturityDate=" + MaturityDate);
			sb.append(",IsCustodialCash=" + String.valueOf(IsCustodialCash));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				outtobulkStruct outtobulk = new outtobulkStruct();
				row2Struct row2 = new row2Struct();
				input_rejected_countStruct input_rejected_count = new input_rejected_countStruct();

				/**
				 * [tMysqlOutputBulkExec_1_tMOB begin ] start
				 */

				ok_Hash.put("tMysqlOutputBulkExec_1_tMOB", false);
				start_Hash.put("tMysqlOutputBulkExec_1_tMOB",
						System.currentTimeMillis());

				currentVirtualComponent = "tMysqlOutputBulkExec_1";

				currentComponent = "tMysqlOutputBulkExec_1_tMOB";

				int tos_count_tMysqlOutputBulkExec_1_tMOB = 0;

				int nb_line_tMysqlOutputBulkExec_1_tMOB = 0;
				String rowSeparator_tMysqlOutputBulkExec_1_tMOB = "\n";
				String fieldSeparator_tMysqlOutputBulkExec_1_tMOB = "\t";
				char escapeChar_tMysqlOutputBulkExec_1_tMOB = "\\".charAt(0);
				char textEnclosure_tMysqlOutputBulkExec_1_tMOB = "\"".charAt(0);

				escapeChar_tMysqlOutputBulkExec_1_tMOB = '\\';
				int escape_mode_tMysqlOutputBulkExec_1_tMOB = 0; // 0: double
																	// quotes;
																	// 1:
																	// backslash
				if (escapeChar_tMysqlOutputBulkExec_1_tMOB == '\\') {
					escape_mode_tMysqlOutputBulkExec_1_tMOB = 1;
				} else if (escapeChar_tMysqlOutputBulkExec_1_tMOB == textEnclosure_tMysqlOutputBulkExec_1_tMOB) {
					escape_mode_tMysqlOutputBulkExec_1_tMOB = 0;
				} else {
					throw new RuntimeException(
							"The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tMysqlOutputBulkExec_1_tMOB = new java.io.File(
						context.pathforlocal + "security_" + context.firmId
								+ "_" + context.date);

				java.io.BufferedWriter csvWriter_tMysqlOutputBulkExec_1_tMOB = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										file_tMysqlOutputBulkExec_1_tMOB, false),
								"ISO-8859-15"));
				resourceMap.put("csvWriter_tMysqlOutputBulkExec_1_tMOB",
						csvWriter_tMysqlOutputBulkExec_1_tMOB);

				/**
				 * [tMysqlOutputBulkExec_1_tMOB begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outtobulkStruct outtobulk_tmp = new outtobulkStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_1", false);
				start_Hash.put("tAmazonMysqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_1";

				int tos_count_tAmazonMysqlOutput_1 = 0;

				int nb_line_tAmazonMysqlOutput_1 = 0;
				int nb_line_update_tAmazonMysqlOutput_1 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_1 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_1 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_1 = 0;

				int deletedCount_tAmazonMysqlOutput_1 = 0;
				int updatedCount_tAmazonMysqlOutput_1 = 0;
				int insertedCount_tAmazonMysqlOutput_1 = 0;

				int rejectedCount_tAmazonMysqlOutput_1 = 0;

				String tableName_tAmazonMysqlOutput_1 = "logsreject";
				boolean whetherReject_tAmazonMysqlOutput_1 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_1 = calendar_tAmazonMysqlOutput_1
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_1 = calendar_tAmazonMysqlOutput_1
						.getTime().getTime();
				long date_tAmazonMysqlOutput_1;

				java.sql.Connection conn_tAmazonMysqlOutput_1 = null;
				String dbProperties_tAmazonMysqlOutput_1 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_1 = null;
				if (dbProperties_tAmazonMysqlOutput_1 == null
						|| dbProperties_tAmazonMysqlOutput_1.trim().length() == 0) {
					url_tAmazonMysqlOutput_1 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_1 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ properties_tAmazonMysqlOutput_1;
				}
				String dbUser_tAmazonMysqlOutput_1 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_1 = context.password;

				String dbPwd_tAmazonMysqlOutput_1 = decryptedPassword_tAmazonMysqlOutput_1;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_1 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_1,
								dbUser_tAmazonMysqlOutput_1,
								dbPwd_tAmazonMysqlOutput_1);

				resourceMap.put("conn_tAmazonMysqlOutput_1",
						conn_tAmazonMysqlOutput_1);

				conn_tAmazonMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_1 = 10000;
				int commitCounter_tAmazonMysqlOutput_1 = 0;

				int count_tAmazonMysqlOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_1 = conn_tAmazonMysqlOutput_1
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_1 = dbMetaData_tAmazonMysqlOutput_1
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_1 = false;
				while (rsTable_tAmazonMysqlOutput_1.next()) {
					String table_tAmazonMysqlOutput_1 = rsTable_tAmazonMysqlOutput_1
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_1
							.equalsIgnoreCase("logsreject")) {
						whetherExist_tAmazonMysqlOutput_1 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_1.close();
				if (!whetherExist_tAmazonMysqlOutput_1) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_1 = conn_tAmazonMysqlOutput_1
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_1
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_1
									+ "`(`errorCode` VARCHAR(255)  ,`errorMessage` VARCHAR(255)  ,`firmName` VARCHAR(50)  ,`fileName` VARCHAR(100)  ,`component` VARCHAR(255)  ,`process` VARCHAR(255)  )");
					stmtCreate_tAmazonMysqlOutput_1.close();
				}

				String insert_tAmazonMysqlOutput_1 = "INSERT INTO `"
						+ "logsreject"
						+ "` (`errorCode`,`errorMessage`,`firmName`,`fileName`,`component`,`process`) VALUES (?,?,?,?,?,?)";
				int batchSize_tAmazonMysqlOutput_1 = 100;
				int batchSizeCounter_tAmazonMysqlOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_1 = conn_tAmazonMysqlOutput_1
						.prepareStatement(insert_tAmazonMysqlOutput_1);

				/**
				 * [tAmazonMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
					String firmname;
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				input_rejected_countStruct input_rejected_count_tmp = new input_rejected_countStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = context.localpath
							+ context.securitypath;
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								context.localpath + context.securitypath,
								"US-ASCII", "\t", "\n", false, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						row2 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.OrionFirmId = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.OrionFirmId = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.ExternalId = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.ExternalId = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.Symbol = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.Name = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Price = ParserUtils
											.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.Price = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.SecurityType = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.AssetCategory = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row1.AssetClass = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.SubClass = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row1.MaturityDate = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.IsCustodialCash = ParserUtils
											.parseTo_Boolean(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.IsCustodialCash = null;

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							row2 = new row2Struct();

							row2.OrionFirmId = row1.OrionFirmId;

							row2.ExternalId = row1.ExternalId;

							row2.Symbol = row1.Symbol;

							row2.Name = row1.Name;

							row2.Price = row1.Price;

							row2.SecurityType = row1.SecurityType;

							row2.AssetCategory = row1.AssetCategory;

							row2.AssetClass = row1.AssetClass;

							row2.SubClass = row1.SubClass;

							row2.MaturityDate = row1.MaturityDate;

							row2.IsCustodialCash = row1.IsCustodialCash;

							row2.errorMessage = e.getMessage() + " - Line: "
									+ tos_count_tFileInputDelimited_1;
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								outtobulk = null;

								// # Output table : 'outtobulk'
								outtobulk_tmp.OrionFirmId = row1.OrionFirmId;
								outtobulk_tmp.ExternalId = row1.ExternalId;
								outtobulk_tmp.Symbol = row1.Symbol;
								outtobulk_tmp.Name = row1.Name;
								outtobulk_tmp.Price = row1.Price;
								outtobulk_tmp.SecurityType = row1.SecurityType;
								outtobulk_tmp.AssetCategory = row1.AssetCategory;
								outtobulk_tmp.AssetClass = row1.AssetClass;
								outtobulk_tmp.SubClass = row1.SubClass;
								outtobulk_tmp.MaturityDate = Relational
										.ISNULL(StringHandling
												.TRIM(row1.MaturityDate))
										|| (row1.MaturityDate.equals("")) ? null
										: TalendDate.parseDate("YYYY/MM/DD",
												row1.MaturityDate);
								outtobulk_tmp.IsCustodialCash = row1.IsCustodialCash;
								outtobulk = outtobulk_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "outtobulk"
							if (outtobulk != null) {

								/**
								 * [tMysqlOutputBulkExec_1_tMOB main ] start
								 */

								currentVirtualComponent = "tMysqlOutputBulkExec_1";

								currentComponent = "tMysqlOutputBulkExec_1_tMOB";

								String[] row_tMysqlOutputBulkExec_1_tMOB = new String[] {
										"\\N", "\\N", "\\N", "\\N", "\\N",
										"\\N", "\\N", "\\N", "\\N", "\\N",
										"\\N" }; // empty value must be
													// NULL('\N' in bulk file)

								if (outtobulk.OrionFirmId != null) {

									row_tMysqlOutputBulkExec_1_tMOB[0] = String
											.valueOf(outtobulk.OrionFirmId);

								}

								if (outtobulk.ExternalId != null) {

									row_tMysqlOutputBulkExec_1_tMOB[1] = String
											.valueOf(outtobulk.ExternalId);

								}

								if (outtobulk.Symbol != null) {

									row_tMysqlOutputBulkExec_1_tMOB[2] = outtobulk.Symbol;

								}

								if (outtobulk.Name != null) {

									row_tMysqlOutputBulkExec_1_tMOB[3] = outtobulk.Name;

								}

								if (outtobulk.Price != null) {

									row_tMysqlOutputBulkExec_1_tMOB[4] = String
											.valueOf(outtobulk.Price);

								}

								if (outtobulk.SecurityType != null) {

									row_tMysqlOutputBulkExec_1_tMOB[5] = outtobulk.SecurityType;

								}

								if (outtobulk.AssetCategory != null) {

									row_tMysqlOutputBulkExec_1_tMOB[6] = outtobulk.AssetCategory;

								}

								if (outtobulk.AssetClass != null) {

									row_tMysqlOutputBulkExec_1_tMOB[7] = outtobulk.AssetClass;

								}

								if (outtobulk.SubClass != null) {

									row_tMysqlOutputBulkExec_1_tMOB[8] = outtobulk.SubClass;

								}

								if (outtobulk.MaturityDate != null) {

									row_tMysqlOutputBulkExec_1_tMOB[9] = FormatterUtils
											.format_Date(
													outtobulk.MaturityDate,
													"YYYY-MM-DD");

								}

								if (outtobulk.IsCustodialCash != null) {

									row_tMysqlOutputBulkExec_1_tMOB[10] = String
											.valueOf(true == outtobulk.IsCustodialCash ? "1"
													: "0");

								}

								for (int i_tMysqlOutputBulkExec_1_tMOB = 0; i_tMysqlOutputBulkExec_1_tMOB < row_tMysqlOutputBulkExec_1_tMOB.length; i_tMysqlOutputBulkExec_1_tMOB++) {

									String temp_tMysqlOutputBulkExec_1_tMOB = row_tMysqlOutputBulkExec_1_tMOB[i_tMysqlOutputBulkExec_1_tMOB];
									if (!"\\N"
											.equals(temp_tMysqlOutputBulkExec_1_tMOB)) {
										if (escape_mode_tMysqlOutputBulkExec_1_tMOB == 0) { // double
																							// quotes
											temp_tMysqlOutputBulkExec_1_tMOB = temp_tMysqlOutputBulkExec_1_tMOB
													.replace(
															""
																	+ textEnclosure_tMysqlOutputBulkExec_1_tMOB,
															""
																	+ textEnclosure_tMysqlOutputBulkExec_1_tMOB
																	+ textEnclosure_tMysqlOutputBulkExec_1_tMOB);
										} else {
											temp_tMysqlOutputBulkExec_1_tMOB = temp_tMysqlOutputBulkExec_1_tMOB
													.replace("\\", "\\\\");
											temp_tMysqlOutputBulkExec_1_tMOB = temp_tMysqlOutputBulkExec_1_tMOB
													.replace(
															""
																	+ textEnclosure_tMysqlOutputBulkExec_1_tMOB,
															"\\"
																	+ textEnclosure_tMysqlOutputBulkExec_1_tMOB);
										}
									}
									if (i_tMysqlOutputBulkExec_1_tMOB != 0) {
										csvWriter_tMysqlOutputBulkExec_1_tMOB
												.write(fieldSeparator_tMysqlOutputBulkExec_1_tMOB);
									}
									csvWriter_tMysqlOutputBulkExec_1_tMOB
											.append(textEnclosure_tMysqlOutputBulkExec_1_tMOB);
									csvWriter_tMysqlOutputBulkExec_1_tMOB
											.write(temp_tMysqlOutputBulkExec_1_tMOB);
									csvWriter_tMysqlOutputBulkExec_1_tMOB
											.append(textEnclosure_tMysqlOutputBulkExec_1_tMOB);
								}
								csvWriter_tMysqlOutputBulkExec_1_tMOB
										.write(rowSeparator_tMysqlOutputBulkExec_1_tMOB);

								if (nb_line_tMysqlOutputBulkExec_1_tMOB % 1 == 0) {
									csvWriter_tMysqlOutputBulkExec_1_tMOB
											.flush();
								}

								nb_line_tMysqlOutputBulkExec_1_tMOB++;

								tos_count_tMysqlOutputBulkExec_1_tMOB++;

								/**
								 * [tMysqlOutputBulkExec_1_tMOB main ] stop
								 */

							} // End of branch "outtobulk"

						} // End of branch "row1"

						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;
								Var.firmname = context.inputDir.substring(
										context.inputDir.indexOf("/") + 1,
										context.inputDir
												.indexOf("/", context.inputDir
														.indexOf("/") + 1));// ###############################
																			// ###############################
																			// #
																			// Output
																			// tables

								input_rejected_count = null;

								// # Output table : 'input_rejected_count'
								input_rejected_count_tmp.errorCode = null;
								input_rejected_count_tmp.errorMessage = null;
								input_rejected_count_tmp.firmName = Var.firmname;
								input_rejected_count_tmp.fileName = "SecurityFile  "
										+ (context.localpath + context.securitypath);
								input_rejected_count_tmp.component = "tinputfileDelimted";
								input_rejected_count_tmp.process = "Security Local to Staging";
								input_rejected_count = input_rejected_count_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */
							// Start of branch "input_rejected_count"
							if (input_rejected_count != null) {

								/**
								 * [tAmazonMysqlOutput_1 main ] start
								 */

								currentComponent = "tAmazonMysqlOutput_1";

								whetherReject_tAmazonMysqlOutput_1 = false;
								if (input_rejected_count.errorCode == null) {
									pstmt_tAmazonMysqlOutput_1.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tAmazonMysqlOutput_1.setString(1,
											input_rejected_count.errorCode);
								}

								if (input_rejected_count.errorMessage == null) {
									pstmt_tAmazonMysqlOutput_1.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tAmazonMysqlOutput_1.setString(2,
											input_rejected_count.errorMessage);
								}

								if (input_rejected_count.firmName == null) {
									pstmt_tAmazonMysqlOutput_1.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tAmazonMysqlOutput_1.setString(3,
											input_rejected_count.firmName);
								}

								if (input_rejected_count.fileName == null) {
									pstmt_tAmazonMysqlOutput_1.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tAmazonMysqlOutput_1.setString(4,
											input_rejected_count.fileName);
								}

								if (input_rejected_count.component == null) {
									pstmt_tAmazonMysqlOutput_1.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tAmazonMysqlOutput_1.setString(5,
											input_rejected_count.component);
								}

								if (input_rejected_count.process == null) {
									pstmt_tAmazonMysqlOutput_1.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tAmazonMysqlOutput_1.setString(6,
											input_rejected_count.process);
								}

								pstmt_tAmazonMysqlOutput_1.addBatch();
								nb_line_tAmazonMysqlOutput_1++;

								batchSizeCounter_tAmazonMysqlOutput_1++;

								if (batchSize_tAmazonMysqlOutput_1 <= batchSizeCounter_tAmazonMysqlOutput_1) {
									try {
										int countSum_tAmazonMysqlOutput_1 = 0;

										for (int countEach_tAmazonMysqlOutput_1 : pstmt_tAmazonMysqlOutput_1
												.executeBatch()) {
											countSum_tAmazonMysqlOutput_1 += (countEach_tAmazonMysqlOutput_1 < 0 ? 0
													: 1);
										}

										insertedCount_tAmazonMysqlOutput_1 += countSum_tAmazonMysqlOutput_1;

									} catch (java.sql.BatchUpdateException e) {

										throw (e);

									}

									batchSizeCounter_tAmazonMysqlOutput_1 = 0;
								}

								commitCounter_tAmazonMysqlOutput_1++;
								if (commitEvery_tAmazonMysqlOutput_1 <= commitCounter_tAmazonMysqlOutput_1) {
									if ((batchSize_tAmazonMysqlOutput_1 > 0)
											&& (batchSizeCounter_tAmazonMysqlOutput_1 > 0)) {
										try {
											int countSum_tAmazonMysqlOutput_1 = 0;

											for (int countEach_tAmazonMysqlOutput_1 : pstmt_tAmazonMysqlOutput_1
													.executeBatch()) {
												countSum_tAmazonMysqlOutput_1 += (countEach_tAmazonMysqlOutput_1 < 0 ? 0
														: 1);
											}

											insertedCount_tAmazonMysqlOutput_1 += countSum_tAmazonMysqlOutput_1;

											batchSizeCounter_tAmazonMysqlOutput_1 = 0;
										} catch (java.sql.BatchUpdateException e) {

											throw (e);

										}
									}

									conn_tAmazonMysqlOutput_1.commit();

									commitCounter_tAmazonMysqlOutput_1 = 0;
								}

								tos_count_tAmazonMysqlOutput_1++;

								/**
								 * [tAmazonMysqlOutput_1 main ] stop
								 */

							} // End of branch "input_rejected_count"

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) (context.localpath + context.securitypath) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutputBulkExec_1_tMOB end ] start
				 */

				currentVirtualComponent = "tMysqlOutputBulkExec_1";

				currentComponent = "tMysqlOutputBulkExec_1_tMOB";

				csvWriter_tMysqlOutputBulkExec_1_tMOB.close();
				resourceMap.put("finish_tMysqlOutputBulkExec_1_tMOB", true);
				globalMap.put("tMysqlOutputBulkExec_1_tMOB_NB_LINE",
						nb_line_tMysqlOutputBulkExec_1_tMOB);

				ok_Hash.put("tMysqlOutputBulkExec_1_tMOB", true);
				end_Hash.put("tMysqlOutputBulkExec_1_tMOB",
						System.currentTimeMillis());

				/**
				 * [tMysqlOutputBulkExec_1_tMOB end ] stop
				 */

				/**
				 * [tMysqlOutputBulkExec_1_tMBE begin ] start
				 */

				ok_Hash.put("tMysqlOutputBulkExec_1_tMBE", false);
				start_Hash.put("tMysqlOutputBulkExec_1_tMBE",
						System.currentTimeMillis());

				currentVirtualComponent = "tMysqlOutputBulkExec_1";

				currentComponent = "tMysqlOutputBulkExec_1_tMBE";

				int tos_count_tMysqlOutputBulkExec_1_tMBE = 0;

				String charset_tMysqlOutputBulkExec_1_tMBE = "latin1";
				String tableName_tMysqlOutputBulkExec_1_tMBE = "security_"
						+ context.firmId + "_" + context.date;

				int deletedCount_tMysqlOutputBulkExec_1_tMBE = 0;
				java.sql.Connection conn_tMysqlOutputBulkExec_1_tMBE = null;

				String driverClass_tMysqlOutputBulkExec_1_tMBE = "com.mysql.jdbc.Driver";
				Class.forName(driverClass_tMysqlOutputBulkExec_1_tMBE)
						.newInstance();

				String url_tMysqlOutputBulkExec_1_tMBE = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				final String decryptedPassword_tMysqlOutputBulkExec_1_tMBE = context.password;
				String dbUser_tMysqlOutputBulkExec_1_tMBE = context.username;
				String dbPwd_tMysqlOutputBulkExec_1_tMBE = decryptedPassword_tMysqlOutputBulkExec_1_tMBE;

				conn_tMysqlOutputBulkExec_1_tMBE = java.sql.DriverManager
						.getConnection(url_tMysqlOutputBulkExec_1_tMBE,
								dbUser_tMysqlOutputBulkExec_1_tMBE,
								dbPwd_tMysqlOutputBulkExec_1_tMBE);

				java.sql.DatabaseMetaData dbMetaData_tMysqlOutputBulkExec_1_tMBE = conn_tMysqlOutputBulkExec_1_tMBE
						.getMetaData();
				java.sql.ResultSet rsTable_tMysqlOutputBulkExec_1_tMBE = dbMetaData_tMysqlOutputBulkExec_1_tMBE
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tMysqlOutputBulkExec_1_tMBE = false;
				while (rsTable_tMysqlOutputBulkExec_1_tMBE.next()) {
					String table_tMysqlOutputBulkExec_1_tMBE = rsTable_tMysqlOutputBulkExec_1_tMBE
							.getString("TABLE_NAME");
					if (table_tMysqlOutputBulkExec_1_tMBE
							.equalsIgnoreCase("security_" + context.firmId
									+ "_" + context.date)) {
						whetherExist_tMysqlOutputBulkExec_1_tMBE = true;
						break;
					}
				}
				rsTable_tMysqlOutputBulkExec_1_tMBE.close();

				if (whetherExist_tMysqlOutputBulkExec_1_tMBE) {
					java.sql.Statement stmtDrop_tMysqlOutputBulkExec_1_tMBE = conn_tMysqlOutputBulkExec_1_tMBE
							.createStatement();

					stmtDrop_tMysqlOutputBulkExec_1_tMBE.execute("DROP TABLE `"
							+ tableName_tMysqlOutputBulkExec_1_tMBE + "`");

					stmtDrop_tMysqlOutputBulkExec_1_tMBE.close();
				}
				java.sql.Statement stmtCreate_tMysqlOutputBulkExec_1_tMBE = conn_tMysqlOutputBulkExec_1_tMBE
						.createStatement();

				stmtCreate_tMysqlOutputBulkExec_1_tMBE
						.execute("CREATE TABLE `"
								+ tableName_tMysqlOutputBulkExec_1_tMBE
								+ "`(`OrionFirmId` INT(11)  ,`ExternalId` INT(11)  ,`Symbol` VARCHAR(255)  ,`Name` VARCHAR(255)  ,`Price` FLOAT(11,0)  ,`SecurityType` VARCHAR(255)  ,`AssetCategory` VARCHAR(255)  ,`AssetClass` VARCHAR(255)  ,`SubClass` VARCHAR(255)  ,`MaturityDate` DATETIME ,`IsCustodialCash` BIT(0)  )");

				stmtCreate_tMysqlOutputBulkExec_1_tMBE.close();

				// in mysql when autoCommit=true don't commit.
				if (!conn_tMysqlOutputBulkExec_1_tMBE.getAutoCommit()) {
					conn_tMysqlOutputBulkExec_1_tMBE.commit();
				}

				String lines_separator_tMysqlOutputBulkExec_1_tMBE = "\n";
				String field_separator_tMysqlOutputBulkExec_1_tMBE = "\t";
				String escaped_str_tMysqlOutputBulkExec_1_tMBE = "\\";
				String enclosed_str_tMysqlOutputBulkExec_1_tMBE = "\"";
				String file_tMysqlOutputBulkExec_1_tMBE = context.pathforlocal
						+ "security_" + context.firmId + "_" + context.date;
				file_tMysqlOutputBulkExec_1_tMBE = file_tMysqlOutputBulkExec_1_tMBE
						.replaceAll("\\\\", "/");
				String replace_tMysqlOutputBulkExec_1_tMBE = null;
				replace_tMysqlOutputBulkExec_1_tMBE = "";

				String bulkSQL_tMysqlOutputBulkExec_1_tMBE = "LOAD DATA LOCAL INFILE '"
						+ file_tMysqlOutputBulkExec_1_tMBE
						+ "' "
						+ replace_tMysqlOutputBulkExec_1_tMBE
						+ " INTO TABLE "
						+ tableName_tMysqlOutputBulkExec_1_tMBE
						+ " FIELDS TERMINATED BY '"
						+ field_separator_tMysqlOutputBulkExec_1_tMBE
								.replaceAll("\\\\", "\\\\\\\\")
						+ "'"
						+ " ENCLOSED BY '"
						+ ("'".equals(enclosed_str_tMysqlOutputBulkExec_1_tMBE) ? "\\"
								: "")
						+ enclosed_str_tMysqlOutputBulkExec_1_tMBE.replaceAll(
								"\\\\", "\\\\\\\\")
						+ "'"
						+ " ESCAPED BY '"
						+ ("'".equals(escaped_str_tMysqlOutputBulkExec_1_tMBE) ? "\\"
								: "")
						+ escaped_str_tMysqlOutputBulkExec_1_tMBE.replaceAll(
								"\\\\", "\\\\\\\\")
						+ "'"
						+ " LINES TERMINATED BY '"
						+ lines_separator_tMysqlOutputBulkExec_1_tMBE
								.replaceAll("\\\\", "\\\\\\\\")
						+ "' (`OrionFirmId`,`ExternalId`,`Symbol`,`Name`,`Price`,`SecurityType`,`AssetCategory`,`AssetClass`,`SubClass`,`MaturityDate`,@tMysqlOutputBulkExec_1_tMBE_IsCustodialCash)"
						+ " SET"
						+ " IsCustodialCash=CAST(@tMysqlOutputBulkExec_1_tMBE_IsCustodialCash AS UNSIGNED)";

				java.sql.Statement stmt_tMysqlOutputBulkExec_1_tMBE = conn_tMysqlOutputBulkExec_1_tMBE
						.createStatement();
				stmt_tMysqlOutputBulkExec_1_tMBE
						.execute("SET character_set_database="
								+ charset_tMysqlOutputBulkExec_1_tMBE);

				stmt_tMysqlOutputBulkExec_1_tMBE
						.execute(bulkSQL_tMysqlOutputBulkExec_1_tMBE);

				conn_tMysqlOutputBulkExec_1_tMBE.close();

				/**
				 * [tMysqlOutputBulkExec_1_tMBE begin ] stop
				 */

				/**
				 * [tMysqlOutputBulkExec_1_tMBE main ] start
				 */

				currentVirtualComponent = "tMysqlOutputBulkExec_1";

				currentComponent = "tMysqlOutputBulkExec_1_tMBE";

				tos_count_tMysqlOutputBulkExec_1_tMBE++;

				/**
				 * [tMysqlOutputBulkExec_1_tMBE main ] stop
				 */

				/**
				 * [tMysqlOutputBulkExec_1_tMBE end ] start
				 */

				currentVirtualComponent = "tMysqlOutputBulkExec_1";

				currentComponent = "tMysqlOutputBulkExec_1_tMBE";

				ok_Hash.put("tMysqlOutputBulkExec_1_tMBE", true);
				end_Hash.put("tMysqlOutputBulkExec_1_tMBE",
						System.currentTimeMillis());

				/**
				 * [tMysqlOutputBulkExec_1_tMBE end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_1";

				try {
					if (batchSizeCounter_tAmazonMysqlOutput_1 != 0) {
						int countSum_tAmazonMysqlOutput_1 = 0;

						for (int countEach_tAmazonMysqlOutput_1 : pstmt_tAmazonMysqlOutput_1
								.executeBatch()) {
							countSum_tAmazonMysqlOutput_1 += (countEach_tAmazonMysqlOutput_1 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonMysqlOutput_1 += countSum_tAmazonMysqlOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				batchSizeCounter_tAmazonMysqlOutput_1 = 0;

				if (pstmt_tAmazonMysqlOutput_1 != null) {
					pstmt_tAmazonMysqlOutput_1.close();
				}

				if (commitCounter_tAmazonMysqlOutput_1 > 0) {

					conn_tAmazonMysqlOutput_1.commit();

				}

				conn_tAmazonMysqlOutput_1.close();

				resourceMap.put("finish_tAmazonMysqlOutput_1", true);

				nb_line_deleted_tAmazonMysqlOutput_1 = nb_line_deleted_tAmazonMysqlOutput_1
						+ deletedCount_tAmazonMysqlOutput_1;
				nb_line_update_tAmazonMysqlOutput_1 = nb_line_update_tAmazonMysqlOutput_1
						+ updatedCount_tAmazonMysqlOutput_1;
				nb_line_inserted_tAmazonMysqlOutput_1 = nb_line_inserted_tAmazonMysqlOutput_1
						+ insertedCount_tAmazonMysqlOutput_1;
				nb_line_rejected_tAmazonMysqlOutput_1 = nb_line_rejected_tAmazonMysqlOutput_1
						+ rejectedCount_tAmazonMysqlOutput_1;

				globalMap.put("tAmazonMysqlOutput_1_NB_LINE",
						nb_line_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_1);

				ok_Hash.put("tAmazonMysqlOutput_1", true);
				end_Hash.put("tAmazonMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutputBulkExec_1_tMOB finally ] start
				 */

				currentVirtualComponent = "tMysqlOutputBulkExec_1";

				currentComponent = "tMysqlOutputBulkExec_1_tMOB";

				if (resourceMap.get("finish_tMysqlOutputBulkExec_1_tMOB") == null) {
					if (resourceMap
							.get("csvWriter_tMysqlOutputBulkExec_1_tMOB") != null) {
						((java.io.BufferedWriter) resourceMap
								.get("csvWriter_tMysqlOutputBulkExec_1_tMOB"))
								.close();
					}
				}

				/**
				 * [tMysqlOutputBulkExec_1_tMOB finally ] stop
				 */

				/**
				 * [tMysqlOutputBulkExec_1_tMBE finally ] start
				 */

				currentVirtualComponent = "tMysqlOutputBulkExec_1";

				currentComponent = "tMysqlOutputBulkExec_1_tMBE";

				/**
				 * [tMysqlOutputBulkExec_1_tMBE finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_1";

				if (resourceMap.get("finish_tAmazonMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_1) {
							String errorMessage_tAmazonMysqlOutput_1 = "failed to close the connection in tAmazonMysqlOutput_1 :"
									+ sqlEx_tAmazonMysqlOutput_1.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_1);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				context.rowCountTSV = ((Integer) globalMap
						.get("tFileInputDelimited_1_NB_LINE"));

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row_tAmazonAuroraOutput_2_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_2_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_2_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class statCatcherOutputStruct implements
			routines.system.IPersistableRow<statCatcherOutputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(statCatcherOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				statCatcherOutputStruct statCatcherOutput = new statCatcherOutputStruct();
				statCatcherOutputStruct row_tAmazonAuroraOutput_2_in = statCatcherOutput;

				/**
				 * [tAmazonAuroraOutput_2_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_2_out", false);
				start_Hash.put("tAmazonAuroraOutput_2_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				int tos_count_tAmazonAuroraOutput_2_out = 0;

				int nb_line_tAmazonAuroraOutput_2 = 0;
				int nb_line_update_tAmazonAuroraOutput_2 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_2 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_2 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_2 = 0;

				int deletedCount_tAmazonAuroraOutput_2 = 0;
				int updatedCount_tAmazonAuroraOutput_2 = 0;
				int insertedCount_tAmazonAuroraOutput_2 = 0;

				int rejectedCount_tAmazonAuroraOutput_2 = 0;

				String tableName_tAmazonAuroraOutput_2 = "statcatcher";
				boolean whetherReject_tAmazonAuroraOutput_2 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_2 = calendar_tAmazonAuroraOutput_2
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_2 = calendar_tAmazonAuroraOutput_2
						.getTime().getTime();
				long date_tAmazonAuroraOutput_2;

				java.sql.Connection conn_tAmazonAuroraOutput_2 = null;
				String dbProperties_tAmazonAuroraOutput_2 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_2 = null;
				if (dbProperties_tAmazonAuroraOutput_2 == null
						|| dbProperties_tAmazonAuroraOutput_2.trim().length() == 0) {
					url_tAmazonAuroraOutput_2 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_2 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ properties_tAmazonAuroraOutput_2;
				}
				String driverClass_tAmazonAuroraOutput_2 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_2 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_2 = context.password;

				String dbPwd_tAmazonAuroraOutput_2 = decryptedPassword_tAmazonAuroraOutput_2;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_2);

				conn_tAmazonAuroraOutput_2 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_2,
								dbUser_tAmazonAuroraOutput_2,
								dbPwd_tAmazonAuroraOutput_2);

				resourceMap.put("conn_tAmazonAuroraOutput_2",
						conn_tAmazonAuroraOutput_2);
				conn_tAmazonAuroraOutput_2.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_2 = 10000;
				int commitCounter_tAmazonAuroraOutput_2 = 0;

				int count_tAmazonAuroraOutput_2 = 0;

				String insert_tAmazonAuroraOutput_2 = "INSERT INTO `"
						+ "statcatcher"
						+ "` (`moment`,`project`,`job`,`job_version`,`context`,`message_type`,`message`,`duration`,`firmName`) VALUES (?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_2 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_2 = conn_tAmazonAuroraOutput_2
						.prepareStatement(insert_tAmazonAuroraOutput_2);

				/**
				 * [tAmazonAuroraOutput_2_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_2_in", false);
				start_Hash.put("tAmazonAuroraOutput_2_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				int tos_count_tAmazonAuroraOutput_2_in = 0;

				/**
				 * [tAmazonAuroraOutput_2_in begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
					String firmName;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				statCatcherOutputStruct statCatcherOutput_tmp = new statCatcherOutputStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row4.pid = pid;
					row4.root_pid = rootPid;
					row4.father_pid = fatherPid;
					row4.project = projectName;
					row4.job = jobName;
					row4.context = contextStr;
					row4.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row4.message = scm.getMessage();
					row4.duration = scm.getDuration();
					row4.moment = scm.getMoment();
					row4.message_type = scm.getMessageType();
					row4.job_version = scm.getJobVersion();
					row4.job_repository_id = scm.getJobId();
					row4.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_2__Struct Var = Var__tMap_2;
						Var.firmName = context.inputDir.substring(
								context.inputDir.indexOf("/") + 1,
								context.inputDir.indexOf("/",
										context.inputDir.indexOf("/") + 1));// ###############################
																			// ###############################
																			// #
																			// Output
																			// tables

						statCatcherOutput = null;

						// # Output table : 'statCatcherOutput'
						statCatcherOutput_tmp.moment = row4.moment;
						statCatcherOutput_tmp.project = row4.project;
						statCatcherOutput_tmp.job = row4.job;
						statCatcherOutput_tmp.job_version = row4.job_version;
						statCatcherOutput_tmp.context = row4.context;
						statCatcherOutput_tmp.message_type = row4.message_type;
						statCatcherOutput_tmp.message = row4.message;
						statCatcherOutput_tmp.duration = row4.duration;
						statCatcherOutput_tmp.firmName = Var.firmName;
						statCatcherOutput = statCatcherOutput_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */
					// Start of branch "statCatcherOutput"
					if (statCatcherOutput != null) {

						/**
						 * [tAmazonAuroraOutput_2_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_2";

						currentComponent = "tAmazonAuroraOutput_2_in";

						row_tAmazonAuroraOutput_2_in = statCatcherOutput;

						tos_count_tAmazonAuroraOutput_2_in++;

						/**
						 * [tAmazonAuroraOutput_2_in main ] stop
						 */

						/**
						 * [tAmazonAuroraOutput_2_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_2";

						currentComponent = "tAmazonAuroraOutput_2_out";

						whetherReject_tAmazonAuroraOutput_2 = false;
						if (row_tAmazonAuroraOutput_2_in.moment != null) {
							date_tAmazonAuroraOutput_2 = row_tAmazonAuroraOutput_2_in.moment
									.getTime();
							if (date_tAmazonAuroraOutput_2 < year1_tAmazonAuroraOutput_2
									|| date_tAmazonAuroraOutput_2 >= year10000_tAmazonAuroraOutput_2) {
								pstmt_tAmazonAuroraOutput_2.setString(1,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tAmazonAuroraOutput_2.setTimestamp(1,
										new java.sql.Timestamp(
												date_tAmazonAuroraOutput_2));
							}
						} else {
							pstmt_tAmazonAuroraOutput_2.setNull(1,
									java.sql.Types.DATE);
						}

						if (row_tAmazonAuroraOutput_2_in.project == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(2,
									row_tAmazonAuroraOutput_2_in.project);
						}

						if (row_tAmazonAuroraOutput_2_in.job == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(3,
									row_tAmazonAuroraOutput_2_in.job);
						}

						if (row_tAmazonAuroraOutput_2_in.job_version == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(4,
									row_tAmazonAuroraOutput_2_in.job_version);
						}

						if (row_tAmazonAuroraOutput_2_in.context == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(5,
									row_tAmazonAuroraOutput_2_in.context);
						}

						if (row_tAmazonAuroraOutput_2_in.message_type == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(6,
									row_tAmazonAuroraOutput_2_in.message_type);
						}

						if (row_tAmazonAuroraOutput_2_in.message == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(7,
									row_tAmazonAuroraOutput_2_in.message);
						}

						if (row_tAmazonAuroraOutput_2_in.duration == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(8,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_2.setLong(8,
									row_tAmazonAuroraOutput_2_in.duration);
						}

						if (row_tAmazonAuroraOutput_2_in.firmName == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(9,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(9,
									row_tAmazonAuroraOutput_2_in.firmName);
						}

						pstmt_tAmazonAuroraOutput_2.addBatch();
						nb_line_tAmazonAuroraOutput_2++;

						batchSizeCounter_tAmazonAuroraOutput_2++;
						if (batchSize_tAmazonAuroraOutput_2 <= batchSizeCounter_tAmazonAuroraOutput_2) {
							try {
								int countSum_tAmazonAuroraOutput_2 = 0;
								for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_2 = 0;
								for (int countEach_tAmazonAuroraOutput_2 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
											: countEach_tAmazonAuroraOutput_2);
								}
								insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tAmazonAuroraOutput_2 = 0;
						}
						commitCounter_tAmazonAuroraOutput_2++;

						if (commitEvery_tAmazonAuroraOutput_2 <= commitCounter_tAmazonAuroraOutput_2) {

							try {
								int countSum_tAmazonAuroraOutput_2 = 0;
								for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_2 = 0;
								for (int countEach_tAmazonAuroraOutput_2 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
											: countEach_tAmazonAuroraOutput_2);
								}
								insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
								System.err.println(e.getMessage());

							}
							conn_tAmazonAuroraOutput_2.commit();
							commitCounter_tAmazonAuroraOutput_2 = 0;

						}

						tos_count_tAmazonAuroraOutput_2_out++;

						/**
						 * [tAmazonAuroraOutput_2_out main ] stop
						 */

					} // End of branch "statCatcherOutput"

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				ok_Hash.put("tAmazonAuroraOutput_2_in", true);
				end_Hash.put("tAmazonAuroraOutput_2_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_2_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_2 != 0) {
						int countSum_tAmazonAuroraOutput_2 = 0;

						for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_2 = 0;
					for (int countEach_tAmazonAuroraOutput_2 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
								: countEach_tAmazonAuroraOutput_2);
					}

					insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_2 = 0;

				if (pstmt_tAmazonAuroraOutput_2 != null) {

					pstmt_tAmazonAuroraOutput_2.close();

				}

				if (commitCounter_tAmazonAuroraOutput_2 > 0) {

					conn_tAmazonAuroraOutput_2.commit();

				}

				conn_tAmazonAuroraOutput_2.close();

				resourceMap.put("finish_tAmazonAuroraOutput_2", true);

				nb_line_deleted_tAmazonAuroraOutput_2 = nb_line_deleted_tAmazonAuroraOutput_2
						+ deletedCount_tAmazonAuroraOutput_2;
				nb_line_update_tAmazonAuroraOutput_2 = nb_line_update_tAmazonAuroraOutput_2
						+ updatedCount_tAmazonAuroraOutput_2;
				nb_line_inserted_tAmazonAuroraOutput_2 = nb_line_inserted_tAmazonAuroraOutput_2
						+ insertedCount_tAmazonAuroraOutput_2;
				nb_line_rejected_tAmazonAuroraOutput_2 = nb_line_rejected_tAmazonAuroraOutput_2
						+ rejectedCount_tAmazonAuroraOutput_2;

				globalMap.put("tAmazonAuroraOutput_2_NB_LINE",
						nb_line_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_2);

				ok_Hash.put("tAmazonAuroraOutput_2_out", true);
				end_Hash.put("tAmazonAuroraOutput_2_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_2_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				/**
				 * [tAmazonAuroraOutput_2_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_2") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_2) {
							String errorMessage_tAmazonAuroraOutput_2 = "failed to close the connection in tAmazonAuroraOutput_2 :"
									+ sqlEx_tAmazonAuroraOutput_2.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_2);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_2_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row_tAmazonAuroraOutput_3_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_3_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_3_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class logCatcherOutputStruct implements
			routines.system.IPersistableRow<logCatcherOutputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(logCatcherOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_StgSecurityImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_StgSecurityImport) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				logCatcherOutputStruct logCatcherOutput = new logCatcherOutputStruct();
				logCatcherOutputStruct row_tAmazonAuroraOutput_3_in = logCatcherOutput;

				/**
				 * [tAmazonAuroraOutput_3_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_3_out", false);
				start_Hash.put("tAmazonAuroraOutput_3_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_out";

				int tos_count_tAmazonAuroraOutput_3_out = 0;

				int nb_line_tAmazonAuroraOutput_3 = 0;
				int nb_line_update_tAmazonAuroraOutput_3 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_3 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_3 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_3 = 0;

				int deletedCount_tAmazonAuroraOutput_3 = 0;
				int updatedCount_tAmazonAuroraOutput_3 = 0;
				int insertedCount_tAmazonAuroraOutput_3 = 0;

				int rejectedCount_tAmazonAuroraOutput_3 = 0;

				String tableName_tAmazonAuroraOutput_3 = "logcatcher";
				boolean whetherReject_tAmazonAuroraOutput_3 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_3 = calendar_tAmazonAuroraOutput_3
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_3 = calendar_tAmazonAuroraOutput_3
						.getTime().getTime();
				long date_tAmazonAuroraOutput_3;

				java.sql.Connection conn_tAmazonAuroraOutput_3 = null;
				String dbProperties_tAmazonAuroraOutput_3 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_3 = null;
				if (dbProperties_tAmazonAuroraOutput_3 == null
						|| dbProperties_tAmazonAuroraOutput_3.trim().length() == 0) {
					url_tAmazonAuroraOutput_3 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_3 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ properties_tAmazonAuroraOutput_3;
				}
				String driverClass_tAmazonAuroraOutput_3 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_3 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_3 = context.password;

				String dbPwd_tAmazonAuroraOutput_3 = decryptedPassword_tAmazonAuroraOutput_3;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_3);

				conn_tAmazonAuroraOutput_3 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_3,
								dbUser_tAmazonAuroraOutput_3,
								dbPwd_tAmazonAuroraOutput_3);

				resourceMap.put("conn_tAmazonAuroraOutput_3",
						conn_tAmazonAuroraOutput_3);
				conn_tAmazonAuroraOutput_3.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_3 = 10000;
				int commitCounter_tAmazonAuroraOutput_3 = 0;

				int count_tAmazonAuroraOutput_3 = 0;

				String insert_tAmazonAuroraOutput_3 = "INSERT INTO `"
						+ "logcatcher"
						+ "` (`moment`,`project`,`job`,`context`,`priority`,`type`,`origin`,`message`,`code`,`firmName`) VALUES (?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_3 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_3 = conn_tAmazonAuroraOutput_3
						.prepareStatement(insert_tAmazonAuroraOutput_3);

				/**
				 * [tAmazonAuroraOutput_3_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_3_in", false);
				start_Hash.put("tAmazonAuroraOutput_3_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_in";

				int tos_count_tAmazonAuroraOutput_3_in = 0;

				/**
				 * [tAmazonAuroraOutput_3_in begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
					String firmName;
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				logCatcherOutputStruct logCatcherOutput_tmp = new logCatcherOutputStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row5.type = lcm.getType();
					row5.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row5.priority = lcm.getPriority();
					row5.message = lcm.getMessage();
					row5.code = lcm.getCode();

					row5.moment = java.util.Calendar.getInstance().getTime();

					row5.pid = pid;
					row5.root_pid = rootPid;
					row5.father_pid = fatherPid;

					row5.project = projectName;
					row5.job = jobName;
					row5.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_3__Struct Var = Var__tMap_3;
						Var.firmName = context.inputDir.substring(
								context.inputDir.indexOf("/") + 1,
								context.inputDir.indexOf("/",
										context.inputDir.indexOf("/") + 1));// ###############################
																			// ###############################
																			// #
																			// Output
																			// tables

						logCatcherOutput = null;

						// # Output table : 'logCatcherOutput'
						logCatcherOutput_tmp.moment = row5.moment;
						logCatcherOutput_tmp.project = row5.project;
						logCatcherOutput_tmp.job = row5.job;
						logCatcherOutput_tmp.context = row5.context;
						logCatcherOutput_tmp.priority = row5.priority;
						logCatcherOutput_tmp.type = row5.type;
						logCatcherOutput_tmp.origin = row5.origin;
						logCatcherOutput_tmp.message = row5.message;
						logCatcherOutput_tmp.code = row5.code;
						logCatcherOutput_tmp.firmName = Var.firmName;
						logCatcherOutput = logCatcherOutput_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_3 = false;

					tos_count_tMap_3++;

					/**
					 * [tMap_3 main ] stop
					 */
					// Start of branch "logCatcherOutput"
					if (logCatcherOutput != null) {

						/**
						 * [tAmazonAuroraOutput_3_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_3";

						currentComponent = "tAmazonAuroraOutput_3_in";

						row_tAmazonAuroraOutput_3_in = logCatcherOutput;

						tos_count_tAmazonAuroraOutput_3_in++;

						/**
						 * [tAmazonAuroraOutput_3_in main ] stop
						 */

						/**
						 * [tAmazonAuroraOutput_3_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_3";

						currentComponent = "tAmazonAuroraOutput_3_out";

						whetherReject_tAmazonAuroraOutput_3 = false;
						if (row_tAmazonAuroraOutput_3_in.moment != null) {
							date_tAmazonAuroraOutput_3 = row_tAmazonAuroraOutput_3_in.moment
									.getTime();
							if (date_tAmazonAuroraOutput_3 < year1_tAmazonAuroraOutput_3
									|| date_tAmazonAuroraOutput_3 >= year10000_tAmazonAuroraOutput_3) {
								pstmt_tAmazonAuroraOutput_3.setString(1,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tAmazonAuroraOutput_3.setTimestamp(1,
										new java.sql.Timestamp(
												date_tAmazonAuroraOutput_3));
							}
						} else {
							pstmt_tAmazonAuroraOutput_3.setNull(1,
									java.sql.Types.DATE);
						}

						if (row_tAmazonAuroraOutput_3_in.project == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(2,
									row_tAmazonAuroraOutput_3_in.project);
						}

						if (row_tAmazonAuroraOutput_3_in.job == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(3,
									row_tAmazonAuroraOutput_3_in.job);
						}

						if (row_tAmazonAuroraOutput_3_in.context == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(4,
									row_tAmazonAuroraOutput_3_in.context);
						}

						if (row_tAmazonAuroraOutput_3_in.priority == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(5,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_3.setInt(5,
									row_tAmazonAuroraOutput_3_in.priority);
						}

						if (row_tAmazonAuroraOutput_3_in.type == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(6,
									row_tAmazonAuroraOutput_3_in.type);
						}

						if (row_tAmazonAuroraOutput_3_in.origin == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(7,
									row_tAmazonAuroraOutput_3_in.origin);
						}

						if (row_tAmazonAuroraOutput_3_in.message == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(8,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(8,
									row_tAmazonAuroraOutput_3_in.message);
						}

						if (row_tAmazonAuroraOutput_3_in.code == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(9,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_3.setInt(9,
									row_tAmazonAuroraOutput_3_in.code);
						}

						if (row_tAmazonAuroraOutput_3_in.firmName == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(10,
									row_tAmazonAuroraOutput_3_in.firmName);
						}

						pstmt_tAmazonAuroraOutput_3.addBatch();
						nb_line_tAmazonAuroraOutput_3++;

						batchSizeCounter_tAmazonAuroraOutput_3++;
						if (batchSize_tAmazonAuroraOutput_3 <= batchSizeCounter_tAmazonAuroraOutput_3) {
							try {
								int countSum_tAmazonAuroraOutput_3 = 0;
								for (int countEach_tAmazonAuroraOutput_3 : pstmt_tAmazonAuroraOutput_3
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_3 = 0;
								for (int countEach_tAmazonAuroraOutput_3 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
											: countEach_tAmazonAuroraOutput_3);
								}
								insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tAmazonAuroraOutput_3 = 0;
						}
						commitCounter_tAmazonAuroraOutput_3++;

						if (commitEvery_tAmazonAuroraOutput_3 <= commitCounter_tAmazonAuroraOutput_3) {

							try {
								int countSum_tAmazonAuroraOutput_3 = 0;
								for (int countEach_tAmazonAuroraOutput_3 : pstmt_tAmazonAuroraOutput_3
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_3 = 0;
								for (int countEach_tAmazonAuroraOutput_3 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
											: countEach_tAmazonAuroraOutput_3);
								}
								insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;
								System.err.println(e.getMessage());

							}
							conn_tAmazonAuroraOutput_3.commit();
							commitCounter_tAmazonAuroraOutput_3 = 0;

						}

						tos_count_tAmazonAuroraOutput_3_out++;

						/**
						 * [tAmazonAuroraOutput_3_out main ] stop
						 */

					} // End of branch "logCatcherOutput"

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_in";

				ok_Hash.put("tAmazonAuroraOutput_3_in", true);
				end_Hash.put("tAmazonAuroraOutput_3_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_3_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_3 != 0) {
						int countSum_tAmazonAuroraOutput_3 = 0;

						for (int countEach_tAmazonAuroraOutput_3 : pstmt_tAmazonAuroraOutput_3
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_3 = 0;
					for (int countEach_tAmazonAuroraOutput_3 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
								: countEach_tAmazonAuroraOutput_3);
					}

					insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_3 = 0;

				if (pstmt_tAmazonAuroraOutput_3 != null) {

					pstmt_tAmazonAuroraOutput_3.close();

				}

				if (commitCounter_tAmazonAuroraOutput_3 > 0) {

					conn_tAmazonAuroraOutput_3.commit();

				}

				conn_tAmazonAuroraOutput_3.close();

				resourceMap.put("finish_tAmazonAuroraOutput_3", true);

				nb_line_deleted_tAmazonAuroraOutput_3 = nb_line_deleted_tAmazonAuroraOutput_3
						+ deletedCount_tAmazonAuroraOutput_3;
				nb_line_update_tAmazonAuroraOutput_3 = nb_line_update_tAmazonAuroraOutput_3
						+ updatedCount_tAmazonAuroraOutput_3;
				nb_line_inserted_tAmazonAuroraOutput_3 = nb_line_inserted_tAmazonAuroraOutput_3
						+ insertedCount_tAmazonAuroraOutput_3;
				nb_line_rejected_tAmazonAuroraOutput_3 = nb_line_rejected_tAmazonAuroraOutput_3
						+ rejectedCount_tAmazonAuroraOutput_3;

				globalMap.put("tAmazonAuroraOutput_3_NB_LINE",
						nb_line_tAmazonAuroraOutput_3);
				globalMap.put("tAmazonAuroraOutput_3_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_3);
				globalMap.put("tAmazonAuroraOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_3);
				globalMap.put("tAmazonAuroraOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_3);
				globalMap.put("tAmazonAuroraOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_3);

				ok_Hash.put("tAmazonAuroraOutput_3_out", true);
				end_Hash.put("tAmazonAuroraOutput_3_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_3_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_in";

				/**
				 * [tAmazonAuroraOutput_3_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_3") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_3") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_3")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_3) {
							String errorMessage_tAmazonAuroraOutput_3 = "failed to close the connection in tAmazonAuroraOutput_3 :"
									+ sqlEx_tAmazonAuroraOutput_3.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_3);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_3_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final StgSecurityImport StgSecurityImportClass = new StgSecurityImport();

		int exitCode = StgSecurityImportClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = StgSecurityImport.class
					.getClassLoader().getResourceAsStream(
							"reliazedgainloss/stgsecurityimport_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.serverIp = (String) context.getProperty("serverIp");
			context.database = (String) context.getProperty("database");
			context.filepath_advisor = (String) context
					.getProperty("filepath_advisor");
			context.positionpath = (String) context.getProperty("positionpath");
			context.custodianpath = (String) context
					.getProperty("custodianpath");
			context.taxlotpath = (String) context.getProperty("taxlotpath");
			context.transactionpath = (String) context
					.getProperty("transactionpath");
			context.securitypath = (String) context.getProperty("securitypath");
			context.accountpath = (String) context.getProperty("accountpath");
			context.inputDir = (String) context.getProperty("inputDir");
			context.contextDir = (String) context.getProperty("contextDir");
			context.password = (String) context.getProperty("password");
			context.username = (String) context.getProperty("username");
			context.localpath = (String) context.getProperty("localpath");
			context.commondb = (String) context.getProperty("commondb");
			context.port = (String) context.getProperty("port");
			context.stagingdb = (String) context.getProperty("stagingdb");
			context.host = (String) context.getProperty("host");
			try {
				context.rowCountRejectedFirm = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("rowCountRejectedFirm"));
			} catch (NumberFormatException e) {
				context.rowCountRejectedFirm = null;
			}
			context.firm = (String) context.getProperty("firm");
			try {
				context.rowCountFirm = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountFirm"));
			} catch (NumberFormatException e) {
				context.rowCountFirm = null;
			}
			try {
				context.rowCountStaging = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountStaging"));
			} catch (NumberFormatException e) {
				context.rowCountStaging = null;
			}
			try {
				context.rowCountTSV = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountTSV"));
			} catch (NumberFormatException e) {
				context.rowCountTSV = null;
			}
			try {
				context.rowCountUpdated = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountUpdated"));
			} catch (NumberFormatException e) {
				context.rowCountUpdated = null;
			}
			context.teamPreferenceOption = (String) context
					.getProperty("teamPreferenceOption");
			context.date = (String) context.getProperty("date");
			context.firmId = (String) context.getProperty("firmId");
			context.pathforlocal = (String) context.getProperty("pathforlocal");
			context.filestorage = (String) context.getProperty("filestorage");
			context.filestorage2 = (String) context.getProperty("filestorage2");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("serverIp")) {
				context.serverIp = (String) parentContextMap.get("serverIp");
			}
			if (parentContextMap.containsKey("database")) {
				context.database = (String) parentContextMap.get("database");
			}
			if (parentContextMap.containsKey("filepath_advisor")) {
				context.filepath_advisor = (String) parentContextMap
						.get("filepath_advisor");
			}
			if (parentContextMap.containsKey("positionpath")) {
				context.positionpath = (String) parentContextMap
						.get("positionpath");
			}
			if (parentContextMap.containsKey("custodianpath")) {
				context.custodianpath = (String) parentContextMap
						.get("custodianpath");
			}
			if (parentContextMap.containsKey("taxlotpath")) {
				context.taxlotpath = (String) parentContextMap
						.get("taxlotpath");
			}
			if (parentContextMap.containsKey("transactionpath")) {
				context.transactionpath = (String) parentContextMap
						.get("transactionpath");
			}
			if (parentContextMap.containsKey("securitypath")) {
				context.securitypath = (String) parentContextMap
						.get("securitypath");
			}
			if (parentContextMap.containsKey("accountpath")) {
				context.accountpath = (String) parentContextMap
						.get("accountpath");
			}
			if (parentContextMap.containsKey("inputDir")) {
				context.inputDir = (String) parentContextMap.get("inputDir");
			}
			if (parentContextMap.containsKey("contextDir")) {
				context.contextDir = (String) parentContextMap
						.get("contextDir");
			}
			if (parentContextMap.containsKey("password")) {
				context.password = (String) parentContextMap.get("password");
			}
			if (parentContextMap.containsKey("username")) {
				context.username = (String) parentContextMap.get("username");
			}
			if (parentContextMap.containsKey("localpath")) {
				context.localpath = (String) parentContextMap.get("localpath");
			}
			if (parentContextMap.containsKey("commondb")) {
				context.commondb = (String) parentContextMap.get("commondb");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (String) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("stagingdb")) {
				context.stagingdb = (String) parentContextMap.get("stagingdb");
			}
			if (parentContextMap.containsKey("host")) {
				context.host = (String) parentContextMap.get("host");
			}
			if (parentContextMap.containsKey("rowCountRejectedFirm")) {
				context.rowCountRejectedFirm = (Integer) parentContextMap
						.get("rowCountRejectedFirm");
			}
			if (parentContextMap.containsKey("firm")) {
				context.firm = (String) parentContextMap.get("firm");
			}
			if (parentContextMap.containsKey("rowCountFirm")) {
				context.rowCountFirm = (Integer) parentContextMap
						.get("rowCountFirm");
			}
			if (parentContextMap.containsKey("rowCountStaging")) {
				context.rowCountStaging = (Integer) parentContextMap
						.get("rowCountStaging");
			}
			if (parentContextMap.containsKey("rowCountTSV")) {
				context.rowCountTSV = (Integer) parentContextMap
						.get("rowCountTSV");
			}
			if (parentContextMap.containsKey("rowCountUpdated")) {
				context.rowCountUpdated = (Integer) parentContextMap
						.get("rowCountUpdated");
			}
			if (parentContextMap.containsKey("teamPreferenceOption")) {
				context.teamPreferenceOption = (String) parentContextMap
						.get("teamPreferenceOption");
			}
			if (parentContextMap.containsKey("date")) {
				context.date = (String) parentContextMap.get("date");
			}
			if (parentContextMap.containsKey("firmId")) {
				context.firmId = (String) parentContextMap.get("firmId");
			}
			if (parentContextMap.containsKey("pathforlocal")) {
				context.pathforlocal = (String) parentContextMap
						.get("pathforlocal");
			}
			if (parentContextMap.containsKey("filestorage")) {
				context.filestorage = (String) parentContextMap
						.get("filestorage");
			}
			if (parentContextMap.containsKey("filestorage2")) {
				context.filestorage2 = (String) parentContextMap
						.get("filestorage2");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : StgSecurityImport");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 191202 characters generated by Talend Open Studio for Data Integration on the
 * October 24, 2016 5:33:52 PM IST
 ************************************************************************************************/
