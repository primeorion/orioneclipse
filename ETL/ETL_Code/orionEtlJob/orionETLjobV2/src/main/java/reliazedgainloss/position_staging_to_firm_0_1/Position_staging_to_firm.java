// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package reliazedgainloss.position_staging_to_firm_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Position_staging_to_firm Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.0.20160510_1709
 * @status 
 */
public class Position_staging_to_firm implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (serverIp != null) {

				this.setProperty("serverIp", serverIp.toString());

			}

			if (database != null) {

				this.setProperty("database", database.toString());

			}

			if (filepath_position != null) {

				this.setProperty("filepath_position",
						filepath_position.toString());

			}

			if (filename != null) {

				this.setProperty("filename", filename.toString());

			}

			if (filepath_advisor != null) {

				this.setProperty("filepath_advisor",
						filepath_advisor.toString());

			}

			if (custodianpath != null) {

				this.setProperty("custodianpath", custodianpath.toString());

			}

			if (inputDir != null) {

				this.setProperty("inputDir", inputDir.toString());

			}

			if (taxlotpath != null) {

				this.setProperty("taxlotpath", taxlotpath.toString());

			}

			if (contextDir != null) {

				this.setProperty("contextDir", contextDir.toString());

			}

			if (password != null) {

				this.setProperty("password", password.toString());

			}

			if (transactionpath != null) {

				this.setProperty("transactionpath", transactionpath.toString());

			}

			if (positionpath != null) {

				this.setProperty("positionpath", positionpath.toString());

			}

			if (securitypath != null) {

				this.setProperty("securitypath", securitypath.toString());

			}

			if (accountpath != null) {

				this.setProperty("accountpath", accountpath.toString());

			}

			if (username != null) {

				this.setProperty("username", username.toString());

			}

			if (localpath != null) {

				this.setProperty("localpath", localpath.toString());

			}

			if (commondb != null) {

				this.setProperty("commondb", commondb.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (stagingdb != null) {

				this.setProperty("stagingdb", stagingdb.toString());

			}

			if (host != null) {

				this.setProperty("host", host.toString());

			}

			if (rowCountRejectedFirm != null) {

				this.setProperty("rowCountRejectedFirm",
						rowCountRejectedFirm.toString());

			}

			if (firm != null) {

				this.setProperty("firm", firm.toString());

			}

			if (rowCountFirm != null) {

				this.setProperty("rowCountFirm", rowCountFirm.toString());

			}

			if (rowCountStaging != null) {

				this.setProperty("rowCountStaging", rowCountStaging.toString());

			}

			if (rowCountTSV != null) {

				this.setProperty("rowCountTSV", rowCountTSV.toString());

			}

			if (rowCountUpdated != null) {

				this.setProperty("rowCountUpdated", rowCountUpdated.toString());

			}

			if (teamPreferenceOption != null) {

				this.setProperty("teamPreferenceOption",
						teamPreferenceOption.toString());

			}

			if (date != null) {

				this.setProperty("date", date.toString());

			}

			if (firmId != null) {

				this.setProperty("firmId", firmId.toString());

			}

			if (firmint3 != null) {

				this.setProperty("firmint3", firmint3.toString());

			}

			if (pathforlocal != null) {

				this.setProperty("pathforlocal", pathforlocal.toString());

			}

			if (filestorage != null) {

				this.setProperty("filestorage", filestorage.toString());

			}

			if (a != null) {

				this.setProperty("a", a.toString());

			}

			if (b != null) {

				this.setProperty("b", b.toString());

			}

			if (c != null) {

				this.setProperty("c", c.toString());

			}

			if (d != null) {

				this.setProperty("d", d.toString());

			}

			if (e != null) {

				this.setProperty("e", e.toString());

			}

			if (f != null) {

				this.setProperty("f", f.toString());

			}

			if (g != null) {

				this.setProperty("g", g.toString());

			}

			if (filestorage2 != null) {

				this.setProperty("filestorage2", filestorage2.toString());

			}

			if (firmids != null) {

				this.setProperty("firmids", firmids.toString());

			}

		}

		public String serverIp;

		public String getServerIp() {
			return this.serverIp;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		public String filepath_position;

		public String getFilepath_position() {
			return this.filepath_position;
		}

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		public String filepath_advisor;

		public String getFilepath_advisor() {
			return this.filepath_advisor;
		}

		public String custodianpath;

		public String getCustodianpath() {
			return this.custodianpath;
		}

		public String inputDir;

		public String getInputDir() {
			return this.inputDir;
		}

		public String taxlotpath;

		public String getTaxlotpath() {
			return this.taxlotpath;
		}

		public String contextDir;

		public String getContextDir() {
			return this.contextDir;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String transactionpath;

		public String getTransactionpath() {
			return this.transactionpath;
		}

		public String positionpath;

		public String getPositionpath() {
			return this.positionpath;
		}

		public String securitypath;

		public String getSecuritypath() {
			return this.securitypath;
		}

		public String accountpath;

		public String getAccountpath() {
			return this.accountpath;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String localpath;

		public String getLocalpath() {
			return this.localpath;
		}

		public String commondb;

		public String getCommondb() {
			return this.commondb;
		}

		public String port;

		public String getPort() {
			return this.port;
		}

		public String stagingdb;

		public String getStagingdb() {
			return this.stagingdb;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public Integer rowCountRejectedFirm;

		public Integer getRowCountRejectedFirm() {
			return this.rowCountRejectedFirm;
		}

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		public Integer rowCountFirm;

		public Integer getRowCountFirm() {
			return this.rowCountFirm;
		}

		public Integer rowCountStaging;

		public Integer getRowCountStaging() {
			return this.rowCountStaging;
		}

		public Integer rowCountTSV;

		public Integer getRowCountTSV() {
			return this.rowCountTSV;
		}

		public Integer rowCountUpdated;

		public Integer getRowCountUpdated() {
			return this.rowCountUpdated;
		}

		public String teamPreferenceOption;

		public String getTeamPreferenceOption() {
			return this.teamPreferenceOption;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String firmId;

		public String getFirmId() {
			return this.firmId;
		}

		public String firmint3;

		public String getFirmint3() {
			return this.firmint3;
		}

		public String pathforlocal;

		public String getPathforlocal() {
			return this.pathforlocal;
		}

		public String filestorage;

		public String getFilestorage() {
			return this.filestorage;
		}

		public Boolean a;

		public Boolean getA() {
			return this.a;
		}

		public Boolean b;

		public Boolean getB() {
			return this.b;
		}

		public Boolean c;

		public Boolean getC() {
			return this.c;
		}

		public Boolean d;

		public Boolean getD() {
			return this.d;
		}

		public Boolean e;

		public Boolean getE() {
			return this.e;
		}

		public Boolean f;

		public Boolean getF() {
			return this.f;
		}

		public Boolean g;

		public Boolean getG() {
			return this.g;
		}

		public String filestorage2;

		public String getFilestorage2() {
			return this.filestorage2;
		}

		public Integer firmids;

		public Integer getFirmids() {
			return this.firmids;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Position_staging_to_firm";
	private final String projectName = "RELIAZEDGAINLOSS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_gDwPoCvfEeaxKaHYAuT6Yw", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Position_staging_to_firm.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Position_staging_to_firm.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tStatCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tWarn_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tWarn_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMysqlRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_7_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row51_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row52_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_5_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row53_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_6_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_1_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_1_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_1_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAmazonAuroraOutput_2_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_2_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_2_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAmazonAuroraInput_2_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_2_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_2_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraConnection_1_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraConnection_1_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_3_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_3_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_3_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_8_TMAP_OUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tMap_8_TMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tMap_8_TMAP_IN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_7_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_7_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_7_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_7_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_1_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_1_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_1_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_4_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_4_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_4_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_5_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_5_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_5_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_5_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_6_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_6_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_6_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_6_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tStatCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_2_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraConnection_1_out_onSubJobError(
			Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_3_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_7_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_1_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_4_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_5_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_6_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row_tAmazonAuroraOutput_1_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_1_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_1_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class statCatcherOutputStruct implements
			routines.system.IPersistableRow<statCatcherOutputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(statCatcherOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				statCatcherOutputStruct statCatcherOutput = new statCatcherOutputStruct();
				statCatcherOutputStruct row_tAmazonAuroraOutput_1_in = statCatcherOutput;

				/**
				 * [tAmazonAuroraOutput_1_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_1_out", false);
				start_Hash.put("tAmazonAuroraOutput_1_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_out";

				int tos_count_tAmazonAuroraOutput_1_out = 0;

				int nb_line_tAmazonAuroraOutput_1 = 0;
				int nb_line_update_tAmazonAuroraOutput_1 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_1 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_1 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_1 = 0;

				int deletedCount_tAmazonAuroraOutput_1 = 0;
				int updatedCount_tAmazonAuroraOutput_1 = 0;
				int insertedCount_tAmazonAuroraOutput_1 = 0;

				int rejectedCount_tAmazonAuroraOutput_1 = 0;

				String tableName_tAmazonAuroraOutput_1 = "statcatcher";
				boolean whetherReject_tAmazonAuroraOutput_1 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_1 = calendar_tAmazonAuroraOutput_1
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_1 = calendar_tAmazonAuroraOutput_1
						.getTime().getTime();
				long date_tAmazonAuroraOutput_1;

				java.sql.Connection conn_tAmazonAuroraOutput_1 = null;
				String dbProperties_tAmazonAuroraOutput_1 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_1 = null;
				if (dbProperties_tAmazonAuroraOutput_1 == null
						|| dbProperties_tAmazonAuroraOutput_1.trim().length() == 0) {
					url_tAmazonAuroraOutput_1 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_1 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ properties_tAmazonAuroraOutput_1;
				}
				String driverClass_tAmazonAuroraOutput_1 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_1 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_1 = context.password;

				String dbPwd_tAmazonAuroraOutput_1 = decryptedPassword_tAmazonAuroraOutput_1;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_1);

				conn_tAmazonAuroraOutput_1 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_1,
								dbUser_tAmazonAuroraOutput_1,
								dbPwd_tAmazonAuroraOutput_1);

				resourceMap.put("conn_tAmazonAuroraOutput_1",
						conn_tAmazonAuroraOutput_1);
				conn_tAmazonAuroraOutput_1.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_1 = 10000;
				int commitCounter_tAmazonAuroraOutput_1 = 0;

				int count_tAmazonAuroraOutput_1 = 0;

				String insert_tAmazonAuroraOutput_1 = "INSERT INTO `"
						+ "statcatcher"
						+ "` (`moment`,`project`,`job`,`job_version`,`context`,`message_type`,`message`,`duration`,`firmName`) VALUES (?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_1 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_1 = conn_tAmazonAuroraOutput_1
						.prepareStatement(insert_tAmazonAuroraOutput_1);

				/**
				 * [tAmazonAuroraOutput_1_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_1_in", false);
				start_Hash.put("tAmazonAuroraOutput_1_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_in";

				int tos_count_tAmazonAuroraOutput_1_in = 0;

				/**
				 * [tAmazonAuroraOutput_1_in begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
					String firmName;
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				statCatcherOutputStruct statCatcherOutput_tmp = new statCatcherOutputStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row7.pid = pid;
					row7.root_pid = rootPid;
					row7.father_pid = fatherPid;
					row7.project = projectName;
					row7.job = jobName;
					row7.context = contextStr;
					row7.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row7.message = scm.getMessage();
					row7.duration = scm.getDuration();
					row7.moment = scm.getMoment();
					row7.message_type = scm.getMessageType();
					row7.job_version = scm.getJobVersion();
					row7.job_repository_id = scm.getJobId();
					row7.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tMap_4 main ] start
					 */

					currentComponent = "tMap_4";

					boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_4 = false;
					boolean mainRowRejected_tMap_4 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_4__Struct Var = Var__tMap_4;
						Var.firmName = context.inputDir.substring(
								context.inputDir.indexOf("/") + 1,
								context.inputDir.indexOf("/",
										context.inputDir.indexOf("/") + 1));// ###############################
																			// ###############################
																			// #
																			// Output
																			// tables

						statCatcherOutput = null;

						// # Output table : 'statCatcherOutput'
						statCatcherOutput_tmp.moment = row7.moment;
						statCatcherOutput_tmp.project = row7.project;
						statCatcherOutput_tmp.job = row7.job;
						statCatcherOutput_tmp.job_version = row7.job_version;
						statCatcherOutput_tmp.context = row7.context;
						statCatcherOutput_tmp.message_type = row7.message_type;
						statCatcherOutput_tmp.message = row7.message;
						statCatcherOutput_tmp.duration = row7.duration;
						statCatcherOutput_tmp.firmName = Var.firmName;
						statCatcherOutput = statCatcherOutput_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_4 = false;

					tos_count_tMap_4++;

					/**
					 * [tMap_4 main ] stop
					 */
					// Start of branch "statCatcherOutput"
					if (statCatcherOutput != null) {

						/**
						 * [tAmazonAuroraOutput_1_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_1";

						currentComponent = "tAmazonAuroraOutput_1_in";

						row_tAmazonAuroraOutput_1_in = statCatcherOutput;

						tos_count_tAmazonAuroraOutput_1_in++;

						/**
						 * [tAmazonAuroraOutput_1_in main ] stop
						 */

						/**
						 * [tAmazonAuroraOutput_1_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_1";

						currentComponent = "tAmazonAuroraOutput_1_out";

						whetherReject_tAmazonAuroraOutput_1 = false;
						if (row_tAmazonAuroraOutput_1_in.moment != null) {
							date_tAmazonAuroraOutput_1 = row_tAmazonAuroraOutput_1_in.moment
									.getTime();
							if (date_tAmazonAuroraOutput_1 < year1_tAmazonAuroraOutput_1
									|| date_tAmazonAuroraOutput_1 >= year10000_tAmazonAuroraOutput_1) {
								pstmt_tAmazonAuroraOutput_1.setString(1,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tAmazonAuroraOutput_1.setTimestamp(1,
										new java.sql.Timestamp(
												date_tAmazonAuroraOutput_1));
							}
						} else {
							pstmt_tAmazonAuroraOutput_1.setNull(1,
									java.sql.Types.DATE);
						}

						if (row_tAmazonAuroraOutput_1_in.project == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(2,
									row_tAmazonAuroraOutput_1_in.project);
						}

						if (row_tAmazonAuroraOutput_1_in.job == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(3,
									row_tAmazonAuroraOutput_1_in.job);
						}

						if (row_tAmazonAuroraOutput_1_in.job_version == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(4,
									row_tAmazonAuroraOutput_1_in.job_version);
						}

						if (row_tAmazonAuroraOutput_1_in.context == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(5,
									row_tAmazonAuroraOutput_1_in.context);
						}

						if (row_tAmazonAuroraOutput_1_in.message_type == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(6,
									row_tAmazonAuroraOutput_1_in.message_type);
						}

						if (row_tAmazonAuroraOutput_1_in.message == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(7,
									row_tAmazonAuroraOutput_1_in.message);
						}

						if (row_tAmazonAuroraOutput_1_in.duration == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(8,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_1.setLong(8,
									row_tAmazonAuroraOutput_1_in.duration);
						}

						if (row_tAmazonAuroraOutput_1_in.firmName == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(9,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(9,
									row_tAmazonAuroraOutput_1_in.firmName);
						}

						pstmt_tAmazonAuroraOutput_1.addBatch();
						nb_line_tAmazonAuroraOutput_1++;

						batchSizeCounter_tAmazonAuroraOutput_1++;
						if (batchSize_tAmazonAuroraOutput_1 <= batchSizeCounter_tAmazonAuroraOutput_1) {
							try {
								int countSum_tAmazonAuroraOutput_1 = 0;
								for (int countEach_tAmazonAuroraOutput_1 : pstmt_tAmazonAuroraOutput_1
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_1 = 0;
								for (int countEach_tAmazonAuroraOutput_1 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
											: countEach_tAmazonAuroraOutput_1);
								}
								insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tAmazonAuroraOutput_1 = 0;
						}
						commitCounter_tAmazonAuroraOutput_1++;

						if (commitEvery_tAmazonAuroraOutput_1 <= commitCounter_tAmazonAuroraOutput_1) {

							try {
								int countSum_tAmazonAuroraOutput_1 = 0;
								for (int countEach_tAmazonAuroraOutput_1 : pstmt_tAmazonAuroraOutput_1
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_1 = 0;
								for (int countEach_tAmazonAuroraOutput_1 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
											: countEach_tAmazonAuroraOutput_1);
								}
								insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
								System.err.println(e.getMessage());

							}
							conn_tAmazonAuroraOutput_1.commit();
							commitCounter_tAmazonAuroraOutput_1 = 0;

						}

						tos_count_tAmazonAuroraOutput_1_out++;

						/**
						 * [tAmazonAuroraOutput_1_out main ] stop
						 */

					} // End of branch "statCatcherOutput"

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_in";

				ok_Hash.put("tAmazonAuroraOutput_1_in", true);
				end_Hash.put("tAmazonAuroraOutput_1_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_1_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_1 != 0) {
						int countSum_tAmazonAuroraOutput_1 = 0;

						for (int countEach_tAmazonAuroraOutput_1 : pstmt_tAmazonAuroraOutput_1
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_1 = 0;
					for (int countEach_tAmazonAuroraOutput_1 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
								: countEach_tAmazonAuroraOutput_1);
					}

					insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_1 = 0;

				if (pstmt_tAmazonAuroraOutput_1 != null) {

					pstmt_tAmazonAuroraOutput_1.close();

				}

				if (commitCounter_tAmazonAuroraOutput_1 > 0) {

					conn_tAmazonAuroraOutput_1.commit();

				}

				conn_tAmazonAuroraOutput_1.close();

				resourceMap.put("finish_tAmazonAuroraOutput_1", true);

				nb_line_deleted_tAmazonAuroraOutput_1 = nb_line_deleted_tAmazonAuroraOutput_1
						+ deletedCount_tAmazonAuroraOutput_1;
				nb_line_update_tAmazonAuroraOutput_1 = nb_line_update_tAmazonAuroraOutput_1
						+ updatedCount_tAmazonAuroraOutput_1;
				nb_line_inserted_tAmazonAuroraOutput_1 = nb_line_inserted_tAmazonAuroraOutput_1
						+ insertedCount_tAmazonAuroraOutput_1;
				nb_line_rejected_tAmazonAuroraOutput_1 = nb_line_rejected_tAmazonAuroraOutput_1
						+ rejectedCount_tAmazonAuroraOutput_1;

				globalMap.put("tAmazonAuroraOutput_1_NB_LINE",
						nb_line_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_1);

				ok_Hash.put("tAmazonAuroraOutput_1_out", true);
				end_Hash.put("tAmazonAuroraOutput_1_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_1_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_in";

				/**
				 * [tAmazonAuroraOutput_1_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_1") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_1) {
							String errorMessage_tAmazonAuroraOutput_1 = "failed to close the connection in tAmazonAuroraOutput_1 :"
									+ sqlEx_tAmazonAuroraOutput_1.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_1);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_1_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row_tAmazonAuroraOutput_2_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_2_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_2_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class logCatcherOutputStruct implements
			routines.system.IPersistableRow<logCatcherOutputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(logCatcherOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();
				logCatcherOutputStruct logCatcherOutput = new logCatcherOutputStruct();
				logCatcherOutputStruct row_tAmazonAuroraOutput_2_in = logCatcherOutput;

				/**
				 * [tAmazonAuroraOutput_2_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_2_out", false);
				start_Hash.put("tAmazonAuroraOutput_2_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				int tos_count_tAmazonAuroraOutput_2_out = 0;

				int nb_line_tAmazonAuroraOutput_2 = 0;
				int nb_line_update_tAmazonAuroraOutput_2 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_2 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_2 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_2 = 0;

				int deletedCount_tAmazonAuroraOutput_2 = 0;
				int updatedCount_tAmazonAuroraOutput_2 = 0;
				int insertedCount_tAmazonAuroraOutput_2 = 0;

				int rejectedCount_tAmazonAuroraOutput_2 = 0;

				String tableName_tAmazonAuroraOutput_2 = "logcatcher";
				boolean whetherReject_tAmazonAuroraOutput_2 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_2 = calendar_tAmazonAuroraOutput_2
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_2 = calendar_tAmazonAuroraOutput_2
						.getTime().getTime();
				long date_tAmazonAuroraOutput_2;

				java.sql.Connection conn_tAmazonAuroraOutput_2 = null;
				String dbProperties_tAmazonAuroraOutput_2 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_2 = null;
				if (dbProperties_tAmazonAuroraOutput_2 == null
						|| dbProperties_tAmazonAuroraOutput_2.trim().length() == 0) {
					url_tAmazonAuroraOutput_2 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_2 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ properties_tAmazonAuroraOutput_2;
				}
				String driverClass_tAmazonAuroraOutput_2 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_2 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_2 = context.password;

				String dbPwd_tAmazonAuroraOutput_2 = decryptedPassword_tAmazonAuroraOutput_2;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_2);

				conn_tAmazonAuroraOutput_2 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_2,
								dbUser_tAmazonAuroraOutput_2,
								dbPwd_tAmazonAuroraOutput_2);

				resourceMap.put("conn_tAmazonAuroraOutput_2",
						conn_tAmazonAuroraOutput_2);
				conn_tAmazonAuroraOutput_2.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_2 = 10000;
				int commitCounter_tAmazonAuroraOutput_2 = 0;

				int count_tAmazonAuroraOutput_2 = 0;

				String insert_tAmazonAuroraOutput_2 = "INSERT INTO `"
						+ "logcatcher"
						+ "` (`moment`,`project`,`job`,`context`,`priority`,`type`,`origin`,`message`,`code`,`firmName`) VALUES (?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_2 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_2 = conn_tAmazonAuroraOutput_2
						.prepareStatement(insert_tAmazonAuroraOutput_2);

				/**
				 * [tAmazonAuroraOutput_2_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_2_in", false);
				start_Hash.put("tAmazonAuroraOutput_2_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				int tos_count_tAmazonAuroraOutput_2_in = 0;

				/**
				 * [tAmazonAuroraOutput_2_in begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
					String firmName;
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				logCatcherOutputStruct logCatcherOutput_tmp = new logCatcherOutputStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row8.type = lcm.getType();
					row8.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row8.priority = lcm.getPriority();
					row8.message = lcm.getMessage();
					row8.code = lcm.getCode();

					row8.moment = java.util.Calendar.getInstance().getTime();

					row8.pid = pid;
					row8.root_pid = rootPid;
					row8.father_pid = fatherPid;

					row8.project = projectName;
					row8.job = jobName;
					row8.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tMap_5 main ] start
					 */

					currentComponent = "tMap_5";

					boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_5 = false;
					boolean mainRowRejected_tMap_5 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_5__Struct Var = Var__tMap_5;
						Var.firmName = context.inputDir.substring(
								context.inputDir.indexOf("/") + 1,
								context.inputDir.indexOf("/",
										context.inputDir.indexOf("/") + 1));// ###############################
																			// ###############################
																			// #
																			// Output
																			// tables

						logCatcherOutput = null;

						// # Output table : 'logCatcherOutput'
						logCatcherOutput_tmp.moment = row8.moment;
						logCatcherOutput_tmp.project = row8.project;
						logCatcherOutput_tmp.job = row8.job;
						logCatcherOutput_tmp.context = row8.context;
						logCatcherOutput_tmp.priority = row8.priority;
						logCatcherOutput_tmp.type = row8.type;
						logCatcherOutput_tmp.origin = row8.origin;
						logCatcherOutput_tmp.message = row8.message;
						logCatcherOutput_tmp.code = row8.code;
						logCatcherOutput_tmp.firmName = Var.firmName;
						logCatcherOutput = logCatcherOutput_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_5 = false;

					tos_count_tMap_5++;

					/**
					 * [tMap_5 main ] stop
					 */
					// Start of branch "logCatcherOutput"
					if (logCatcherOutput != null) {

						/**
						 * [tAmazonAuroraOutput_2_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_2";

						currentComponent = "tAmazonAuroraOutput_2_in";

						row_tAmazonAuroraOutput_2_in = logCatcherOutput;

						tos_count_tAmazonAuroraOutput_2_in++;

						/**
						 * [tAmazonAuroraOutput_2_in main ] stop
						 */

						/**
						 * [tAmazonAuroraOutput_2_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_2";

						currentComponent = "tAmazonAuroraOutput_2_out";

						whetherReject_tAmazonAuroraOutput_2 = false;
						if (row_tAmazonAuroraOutput_2_in.moment != null) {
							date_tAmazonAuroraOutput_2 = row_tAmazonAuroraOutput_2_in.moment
									.getTime();
							if (date_tAmazonAuroraOutput_2 < year1_tAmazonAuroraOutput_2
									|| date_tAmazonAuroraOutput_2 >= year10000_tAmazonAuroraOutput_2) {
								pstmt_tAmazonAuroraOutput_2.setString(1,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tAmazonAuroraOutput_2.setTimestamp(1,
										new java.sql.Timestamp(
												date_tAmazonAuroraOutput_2));
							}
						} else {
							pstmt_tAmazonAuroraOutput_2.setNull(1,
									java.sql.Types.DATE);
						}

						if (row_tAmazonAuroraOutput_2_in.project == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(2,
									row_tAmazonAuroraOutput_2_in.project);
						}

						if (row_tAmazonAuroraOutput_2_in.job == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(3,
									row_tAmazonAuroraOutput_2_in.job);
						}

						if (row_tAmazonAuroraOutput_2_in.context == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(4,
									row_tAmazonAuroraOutput_2_in.context);
						}

						if (row_tAmazonAuroraOutput_2_in.priority == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(5,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_2.setInt(5,
									row_tAmazonAuroraOutput_2_in.priority);
						}

						if (row_tAmazonAuroraOutput_2_in.type == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(6,
									row_tAmazonAuroraOutput_2_in.type);
						}

						if (row_tAmazonAuroraOutput_2_in.origin == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(7,
									row_tAmazonAuroraOutput_2_in.origin);
						}

						if (row_tAmazonAuroraOutput_2_in.message == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(8,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(8,
									row_tAmazonAuroraOutput_2_in.message);
						}

						if (row_tAmazonAuroraOutput_2_in.code == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(9,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_2.setInt(9,
									row_tAmazonAuroraOutput_2_in.code);
						}

						if (row_tAmazonAuroraOutput_2_in.firmName == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(10,
									row_tAmazonAuroraOutput_2_in.firmName);
						}

						pstmt_tAmazonAuroraOutput_2.addBatch();
						nb_line_tAmazonAuroraOutput_2++;

						batchSizeCounter_tAmazonAuroraOutput_2++;
						if (batchSize_tAmazonAuroraOutput_2 <= batchSizeCounter_tAmazonAuroraOutput_2) {
							try {
								int countSum_tAmazonAuroraOutput_2 = 0;
								for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_2 = 0;
								for (int countEach_tAmazonAuroraOutput_2 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
											: countEach_tAmazonAuroraOutput_2);
								}
								insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tAmazonAuroraOutput_2 = 0;
						}
						commitCounter_tAmazonAuroraOutput_2++;

						if (commitEvery_tAmazonAuroraOutput_2 <= commitCounter_tAmazonAuroraOutput_2) {

							try {
								int countSum_tAmazonAuroraOutput_2 = 0;
								for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_2 = 0;
								for (int countEach_tAmazonAuroraOutput_2 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
											: countEach_tAmazonAuroraOutput_2);
								}
								insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
								System.err.println(e.getMessage());

							}
							conn_tAmazonAuroraOutput_2.commit();
							commitCounter_tAmazonAuroraOutput_2 = 0;

						}

						tos_count_tAmazonAuroraOutput_2_out++;

						/**
						 * [tAmazonAuroraOutput_2_out main ] stop
						 */

					} // End of branch "logCatcherOutput"

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				ok_Hash.put("tAmazonAuroraOutput_2_in", true);
				end_Hash.put("tAmazonAuroraOutput_2_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_2_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_2 != 0) {
						int countSum_tAmazonAuroraOutput_2 = 0;

						for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_2 = 0;
					for (int countEach_tAmazonAuroraOutput_2 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
								: countEach_tAmazonAuroraOutput_2);
					}

					insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_2 = 0;

				if (pstmt_tAmazonAuroraOutput_2 != null) {

					pstmt_tAmazonAuroraOutput_2.close();

				}

				if (commitCounter_tAmazonAuroraOutput_2 > 0) {

					conn_tAmazonAuroraOutput_2.commit();

				}

				conn_tAmazonAuroraOutput_2.close();

				resourceMap.put("finish_tAmazonAuroraOutput_2", true);

				nb_line_deleted_tAmazonAuroraOutput_2 = nb_line_deleted_tAmazonAuroraOutput_2
						+ deletedCount_tAmazonAuroraOutput_2;
				nb_line_update_tAmazonAuroraOutput_2 = nb_line_update_tAmazonAuroraOutput_2
						+ updatedCount_tAmazonAuroraOutput_2;
				nb_line_inserted_tAmazonAuroraOutput_2 = nb_line_inserted_tAmazonAuroraOutput_2
						+ insertedCount_tAmazonAuroraOutput_2;
				nb_line_rejected_tAmazonAuroraOutput_2 = nb_line_rejected_tAmazonAuroraOutput_2
						+ rejectedCount_tAmazonAuroraOutput_2;

				globalMap.put("tAmazonAuroraOutput_2_NB_LINE",
						nb_line_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_2);

				ok_Hash.put("tAmazonAuroraOutput_2_out", true);
				end_Hash.put("tAmazonAuroraOutput_2_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_2_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				/**
				 * [tAmazonAuroraOutput_2_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_2") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_2) {
							String errorMessage_tAmazonAuroraOutput_2 = "failed to close the connection in tAmazonAuroraOutput_2 :"
									+ sqlEx_tAmazonAuroraOutput_2.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_2);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_2_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());

				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */

				/**
				 * [tWarn_1 main ] start
				 */

				currentComponent = "tWarn_1";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread
						.currentThread().getId() + "", "FATAL", "",
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3, "", "");
				tLogCatcher_1.addMessage("tWarn", "tWarn_1", 6,
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3, 42);
				tLogCatcher_1Process(globalMap);
				globalMap.put("tWarn_1_WARN_MESSAGES",
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3);
				globalMap.put("tWarn_1_WARN_PRIORITY", 6);
				globalMap.put("tWarn_1_WARN_CODE", 42);

				tos_count_tWarn_1++;

				/**
				 * [tWarn_1 main ] stop
				 */

				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				/**
				 * [tWarn_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}

				parentContextMap_tRunJob_1.put("serverIp", context.serverIp);

				parentContextMap_tRunJob_1.put("database", context.database);

				parentContextMap_tRunJob_1.put("filepath_position",
						context.filepath_position);

				parentContextMap_tRunJob_1.put("filename", context.filename);

				parentContextMap_tRunJob_1.put("filepath_advisor",
						context.filepath_advisor);

				parentContextMap_tRunJob_1.put("custodianpath",
						context.custodianpath);

				parentContextMap_tRunJob_1.put("inputDir", context.inputDir);

				parentContextMap_tRunJob_1
						.put("taxlotpath", context.taxlotpath);

				parentContextMap_tRunJob_1
						.put("contextDir", context.contextDir);

				parentContextMap_tRunJob_1.put("password", context.password);

				parentContextMap_tRunJob_1.put("transactionpath",
						context.transactionpath);

				parentContextMap_tRunJob_1.put("positionpath",
						context.positionpath);

				parentContextMap_tRunJob_1.put("securitypath",
						context.securitypath);

				parentContextMap_tRunJob_1.put("accountpath",
						context.accountpath);

				parentContextMap_tRunJob_1.put("username", context.username);

				parentContextMap_tRunJob_1.put("localpath", context.localpath);

				parentContextMap_tRunJob_1.put("commondb", context.commondb);

				parentContextMap_tRunJob_1.put("port", context.port);

				parentContextMap_tRunJob_1.put("stagingdb", context.stagingdb);

				parentContextMap_tRunJob_1.put("host", context.host);

				parentContextMap_tRunJob_1.put("rowCountRejectedFirm",
						context.rowCountRejectedFirm);

				parentContextMap_tRunJob_1.put("firm", context.firm);

				parentContextMap_tRunJob_1.put("rowCountFirm",
						context.rowCountFirm);

				parentContextMap_tRunJob_1.put("rowCountStaging",
						context.rowCountStaging);

				parentContextMap_tRunJob_1.put("rowCountTSV",
						context.rowCountTSV);

				parentContextMap_tRunJob_1.put("rowCountUpdated",
						context.rowCountUpdated);

				parentContextMap_tRunJob_1.put("teamPreferenceOption",
						context.teamPreferenceOption);

				parentContextMap_tRunJob_1.put("date", context.date);

				parentContextMap_tRunJob_1.put("firmId", context.firmId);

				parentContextMap_tRunJob_1.put("firmint3", context.firmint3);

				parentContextMap_tRunJob_1.put("pathforlocal",
						context.pathforlocal);

				parentContextMap_tRunJob_1.put("filestorage",
						context.filestorage);

				parentContextMap_tRunJob_1.put("a", context.a);

				parentContextMap_tRunJob_1.put("b", context.b);

				parentContextMap_tRunJob_1.put("c", context.c);

				parentContextMap_tRunJob_1.put("d", context.d);

				parentContextMap_tRunJob_1.put("e", context.e);

				parentContextMap_tRunJob_1.put("f", context.f);

				parentContextMap_tRunJob_1.put("g", context.g);

				parentContextMap_tRunJob_1.put("filestorage2",
						context.filestorage2);

				parentContextMap_tRunJob_1.put("firmids", context.firmids);

				Object obj_tRunJob_1 = null;

				reliazedgainloss.position_parallel_stagingtofirm_0_1.position_parallel_stagingtofirm childJob_tRunJob_1 = new reliazedgainloss.position_parallel_stagingtofirm_0_1.position_parallel_stagingtofirm();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				((java.util.Map) threadLocal.get()).put("errorCode",
						childJob_tRunJob_1.getErrorCode());

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				tMysqlRow_1Process(globalMap);

				/**
				 * [tRunJob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tMysqlRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlRow_1 begin ] start
				 */

				ok_Hash.put("tMysqlRow_1", false);
				start_Hash.put("tMysqlRow_1", System.currentTimeMillis());

				currentComponent = "tMysqlRow_1";

				int tos_count_tMysqlRow_1 = 0;

				java.sql.Connection conn_tMysqlRow_1 = null;
				String query_tMysqlRow_1 = "";
				boolean whetherReject_tMysqlRow_1 = false;
				String driverClass_tMysqlRow_1 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlRow_1);

				String url_tMysqlRow_1 = "jdbc:mysql://" + context.serverIp
						+ ":" + context.port + "/" + context.database + "?"
						+ "allowMultiQueries=true";
				String dbUser_tMysqlRow_1 = context.username;

				final String decryptedPassword_tMysqlRow_1 = context.password;

				String dbPwd_tMysqlRow_1 = decryptedPassword_tMysqlRow_1;

				conn_tMysqlRow_1 = java.sql.DriverManager.getConnection(
						url_tMysqlRow_1, dbUser_tMysqlRow_1, dbPwd_tMysqlRow_1);

				if (conn_tMysqlRow_1.getAutoCommit()) {

					conn_tMysqlRow_1.setAutoCommit(false);

				}
				int commitEvery_tMysqlRow_1 = 10000;
				int commitCounter_tMysqlRow_1 = 0;

				java.sql.Statement stmt_tMysqlRow_1 = conn_tMysqlRow_1
						.createStatement();

				/**
				 * [tMysqlRow_1 begin ] stop
				 */

				/**
				 * [tMysqlRow_1 main ] start
				 */

				currentComponent = "tMysqlRow_1";

				query_tMysqlRow_1 = "UPDATE position p1, positionUpdate p2\nSET p1.orionfirmId = p2.orionfirmId ,\np1.price = p2.price ,\np1.priceDate = p2.priceDate ,\np1.accountId = p2.accountId ,\np1.securityId = p2.securityId ,\np1.marketValue = p2.marketValue ,\np1.quantity = p2.quantity ,\np1.positionYTDRealizedSTGL = p2.positionYTDRealizedSTGL ,\np1.positionYTDRealizedLTGL = p2.positionYTDRealizedLTGL ,\np1.isDeleted = p2.isDeleted ,\np1.createdDate = p2.createdDate ,\np1.createdBy = p2.createdBy ,\np1.editedDate = p2.editedDate ,\np1.editedBy = p2.editedBy \n\nWHERE p1.externalId = p2.externalId;\nCOMMIT ;\n";
				whetherReject_tMysqlRow_1 = false;
				globalMap.put("tMysqlRow_1_QUERY", query_tMysqlRow_1);
				try {
					stmt_tMysqlRow_1.execute(query_tMysqlRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tMysqlRow_1 = true;

					System.err.print(e.getMessage());

				}

				commitCounter_tMysqlRow_1++;
				if (commitEvery_tMysqlRow_1 <= commitCounter_tMysqlRow_1) {

					conn_tMysqlRow_1.commit();

					commitCounter_tMysqlRow_1 = 0;
				}

				tos_count_tMysqlRow_1++;

				/**
				 * [tMysqlRow_1 main ] stop
				 */

				/**
				 * [tMysqlRow_1 end ] start
				 */

				currentComponent = "tMysqlRow_1";

				stmt_tMysqlRow_1.close();
				if (commitEvery_tMysqlRow_1 > commitCounter_tMysqlRow_1) {

					conn_tMysqlRow_1.commit();

					commitCounter_tMysqlRow_1 = 0;

				}
				conn_tMysqlRow_1.close();

				ok_Hash.put("tMysqlRow_1", true);
				end_Hash.put("tMysqlRow_1", System.currentTimeMillis());

				/**
				 * [tMysqlRow_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlRow_1 finally ] start
				 */

				currentComponent = "tMysqlRow_1";

				/**
				 * [tMysqlRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlRow_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tJavaRow_2 - inputs:(after_tAmazonAuroraInput_2)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_2 - inputs:(row1,row2)
				// outputs:(firm_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 main ] start
				 */

				currentComponent = "tJavaRow_2";

				row2.firm = context.firmint3;

				nb_line_tJavaRow_2++;

				tos_count_tJavaRow_2++;

				/**
				 * [tJavaRow_2 main ] stop
				 */

				/**
				 * [tAdvancedHash_row2 main ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				row2Struct row2_HashRow = new row2Struct();

				row2_HashRow.firm = row2.firm;

				tHash_Lookup_row2.put(row2_HashRow);

				tos_count_tAdvancedHash_row2++;

				/**
				 * [tAdvancedHash_row2 main ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_2_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableComparableLookupRow<row9Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tAdvancedHash_row9 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9", false);
				start_Hash
						.put("tAdvancedHash_row9", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row9";

				int tos_count_tAdvancedHash_row9 = 0;

				// connection name:row9
				// source node:tJavaRow_3 - inputs:(after_tAmazonAuroraInput_3)
				// outputs:(row9,row9) | target node:tAdvancedHash_row9 -
				// inputs:(row9) outputs:()
				// linked node: tMap_7 - inputs:(s,row9) outputs:(out1,mainout)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row9Struct> getLookup(matchingModeEnum_row9);

				globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);

				/**
				 * [tAdvancedHash_row9 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tJavaRow_3 main ] start
				 */

				currentComponent = "tJavaRow_3";

				row9.firm = context.firmint3;

				nb_line_tJavaRow_3++;

				tos_count_tJavaRow_3++;

				/**
				 * [tJavaRow_3 main ] stop
				 */

				/**
				 * [tAdvancedHash_row9 main ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				row9Struct row9_HashRow = new row9Struct();

				row9_HashRow.firm = row9.firm;

				tHash_Lookup_row9.put(row9_HashRow);

				tos_count_tAdvancedHash_row9++;

				/**
				 * [tAdvancedHash_row9 main ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 end ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				tHash_Lookup_row9.endPut();

				ok_Hash.put("tAdvancedHash_row9", true);
				end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row9 finally ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				/**
				 * [tAdvancedHash_row9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_3_SUBPROCESS_STATE", 1);
	}

	public static class row49Struct implements
			routines.system.IPersistableRow<row49Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row49Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row48Struct implements
			routines.system.IPersistableRow<row48Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row48Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class firm_connectionStruct implements
			routines.system.IPersistableRow<firm_connectionStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public String server_Ip;

		public String getServer_Ip() {
			return this.server_Ip;
		}

		public String Database;

		public String getDatabase() {
			return this.Database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.server_Ip = readString(dis);

					this.Database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server_Ip, dos);

				// String

				writeString(this.Database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server_Ip=" + server_Ip);
			sb.append(",Database=" + Database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(firm_connectionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_2_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_2_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_2_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_2Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_2_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_2Process(globalMap);

				row_tAmazonAuroraInput_2_inStruct row_tAmazonAuroraInput_2_in = new row_tAmazonAuroraInput_2_inStruct();
				row_tAmazonAuroraInput_2_inStruct row1 = row_tAmazonAuroraInput_2_in;
				firm_connectionStruct firm_connection = new firm_connectionStruct();
				row48Struct row48 = new row48Struct();
				row48Struct row49 = row48;

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tJava_1 begin ] start
				 */

				int NB_ITERATE_tAmazonAuroraConnection_1_in = 0; // for
																	// statistics

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println(context.database);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				firm_connectionStruct firm_connection_tmp = new firm_connectionStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_2_out", false);
				start_Hash.put("tAmazonAuroraInput_2_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				int tos_count_tAmazonAuroraInput_2_out = 0;

				/**
				 * [tAmazonAuroraInput_2_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_2_in", false);
				start_Hash.put("tAmazonAuroraInput_2_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_in";

				int tos_count_tAmazonAuroraInput_2_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_2_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_2_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_2_in = calendar_tAmazonAuroraInput_2_in
						.getTime();
				int nb_line_tAmazonAuroraInput_2_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_2_in = null;
				String driverClass_tAmazonAuroraInput_2_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_2_in);
				String dbUser_tAmazonAuroraInput_2_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_2_in = context.password;

				String dbPwd_tAmazonAuroraInput_2_in = decryptedPassword_tAmazonAuroraInput_2_in;

				String url_tAmazonAuroraInput_2_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_2_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_2_in,
								dbUser_tAmazonAuroraInput_2_in,
								dbPwd_tAmazonAuroraInput_2_in);

				java.sql.Statement stmt_tAmazonAuroraInput_2_in = conn_tAmazonAuroraInput_2_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_2_in = "SELECT `name` , `server` , `database` FROM `orionEclipseFirm`";

				globalMap.put("tAmazonAuroraInput_2_QUERY",
						dbquery_tAmazonAuroraInput_2_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_2_in = null;
				try {
					rs_tAmazonAuroraInput_2_in = stmt_tAmazonAuroraInput_2_in
							.executeQuery(dbquery_tAmazonAuroraInput_2_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_2_in = rs_tAmazonAuroraInput_2_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_2_in = rsmd_tAmazonAuroraInput_2_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_2_in = null;

					while (rs_tAmazonAuroraInput_2_in.next()) {
						nb_line_tAmazonAuroraInput_2_in++;

						if (colQtyInRs_tAmazonAuroraInput_2_in < 1) {
							row_tAmazonAuroraInput_2_in.name = null;
						} else {

							row_tAmazonAuroraInput_2_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_2_in, 1,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 2) {
							row_tAmazonAuroraInput_2_in.server = null;
						} else {

							row_tAmazonAuroraInput_2_in.server = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_2_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 3) {
							row_tAmazonAuroraInput_2_in.database = null;
						} else {

							row_tAmazonAuroraInput_2_in.database = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_2_in, 3,
											false);
						}

						/**
						 * [tAmazonAuroraInput_2_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_in";

						tos_count_tAmazonAuroraInput_2_in++;

						/**
						 * [tAmazonAuroraInput_2_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_out";

						row1 = row_tAmazonAuroraInput_2_in;

						tos_count_tAmazonAuroraInput_2_out++;

						/**
						 * [tAmazonAuroraInput_2_out main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row2HashKey.firm = row1.name;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

							if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_2 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.firm = '"
							// + row2HashKey.firm + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							firm_connection = null;

							if (!rejectedInnerJoin_tMap_2) {

								// # Output table : 'firm_connection'
								firm_connection_tmp.server_Ip = row1.server;
								firm_connection_tmp.Database = row1.database;
								firm_connection = firm_connection_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "firm_connection"
						if (firm_connection != null) {

							/**
							 * [tJavaRow_1 main ] start
							 */

							currentComponent = "tJavaRow_1";

							context.serverIp = firm_connection.server_Ip;
							context.database = firm_connection.Database;

							nb_line_tJavaRow_1++;

							tos_count_tJavaRow_1++;

							/**
							 * [tJavaRow_1 main ] stop
							 */

							/**
							 * [tJava_1 main ] start
							 */

							currentComponent = "tJava_1";

							row49 = row48;

							tos_count_tJava_1++;

							/**
							 * [tJava_1 main ] stop
							 */

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							// /////////////////////

							strBuffer_tLogRow_1 = new StringBuilder();

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_1 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_1);
							}
							consoleOut_tLogRow_1.println(strBuffer_tLogRow_1
									.toString());
							consoleOut_tLogRow_1.flush();
							nb_line_tLogRow_1++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							NB_ITERATE_tAmazonAuroraConnection_1_in++;

							/**
							 * [tAmazonAuroraConnection_1_in begin ] start
							 */

							ok_Hash.put("tAmazonAuroraConnection_1_in", false);
							start_Hash.put("tAmazonAuroraConnection_1_in",
									System.currentTimeMillis());

							currentVirtualComponent = "tAmazonAuroraConnection_1";

							currentComponent = "tAmazonAuroraConnection_1_in";

							int tos_count_tAmazonAuroraConnection_1_in = 0;

							String properties_tAmazonAuroraConnection_1_in = "noDatetimeStringSync=true";
							if (properties_tAmazonAuroraConnection_1_in == null
									|| properties_tAmazonAuroraConnection_1_in
											.trim().length() == 0) {
								properties_tAmazonAuroraConnection_1_in += "rewriteBatchedStatements=true";
							} else if (properties_tAmazonAuroraConnection_1_in != null
									&& !properties_tAmazonAuroraConnection_1_in
											.contains("rewriteBatchedStatements")) {
								properties_tAmazonAuroraConnection_1_in += "&rewriteBatchedStatements=true";
							}

							String url_tAmazonAuroraConnection_1_in = "jdbc:mysql://"
									+ context.serverIp
									+ ":"
									+ context.port
									+ "/"
									+ context.database
									+ "?"
									+ properties_tAmazonAuroraConnection_1_in;

							String dbUser_tAmazonAuroraConnection_1_in = context.username;

							final String decryptedPassword_tAmazonAuroraConnection_1_in = context.password;
							String dbPwd_tAmazonAuroraConnection_1_in = decryptedPassword_tAmazonAuroraConnection_1_in;

							java.sql.Connection conn_tAmazonAuroraConnection_1_in = null;

							String driverClass_tAmazonAuroraConnection_1_in = "org.gjt.mm.mysql.Driver";
							java.lang.Class
									.forName(driverClass_tAmazonAuroraConnection_1_in);

							conn_tAmazonAuroraConnection_1_in = java.sql.DriverManager
									.getConnection(
											url_tAmazonAuroraConnection_1_in,
											dbUser_tAmazonAuroraConnection_1_in,
											dbPwd_tAmazonAuroraConnection_1_in);

							globalMap.put("conn_tAmazonAuroraConnection_1_in",
									conn_tAmazonAuroraConnection_1_in);
							if (null != conn_tAmazonAuroraConnection_1_in) {

								conn_tAmazonAuroraConnection_1_in
										.setAutoCommit(false);
							}

							globalMap.put("conn_tAmazonAuroraConnection_1_in",
									conn_tAmazonAuroraConnection_1_in);

							globalMap.put("db_tAmazonAuroraConnection_1_in",
									context.database);

							/**
							 * [tAmazonAuroraConnection_1_in begin ] stop
							 */

							/**
							 * [tAmazonAuroraConnection_1_in main ] start
							 */

							currentVirtualComponent = "tAmazonAuroraConnection_1";

							currentComponent = "tAmazonAuroraConnection_1_in";

							tos_count_tAmazonAuroraConnection_1_in++;

							/**
							 * [tAmazonAuroraConnection_1_in main ] stop
							 */

							/**
							 * [tAmazonAuroraConnection_1_in end ] start
							 */

							currentVirtualComponent = "tAmazonAuroraConnection_1";

							currentComponent = "tAmazonAuroraConnection_1_in";

							ok_Hash.put("tAmazonAuroraConnection_1_in", true);
							end_Hash.put("tAmazonAuroraConnection_1_in",
									System.currentTimeMillis());

							/**
							 * [tAmazonAuroraConnection_1_in end ] stop
							 */

						} // End of branch "firm_connection"

						/**
						 * [tAmazonAuroraInput_2_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_2_in != null) {
						rs_tAmazonAuroraInput_2_in.close();
					}
					stmt_tAmazonAuroraInput_2_in.close();
					if (conn_tAmazonAuroraInput_2_in != null
							&& !conn_tAmazonAuroraInput_2_in.isClosed()) {

						conn_tAmazonAuroraInput_2_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_2_NB_LINE",
						nb_line_tAmazonAuroraInput_2_in);

				ok_Hash.put("tAmazonAuroraInput_2_in", true);
				end_Hash.put("tAmazonAuroraInput_2_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_2_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				ok_Hash.put("tAmazonAuroraInput_2_out", true);
				end_Hash.put("tAmazonAuroraInput_2_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_2_out end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tAmazonAuroraInput_2_in:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tAmazonAuroraConnection_1_outProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tAmazonAuroraInput_2_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_in";

				/**
				 * [tAmazonAuroraInput_2_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				/**
				 * [tAmazonAuroraInput_2_out finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tAmazonAuroraConnection_1_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraConnection_1";

				currentComponent = "tAmazonAuroraConnection_1_in";

				/**
				 * [tAmazonAuroraConnection_1_in finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE", 1);
	}

	public void tAmazonAuroraConnection_1_outProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraConnection_1_out_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tAmazonAuroraConnection_1_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraConnection_1_out", false);
				start_Hash.put("tAmazonAuroraConnection_1_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraConnection_1";

				currentComponent = "tAmazonAuroraConnection_1_out";

				int tos_count_tAmazonAuroraConnection_1_out = 0;

				/**
				 * [tAmazonAuroraConnection_1_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraConnection_1_out main ] start
				 */

				currentVirtualComponent = "tAmazonAuroraConnection_1";

				currentComponent = "tAmazonAuroraConnection_1_out";

				tos_count_tAmazonAuroraConnection_1_out++;

				/**
				 * [tAmazonAuroraConnection_1_out main ] stop
				 */

				/**
				 * [tAmazonAuroraConnection_1_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraConnection_1";

				currentComponent = "tAmazonAuroraConnection_1_out";

				ok_Hash.put("tAmazonAuroraConnection_1_out", true);
				end_Hash.put("tAmazonAuroraConnection_1_out",
						System.currentTimeMillis());

				tAmazonAuroraInput_3_inProcess(globalMap);

				/**
				 * [tAmazonAuroraConnection_1_out end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraConnection_1_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraConnection_1";

				currentComponent = "tAmazonAuroraConnection_1_out";

				/**
				 * [tAmazonAuroraConnection_1_out finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraConnection_1_out_SUBPROCESS_STATE", 1);
	}

	public static class ErrorRejectStruct implements
			routines.system.IPersistableRow<ErrorRejectStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String errorStackTrace;

		public String getErrorStackTrace() {
			return this.errorStackTrace;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.PriceDate = readDate(dis);

					this.AccountNumber = readString(dis);

					this.AccountId = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MarketValue = null;
					} else {
						this.MarketValue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedSTGL = null;
					} else {
						this.PositionYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedLTGL = null;
					} else {
						this.PositionYTDRealizedLTGL = dis.readFloat();
					}

					this.errorMessage = readString(dis);

					this.errorStackTrace = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// java.util.Date

				writeDate(this.PriceDate, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountId, dos);

				// Float

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Float

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				// Float

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.errorStackTrace, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append(",errorMessage=" + errorMessage);
			sb.append(",errorStackTrace=" + errorStackTrace);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ErrorRejectStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfoutToFirm_0Struct implements
			routines.system.IPersistableRow<copyOfoutToFirm_0Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer accountId;

		public Integer getAccountId() {
			return this.accountId;
		}

		public int SecurityId;

		public int getSecurityId() {
			return this.SecurityId;
		}

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public int externalId;

		public int getExternalId() {
			return this.externalId;
		}

		public float price;

		public float getPrice() {
			return this.price;
		}

		public java.util.Date priceDate;

		public java.util.Date getPriceDate() {
			return this.priceDate;
		}

		public float marketValue;

		public float getMarketValue() {
			return this.marketValue;
		}

		public float quantity;

		public float getQuantity() {
			return this.quantity;
		}

		public float PositionYTDRealizedSTGL;

		public float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public float PositionYTDRealizedLTGL;

		public float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		public boolean isDeleted;

		public boolean getIsDeleted() {
			return this.isDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public int createdBy;

		public int getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public int editedBy;

		public int getEditedBy() {
			return this.editedBy;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.accountId = readInteger(dis);

					this.SecurityId = dis.readInt();

					this.orionFirmId = readInteger(dis);

					this.externalId = dis.readInt();

					this.price = dis.readFloat();

					this.priceDate = readDate(dis);

					this.marketValue = dis.readFloat();

					this.quantity = dis.readFloat();

					this.PositionYTDRealizedSTGL = dis.readFloat();

					this.PositionYTDRealizedLTGL = dis.readFloat();

					this.isDeleted = dis.readBoolean();

					this.createdDate = readDate(dis);

					this.createdBy = dis.readInt();

					this.editedDate = readDate(dis);

					this.editedBy = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.accountId, dos);

				// int

				dos.writeInt(this.SecurityId);

				// Integer

				writeInteger(this.orionFirmId, dos);

				// int

				dos.writeInt(this.externalId);

				// float

				dos.writeFloat(this.price);

				// java.util.Date

				writeDate(this.priceDate, dos);

				// float

				dos.writeFloat(this.marketValue);

				// float

				dos.writeFloat(this.quantity);

				// float

				dos.writeFloat(this.PositionYTDRealizedSTGL);

				// float

				dos.writeFloat(this.PositionYTDRealizedLTGL);

				// boolean

				dos.writeBoolean(this.isDeleted);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// int

				dos.writeInt(this.createdBy);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// int

				dos.writeInt(this.editedBy);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("accountId=" + String.valueOf(accountId));
			sb.append(",SecurityId=" + String.valueOf(SecurityId));
			sb.append(",orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",price=" + String.valueOf(price));
			sb.append(",priceDate=" + String.valueOf(priceDate));
			sb.append(",marketValue=" + String.valueOf(marketValue));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfoutToFirm_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class noDataFound_joinRejectStruct implements
			routines.system.IPersistableRow<noDataFound_joinRejectStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.PriceDate = readDate(dis);

					this.AccountNumber = readString(dis);

					this.AccountId = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MarketValue = null;
					} else {
						this.MarketValue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedSTGL = null;
					} else {
						this.PositionYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedLTGL = null;
					} else {
						this.PositionYTDRealizedLTGL = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// java.util.Date

				writeDate(this.PriceDate, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountId, dos);

				// Float

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Float

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				// Float

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(noDataFound_joinRejectStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outtoupdateStruct implements
			routines.system.IPersistableRow<outtoupdateStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.PriceDate = readDate(dis);

					this.AccountNumber = readString(dis);

					this.AccountId = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MarketValue = null;
					} else {
						this.MarketValue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedSTGL = null;
					} else {
						this.PositionYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedLTGL = null;
					} else {
						this.PositionYTDRealizedLTGL = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// java.util.Date

				writeDate(this.PriceDate, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountId, dos);

				// Float

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Float

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				// Float

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outtoupdateStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outTopositionInsertStruct implements
			routines.system.IPersistableRow<outTopositionInsertStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		public Float price;

		public Float getPrice() {
			return this.price;
		}

		public java.util.Date priceDate;

		public java.util.Date getPriceDate() {
			return this.priceDate;
		}

		public Float quantity;

		public Float getQuantity() {
			return this.quantity;
		}

		public Float positionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.positionYTDRealizedSTGL;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public Float marketValue;

		public Float getMarketValue() {
			return this.marketValue;
		}

		public Float positionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.positionYTDRealizedLTGL;
		}

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					this.symbol = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.price = null;
					} else {
						this.price = dis.readFloat();
					}

					this.priceDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantity = null;
					} else {
						this.quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.positionYTDRealizedSTGL = null;
					} else {
						this.positionYTDRealizedSTGL = dis.readFloat();
					}

					this.accountNumber = readString(dis);

					this.accountId = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.marketValue = null;
					} else {
						this.marketValue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.positionYTDRealizedLTGL = null;
					} else {
						this.positionYTDRealizedLTGL = dis.readFloat();
					}

					this.id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// String

				writeString(this.symbol, dos);

				// Float

				if (this.price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price);
				}

				// java.util.Date

				writeDate(this.priceDate, dos);

				// Float

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.quantity);
				}

				// Float

				if (this.positionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.positionYTDRealizedSTGL);
				}

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.accountId, dos);

				// Float

				if (this.marketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.marketValue);
				}

				// Float

				if (this.positionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.positionYTDRealizedLTGL);
				}

				// Integer

				writeInteger(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",symbol=" + symbol);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",priceDate=" + String.valueOf(priceDate));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",positionYTDRealizedSTGL="
					+ String.valueOf(positionYTDRealizedSTGL));
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",accountId=" + accountId);
			sb.append(",marketValue=" + String.valueOf(marketValue));
			sb.append(",positionYTDRealizedLTGL="
					+ String.valueOf(positionYTDRealizedLTGL));
			sb.append(",id=" + String.valueOf(id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outTopositionInsertStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class SecondOutputStruct implements
			routines.system.IPersistableRow<SecondOutputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.PriceDate = readDate(dis);

					this.AccountNumber = readString(dis);

					this.AccountId = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MarketValue = null;
					} else {
						this.MarketValue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedSTGL = null;
					} else {
						this.PositionYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedLTGL = null;
					} else {
						this.PositionYTDRealizedLTGL = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// java.util.Date

				writeDate(this.PriceDate, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountId, dos);

				// Float

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Float

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				// Float

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SecondOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mainoutStruct implements
			routines.system.IPersistableRow<mainoutStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mainoutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sStruct implements
			routines.system.IPersistableRow<sStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_3_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_3_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_3_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_3Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_3_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_3_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tAmazonAuroraInput_6_inProcess(globalMap);
				tAmazonAuroraInput_5_inProcess(globalMap);
				tAmazonAuroraInput_4_inProcess(globalMap);
				tJavaRow_3Process(globalMap);
				tAmazonAuroraInput_7_inProcess(globalMap);

				row_tAmazonAuroraInput_3_inStruct row_tAmazonAuroraInput_3_in = new row_tAmazonAuroraInput_3_inStruct();
				row_tAmazonAuroraInput_3_inStruct row3 = row_tAmazonAuroraInput_3_in;
				sStruct s = new sStruct();
				out1Struct out1 = new out1Struct();
				mainoutStruct mainout = new mainoutStruct();
				SecondOutputStruct SecondOutput = new SecondOutputStruct();
				outtoupdateStruct outtoupdate = new outtoupdateStruct();
				ErrorRejectStruct ErrorReject = new ErrorRejectStruct();
				copyOfoutToFirm_0Struct copyOfoutToFirm_0 = new copyOfoutToFirm_0Struct();
				noDataFound_joinRejectStruct noDataFound_joinReject = new noDataFound_joinRejectStruct();
				outTopositionInsertStruct outTopositionInsert = new outTopositionInsertStruct();

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tMap_8_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_8_TMAP_OUT", false);
				start_Hash.put("tMap_8_TMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_OUT";

				int tos_count_tMap_8_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8_TMAP_OUT__Struct {
				}
				Var__tMap_8_TMAP_OUT__Struct Var__tMap_8_TMAP_OUT = new Var__tMap_8_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_8_1 implements
						Comparable<SortableRow_tMap_8_1>,
						routines.system.IPersistableRow<SortableRow_tMap_8_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					Integer exprKey_row5__OrionFirmId;

					// mainout
					Integer mainout__firm;

					public void fillFrom(mainoutStruct mainout,
							Integer exprKey_row5__OrionFirmId) {

						this.mainout__firm = mainout.firm;
						this.exprKey_row5__OrionFirmId = exprKey_row5__OrionFirmId;

					}

					public void copyDataTo(mainoutStruct mainout) {

						mainout.firm = this.mainout__firm;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("mainout__firm");
						sb.append("=");
						sb.append(String.valueOf(this.mainout__firm));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_8_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row5__OrionFirmId,
								other.exprKey_row5__OrionFirmId);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (mainoutStruct.commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readByte();
								if (length == -1) {
									this.mainout__firm = null;
								} else {
									this.mainout__firm = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.exprKey_row5__OrionFirmId = null;
								} else {
									this.exprKey_row5__OrionFirmId = dis
											.readInt();
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.mainout__firm == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.mainout__firm);
							}

							if (this.exprKey_row5__OrionFirmId == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.exprKey_row5__OrionFirmId);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_8_1> fsi_tMap_8_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_8_1>(
						"C:/Users/Ashutosh/Downloads/TOS_DI-20160510_1709-V6.2.0/workspace/temp"
								+ "/" + jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid
								+ "_tMap_8_1", 2000000) {
					public SortableRow_tMap_8_1 createRowInstance() {
						return new SortableRow_tMap_8_1();
					}
				};

				fsi_tMap_8_1.initPut();

				/**
				 * [tMap_8_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) globalMap
						.get("tHash_Lookup_row9"));

				row9Struct row9HashKey = new row9Struct();
				row9Struct row9Default = new row9Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				mainoutStruct mainout_tmp = new mainoutStruct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				sStruct s_tmp = new sStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_3_out", false);
				start_Hash.put("tAmazonAuroraInput_3_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				int tos_count_tAmazonAuroraInput_3_out = 0;

				/**
				 * [tAmazonAuroraInput_3_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_3_in", false);
				start_Hash.put("tAmazonAuroraInput_3_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_in";

				int tos_count_tAmazonAuroraInput_3_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_3_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_3_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_3_in = calendar_tAmazonAuroraInput_3_in
						.getTime();
				int nb_line_tAmazonAuroraInput_3_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_3_in = null;
				String driverClass_tAmazonAuroraInput_3_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_3_in);
				String dbUser_tAmazonAuroraInput_3_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_3_in = context.password;

				String dbPwd_tAmazonAuroraInput_3_in = decryptedPassword_tAmazonAuroraInput_3_in;

				String url_tAmazonAuroraInput_3_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_3_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_3_in,
								dbUser_tAmazonAuroraInput_3_in,
								dbPwd_tAmazonAuroraInput_3_in);

				java.sql.Statement stmt_tAmazonAuroraInput_3_in = conn_tAmazonAuroraInput_3_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_3_in = "select distinct OrionFirmId from position_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_3_QUERY",
						dbquery_tAmazonAuroraInput_3_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_3_in = null;
				try {
					rs_tAmazonAuroraInput_3_in = stmt_tAmazonAuroraInput_3_in
							.executeQuery(dbquery_tAmazonAuroraInput_3_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_3_in = rs_tAmazonAuroraInput_3_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_3_in = rsmd_tAmazonAuroraInput_3_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_3_in = null;

					while (rs_tAmazonAuroraInput_3_in.next()) {
						nb_line_tAmazonAuroraInput_3_in++;

						if (colQtyInRs_tAmazonAuroraInput_3_in < 1) {
							row_tAmazonAuroraInput_3_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(1) != null) {
								row_tAmazonAuroraInput_3_in.OrionFirmId = rs_tAmazonAuroraInput_3_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_3_in.OrionFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_3_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_in";

						tos_count_tAmazonAuroraInput_3_in++;

						/**
						 * [tAmazonAuroraInput_3_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_out";

						row3 = row_tAmazonAuroraInput_3_in;

						tos_count_tAmazonAuroraInput_3_out++;

						/**
						 * [tAmazonAuroraInput_3_out main ] stop
						 */

						/**
						 * [tMap_6 main ] start
						 */

						currentComponent = "tMap_6";

						boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_6 = false;
						boolean mainRowRejected_tMap_6 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row4"
						// /////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_6 = false;

							row4HashKey.orionConnectFirmId = row3.OrionFirmId;

							row4HashKey.hashCodeDirty = true;

							tHash_Lookup_row4.lookup(row4HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.orionConnectFirmId = '"
							// + row4HashKey.orionConnectFirmId + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
							// ###############################
							// # Output tables

							s = null;

							// # Output table : 's'
							s_tmp.OrionFirmId = row3.OrionFirmId;
							s_tmp.orionEclipseFirmName = row4.orionEclipseFirmName;
							s = s_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_6 = false;

						tos_count_tMap_6++;

						/**
						 * [tMap_6 main ] stop
						 */
						// Start of branch "s"
						if (s != null) {

							/**
							 * [tMap_7 main ] start
							 */

							currentComponent = "tMap_7";

							boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_7 = false;
							boolean mainRowRejected_tMap_7 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row9"
							// /////////////////////////////////////////////

							boolean forceLooprow9 = false;

							row9Struct row9ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_7 = false;

								row9HashKey.firm = s.orionEclipseFirmName;

								row9HashKey.hashCodeDirty = true;

								tHash_Lookup_row9.lookup(row9HashKey);

								if (!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_7 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row9 != null
									&& tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G
																						// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.firm = '"
								// + row9HashKey.firm + "'");
							} // G 071

							row9Struct row9 = null;

							row9Struct fromLookup_row9 = null;
							row9 = row9Default;

							if (tHash_Lookup_row9 != null
									&& tHash_Lookup_row9.hasNext()) { // G 099

								fromLookup_row9 = tHash_Lookup_row9.next();

							} // G 099

							if (fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
								// ###############################
								// # Output tables

								mainout = null;
								out1 = null;

								if (!rejectedInnerJoin_tMap_7) {

									// # Output table : 'mainout'
									mainout_tmp.firm = s.OrionFirmId;
									mainout = mainout_tmp;
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'out1'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_7) {
									out1_tmp.firm = s.OrionFirmId;
									out1 = out1_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_7 = false;

							tos_count_tMap_7++;

							/**
							 * [tMap_7 main ] stop
							 */
							// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tJavaRow_4 main ] start
								 */

								currentComponent = "tJavaRow_4";

								context.firmids = out1.firm;

								nb_line_tJavaRow_4++;

								tos_count_tJavaRow_4++;

								/**
								 * [tJavaRow_4 main ] stop
								 */

							} // End of branch "out1"

							// Start of branch "mainout"
							if (mainout != null) {

								/**
								 * [tMap_8_TMAP_OUT main ] start
								 */

								currentVirtualComponent = "tMap_8";

								currentComponent = "tMap_8_TMAP_OUT";

								boolean hasCasePrimitiveKeyWithNull_tMap_8_TMAP_OUT = false;

								hasCasePrimitiveKeyWithNull_tMap_8_TMAP_OUT = false;

								Integer exprKey_row5__OrionFirmId = mainout.firm;

								SortableRow_tMap_8_1 sortableRow_tMap_8_1 = fsi_tMap_8_1
										.getNextFreeRow();

								sortableRow_tMap_8_1.fillFrom(mainout,
										exprKey_row5__OrionFirmId);

								fsi_tMap_8_1.put(sortableRow_tMap_8_1);

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_8_TMAP_OUT = false;
								boolean mainRowRejected_tMap_8_TMAP_OUT = false;

								// ###############################

								tos_count_tMap_8_TMAP_OUT++;

								/**
								 * [tMap_8_TMAP_OUT main ] stop
								 */

							} // End of branch "mainout"

						} // End of branch "s"

						/**
						 * [tAmazonAuroraInput_3_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_3_in != null) {
						rs_tAmazonAuroraInput_3_in.close();
					}
					stmt_tAmazonAuroraInput_3_in.close();
					if (conn_tAmazonAuroraInput_3_in != null
							&& !conn_tAmazonAuroraInput_3_in.isClosed()) {

						conn_tAmazonAuroraInput_3_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_3_NB_LINE",
						nb_line_tAmazonAuroraInput_3_in);

				ok_Hash.put("tAmazonAuroraInput_3_in", true);
				end_Hash.put("tAmazonAuroraInput_3_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_3_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				ok_Hash.put("tAmazonAuroraInput_3_out", true);
				end_Hash.put("tAmazonAuroraInput_3_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_3_out end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row9 != null) {
					tHash_Lookup_row9.endGet();
				}
				globalMap.remove("tHash_Lookup_row9");

				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				if (context.firmids != null) {

					tWarn_1Process(globalMap);
				}

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tMap_8_TMAP_OUT end ] start
				 */

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_8_TMAP_OUT", true);
				end_Hash.put("tMap_8_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_8_TMAP_OUT end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_3 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_3", false);
				start_Hash.put("tAmazonMysqlOutput_3",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_3";

				int tos_count_tAmazonMysqlOutput_3 = 0;

				int nb_line_tAmazonMysqlOutput_3 = 0;
				int nb_line_update_tAmazonMysqlOutput_3 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_3 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_3 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_3 = 0;

				int deletedCount_tAmazonMysqlOutput_3 = 0;
				int updatedCount_tAmazonMysqlOutput_3 = 0;
				int insertedCount_tAmazonMysqlOutput_3 = 0;

				int rejectedCount_tAmazonMysqlOutput_3 = 0;

				String tableName_tAmazonMysqlOutput_3 = "importError_Position";
				boolean whetherReject_tAmazonMysqlOutput_3 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_3 = calendar_tAmazonMysqlOutput_3
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_3 = calendar_tAmazonMysqlOutput_3
						.getTime().getTime();
				long date_tAmazonMysqlOutput_3;

				java.sql.Connection conn_tAmazonMysqlOutput_3 = null;
				String dbProperties_tAmazonMysqlOutput_3 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_3 = null;
				if (dbProperties_tAmazonMysqlOutput_3 == null
						|| dbProperties_tAmazonMysqlOutput_3.trim().length() == 0) {
					url_tAmazonMysqlOutput_3 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_3 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_3;
				}
				String dbUser_tAmazonMysqlOutput_3 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_3 = context.password;

				String dbPwd_tAmazonMysqlOutput_3 = decryptedPassword_tAmazonMysqlOutput_3;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_3 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_3,
								dbUser_tAmazonMysqlOutput_3,
								dbPwd_tAmazonMysqlOutput_3);

				resourceMap.put("conn_tAmazonMysqlOutput_3",
						conn_tAmazonMysqlOutput_3);

				conn_tAmazonMysqlOutput_3.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_3 = 1000000;
				int commitCounter_tAmazonMysqlOutput_3 = 0;

				int count_tAmazonMysqlOutput_3 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_3 = conn_tAmazonMysqlOutput_3
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_3 = dbMetaData_tAmazonMysqlOutput_3
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_3 = false;
				while (rsTable_tAmazonMysqlOutput_3.next()) {
					String table_tAmazonMysqlOutput_3 = rsTable_tAmazonMysqlOutput_3
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_3
							.equalsIgnoreCase("importError_Position")) {
						whetherExist_tAmazonMysqlOutput_3 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_3.close();
				if (!whetherExist_tAmazonMysqlOutput_3) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_3 = conn_tAmazonMysqlOutput_3
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_3
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_3
									+ "`(`OrionFirmId` INT(11)  ,`ExternalId` INT(11)  ,`Symbol` VARCHAR(30)  ,`Price` FLOAT(10,0)  ,`PriceDate` DATETIME ,`AccountNumber` VARCHAR(50)  ,`AccountId` VARCHAR(50)  ,`MarketValue` FLOAT(10,0)  ,`Quantity` FLOAT(10,2)  ,`PositionYTDRealizedSTGL` FLOAT(10,0)  ,`PositionYTDRealizedLTGL` FLOAT(10,0)  ,`errorMessage` VARCHAR(2555)  ,`errorStackTrace` VARCHAR(2555)  )");
					stmtCreate_tAmazonMysqlOutput_3.close();
				}

				String insert_tAmazonMysqlOutput_3 = "INSERT INTO `"
						+ "importError_Position"
						+ "` (`OrionFirmId`,`ExternalId`,`Symbol`,`Price`,`PriceDate`,`AccountNumber`,`AccountId`,`MarketValue`,`Quantity`,`PositionYTDRealizedSTGL`,`PositionYTDRealizedLTGL`,`errorMessage`,`errorStackTrace`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_3 = conn_tAmazonMysqlOutput_3
						.prepareStatement(insert_tAmazonMysqlOutput_3);

				/**
				 * [tAmazonMysqlOutput_3 begin ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_1", false);
				start_Hash.put("tAmazonMysqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_1";

				int tos_count_tAmazonMysqlOutput_1 = 0;

				int nb_line_tAmazonMysqlOutput_1 = 0;
				int nb_line_update_tAmazonMysqlOutput_1 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_1 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_1 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_1 = 0;

				int deletedCount_tAmazonMysqlOutput_1 = 0;
				int updatedCount_tAmazonMysqlOutput_1 = 0;
				int insertedCount_tAmazonMysqlOutput_1 = 0;

				int rejectedCount_tAmazonMysqlOutput_1 = 0;

				String tableName_tAmazonMysqlOutput_1 = "positionUpdate";
				boolean whetherReject_tAmazonMysqlOutput_1 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_1 = calendar_tAmazonMysqlOutput_1
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_1 = calendar_tAmazonMysqlOutput_1
						.getTime().getTime();
				long date_tAmazonMysqlOutput_1;

				java.sql.Connection conn_tAmazonMysqlOutput_1 = null;
				String dbProperties_tAmazonMysqlOutput_1 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_1 = null;
				if (dbProperties_tAmazonMysqlOutput_1 == null
						|| dbProperties_tAmazonMysqlOutput_1.trim().length() == 0) {
					url_tAmazonMysqlOutput_1 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_1 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_1;
				}
				String dbUser_tAmazonMysqlOutput_1 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_1 = context.password;

				String dbPwd_tAmazonMysqlOutput_1 = decryptedPassword_tAmazonMysqlOutput_1;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_1 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_1,
								dbUser_tAmazonMysqlOutput_1,
								dbPwd_tAmazonMysqlOutput_1);

				resourceMap.put("conn_tAmazonMysqlOutput_1",
						conn_tAmazonMysqlOutput_1);

				conn_tAmazonMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_1 = 1000000;
				int commitCounter_tAmazonMysqlOutput_1 = 0;

				int count_tAmazonMysqlOutput_1 = 0;

				String insert_tAmazonMysqlOutput_1 = "INSERT INTO `"
						+ "positionUpdate"
						+ "` (`accountId`,`SecurityId`,`orionFirmId`,`externalId`,`price`,`priceDate`,`marketValue`,`quantity`,`PositionYTDRealizedSTGL`,`PositionYTDRealizedLTGL`,`isDeleted`,`createdDate`,`createdBy`,`editedDate`,`editedBy`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_1 = conn_tAmazonMysqlOutput_1
						.prepareStatement(insert_tAmazonMysqlOutput_1);

				/**
				 * [tAmazonMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_4 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_4", false);
				start_Hash.put("tAmazonMysqlOutput_4",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_4";

				int tos_count_tAmazonMysqlOutput_4 = 0;

				int nb_line_tAmazonMysqlOutput_4 = 0;
				int nb_line_update_tAmazonMysqlOutput_4 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_4 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_4 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_4 = 0;

				int deletedCount_tAmazonMysqlOutput_4 = 0;
				int updatedCount_tAmazonMysqlOutput_4 = 0;
				int insertedCount_tAmazonMysqlOutput_4 = 0;

				int rejectedCount_tAmazonMysqlOutput_4 = 0;

				String tableName_tAmazonMysqlOutput_4 = "noDataFound_Position";
				boolean whetherReject_tAmazonMysqlOutput_4 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_4 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_4 = calendar_tAmazonMysqlOutput_4
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_4 = calendar_tAmazonMysqlOutput_4
						.getTime().getTime();
				long date_tAmazonMysqlOutput_4;

				java.sql.Connection conn_tAmazonMysqlOutput_4 = null;
				String dbProperties_tAmazonMysqlOutput_4 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_4 = null;
				if (dbProperties_tAmazonMysqlOutput_4 == null
						|| dbProperties_tAmazonMysqlOutput_4.trim().length() == 0) {
					url_tAmazonMysqlOutput_4 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_4 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_4
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_4 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_4 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_4;
				}
				String dbUser_tAmazonMysqlOutput_4 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_4 = context.password;

				String dbPwd_tAmazonMysqlOutput_4 = decryptedPassword_tAmazonMysqlOutput_4;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_4 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_4,
								dbUser_tAmazonMysqlOutput_4,
								dbPwd_tAmazonMysqlOutput_4);

				resourceMap.put("conn_tAmazonMysqlOutput_4",
						conn_tAmazonMysqlOutput_4);

				conn_tAmazonMysqlOutput_4.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_4 = 1000000;
				int commitCounter_tAmazonMysqlOutput_4 = 0;

				int count_tAmazonMysqlOutput_4 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_4 = conn_tAmazonMysqlOutput_4
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_4 = dbMetaData_tAmazonMysqlOutput_4
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_4 = false;
				while (rsTable_tAmazonMysqlOutput_4.next()) {
					String table_tAmazonMysqlOutput_4 = rsTable_tAmazonMysqlOutput_4
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_4
							.equalsIgnoreCase("noDataFound_Position")) {
						whetherExist_tAmazonMysqlOutput_4 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_4.close();
				if (!whetherExist_tAmazonMysqlOutput_4) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_4 = conn_tAmazonMysqlOutput_4
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_4
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_4
									+ "`(`OrionFirmId` INT(11)  ,`ExternalId` INT(11)  ,`Symbol` VARCHAR(30)  ,`Price` FLOAT(10,0)  ,`PriceDate` DATETIME ,`AccountNumber` VARCHAR(50)  ,`AccountId` VARCHAR(50)  ,`MarketValue` FLOAT(10,0)  ,`Quantity` FLOAT(10,2)  ,`PositionYTDRealizedSTGL` FLOAT(10,0)  ,`PositionYTDRealizedLTGL` FLOAT(10,0)  )");
					stmtCreate_tAmazonMysqlOutput_4.close();
				}

				String insert_tAmazonMysqlOutput_4 = "INSERT INTO `"
						+ "noDataFound_Position"
						+ "` (`OrionFirmId`,`ExternalId`,`Symbol`,`Price`,`PriceDate`,`AccountNumber`,`AccountId`,`MarketValue`,`Quantity`,`PositionYTDRealizedSTGL`,`PositionYTDRealizedLTGL`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_4 = conn_tAmazonMysqlOutput_4
						.prepareStatement(insert_tAmazonMysqlOutput_4);

				/**
				 * [tAmazonMysqlOutput_4 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row52Struct> tHash_Lookup_row52 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row52Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row52Struct>) globalMap
						.get("tHash_Lookup_row52"));

				row52Struct row52HashKey = new row52Struct();
				row52Struct row52Default = new row52Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row53Struct> tHash_Lookup_row53 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row53Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row53Struct>) globalMap
						.get("tHash_Lookup_row53"));

				row53Struct row53HashKey = new row53Struct();
				row53Struct row53Default = new row53Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ErrorRejectStruct ErrorReject_tmp = new ErrorRejectStruct();
				copyOfoutToFirm_0Struct copyOfoutToFirm_0_tmp = new copyOfoutToFirm_0Struct();
				noDataFound_joinRejectStruct noDataFound_joinReject_tmp = new noDataFound_joinRejectStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_2", false);
				start_Hash.put("tAmazonMysqlOutput_2",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_2";

				int tos_count_tAmazonMysqlOutput_2 = 0;

				int nb_line_tAmazonMysqlOutput_2 = 0;
				int nb_line_update_tAmazonMysqlOutput_2 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_2 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_2 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_2 = 0;

				int deletedCount_tAmazonMysqlOutput_2 = 0;
				int updatedCount_tAmazonMysqlOutput_2 = 0;
				int insertedCount_tAmazonMysqlOutput_2 = 0;

				int rejectedCount_tAmazonMysqlOutput_2 = 0;

				String tableName_tAmazonMysqlOutput_2 = "positionInsert";
				boolean whetherReject_tAmazonMysqlOutput_2 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_2 = calendar_tAmazonMysqlOutput_2
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_2 = calendar_tAmazonMysqlOutput_2
						.getTime().getTime();
				long date_tAmazonMysqlOutput_2;

				java.sql.Connection conn_tAmazonMysqlOutput_2 = null;
				String dbProperties_tAmazonMysqlOutput_2 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_2 = null;
				if (dbProperties_tAmazonMysqlOutput_2 == null
						|| dbProperties_tAmazonMysqlOutput_2.trim().length() == 0) {
					url_tAmazonMysqlOutput_2 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_2 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_2;
				}
				String dbUser_tAmazonMysqlOutput_2 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_2 = context.password;

				String dbPwd_tAmazonMysqlOutput_2 = decryptedPassword_tAmazonMysqlOutput_2;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_2 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_2,
								dbUser_tAmazonMysqlOutput_2,
								dbPwd_tAmazonMysqlOutput_2);

				resourceMap.put("conn_tAmazonMysqlOutput_2",
						conn_tAmazonMysqlOutput_2);

				conn_tAmazonMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_2 = 1000000;
				int commitCounter_tAmazonMysqlOutput_2 = 0;

				int count_tAmazonMysqlOutput_2 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_2 = conn_tAmazonMysqlOutput_2
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_2 = dbMetaData_tAmazonMysqlOutput_2
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_2 = false;
				while (rsTable_tAmazonMysqlOutput_2.next()) {
					String table_tAmazonMysqlOutput_2 = rsTable_tAmazonMysqlOutput_2
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_2
							.equalsIgnoreCase("positionInsert")) {
						whetherExist_tAmazonMysqlOutput_2 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_2.close();
				if (!whetherExist_tAmazonMysqlOutput_2) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_2 = conn_tAmazonMysqlOutput_2
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_2
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_2
									+ "`(`orionFirmId` INT(11)  ,`externalId` INT(11)  ,`symbol` VARCHAR(30)  ,`price` FLOAT(10,0)  ,`priceDate` DATETIME ,`quantity` FLOAT(10,2)  ,`positionYTDRealizedSTGL` FLOAT(10,0)  ,`accountNumber` VARCHAR(50)  ,`accountId` VARCHAR(50)  ,`marketValue` FLOAT(10,0)  ,`positionYTDRealizedLTGL` FLOAT(10,0)  ,`id` INT(0)  )");
					stmtCreate_tAmazonMysqlOutput_2.close();
				}

				String insert_tAmazonMysqlOutput_2 = "INSERT INTO `"
						+ "positionInsert"
						+ "` (`orionFirmId`,`externalId`,`symbol`,`price`,`priceDate`,`quantity`,`positionYTDRealizedSTGL`,`accountNumber`,`accountId`,`marketValue`,`positionYTDRealizedLTGL`,`id`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonMysqlOutput_2 = 100;
				int batchSizeCounter_tAmazonMysqlOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_2 = conn_tAmazonMysqlOutput_2
						.prepareStatement(insert_tAmazonMysqlOutput_2);

				/**
				 * [tAmazonMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct> tHash_Lookup_row51 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct>) globalMap
						.get("tHash_Lookup_row51"));

				row51Struct row51HashKey = new row51Struct();
				row51Struct row51Default = new row51Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outtoupdateStruct outtoupdate_tmp = new outtoupdateStruct();
				outTopositionInsertStruct outTopositionInsert_tmp = new outTopositionInsertStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMap_8_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_8_TMAP_IN", false);
				start_Hash.put("tMap_8_TMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_IN";

				int tos_count_tMap_8_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8_TMAP_IN__Struct {
				}
				Var__tMap_8_TMAP_IN__Struct Var__tMap_8_TMAP_IN = new Var__tMap_8_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				SecondOutputStruct SecondOutput_tmp = new SecondOutputStruct();
				// ###############################

				/**
				 * [tMap_8_TMAP_IN begin ] stop
				 */

				/**
				 * [tMap_8_TMAP_IN main ] start
				 */

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_8_TMAP_IN = false;

				fsi_tMap_8_1.endPut();

				if (mainout == null) {
					mainout = new mainoutStruct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_8_TMAP_IN = false;
				boolean mainRowRejected_tMap_8_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "row5"
				// /////////////////////////////////////////////

				SortableRow_tMap_8_1 rsc_tMap_8_1;

				fsi_tMap_8_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_8_TMAP_IN = false;

				while (fsi_tMap_8_1.hasNext()) { // G_TM_M_250 loop "1"

					// CALL close loop of lookup '1'

					rsc_tMap_8_1 = (SortableRow_tMap_8_1) fsi_tMap_8_1.next();
					rsc_tMap_8_1.copyDataTo(mainout);

					rejectedInnerJoin_tMap_8_TMAP_IN = rsc_tMap_8_1.is__rejectedInnerJoin;

					boolean forceLooprow5 = false;

					row5Struct row5ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_8_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_8_TMAP_IN = false;

						row5HashKey.OrionFirmId = rsc_tMap_8_1.exprKey_row5__OrionFirmId;

						tAmazonAuroraInput_1_inProcess(globalMap);

						tHash_Lookup_row5 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct>) globalMap
								.get("tHash_Lookup_row5"));

						tHash_Lookup_row5.initGet();

						tHash_Lookup_row5.lookup(row5HashKey);

						if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_8_TMAP_IN = true;

							forceLooprow5 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLooprow5 = true;
					} // G 21

					row5Struct row5 = null;

					while ((tHash_Lookup_row5 != null && tHash_Lookup_row5
							.hasNext()) || forceLooprow5) { // G_TM_M_043

						// CALL close loop of lookup 'row5'

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (!forceLooprow5) { // G 46

							fromLookup_row5 = tHash_Lookup_row5.next();

							if (fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}

						} // G 46

						forceLooprow5 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_8_TMAP_IN__Struct Var = Var__tMap_8_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							SecondOutput = null;

							if (!rejectedInnerJoin_tMap_8_TMAP_IN) {

								// # Output table : 'SecondOutput'
								SecondOutput_tmp.OrionFirmId = row5.OrionFirmId;
								SecondOutput_tmp.ExternalId = row5.ExternalId;
								SecondOutput_tmp.Symbol = row5.Symbol;
								SecondOutput_tmp.Price = row5.Price;
								SecondOutput_tmp.PriceDate = row5.PriceDate;
								SecondOutput_tmp.AccountNumber = row5.AccountNumber;
								SecondOutput_tmp.AccountId = row5.AccountId;
								SecondOutput_tmp.MarketValue = row5.MarketValue;
								SecondOutput_tmp.Quantity = row5.Quantity;
								SecondOutput_tmp.PositionYTDRealizedSTGL = row5.PositionYTDRealizedSTGL;
								SecondOutput_tmp.PositionYTDRealizedLTGL = row5.PositionYTDRealizedLTGL;
								SecondOutput = SecondOutput_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_8_TMAP_IN = false;

						tos_count_tMap_8_TMAP_IN++;

						/**
						 * [tMap_8_TMAP_IN main ] stop
						 */
						// Start of branch "SecondOutput"
						if (SecondOutput != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row51"
							// /////////////////////////////////////////////

							boolean forceLooprow51 = false;

							row51Struct row51ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row51HashKey.externalId = SecondOutput.ExternalId;

								row51HashKey.hashCodeDirty = true;

								tHash_Lookup_row51.lookup(row51HashKey);

								if (!tHash_Lookup_row51.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_1 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row51 != null
									&& tHash_Lookup_row51
											.getCount(row51HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row51' and it contains more one result from keys :  row51.externalId = '"
								// + row51HashKey.externalId + "'");
							} // G 071

							row51Struct row51 = null;

							row51Struct fromLookup_row51 = null;
							row51 = row51Default;

							if (tHash_Lookup_row51 != null
									&& tHash_Lookup_row51.hasNext()) { // G 099

								fromLookup_row51 = tHash_Lookup_row51.next();

							} // G 099

							if (fromLookup_row51 != null) {
								row51 = fromLookup_row51;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								outtoupdate = null;
								outTopositionInsert = null;

								if (!rejectedInnerJoin_tMap_1) {

									// # Output table : 'outtoupdate'
									outtoupdate_tmp.OrionFirmId = SecondOutput.OrionFirmId;
									outtoupdate_tmp.ExternalId = SecondOutput.ExternalId;
									outtoupdate_tmp.Symbol = SecondOutput.Symbol;
									outtoupdate_tmp.Price = SecondOutput.Price;
									outtoupdate_tmp.PriceDate = SecondOutput.PriceDate;
									outtoupdate_tmp.AccountNumber = SecondOutput.AccountNumber;
									outtoupdate_tmp.AccountId = SecondOutput.AccountId;
									outtoupdate_tmp.MarketValue = SecondOutput.MarketValue;
									outtoupdate_tmp.Quantity = SecondOutput.Quantity;
									outtoupdate_tmp.PositionYTDRealizedSTGL = SecondOutput.PositionYTDRealizedSTGL;
									outtoupdate_tmp.PositionYTDRealizedLTGL = SecondOutput.PositionYTDRealizedLTGL;
									outtoupdate = outtoupdate_tmp;
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'outTopositionInsert'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_1) {
									outTopositionInsert_tmp.orionFirmId = SecondOutput.OrionFirmId;
									outTopositionInsert_tmp.externalId = SecondOutput.ExternalId;
									outTopositionInsert_tmp.symbol = SecondOutput.Symbol;
									outTopositionInsert_tmp.price = SecondOutput.Price;
									outTopositionInsert_tmp.priceDate = SecondOutput.PriceDate;
									outTopositionInsert_tmp.quantity = SecondOutput.Quantity;
									outTopositionInsert_tmp.positionYTDRealizedSTGL = SecondOutput.PositionYTDRealizedSTGL;
									outTopositionInsert_tmp.accountNumber = SecondOutput.AccountNumber;
									outTopositionInsert_tmp.accountId = SecondOutput.AccountId;
									outTopositionInsert_tmp.marketValue = SecondOutput.MarketValue;
									outTopositionInsert_tmp.positionYTDRealizedLTGL = SecondOutput.PositionYTDRealizedLTGL;
									outTopositionInsert_tmp.id = Numeric
											.sequence("s6", 1, 1);
									outTopositionInsert = outTopositionInsert_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "outtoupdate"
							if (outtoupdate != null) {

								/**
								 * [tMap_3 main ] start
								 */

								currentComponent = "tMap_3";

								boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_3 = false;
								boolean mainRowRejected_tMap_3 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row52"
								// /////////////////////////////////////////////

								boolean forceLooprow52 = false;

								row52Struct row52ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_3 = false;

									row52HashKey.symbol = outtoupdate.Symbol;

									row52HashKey.hashCodeDirty = true;

									tHash_Lookup_row52.lookup(row52HashKey);

									if (!tHash_Lookup_row52.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_3 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row52 != null
										&& tHash_Lookup_row52
												.getCount(row52HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row52' and it contains more one result from keys :  row52.symbol = '"
									// + row52HashKey.symbol + "'");
								} // G 071

								row52Struct row52 = null;

								row52Struct fromLookup_row52 = null;
								row52 = row52Default;

								if (tHash_Lookup_row52 != null
										&& tHash_Lookup_row52.hasNext()) { // G
																			// 099

									fromLookup_row52 = tHash_Lookup_row52
											.next();

								} // G 099

								if (fromLookup_row52 != null) {
									row52 = fromLookup_row52;
								}

								// /////////////////////////////////////////////
								// Starting Lookup Table "row53"
								// /////////////////////////////////////////////

								boolean forceLooprow53 = false;

								row53Struct row53ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_3 = false;

									row53HashKey.accountId = outtoupdate.AccountId;

									row53HashKey.hashCodeDirty = true;

									tHash_Lookup_row53.lookup(row53HashKey);

									if (!tHash_Lookup_row53.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_3 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row53 != null
										&& tHash_Lookup_row53
												.getCount(row53HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row53' and it contains more one result from keys :  row53.accountId = '"
									// + row53HashKey.accountId + "'");
								} // G 071

								row53Struct row53 = null;

								row53Struct fromLookup_row53 = null;
								row53 = row53Default;

								if (tHash_Lookup_row53 != null
										&& tHash_Lookup_row53.hasNext()) { // G
																			// 099

									fromLookup_row53 = tHash_Lookup_row53
											.next();

								} // G 099

								if (fromLookup_row53 != null) {
									row53 = fromLookup_row53;
								}

								try {
									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
										// ###############################
										// # Output tables

										ErrorReject = null;
										copyOfoutToFirm_0 = null;
										noDataFound_joinReject = null;

										if (!rejectedInnerJoin_tMap_3) {

											// # Output table :
											// 'copyOfoutToFirm_0'
											copyOfoutToFirm_0_tmp.accountId = row53.id;
											copyOfoutToFirm_0_tmp.SecurityId = row52.id;
											copyOfoutToFirm_0_tmp.orionFirmId = outtoupdate.OrionFirmId;
											copyOfoutToFirm_0_tmp.externalId = outtoupdate.ExternalId;
											copyOfoutToFirm_0_tmp.price = outtoupdate.Price;
											copyOfoutToFirm_0_tmp.priceDate = outtoupdate.PriceDate;
											copyOfoutToFirm_0_tmp.marketValue = outtoupdate.MarketValue;
											copyOfoutToFirm_0_tmp.quantity = outtoupdate.Quantity;
											copyOfoutToFirm_0_tmp.PositionYTDRealizedSTGL = outtoupdate.PositionYTDRealizedSTGL;
											copyOfoutToFirm_0_tmp.PositionYTDRealizedLTGL = outtoupdate.PositionYTDRealizedLTGL;
											copyOfoutToFirm_0_tmp.isDeleted = false;
											copyOfoutToFirm_0_tmp.createdDate = TalendDate
													.getCurrentDate();
											copyOfoutToFirm_0_tmp.createdBy = 1;
											copyOfoutToFirm_0_tmp.editedDate = TalendDate
													.getCurrentDate();
											copyOfoutToFirm_0_tmp.editedBy = 1;
											copyOfoutToFirm_0 = copyOfoutToFirm_0_tmp;
										} // closing inner join bracket (1)
											// ###### START REJECTS #####

										// # Output reject table :
										// 'noDataFound_joinReject'
										// # Filter conditions
										if (rejectedInnerJoin_tMap_3) {
											noDataFound_joinReject_tmp.OrionFirmId = outtoupdate.OrionFirmId;
											noDataFound_joinReject_tmp.ExternalId = outtoupdate.ExternalId;
											noDataFound_joinReject_tmp.Symbol = outtoupdate.Symbol;
											noDataFound_joinReject_tmp.Price = outtoupdate.Price;
											noDataFound_joinReject_tmp.PriceDate = outtoupdate.PriceDate;
											noDataFound_joinReject_tmp.AccountNumber = outtoupdate.AccountNumber;
											noDataFound_joinReject_tmp.AccountId = outtoupdate.AccountId;
											noDataFound_joinReject_tmp.MarketValue = outtoupdate.MarketValue;
											noDataFound_joinReject_tmp.Quantity = outtoupdate.Quantity;
											noDataFound_joinReject_tmp.PositionYTDRealizedSTGL = outtoupdate.PositionYTDRealizedSTGL;
											noDataFound_joinReject_tmp.PositionYTDRealizedLTGL = outtoupdate.PositionYTDRealizedLTGL;
											noDataFound_joinReject = noDataFound_joinReject_tmp;
										} // closing filter/reject
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_3 = false;

								} catch (java.lang.Exception e) {
									// if anohter java.lang.Exception when
									// processing an java.lang.Exception

									try {// EE
										Var__tMap_3__Struct Var = Var__tMap_3;

										ErrorReject_tmp.OrionFirmId = outtoupdate.OrionFirmId;
										ErrorReject_tmp.ExternalId = outtoupdate.ExternalId;
										ErrorReject_tmp.Symbol = outtoupdate.Symbol;
										ErrorReject_tmp.Price = outtoupdate.Price;
										ErrorReject_tmp.PriceDate = outtoupdate.PriceDate;
										ErrorReject_tmp.AccountNumber = outtoupdate.AccountNumber;
										ErrorReject_tmp.AccountId = outtoupdate.AccountId;
										ErrorReject_tmp.MarketValue = outtoupdate.MarketValue;
										ErrorReject_tmp.Quantity = outtoupdate.Quantity;
										ErrorReject_tmp.PositionYTDRealizedSTGL = outtoupdate.PositionYTDRealizedSTGL;
										ErrorReject_tmp.PositionYTDRealizedLTGL = outtoupdate.PositionYTDRealizedLTGL;
										ErrorReject = ErrorReject_tmp;
										ErrorReject.errorMessage = e
												.getMessage();
										ErrorReject.errorStackTrace = ResumeUtil
												.getExceptionStackTrace(e);

										copyOfoutToFirm_0 = null;
										noDataFound_joinReject = null;
									} catch (java.lang.Exception ee) {// EE

										ee.printStackTrace();
										copyOfoutToFirm_0 = null;
										noDataFound_joinReject = null;
									}// EE
								}// end catch

								tos_count_tMap_3++;

								/**
								 * [tMap_3 main ] stop
								 */
								// Start of branch "ErrorReject"
								if (ErrorReject != null) {

									/**
									 * [tAmazonMysqlOutput_3 main ] start
									 */

									currentComponent = "tAmazonMysqlOutput_3";

									whetherReject_tAmazonMysqlOutput_3 = false;
									if (ErrorReject.OrionFirmId == null) {
										pstmt_tAmazonMysqlOutput_3.setNull(1,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tAmazonMysqlOutput_3.setInt(1,
												ErrorReject.OrionFirmId);
									}

									if (ErrorReject.ExternalId == null) {
										pstmt_tAmazonMysqlOutput_3.setNull(2,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tAmazonMysqlOutput_3.setInt(2,
												ErrorReject.ExternalId);
									}

									if (ErrorReject.Symbol == null) {
										pstmt_tAmazonMysqlOutput_3.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tAmazonMysqlOutput_3.setString(3,
												ErrorReject.Symbol);
									}

									if (ErrorReject.Price == null) {
										pstmt_tAmazonMysqlOutput_3.setNull(4,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tAmazonMysqlOutput_3.setFloat(4,
												ErrorReject.Price);
									}

									if (ErrorReject.PriceDate != null) {
										date_tAmazonMysqlOutput_3 = ErrorReject.PriceDate
												.getTime();
										if (date_tAmazonMysqlOutput_3 < year1_tAmazonMysqlOutput_3
												|| date_tAmazonMysqlOutput_3 >= year10000_tAmazonMysqlOutput_3) {
											pstmt_tAmazonMysqlOutput_3
													.setString(5,
															"0000-00-00 00:00:00");
										} else {
											pstmt_tAmazonMysqlOutput_3
													.setTimestamp(
															5,
															new java.sql.Timestamp(
																	date_tAmazonMysqlOutput_3));
										}
									} else {
										pstmt_tAmazonMysqlOutput_3.setNull(5,
												java.sql.Types.DATE);
									}

									if (ErrorReject.AccountNumber == null) {
										pstmt_tAmazonMysqlOutput_3.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tAmazonMysqlOutput_3.setString(6,
												ErrorReject.AccountNumber);
									}

									if (ErrorReject.AccountId == null) {
										pstmt_tAmazonMysqlOutput_3.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tAmazonMysqlOutput_3.setString(7,
												ErrorReject.AccountId);
									}

									if (ErrorReject.MarketValue == null) {
										pstmt_tAmazonMysqlOutput_3.setNull(8,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tAmazonMysqlOutput_3.setFloat(8,
												ErrorReject.MarketValue);
									}

									if (ErrorReject.Quantity == null) {
										pstmt_tAmazonMysqlOutput_3.setNull(9,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tAmazonMysqlOutput_3.setFloat(9,
												ErrorReject.Quantity);
									}

									if (ErrorReject.PositionYTDRealizedSTGL == null) {
										pstmt_tAmazonMysqlOutput_3.setNull(10,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tAmazonMysqlOutput_3
												.setFloat(
														10,
														ErrorReject.PositionYTDRealizedSTGL);
									}

									if (ErrorReject.PositionYTDRealizedLTGL == null) {
										pstmt_tAmazonMysqlOutput_3.setNull(11,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tAmazonMysqlOutput_3
												.setFloat(
														11,
														ErrorReject.PositionYTDRealizedLTGL);
									}

									if (ErrorReject.errorMessage == null) {
										pstmt_tAmazonMysqlOutput_3.setNull(12,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tAmazonMysqlOutput_3.setString(
												12, ErrorReject.errorMessage);
									}

									if (ErrorReject.errorStackTrace == null) {
										pstmt_tAmazonMysqlOutput_3.setNull(13,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tAmazonMysqlOutput_3
												.setString(
														13,
														ErrorReject.errorStackTrace);
									}

									try {
										nb_line_tAmazonMysqlOutput_3++;
										insertedCount_tAmazonMysqlOutput_3 = insertedCount_tAmazonMysqlOutput_3
												+ pstmt_tAmazonMysqlOutput_3
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tAmazonMysqlOutput_3 = true;
										System.err.print(e.getMessage());
									}
									commitCounter_tAmazonMysqlOutput_3++;
									if (commitEvery_tAmazonMysqlOutput_3 <= commitCounter_tAmazonMysqlOutput_3) {

										conn_tAmazonMysqlOutput_3.commit();

										commitCounter_tAmazonMysqlOutput_3 = 0;
									}

									tos_count_tAmazonMysqlOutput_3++;

									/**
									 * [tAmazonMysqlOutput_3 main ] stop
									 */

								} // End of branch "ErrorReject"

								// Start of branch "copyOfoutToFirm_0"
								if (copyOfoutToFirm_0 != null) {

									/**
									 * [tAmazonMysqlOutput_1 main ] start
									 */

									currentComponent = "tAmazonMysqlOutput_1";

									whetherReject_tAmazonMysqlOutput_1 = false;
									if (copyOfoutToFirm_0.accountId == null) {
										pstmt_tAmazonMysqlOutput_1.setNull(1,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tAmazonMysqlOutput_1.setInt(1,
												copyOfoutToFirm_0.accountId);
									}

									pstmt_tAmazonMysqlOutput_1.setInt(2,
											copyOfoutToFirm_0.SecurityId);

									if (copyOfoutToFirm_0.orionFirmId == null) {
										pstmt_tAmazonMysqlOutput_1.setNull(3,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tAmazonMysqlOutput_1.setInt(3,
												copyOfoutToFirm_0.orionFirmId);
									}

									pstmt_tAmazonMysqlOutput_1.setInt(4,
											copyOfoutToFirm_0.externalId);

									pstmt_tAmazonMysqlOutput_1.setFloat(5,
											copyOfoutToFirm_0.price);

									if (copyOfoutToFirm_0.priceDate != null) {
										date_tAmazonMysqlOutput_1 = copyOfoutToFirm_0.priceDate
												.getTime();
										if (date_tAmazonMysqlOutput_1 < year1_tAmazonMysqlOutput_1
												|| date_tAmazonMysqlOutput_1 >= year10000_tAmazonMysqlOutput_1) {
											pstmt_tAmazonMysqlOutput_1
													.setString(6,
															"0000-00-00 00:00:00");
										} else {
											pstmt_tAmazonMysqlOutput_1
													.setTimestamp(
															6,
															new java.sql.Timestamp(
																	date_tAmazonMysqlOutput_1));
										}
									} else {
										pstmt_tAmazonMysqlOutput_1.setNull(6,
												java.sql.Types.DATE);
									}

									pstmt_tAmazonMysqlOutput_1.setFloat(7,
											copyOfoutToFirm_0.marketValue);

									pstmt_tAmazonMysqlOutput_1.setFloat(8,
											copyOfoutToFirm_0.quantity);

									pstmt_tAmazonMysqlOutput_1
											.setFloat(
													9,
													copyOfoutToFirm_0.PositionYTDRealizedSTGL);

									pstmt_tAmazonMysqlOutput_1
											.setFloat(
													10,
													copyOfoutToFirm_0.PositionYTDRealizedLTGL);

									pstmt_tAmazonMysqlOutput_1.setBoolean(11,
											copyOfoutToFirm_0.isDeleted);

									if (copyOfoutToFirm_0.createdDate != null) {
										date_tAmazonMysqlOutput_1 = copyOfoutToFirm_0.createdDate
												.getTime();
										if (date_tAmazonMysqlOutput_1 < year1_tAmazonMysqlOutput_1
												|| date_tAmazonMysqlOutput_1 >= year10000_tAmazonMysqlOutput_1) {
											pstmt_tAmazonMysqlOutput_1
													.setString(12,
															"0000-00-00 00:00:00");
										} else {
											pstmt_tAmazonMysqlOutput_1
													.setTimestamp(
															12,
															new java.sql.Timestamp(
																	date_tAmazonMysqlOutput_1));
										}
									} else {
										pstmt_tAmazonMysqlOutput_1.setNull(12,
												java.sql.Types.DATE);
									}

									pstmt_tAmazonMysqlOutput_1.setInt(13,
											copyOfoutToFirm_0.createdBy);

									if (copyOfoutToFirm_0.editedDate != null) {
										date_tAmazonMysqlOutput_1 = copyOfoutToFirm_0.editedDate
												.getTime();
										if (date_tAmazonMysqlOutput_1 < year1_tAmazonMysqlOutput_1
												|| date_tAmazonMysqlOutput_1 >= year10000_tAmazonMysqlOutput_1) {
											pstmt_tAmazonMysqlOutput_1
													.setString(14,
															"0000-00-00 00:00:00");
										} else {
											pstmt_tAmazonMysqlOutput_1
													.setTimestamp(
															14,
															new java.sql.Timestamp(
																	date_tAmazonMysqlOutput_1));
										}
									} else {
										pstmt_tAmazonMysqlOutput_1.setNull(14,
												java.sql.Types.DATE);
									}

									pstmt_tAmazonMysqlOutput_1.setInt(15,
											copyOfoutToFirm_0.editedBy);

									try {
										nb_line_tAmazonMysqlOutput_1++;
										insertedCount_tAmazonMysqlOutput_1 = insertedCount_tAmazonMysqlOutput_1
												+ pstmt_tAmazonMysqlOutput_1
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tAmazonMysqlOutput_1 = true;
										System.err.print(e.getMessage());
									}
									commitCounter_tAmazonMysqlOutput_1++;
									if (commitEvery_tAmazonMysqlOutput_1 <= commitCounter_tAmazonMysqlOutput_1) {

										conn_tAmazonMysqlOutput_1.commit();

										commitCounter_tAmazonMysqlOutput_1 = 0;
									}

									tos_count_tAmazonMysqlOutput_1++;

									/**
									 * [tAmazonMysqlOutput_1 main ] stop
									 */

								} // End of branch "copyOfoutToFirm_0"

								// Start of branch "noDataFound_joinReject"
								if (noDataFound_joinReject != null) {

									/**
									 * [tAmazonMysqlOutput_4 main ] start
									 */

									currentComponent = "tAmazonMysqlOutput_4";

									whetherReject_tAmazonMysqlOutput_4 = false;
									if (noDataFound_joinReject.OrionFirmId == null) {
										pstmt_tAmazonMysqlOutput_4.setNull(1,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tAmazonMysqlOutput_4
												.setInt(1,
														noDataFound_joinReject.OrionFirmId);
									}

									if (noDataFound_joinReject.ExternalId == null) {
										pstmt_tAmazonMysqlOutput_4.setNull(2,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tAmazonMysqlOutput_4
												.setInt(2,
														noDataFound_joinReject.ExternalId);
									}

									if (noDataFound_joinReject.Symbol == null) {
										pstmt_tAmazonMysqlOutput_4.setNull(3,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tAmazonMysqlOutput_4.setString(3,
												noDataFound_joinReject.Symbol);
									}

									if (noDataFound_joinReject.Price == null) {
										pstmt_tAmazonMysqlOutput_4.setNull(4,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tAmazonMysqlOutput_4.setFloat(4,
												noDataFound_joinReject.Price);
									}

									if (noDataFound_joinReject.PriceDate != null) {
										date_tAmazonMysqlOutput_4 = noDataFound_joinReject.PriceDate
												.getTime();
										if (date_tAmazonMysqlOutput_4 < year1_tAmazonMysqlOutput_4
												|| date_tAmazonMysqlOutput_4 >= year10000_tAmazonMysqlOutput_4) {
											pstmt_tAmazonMysqlOutput_4
													.setString(5,
															"0000-00-00 00:00:00");
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setTimestamp(
															5,
															new java.sql.Timestamp(
																	date_tAmazonMysqlOutput_4));
										}
									} else {
										pstmt_tAmazonMysqlOutput_4.setNull(5,
												java.sql.Types.DATE);
									}

									if (noDataFound_joinReject.AccountNumber == null) {
										pstmt_tAmazonMysqlOutput_4.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tAmazonMysqlOutput_4
												.setString(
														6,
														noDataFound_joinReject.AccountNumber);
									}

									if (noDataFound_joinReject.AccountId == null) {
										pstmt_tAmazonMysqlOutput_4.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tAmazonMysqlOutput_4
												.setString(
														7,
														noDataFound_joinReject.AccountId);
									}

									if (noDataFound_joinReject.MarketValue == null) {
										pstmt_tAmazonMysqlOutput_4.setNull(8,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tAmazonMysqlOutput_4
												.setFloat(
														8,
														noDataFound_joinReject.MarketValue);
									}

									if (noDataFound_joinReject.Quantity == null) {
										pstmt_tAmazonMysqlOutput_4.setNull(9,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tAmazonMysqlOutput_4
												.setFloat(
														9,
														noDataFound_joinReject.Quantity);
									}

									if (noDataFound_joinReject.PositionYTDRealizedSTGL == null) {
										pstmt_tAmazonMysqlOutput_4.setNull(10,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tAmazonMysqlOutput_4
												.setFloat(
														10,
														noDataFound_joinReject.PositionYTDRealizedSTGL);
									}

									if (noDataFound_joinReject.PositionYTDRealizedLTGL == null) {
										pstmt_tAmazonMysqlOutput_4.setNull(11,
												java.sql.Types.FLOAT);
									} else {
										pstmt_tAmazonMysqlOutput_4
												.setFloat(
														11,
														noDataFound_joinReject.PositionYTDRealizedLTGL);
									}

									try {
										nb_line_tAmazonMysqlOutput_4++;
										insertedCount_tAmazonMysqlOutput_4 = insertedCount_tAmazonMysqlOutput_4
												+ pstmt_tAmazonMysqlOutput_4
														.executeUpdate();
									} catch (java.lang.Exception e) {
										whetherReject_tAmazonMysqlOutput_4 = true;
										System.err.print(e.getMessage());
									}
									commitCounter_tAmazonMysqlOutput_4++;
									if (commitEvery_tAmazonMysqlOutput_4 <= commitCounter_tAmazonMysqlOutput_4) {

										conn_tAmazonMysqlOutput_4.commit();

										commitCounter_tAmazonMysqlOutput_4 = 0;
									}

									tos_count_tAmazonMysqlOutput_4++;

									/**
									 * [tAmazonMysqlOutput_4 main ] stop
									 */

								} // End of branch "noDataFound_joinReject"

							} // End of branch "outtoupdate"

							// Start of branch "outTopositionInsert"
							if (outTopositionInsert != null) {

								/**
								 * [tAmazonMysqlOutput_2 main ] start
								 */

								currentComponent = "tAmazonMysqlOutput_2";

								whetherReject_tAmazonMysqlOutput_2 = false;
								if (outTopositionInsert.orionFirmId == null) {
									pstmt_tAmazonMysqlOutput_2.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tAmazonMysqlOutput_2.setInt(1,
											outTopositionInsert.orionFirmId);
								}

								if (outTopositionInsert.externalId == null) {
									pstmt_tAmazonMysqlOutput_2.setNull(2,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tAmazonMysqlOutput_2.setInt(2,
											outTopositionInsert.externalId);
								}

								if (outTopositionInsert.symbol == null) {
									pstmt_tAmazonMysqlOutput_2.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tAmazonMysqlOutput_2.setString(3,
											outTopositionInsert.symbol);
								}

								if (outTopositionInsert.price == null) {
									pstmt_tAmazonMysqlOutput_2.setNull(4,
											java.sql.Types.FLOAT);
								} else {
									pstmt_tAmazonMysqlOutput_2.setFloat(4,
											outTopositionInsert.price);
								}

								if (outTopositionInsert.priceDate != null) {
									date_tAmazonMysqlOutput_2 = outTopositionInsert.priceDate
											.getTime();
									if (date_tAmazonMysqlOutput_2 < year1_tAmazonMysqlOutput_2
											|| date_tAmazonMysqlOutput_2 >= year10000_tAmazonMysqlOutput_2) {
										pstmt_tAmazonMysqlOutput_2.setString(5,
												"0000-00-00 00:00:00");
									} else {
										pstmt_tAmazonMysqlOutput_2
												.setTimestamp(
														5,
														new java.sql.Timestamp(
																date_tAmazonMysqlOutput_2));
									}
								} else {
									pstmt_tAmazonMysqlOutput_2.setNull(5,
											java.sql.Types.DATE);
								}

								if (outTopositionInsert.quantity == null) {
									pstmt_tAmazonMysqlOutput_2.setNull(6,
											java.sql.Types.FLOAT);
								} else {
									pstmt_tAmazonMysqlOutput_2.setFloat(6,
											outTopositionInsert.quantity);
								}

								if (outTopositionInsert.positionYTDRealizedSTGL == null) {
									pstmt_tAmazonMysqlOutput_2.setNull(7,
											java.sql.Types.FLOAT);
								} else {
									pstmt_tAmazonMysqlOutput_2
											.setFloat(
													7,
													outTopositionInsert.positionYTDRealizedSTGL);
								}

								if (outTopositionInsert.accountNumber == null) {
									pstmt_tAmazonMysqlOutput_2.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tAmazonMysqlOutput_2.setString(8,
											outTopositionInsert.accountNumber);
								}

								if (outTopositionInsert.accountId == null) {
									pstmt_tAmazonMysqlOutput_2.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tAmazonMysqlOutput_2.setString(9,
											outTopositionInsert.accountId);
								}

								if (outTopositionInsert.marketValue == null) {
									pstmt_tAmazonMysqlOutput_2.setNull(10,
											java.sql.Types.FLOAT);
								} else {
									pstmt_tAmazonMysqlOutput_2.setFloat(10,
											outTopositionInsert.marketValue);
								}

								if (outTopositionInsert.positionYTDRealizedLTGL == null) {
									pstmt_tAmazonMysqlOutput_2.setNull(11,
											java.sql.Types.FLOAT);
								} else {
									pstmt_tAmazonMysqlOutput_2
											.setFloat(
													11,
													outTopositionInsert.positionYTDRealizedLTGL);
								}

								if (outTopositionInsert.id == null) {
									pstmt_tAmazonMysqlOutput_2.setNull(12,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tAmazonMysqlOutput_2.setInt(12,
											outTopositionInsert.id);
								}

								pstmt_tAmazonMysqlOutput_2.addBatch();
								nb_line_tAmazonMysqlOutput_2++;

								batchSizeCounter_tAmazonMysqlOutput_2++;

								if (!whetherReject_tAmazonMysqlOutput_2) {
								}
								if (batchSize_tAmazonMysqlOutput_2 <= batchSizeCounter_tAmazonMysqlOutput_2) {
									try {
										int countSum_tAmazonMysqlOutput_2 = 0;

										for (int countEach_tAmazonMysqlOutput_2 : pstmt_tAmazonMysqlOutput_2
												.executeBatch()) {
											countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
													: 1);
										}

										insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

									} catch (java.sql.BatchUpdateException e) {

										int countSum_tAmazonMysqlOutput_2 = 0;
										for (int countEach_tAmazonMysqlOutput_2 : e
												.getUpdateCounts()) {
											countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
													: countEach_tAmazonMysqlOutput_2);
										}

										insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

										System.err.println(e.getMessage());

									}

									batchSizeCounter_tAmazonMysqlOutput_2 = 0;
								}

								commitCounter_tAmazonMysqlOutput_2++;
								if (commitEvery_tAmazonMysqlOutput_2 <= commitCounter_tAmazonMysqlOutput_2) {
									if ((batchSize_tAmazonMysqlOutput_2 > 0)
											&& (batchSizeCounter_tAmazonMysqlOutput_2 > 0)) {
										try {
											int countSum_tAmazonMysqlOutput_2 = 0;

											for (int countEach_tAmazonMysqlOutput_2 : pstmt_tAmazonMysqlOutput_2
													.executeBatch()) {
												countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
														: 1);
											}

											insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

											batchSizeCounter_tAmazonMysqlOutput_2 = 0;
										} catch (java.sql.BatchUpdateException e) {

											int countSum_tAmazonMysqlOutput_2 = 0;
											for (int countEach_tAmazonMysqlOutput_2 : e
													.getUpdateCounts()) {
												countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
														: countEach_tAmazonMysqlOutput_2);
											}

											insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

											System.err.println(e.getMessage());

										}
									}

									conn_tAmazonMysqlOutput_2.commit();

									commitCounter_tAmazonMysqlOutput_2 = 0;
								}

								tos_count_tAmazonMysqlOutput_2++;

								/**
								 * [tAmazonMysqlOutput_2 main ] stop
								 */

							} // End of branch "outTopositionInsert"

						} // End of branch "SecondOutput"

					} // close loop of lookup 'row5' // G_TM_M_043

				} // G_TM_M_250 close loop read file data '1'

				/**
				 * [tMap_8_TMAP_IN end ] start
				 */

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_8_1.endGet();

				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				// ###############################

				ok_Hash.put("tMap_8_TMAP_IN", true);
				end_Hash.put("tMap_8_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_8_TMAP_IN end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row51 != null) {
					tHash_Lookup_row51.endGet();
				}
				globalMap.remove("tHash_Lookup_row51");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row52 != null) {
					tHash_Lookup_row52.endGet();
				}
				globalMap.remove("tHash_Lookup_row52");

				if (tHash_Lookup_row53 != null) {
					tHash_Lookup_row53.endGet();
				}
				globalMap.remove("tHash_Lookup_row53");

				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_3 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_3";

				if (pstmt_tAmazonMysqlOutput_3 != null) {
					pstmt_tAmazonMysqlOutput_3.close();
				}

				if (commitCounter_tAmazonMysqlOutput_3 > 0) {

					conn_tAmazonMysqlOutput_3.commit();

				}

				conn_tAmazonMysqlOutput_3.close();

				resourceMap.put("finish_tAmazonMysqlOutput_3", true);

				nb_line_deleted_tAmazonMysqlOutput_3 = nb_line_deleted_tAmazonMysqlOutput_3
						+ deletedCount_tAmazonMysqlOutput_3;
				nb_line_update_tAmazonMysqlOutput_3 = nb_line_update_tAmazonMysqlOutput_3
						+ updatedCount_tAmazonMysqlOutput_3;
				nb_line_inserted_tAmazonMysqlOutput_3 = nb_line_inserted_tAmazonMysqlOutput_3
						+ insertedCount_tAmazonMysqlOutput_3;
				nb_line_rejected_tAmazonMysqlOutput_3 = nb_line_rejected_tAmazonMysqlOutput_3
						+ rejectedCount_tAmazonMysqlOutput_3;

				globalMap.put("tAmazonMysqlOutput_3_NB_LINE",
						nb_line_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_3);

				ok_Hash.put("tAmazonMysqlOutput_3", true);
				end_Hash.put("tAmazonMysqlOutput_3", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_3 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_1";

				if (pstmt_tAmazonMysqlOutput_1 != null) {
					pstmt_tAmazonMysqlOutput_1.close();
				}

				if (commitCounter_tAmazonMysqlOutput_1 > 0) {

					conn_tAmazonMysqlOutput_1.commit();

				}

				conn_tAmazonMysqlOutput_1.close();

				resourceMap.put("finish_tAmazonMysqlOutput_1", true);

				nb_line_deleted_tAmazonMysqlOutput_1 = nb_line_deleted_tAmazonMysqlOutput_1
						+ deletedCount_tAmazonMysqlOutput_1;
				nb_line_update_tAmazonMysqlOutput_1 = nb_line_update_tAmazonMysqlOutput_1
						+ updatedCount_tAmazonMysqlOutput_1;
				nb_line_inserted_tAmazonMysqlOutput_1 = nb_line_inserted_tAmazonMysqlOutput_1
						+ insertedCount_tAmazonMysqlOutput_1;
				nb_line_rejected_tAmazonMysqlOutput_1 = nb_line_rejected_tAmazonMysqlOutput_1
						+ rejectedCount_tAmazonMysqlOutput_1;

				globalMap.put("tAmazonMysqlOutput_1_NB_LINE",
						nb_line_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_1);

				ok_Hash.put("tAmazonMysqlOutput_1", true);
				end_Hash.put("tAmazonMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_1 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_4 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_4";

				if (pstmt_tAmazonMysqlOutput_4 != null) {
					pstmt_tAmazonMysqlOutput_4.close();
				}

				if (commitCounter_tAmazonMysqlOutput_4 > 0) {

					conn_tAmazonMysqlOutput_4.commit();

				}

				conn_tAmazonMysqlOutput_4.close();

				resourceMap.put("finish_tAmazonMysqlOutput_4", true);

				nb_line_deleted_tAmazonMysqlOutput_4 = nb_line_deleted_tAmazonMysqlOutput_4
						+ deletedCount_tAmazonMysqlOutput_4;
				nb_line_update_tAmazonMysqlOutput_4 = nb_line_update_tAmazonMysqlOutput_4
						+ updatedCount_tAmazonMysqlOutput_4;
				nb_line_inserted_tAmazonMysqlOutput_4 = nb_line_inserted_tAmazonMysqlOutput_4
						+ insertedCount_tAmazonMysqlOutput_4;
				nb_line_rejected_tAmazonMysqlOutput_4 = nb_line_rejected_tAmazonMysqlOutput_4
						+ rejectedCount_tAmazonMysqlOutput_4;

				globalMap.put("tAmazonMysqlOutput_4_NB_LINE",
						nb_line_tAmazonMysqlOutput_4);
				globalMap.put("tAmazonMysqlOutput_4_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_4);
				globalMap.put("tAmazonMysqlOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_4);
				globalMap.put("tAmazonMysqlOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_4);
				globalMap.put("tAmazonMysqlOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_4);

				ok_Hash.put("tAmazonMysqlOutput_4", true);
				end_Hash.put("tAmazonMysqlOutput_4", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_4 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_2 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_2";

				try {
					if (batchSizeCounter_tAmazonMysqlOutput_2 != 0) {
						int countSum_tAmazonMysqlOutput_2 = 0;

						for (int countEach_tAmazonMysqlOutput_2 : pstmt_tAmazonMysqlOutput_2
								.executeBatch()) {
							countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonMysqlOutput_2 = 0;
					for (int countEach_tAmazonMysqlOutput_2 : e
							.getUpdateCounts()) {
						countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
								: countEach_tAmazonMysqlOutput_2);
					}

					insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonMysqlOutput_2 = 0;

				if (pstmt_tAmazonMysqlOutput_2 != null) {
					pstmt_tAmazonMysqlOutput_2.close();
				}

				if (commitCounter_tAmazonMysqlOutput_2 > 0) {

					conn_tAmazonMysqlOutput_2.commit();

				}

				conn_tAmazonMysqlOutput_2.close();

				resourceMap.put("finish_tAmazonMysqlOutput_2", true);

				nb_line_deleted_tAmazonMysqlOutput_2 = nb_line_deleted_tAmazonMysqlOutput_2
						+ deletedCount_tAmazonMysqlOutput_2;
				nb_line_update_tAmazonMysqlOutput_2 = nb_line_update_tAmazonMysqlOutput_2
						+ updatedCount_tAmazonMysqlOutput_2;
				nb_line_inserted_tAmazonMysqlOutput_2 = nb_line_inserted_tAmazonMysqlOutput_2
						+ insertedCount_tAmazonMysqlOutput_2;
				nb_line_rejected_tAmazonMysqlOutput_2 = nb_line_rejected_tAmazonMysqlOutput_2
						+ rejectedCount_tAmazonMysqlOutput_2;

				globalMap.put("tAmazonMysqlOutput_2_NB_LINE",
						nb_line_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_2);

				ok_Hash.put("tAmazonMysqlOutput_2", true);
				end_Hash.put("tAmazonMysqlOutput_2", System.currentTimeMillis());

				tRunJob_1Process(globalMap);

				/**
				 * [tAmazonMysqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row52");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row53");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row51");

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row9");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tAmazonAuroraInput_3_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_in";

				/**
				 * [tAmazonAuroraInput_3_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				/**
				 * [tAmazonAuroraInput_3_out finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tMap_8_TMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_OUT";

				/**
				 * [tMap_8_TMAP_OUT finally ] stop
				 */

				/**
				 * [tMap_8_TMAP_IN finally ] start
				 */

				currentVirtualComponent = "tMap_8";

				currentComponent = "tMap_8_TMAP_IN";

				/**
				 * [tMap_8_TMAP_IN finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_3 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_3";

				if (resourceMap.get("finish_tAmazonMysqlOutput_3") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_3") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_3")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_3) {
							String errorMessage_tAmazonMysqlOutput_3 = "failed to close the connection in tAmazonMysqlOutput_3 :"
									+ sqlEx_tAmazonMysqlOutput_3.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_3);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_3 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_1";

				if (resourceMap.get("finish_tAmazonMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_1) {
							String errorMessage_tAmazonMysqlOutput_1 = "failed to close the connection in tAmazonMysqlOutput_1 :"
									+ sqlEx_tAmazonMysqlOutput_1.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_1);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_1 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_4 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_4";

				if (resourceMap.get("finish_tAmazonMysqlOutput_4") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_4") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_4")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_4) {
							String errorMessage_tAmazonMysqlOutput_4 = "failed to close the connection in tAmazonMysqlOutput_4 :"
									+ sqlEx_tAmazonMysqlOutput_4.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_4);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_4 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_2 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_2";

				if (resourceMap.get("finish_tAmazonMysqlOutput_2") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_2) {
							String errorMessage_tAmazonMysqlOutput_2 = "failed to close the connection in tAmazonMysqlOutput_2 :"
									+ sqlEx_tAmazonMysqlOutput_2.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_2);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_3_in_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmName = this.orionEclipseFirmName;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orionEclipseFirmName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_7_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_7_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_7_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_7_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_7_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_7_inStruct row_tAmazonAuroraInput_7_in = new row_tAmazonAuroraInput_7_inStruct();
				row_tAmazonAuroraInput_7_inStruct row4 = row_tAmazonAuroraInput_7_in;

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tAmazonAuroraInput_7_out -
				// inputs:(row_tAmazonAuroraInput_7_in) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_6 - inputs:(row3,row4) outputs:(s)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_7_out", false);
				start_Hash.put("tAmazonAuroraInput_7_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_out";

				int tos_count_tAmazonAuroraInput_7_out = 0;

				/**
				 * [tAmazonAuroraInput_7_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_7_in", false);
				start_Hash.put("tAmazonAuroraInput_7_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_in";

				int tos_count_tAmazonAuroraInput_7_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_7_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_7_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_7_in = calendar_tAmazonAuroraInput_7_in
						.getTime();
				int nb_line_tAmazonAuroraInput_7_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_7_in = null;
				String driverClass_tAmazonAuroraInput_7_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_7_in);
				String dbUser_tAmazonAuroraInput_7_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_7_in = context.password;

				String dbPwd_tAmazonAuroraInput_7_in = decryptedPassword_tAmazonAuroraInput_7_in;

				String url_tAmazonAuroraInput_7_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_7_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_7_in,
								dbUser_tAmazonAuroraInput_7_in,
								dbPwd_tAmazonAuroraInput_7_in);

				java.sql.Statement stmt_tAmazonAuroraInput_7_in = conn_tAmazonAuroraInput_7_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_7_in = "select orionConnectFirmId , orionEclipseFirmName from firm";

				globalMap.put("tAmazonAuroraInput_7_QUERY",
						dbquery_tAmazonAuroraInput_7_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_7_in = null;
				try {
					rs_tAmazonAuroraInput_7_in = stmt_tAmazonAuroraInput_7_in
							.executeQuery(dbquery_tAmazonAuroraInput_7_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_7_in = rs_tAmazonAuroraInput_7_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_7_in = rsmd_tAmazonAuroraInput_7_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_7_in = null;

					while (rs_tAmazonAuroraInput_7_in.next()) {
						nb_line_tAmazonAuroraInput_7_in++;

						if (colQtyInRs_tAmazonAuroraInput_7_in < 1) {
							row_tAmazonAuroraInput_7_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_7_in.getObject(1) != null) {
								row_tAmazonAuroraInput_7_in.orionConnectFirmId = rs_tAmazonAuroraInput_7_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_7_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_7_in < 2) {
							row_tAmazonAuroraInput_7_in.orionEclipseFirmName = null;
						} else {

							row_tAmazonAuroraInput_7_in.orionEclipseFirmName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_7_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_7_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_7_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_7";

						currentComponent = "tAmazonAuroraInput_7_in";

						tos_count_tAmazonAuroraInput_7_in++;

						/**
						 * [tAmazonAuroraInput_7_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_7_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_7";

						currentComponent = "tAmazonAuroraInput_7_out";

						row4 = row_tAmazonAuroraInput_7_in;

						tos_count_tAmazonAuroraInput_7_out++;

						/**
						 * [tAmazonAuroraInput_7_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.orionConnectFirmId = row4.orionConnectFirmId;

						row4_HashRow.orionEclipseFirmName = row4.orionEclipseFirmName;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_7_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_7";

						currentComponent = "tAmazonAuroraInput_7_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_7_in != null) {
						rs_tAmazonAuroraInput_7_in.close();
					}
					stmt_tAmazonAuroraInput_7_in.close();
					if (conn_tAmazonAuroraInput_7_in != null
							&& !conn_tAmazonAuroraInput_7_in.isClosed()) {

						conn_tAmazonAuroraInput_7_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_7_NB_LINE",
						nb_line_tAmazonAuroraInput_7_in);

				ok_Hash.put("tAmazonAuroraInput_7_in", true);
				end_Hash.put("tAmazonAuroraInput_7_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_7_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_out";

				ok_Hash.put("tAmazonAuroraInput_7_out", true);
				end_Hash.put("tAmazonAuroraInput_7_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_7_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_7_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_in";

				/**
				 * [tAmazonAuroraInput_7_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_out";

				/**
				 * [tAmazonAuroraInput_7_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_7_in_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OrionFirmId == null) ? 0 : this.OrionFirmId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.OrionFirmId == null) {
				if (other.OrionFirmId != null)
					return false;

			} else if (!this.OrionFirmId.equals(other.OrionFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.OrionFirmId = this.OrionFirmId;
			other.ExternalId = this.ExternalId;
			other.Symbol = this.Symbol;
			other.Price = this.Price;
			other.PriceDate = this.PriceDate;
			other.AccountNumber = this.AccountNumber;
			other.AccountId = this.AccountId;
			other.MarketValue = this.MarketValue;
			other.Quantity = this.Quantity;
			other.PositionYTDRealizedSTGL = this.PositionYTDRealizedSTGL;
			other.PositionYTDRealizedLTGL = this.PositionYTDRealizedLTGL;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.OrionFirmId = this.OrionFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ExternalId = readInteger(dis, ois);

				this.Symbol = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Price = null;
				} else {
					this.Price = dis.readFloat();
				}

				this.PriceDate = readDate(dis, ois);

				this.AccountNumber = readString(dis, ois);

				this.AccountId = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.MarketValue = null;
				} else {
					this.MarketValue = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Quantity = null;
				} else {
					this.Quantity = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.PositionYTDRealizedSTGL = null;
				} else {
					this.PositionYTDRealizedSTGL = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.PositionYTDRealizedLTGL = null;
				} else {
					this.PositionYTDRealizedLTGL = dis.readFloat();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.ExternalId, dos, oos);

				writeString(this.Symbol, dos, oos);

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				writeDate(this.PriceDate, dos, oos);

				writeString(this.AccountNumber, dos, oos);

				writeString(this.AccountId, dos, oos);

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OrionFirmId,
					other.OrionFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_1_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_1_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.PriceDate = readDate(dis);

					this.AccountNumber = readString(dis);

					this.AccountId = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MarketValue = null;
					} else {
						this.MarketValue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedSTGL = null;
					} else {
						this.PositionYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedLTGL = null;
					} else {
						this.PositionYTDRealizedLTGL = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// java.util.Date

				writeDate(this.PriceDate, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountId, dos);

				// Float

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Float

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				// Float

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_1_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_1_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_1_inStruct row_tAmazonAuroraInput_1_in = new row_tAmazonAuroraInput_1_inStruct();
				row_tAmazonAuroraInput_1_inStruct row5 = row_tAmazonAuroraInput_1_in;

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tAmazonAuroraInput_1_out -
				// inputs:(row_tAmazonAuroraInput_1_in) outputs:(row5,row5) |
				// target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_8 - inputs:(mainout,row5)
				// outputs:(SecondOutput)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct> tHash_Lookup_row5 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct>(
						matchingModeEnum_row5,
						"C:/Users/Ashutosh/Downloads/TOS_DI-20160510_1709-V6.2.0/workspace/temp"
								+ "/" + jobName + "_tMapData_" + pid
								+ "_Lookup_row5_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row5Struct createRowInstance() {
								return new row5Struct();
							}
						}

						, 2000000

				);

				tHash_Lookup_row5.initPut();

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_out", false);
				start_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				int tos_count_tAmazonAuroraInput_1_out = 0;

				/**
				 * [tAmazonAuroraInput_1_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_in", false);
				start_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				int tos_count_tAmazonAuroraInput_1_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_1_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_1_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_1_in = calendar_tAmazonAuroraInput_1_in
						.getTime();
				int nb_line_tAmazonAuroraInput_1_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_1_in = null;
				String driverClass_tAmazonAuroraInput_1_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_1_in);
				String dbUser_tAmazonAuroraInput_1_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_1_in = context.password;

				String dbPwd_tAmazonAuroraInput_1_in = decryptedPassword_tAmazonAuroraInput_1_in;

				String url_tAmazonAuroraInput_1_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_1_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_1_in,
								dbUser_tAmazonAuroraInput_1_in,
								dbPwd_tAmazonAuroraInput_1_in);

				java.sql.Statement stmt_tAmazonAuroraInput_1_in = conn_tAmazonAuroraInput_1_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_1_in = "select  OrionFirmId , ExternalId ,Symbol , Price , PriceDate , AccountNumber , AccountId  , MarketValue , Quantity , PositionYTDRealizedSTGL , PositionYTDRealizedLTGL  from position_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_1_QUERY",
						dbquery_tAmazonAuroraInput_1_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_1_in = null;
				try {
					rs_tAmazonAuroraInput_1_in = stmt_tAmazonAuroraInput_1_in
							.executeQuery(dbquery_tAmazonAuroraInput_1_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_1_in = rs_tAmazonAuroraInput_1_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_1_in = rsmd_tAmazonAuroraInput_1_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_1_in = null;

					while (rs_tAmazonAuroraInput_1_in.next()) {
						nb_line_tAmazonAuroraInput_1_in++;

						if (colQtyInRs_tAmazonAuroraInput_1_in < 1) {
							row_tAmazonAuroraInput_1_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(1) != null) {
								row_tAmazonAuroraInput_1_in.OrionFirmId = rs_tAmazonAuroraInput_1_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_1_in.OrionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 2) {
							row_tAmazonAuroraInput_1_in.ExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(2) != null) {
								row_tAmazonAuroraInput_1_in.ExternalId = rs_tAmazonAuroraInput_1_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_1_in.ExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 3) {
							row_tAmazonAuroraInput_1_in.Symbol = null;
						} else {

							row_tAmazonAuroraInput_1_in.Symbol = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 3,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 4) {
							row_tAmazonAuroraInput_1_in.Price = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(4) != null) {
								row_tAmazonAuroraInput_1_in.Price = rs_tAmazonAuroraInput_1_in
										.getFloat(4);
							} else {
								row_tAmazonAuroraInput_1_in.Price = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 5) {
							row_tAmazonAuroraInput_1_in.PriceDate = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getString(5) != null) {
								String dateString_tAmazonAuroraInput_1_in = rs_tAmazonAuroraInput_1_in
										.getString(5);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_1_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_1_in)) {
									row_tAmazonAuroraInput_1_in.PriceDate = rs_tAmazonAuroraInput_1_in
											.getTimestamp(5);
								} else {
									row_tAmazonAuroraInput_1_in.PriceDate = (java.util.Date) year0_tAmazonAuroraInput_1_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_1_in.PriceDate = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 6) {
							row_tAmazonAuroraInput_1_in.AccountNumber = null;
						} else {

							row_tAmazonAuroraInput_1_in.AccountNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 6,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 7) {
							row_tAmazonAuroraInput_1_in.AccountId = null;
						} else {

							row_tAmazonAuroraInput_1_in.AccountId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 7,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 8) {
							row_tAmazonAuroraInput_1_in.MarketValue = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(8) != null) {
								row_tAmazonAuroraInput_1_in.MarketValue = rs_tAmazonAuroraInput_1_in
										.getFloat(8);
							} else {
								row_tAmazonAuroraInput_1_in.MarketValue = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 9) {
							row_tAmazonAuroraInput_1_in.Quantity = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(9) != null) {
								row_tAmazonAuroraInput_1_in.Quantity = rs_tAmazonAuroraInput_1_in
										.getFloat(9);
							} else {
								row_tAmazonAuroraInput_1_in.Quantity = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 10) {
							row_tAmazonAuroraInput_1_in.PositionYTDRealizedSTGL = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(10) != null) {
								row_tAmazonAuroraInput_1_in.PositionYTDRealizedSTGL = rs_tAmazonAuroraInput_1_in
										.getFloat(10);
							} else {
								row_tAmazonAuroraInput_1_in.PositionYTDRealizedSTGL = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 11) {
							row_tAmazonAuroraInput_1_in.PositionYTDRealizedLTGL = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(11) != null) {
								row_tAmazonAuroraInput_1_in.PositionYTDRealizedLTGL = rs_tAmazonAuroraInput_1_in
										.getFloat(11);
							} else {
								row_tAmazonAuroraInput_1_in.PositionYTDRealizedLTGL = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_1_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

						tos_count_tAmazonAuroraInput_1_in++;

						/**
						 * [tAmazonAuroraInput_1_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_out";

						row5 = row_tAmazonAuroraInput_1_in;

						tos_count_tAmazonAuroraInput_1_out++;

						/**
						 * [tAmazonAuroraInput_1_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						row5Struct row5_HashRow = tHash_Lookup_row5
								.getNextFreeRow();

						row5_HashRow.OrionFirmId = row5.OrionFirmId;

						row5_HashRow.ExternalId = row5.ExternalId;

						row5_HashRow.Symbol = row5.Symbol;

						row5_HashRow.Price = row5.Price;

						row5_HashRow.PriceDate = row5.PriceDate;

						row5_HashRow.AccountNumber = row5.AccountNumber;

						row5_HashRow.AccountId = row5.AccountId;

						row5_HashRow.MarketValue = row5.MarketValue;

						row5_HashRow.Quantity = row5.Quantity;

						row5_HashRow.PositionYTDRealizedSTGL = row5.PositionYTDRealizedSTGL;

						row5_HashRow.PositionYTDRealizedLTGL = row5.PositionYTDRealizedLTGL;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_1_in != null) {
						rs_tAmazonAuroraInput_1_in.close();
					}
					stmt_tAmazonAuroraInput_1_in.close();
					if (conn_tAmazonAuroraInput_1_in != null
							&& !conn_tAmazonAuroraInput_1_in.isClosed()) {

						conn_tAmazonAuroraInput_1_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_1_NB_LINE",
						nb_line_tAmazonAuroraInput_1_in);

				ok_Hash.put("tAmazonAuroraInput_1_in", true);
				end_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				ok_Hash.put("tAmazonAuroraInput_1_out", true);
				end_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_1_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				/**
				 * [tAmazonAuroraInput_1_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				/**
				 * [tAmazonAuroraInput_1_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 1);
	}

	public static class row51Struct implements
			routines.system.IPersistableComparableLookupRow<row51Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.externalId == null) ? 0 : this.externalId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row51Struct other = (row51Struct) obj;

			if (this.externalId == null) {
				if (other.externalId != null)
					return false;

			} else if (!this.externalId.equals(other.externalId))

				return false;

			return true;
		}

		public void copyDataTo(row51Struct other) {

			other.externalId = this.externalId;

		}

		public void copyKeysDataTo(row51Struct other) {

			other.externalId = this.externalId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.externalId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.externalId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("externalId=" + String.valueOf(externalId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row51Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.externalId,
					other.externalId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_4_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_4_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.externalId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.externalId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("externalId=" + String.valueOf(externalId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_4_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_4_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_4_inStruct row_tAmazonAuroraInput_4_in = new row_tAmazonAuroraInput_4_inStruct();
				row_tAmazonAuroraInput_4_inStruct row51 = row_tAmazonAuroraInput_4_in;

				/**
				 * [tAdvancedHash_row51 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row51", false);
				start_Hash.put("tAdvancedHash_row51",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row51";

				int tos_count_tAdvancedHash_row51 = 0;

				// connection name:row51
				// source node:tAmazonAuroraInput_4_out -
				// inputs:(row_tAmazonAuroraInput_4_in) outputs:(row51,row51) |
				// target node:tAdvancedHash_row51 - inputs:(row51) outputs:()
				// linked node: tMap_1 - inputs:(SecondOutput,row51)
				// outputs:(outtoupdate,outTopositionInsert)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row51 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct> tHash_Lookup_row51 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row51Struct> getLookup(matchingModeEnum_row51);

				globalMap.put("tHash_Lookup_row51", tHash_Lookup_row51);

				/**
				 * [tAdvancedHash_row51 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_4_out", false);
				start_Hash.put("tAmazonAuroraInput_4_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				int tos_count_tAmazonAuroraInput_4_out = 0;

				/**
				 * [tAmazonAuroraInput_4_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_4_in", false);
				start_Hash.put("tAmazonAuroraInput_4_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_in";

				int tos_count_tAmazonAuroraInput_4_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_4_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_4_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_4_in = calendar_tAmazonAuroraInput_4_in
						.getTime();
				int nb_line_tAmazonAuroraInput_4_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_4_in = null;
				String driverClass_tAmazonAuroraInput_4_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_4_in);
				String dbUser_tAmazonAuroraInput_4_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_4_in = context.password;

				String dbPwd_tAmazonAuroraInput_4_in = decryptedPassword_tAmazonAuroraInput_4_in;

				String url_tAmazonAuroraInput_4_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_4_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_4_in,
								dbUser_tAmazonAuroraInput_4_in,
								dbPwd_tAmazonAuroraInput_4_in);

				java.sql.Statement stmt_tAmazonAuroraInput_4_in = conn_tAmazonAuroraInput_4_in
						.createStatement();
				((com.mysql.jdbc.Statement) stmt_tAmazonAuroraInput_4_in)
						.enableStreamingResults();

				String dbquery_tAmazonAuroraInput_4_in = "SELECT \n  externalId\nFROM `position`";

				globalMap.put("tAmazonAuroraInput_4_QUERY",
						dbquery_tAmazonAuroraInput_4_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_4_in = null;
				try {
					rs_tAmazonAuroraInput_4_in = stmt_tAmazonAuroraInput_4_in
							.executeQuery(dbquery_tAmazonAuroraInput_4_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_4_in = rs_tAmazonAuroraInput_4_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_4_in = rsmd_tAmazonAuroraInput_4_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_4_in = null;

					while (rs_tAmazonAuroraInput_4_in.next()) {
						nb_line_tAmazonAuroraInput_4_in++;

						if (colQtyInRs_tAmazonAuroraInput_4_in < 1) {
							row_tAmazonAuroraInput_4_in.externalId = null;
						} else {

							if (rs_tAmazonAuroraInput_4_in.getObject(1) != null) {
								row_tAmazonAuroraInput_4_in.externalId = rs_tAmazonAuroraInput_4_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_4_in.externalId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_4_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_in";

						tos_count_tAmazonAuroraInput_4_in++;

						/**
						 * [tAmazonAuroraInput_4_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_out";

						row51 = row_tAmazonAuroraInput_4_in;

						tos_count_tAmazonAuroraInput_4_out++;

						/**
						 * [tAmazonAuroraInput_4_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row51 main ] start
						 */

						currentComponent = "tAdvancedHash_row51";

						row51Struct row51_HashRow = new row51Struct();

						row51_HashRow.externalId = row51.externalId;

						tHash_Lookup_row51.put(row51_HashRow);

						tos_count_tAdvancedHash_row51++;

						/**
						 * [tAdvancedHash_row51 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_4_in != null) {
						rs_tAmazonAuroraInput_4_in.close();
					}
					stmt_tAmazonAuroraInput_4_in.close();
					if (conn_tAmazonAuroraInput_4_in != null
							&& !conn_tAmazonAuroraInput_4_in.isClosed()) {

						conn_tAmazonAuroraInput_4_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_4_NB_LINE",
						nb_line_tAmazonAuroraInput_4_in);

				ok_Hash.put("tAmazonAuroraInput_4_in", true);
				end_Hash.put("tAmazonAuroraInput_4_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_4_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				ok_Hash.put("tAmazonAuroraInput_4_out", true);
				end_Hash.put("tAmazonAuroraInput_4_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_4_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row51 end ] start
				 */

				currentComponent = "tAdvancedHash_row51";

				tHash_Lookup_row51.endPut();

				ok_Hash.put("tAdvancedHash_row51", true);
				end_Hash.put("tAdvancedHash_row51", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row51 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_4_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_in";

				/**
				 * [tAmazonAuroraInput_4_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				/**
				 * [tAmazonAuroraInput_4_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row51 finally ] start
				 */

				currentComponent = "tAdvancedHash_row51";

				/**
				 * [tAdvancedHash_row51 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE", 1);
	}

	public static class row52Struct implements
			routines.system.IPersistableComparableLookupRow<row52Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.symbol == null) ? 0 : this.symbol.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row52Struct other = (row52Struct) obj;

			if (this.symbol == null) {
				if (other.symbol != null)
					return false;

			} else if (!this.symbol.equals(other.symbol))

				return false;

			return true;
		}

		public void copyDataTo(row52Struct other) {

			other.id = this.id;
			other.symbol = this.symbol;

		}

		public void copyKeysDataTo(row52Struct other) {

			other.symbol = this.symbol;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.symbol = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.symbol, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",symbol=" + symbol);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row52Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.symbol, other.symbol);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_5_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_5_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.symbol = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.symbol, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",symbol=" + symbol);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_5_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_5_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_5_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_5_inStruct row_tAmazonAuroraInput_5_in = new row_tAmazonAuroraInput_5_inStruct();
				row_tAmazonAuroraInput_5_inStruct row52 = row_tAmazonAuroraInput_5_in;

				/**
				 * [tAdvancedHash_row52 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row52", false);
				start_Hash.put("tAdvancedHash_row52",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row52";

				int tos_count_tAdvancedHash_row52 = 0;

				// connection name:row52
				// source node:tAmazonAuroraInput_5_out -
				// inputs:(row_tAmazonAuroraInput_5_in) outputs:(row52,row52) |
				// target node:tAdvancedHash_row52 - inputs:(row52) outputs:()
				// linked node: tMap_3 - inputs:(outtoupdate,row52,row53)
				// outputs:(ErrorReject,copyOfoutToFirm_0,noDataFound_joinReject)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row52 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row52Struct> tHash_Lookup_row52 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row52Struct> getLookup(matchingModeEnum_row52);

				globalMap.put("tHash_Lookup_row52", tHash_Lookup_row52);

				/**
				 * [tAdvancedHash_row52 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_5_out", false);
				start_Hash.put("tAmazonAuroraInput_5_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				int tos_count_tAmazonAuroraInput_5_out = 0;

				/**
				 * [tAmazonAuroraInput_5_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_5_in", false);
				start_Hash.put("tAmazonAuroraInput_5_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_in";

				int tos_count_tAmazonAuroraInput_5_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_5_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_5_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_5_in = calendar_tAmazonAuroraInput_5_in
						.getTime();
				int nb_line_tAmazonAuroraInput_5_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_5_in = null;
				String driverClass_tAmazonAuroraInput_5_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_5_in);
				String dbUser_tAmazonAuroraInput_5_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_5_in = context.password;

				String dbPwd_tAmazonAuroraInput_5_in = decryptedPassword_tAmazonAuroraInput_5_in;

				String url_tAmazonAuroraInput_5_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_5_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_5_in,
								dbUser_tAmazonAuroraInput_5_in,
								dbPwd_tAmazonAuroraInput_5_in);

				java.sql.Statement stmt_tAmazonAuroraInput_5_in = conn_tAmazonAuroraInput_5_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_5_in = "SELECT \n  \n  `security`.`id`, \n  `security`.`symbol`\n\n \nFROM `security`";

				globalMap.put("tAmazonAuroraInput_5_QUERY",
						dbquery_tAmazonAuroraInput_5_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_5_in = null;
				try {
					rs_tAmazonAuroraInput_5_in = stmt_tAmazonAuroraInput_5_in
							.executeQuery(dbquery_tAmazonAuroraInput_5_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_5_in = rs_tAmazonAuroraInput_5_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_5_in = rsmd_tAmazonAuroraInput_5_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_5_in = null;

					while (rs_tAmazonAuroraInput_5_in.next()) {
						nb_line_tAmazonAuroraInput_5_in++;

						if (colQtyInRs_tAmazonAuroraInput_5_in < 1) {
							row_tAmazonAuroraInput_5_in.id = null;
						} else {

							if (rs_tAmazonAuroraInput_5_in.getObject(1) != null) {
								row_tAmazonAuroraInput_5_in.id = rs_tAmazonAuroraInput_5_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_5_in.id = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_5_in < 2) {
							row_tAmazonAuroraInput_5_in.symbol = null;
						} else {

							row_tAmazonAuroraInput_5_in.symbol = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_5_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_5_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_in";

						tos_count_tAmazonAuroraInput_5_in++;

						/**
						 * [tAmazonAuroraInput_5_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_out";

						row52 = row_tAmazonAuroraInput_5_in;

						tos_count_tAmazonAuroraInput_5_out++;

						/**
						 * [tAmazonAuroraInput_5_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row52 main ] start
						 */

						currentComponent = "tAdvancedHash_row52";

						row52Struct row52_HashRow = new row52Struct();

						row52_HashRow.id = row52.id;

						row52_HashRow.symbol = row52.symbol;

						tHash_Lookup_row52.put(row52_HashRow);

						tos_count_tAdvancedHash_row52++;

						/**
						 * [tAdvancedHash_row52 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_5_in != null) {
						rs_tAmazonAuroraInput_5_in.close();
					}
					stmt_tAmazonAuroraInput_5_in.close();
					if (conn_tAmazonAuroraInput_5_in != null
							&& !conn_tAmazonAuroraInput_5_in.isClosed()) {

						conn_tAmazonAuroraInput_5_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_5_NB_LINE",
						nb_line_tAmazonAuroraInput_5_in);

				ok_Hash.put("tAmazonAuroraInput_5_in", true);
				end_Hash.put("tAmazonAuroraInput_5_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_5_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				ok_Hash.put("tAmazonAuroraInput_5_out", true);
				end_Hash.put("tAmazonAuroraInput_5_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_5_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row52 end ] start
				 */

				currentComponent = "tAdvancedHash_row52";

				tHash_Lookup_row52.endPut();

				ok_Hash.put("tAdvancedHash_row52", true);
				end_Hash.put("tAdvancedHash_row52", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row52 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_5_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_in";

				/**
				 * [tAmazonAuroraInput_5_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				/**
				 * [tAmazonAuroraInput_5_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row52 finally ] start
				 */

				currentComponent = "tAdvancedHash_row52";

				/**
				 * [tAdvancedHash_row52 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_5_in_SUBPROCESS_STATE", 1);
	}

	public static class row53Struct implements
			routines.system.IPersistableComparableLookupRow<row53Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.accountId == null) ? 0 : this.accountId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row53Struct other = (row53Struct) obj;

			if (this.accountId == null) {
				if (other.accountId != null)
					return false;

			} else if (!this.accountId.equals(other.accountId))

				return false;

			return true;
		}

		public void copyDataTo(row53Struct other) {

			other.id = this.id;
			other.accountId = this.accountId;

		}

		public void copyKeysDataTo(row53Struct other) {

			other.accountId = this.accountId;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.accountId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.accountId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",accountId=" + accountId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row53Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.accountId, other.accountId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_6_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_6_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Position_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Position_staging_to_firm) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.accountId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.accountId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",accountId=" + accountId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_6_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_6_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_6_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_6_inStruct row_tAmazonAuroraInput_6_in = new row_tAmazonAuroraInput_6_inStruct();
				row_tAmazonAuroraInput_6_inStruct row53 = row_tAmazonAuroraInput_6_in;

				/**
				 * [tAdvancedHash_row53 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row53", false);
				start_Hash.put("tAdvancedHash_row53",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row53";

				int tos_count_tAdvancedHash_row53 = 0;

				// connection name:row53
				// source node:tAmazonAuroraInput_6_out -
				// inputs:(row_tAmazonAuroraInput_6_in) outputs:(row53,row53) |
				// target node:tAdvancedHash_row53 - inputs:(row53) outputs:()
				// linked node: tMap_3 - inputs:(outtoupdate,row52,row53)
				// outputs:(ErrorReject,copyOfoutToFirm_0,noDataFound_joinReject)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row53 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row53Struct> tHash_Lookup_row53 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row53Struct> getLookup(matchingModeEnum_row53);

				globalMap.put("tHash_Lookup_row53", tHash_Lookup_row53);

				/**
				 * [tAdvancedHash_row53 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_6_out", false);
				start_Hash.put("tAmazonAuroraInput_6_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_out";

				int tos_count_tAmazonAuroraInput_6_out = 0;

				/**
				 * [tAmazonAuroraInput_6_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_6_in", false);
				start_Hash.put("tAmazonAuroraInput_6_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_in";

				int tos_count_tAmazonAuroraInput_6_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_6_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_6_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_6_in = calendar_tAmazonAuroraInput_6_in
						.getTime();
				int nb_line_tAmazonAuroraInput_6_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_6_in = null;
				String driverClass_tAmazonAuroraInput_6_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_6_in);
				String dbUser_tAmazonAuroraInput_6_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_6_in = context.password;

				String dbPwd_tAmazonAuroraInput_6_in = decryptedPassword_tAmazonAuroraInput_6_in;

				String url_tAmazonAuroraInput_6_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_6_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_6_in,
								dbUser_tAmazonAuroraInput_6_in,
								dbPwd_tAmazonAuroraInput_6_in);

				java.sql.Statement stmt_tAmazonAuroraInput_6_in = conn_tAmazonAuroraInput_6_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_6_in = "select id , accountId from account";

				globalMap.put("tAmazonAuroraInput_6_QUERY",
						dbquery_tAmazonAuroraInput_6_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_6_in = null;
				try {
					rs_tAmazonAuroraInput_6_in = stmt_tAmazonAuroraInput_6_in
							.executeQuery(dbquery_tAmazonAuroraInput_6_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_6_in = rs_tAmazonAuroraInput_6_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_6_in = rsmd_tAmazonAuroraInput_6_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_6_in = null;

					while (rs_tAmazonAuroraInput_6_in.next()) {
						nb_line_tAmazonAuroraInput_6_in++;

						if (colQtyInRs_tAmazonAuroraInput_6_in < 1) {
							row_tAmazonAuroraInput_6_in.id = null;
						} else {

							if (rs_tAmazonAuroraInput_6_in.getObject(1) != null) {
								row_tAmazonAuroraInput_6_in.id = rs_tAmazonAuroraInput_6_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_6_in.id = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_6_in < 2) {
							row_tAmazonAuroraInput_6_in.accountId = null;
						} else {

							row_tAmazonAuroraInput_6_in.accountId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_6_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_6_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_6_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_6";

						currentComponent = "tAmazonAuroraInput_6_in";

						tos_count_tAmazonAuroraInput_6_in++;

						/**
						 * [tAmazonAuroraInput_6_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_6_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_6";

						currentComponent = "tAmazonAuroraInput_6_out";

						row53 = row_tAmazonAuroraInput_6_in;

						tos_count_tAmazonAuroraInput_6_out++;

						/**
						 * [tAmazonAuroraInput_6_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row53 main ] start
						 */

						currentComponent = "tAdvancedHash_row53";

						row53Struct row53_HashRow = new row53Struct();

						row53_HashRow.id = row53.id;

						row53_HashRow.accountId = row53.accountId;

						tHash_Lookup_row53.put(row53_HashRow);

						tos_count_tAdvancedHash_row53++;

						/**
						 * [tAdvancedHash_row53 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_6_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_6";

						currentComponent = "tAmazonAuroraInput_6_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_6_in != null) {
						rs_tAmazonAuroraInput_6_in.close();
					}
					stmt_tAmazonAuroraInput_6_in.close();
					if (conn_tAmazonAuroraInput_6_in != null
							&& !conn_tAmazonAuroraInput_6_in.isClosed()) {

						conn_tAmazonAuroraInput_6_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_6_NB_LINE",
						nb_line_tAmazonAuroraInput_6_in);

				ok_Hash.put("tAmazonAuroraInput_6_in", true);
				end_Hash.put("tAmazonAuroraInput_6_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_6_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_out";

				ok_Hash.put("tAmazonAuroraInput_6_out", true);
				end_Hash.put("tAmazonAuroraInput_6_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_6_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row53 end ] start
				 */

				currentComponent = "tAdvancedHash_row53";

				tHash_Lookup_row53.endPut();

				ok_Hash.put("tAdvancedHash_row53", true);
				end_Hash.put("tAdvancedHash_row53", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row53 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_6_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_in";

				/**
				 * [tAmazonAuroraInput_6_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_out";

				/**
				 * [tAmazonAuroraInput_6_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row53 finally ] start
				 */

				currentComponent = "tAdvancedHash_row53";

				/**
				 * [tAdvancedHash_row53 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_6_in_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Position_staging_to_firm Position_staging_to_firmClass = new Position_staging_to_firm();

		int exitCode = Position_staging_to_firmClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Position_staging_to_firm.class
					.getClassLoader().getResourceAsStream(
							"reliazedgainloss/position_staging_to_firm_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.serverIp = (String) context.getProperty("serverIp");
			context.database = (String) context.getProperty("database");
			context.filepath_position = (String) context
					.getProperty("filepath_position");
			context.filename = (String) context.getProperty("filename");
			context.filepath_advisor = (String) context
					.getProperty("filepath_advisor");
			context.custodianpath = (String) context
					.getProperty("custodianpath");
			context.inputDir = (String) context.getProperty("inputDir");
			context.taxlotpath = (String) context.getProperty("taxlotpath");
			context.contextDir = (String) context.getProperty("contextDir");
			context.password = (String) context.getProperty("password");
			context.transactionpath = (String) context
					.getProperty("transactionpath");
			context.positionpath = (String) context.getProperty("positionpath");
			context.securitypath = (String) context.getProperty("securitypath");
			context.accountpath = (String) context.getProperty("accountpath");
			context.username = (String) context.getProperty("username");
			context.localpath = (String) context.getProperty("localpath");
			context.commondb = (String) context.getProperty("commondb");
			context.port = (String) context.getProperty("port");
			context.stagingdb = (String) context.getProperty("stagingdb");
			context.host = (String) context.getProperty("host");
			try {
				context.rowCountRejectedFirm = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("rowCountRejectedFirm"));
			} catch (NumberFormatException e) {
				context.rowCountRejectedFirm = null;
			}
			context.firm = (String) context.getProperty("firm");
			try {
				context.rowCountFirm = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountFirm"));
			} catch (NumberFormatException e) {
				context.rowCountFirm = null;
			}
			try {
				context.rowCountStaging = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountStaging"));
			} catch (NumberFormatException e) {
				context.rowCountStaging = null;
			}
			try {
				context.rowCountTSV = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountTSV"));
			} catch (NumberFormatException e) {
				context.rowCountTSV = null;
			}
			try {
				context.rowCountUpdated = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountUpdated"));
			} catch (NumberFormatException e) {
				context.rowCountUpdated = null;
			}
			context.teamPreferenceOption = (String) context
					.getProperty("teamPreferenceOption");
			context.date = (String) context.getProperty("date");
			context.firmId = (String) context.getProperty("firmId");
			context.firmint3 = (String) context.getProperty("firmint3");
			context.pathforlocal = (String) context.getProperty("pathforlocal");
			context.filestorage = (String) context.getProperty("filestorage");
			try {
				context.a = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("a"));
			} catch (NumberFormatException e) {
				context.a = null;
			}
			try {
				context.b = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("b"));
			} catch (NumberFormatException e) {
				context.b = null;
			}
			try {
				context.c = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("c"));
			} catch (NumberFormatException e) {
				context.c = null;
			}
			try {
				context.d = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("d"));
			} catch (NumberFormatException e) {
				context.d = null;
			}
			try {
				context.e = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("e"));
			} catch (NumberFormatException e) {
				context.e = null;
			}
			try {
				context.f = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("f"));
			} catch (NumberFormatException e) {
				context.f = null;
			}
			try {
				context.g = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("g"));
			} catch (NumberFormatException e) {
				context.g = null;
			}
			context.filestorage2 = (String) context.getProperty("filestorage2");
			try {
				context.firmids = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("firmids"));
			} catch (NumberFormatException e) {
				context.firmids = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("serverIp")) {
				context.serverIp = (String) parentContextMap.get("serverIp");
			}
			if (parentContextMap.containsKey("database")) {
				context.database = (String) parentContextMap.get("database");
			}
			if (parentContextMap.containsKey("filepath_position")) {
				context.filepath_position = (String) parentContextMap
						.get("filepath_position");
			}
			if (parentContextMap.containsKey("filename")) {
				context.filename = (String) parentContextMap.get("filename");
			}
			if (parentContextMap.containsKey("filepath_advisor")) {
				context.filepath_advisor = (String) parentContextMap
						.get("filepath_advisor");
			}
			if (parentContextMap.containsKey("custodianpath")) {
				context.custodianpath = (String) parentContextMap
						.get("custodianpath");
			}
			if (parentContextMap.containsKey("inputDir")) {
				context.inputDir = (String) parentContextMap.get("inputDir");
			}
			if (parentContextMap.containsKey("taxlotpath")) {
				context.taxlotpath = (String) parentContextMap
						.get("taxlotpath");
			}
			if (parentContextMap.containsKey("contextDir")) {
				context.contextDir = (String) parentContextMap
						.get("contextDir");
			}
			if (parentContextMap.containsKey("password")) {
				context.password = (String) parentContextMap.get("password");
			}
			if (parentContextMap.containsKey("transactionpath")) {
				context.transactionpath = (String) parentContextMap
						.get("transactionpath");
			}
			if (parentContextMap.containsKey("positionpath")) {
				context.positionpath = (String) parentContextMap
						.get("positionpath");
			}
			if (parentContextMap.containsKey("securitypath")) {
				context.securitypath = (String) parentContextMap
						.get("securitypath");
			}
			if (parentContextMap.containsKey("accountpath")) {
				context.accountpath = (String) parentContextMap
						.get("accountpath");
			}
			if (parentContextMap.containsKey("username")) {
				context.username = (String) parentContextMap.get("username");
			}
			if (parentContextMap.containsKey("localpath")) {
				context.localpath = (String) parentContextMap.get("localpath");
			}
			if (parentContextMap.containsKey("commondb")) {
				context.commondb = (String) parentContextMap.get("commondb");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (String) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("stagingdb")) {
				context.stagingdb = (String) parentContextMap.get("stagingdb");
			}
			if (parentContextMap.containsKey("host")) {
				context.host = (String) parentContextMap.get("host");
			}
			if (parentContextMap.containsKey("rowCountRejectedFirm")) {
				context.rowCountRejectedFirm = (Integer) parentContextMap
						.get("rowCountRejectedFirm");
			}
			if (parentContextMap.containsKey("firm")) {
				context.firm = (String) parentContextMap.get("firm");
			}
			if (parentContextMap.containsKey("rowCountFirm")) {
				context.rowCountFirm = (Integer) parentContextMap
						.get("rowCountFirm");
			}
			if (parentContextMap.containsKey("rowCountStaging")) {
				context.rowCountStaging = (Integer) parentContextMap
						.get("rowCountStaging");
			}
			if (parentContextMap.containsKey("rowCountTSV")) {
				context.rowCountTSV = (Integer) parentContextMap
						.get("rowCountTSV");
			}
			if (parentContextMap.containsKey("rowCountUpdated")) {
				context.rowCountUpdated = (Integer) parentContextMap
						.get("rowCountUpdated");
			}
			if (parentContextMap.containsKey("teamPreferenceOption")) {
				context.teamPreferenceOption = (String) parentContextMap
						.get("teamPreferenceOption");
			}
			if (parentContextMap.containsKey("date")) {
				context.date = (String) parentContextMap.get("date");
			}
			if (parentContextMap.containsKey("firmId")) {
				context.firmId = (String) parentContextMap.get("firmId");
			}
			if (parentContextMap.containsKey("firmint3")) {
				context.firmint3 = (String) parentContextMap.get("firmint3");
			}
			if (parentContextMap.containsKey("pathforlocal")) {
				context.pathforlocal = (String) parentContextMap
						.get("pathforlocal");
			}
			if (parentContextMap.containsKey("filestorage")) {
				context.filestorage = (String) parentContextMap
						.get("filestorage");
			}
			if (parentContextMap.containsKey("a")) {
				context.a = (Boolean) parentContextMap.get("a");
			}
			if (parentContextMap.containsKey("b")) {
				context.b = (Boolean) parentContextMap.get("b");
			}
			if (parentContextMap.containsKey("c")) {
				context.c = (Boolean) parentContextMap.get("c");
			}
			if (parentContextMap.containsKey("d")) {
				context.d = (Boolean) parentContextMap.get("d");
			}
			if (parentContextMap.containsKey("e")) {
				context.e = (Boolean) parentContextMap.get("e");
			}
			if (parentContextMap.containsKey("f")) {
				context.f = (Boolean) parentContextMap.get("f");
			}
			if (parentContextMap.containsKey("g")) {
				context.g = (Boolean) parentContextMap.get("g");
			}
			if (parentContextMap.containsKey("filestorage2")) {
				context.filestorage2 = (String) parentContextMap
						.get("filestorage2");
			}
			if (parentContextMap.containsKey("firmids")) {
				context.firmids = (Integer) parentContextMap.get("firmids");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tAmazonAuroraInput_2_inProcess(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tAmazonAuroraInput_2_in) {
					globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_2_in.printStackTrace();

				} catch (java.lang.Error e_tAmazonAuroraInput_2_in) {
					globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_2_in.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Position_staging_to_firm");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tAmazonAuroraConnection_1_in");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tAmazonAuroraConnection_1_in",
				globalMap.get("conn_tAmazonAuroraConnection_1_in"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 508749 characters generated by Talend Open Studio for Data Integration on the
 * October 24, 2016 5:34:24 PM IST
 ************************************************************************************************/
