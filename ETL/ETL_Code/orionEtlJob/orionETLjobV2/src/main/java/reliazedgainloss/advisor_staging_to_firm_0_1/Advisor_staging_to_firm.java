// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package reliazedgainloss.advisor_staging_to_firm_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Advisor_staging_to_firm Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.0.20160510_1709
 * @status 
 */
public class Advisor_staging_to_firm implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (serverIp != null) {

				this.setProperty("serverIp", serverIp.toString());

			}

			if (database != null) {

				this.setProperty("database", database.toString());

			}

			if (custodianpath != null) {

				this.setProperty("custodianpath", custodianpath.toString());

			}

			if (inputDir != null) {

				this.setProperty("inputDir", inputDir.toString());

			}

			if (taxlotpath != null) {

				this.setProperty("taxlotpath", taxlotpath.toString());

			}

			if (contextDir != null) {

				this.setProperty("contextDir", contextDir.toString());

			}

			if (password != null) {

				this.setProperty("password", password.toString());

			}

			if (filepath_advisor != null) {

				this.setProperty("filepath_advisor",
						filepath_advisor.toString());

			}

			if (transactionpath != null) {

				this.setProperty("transactionpath", transactionpath.toString());

			}

			if (positionpath != null) {

				this.setProperty("positionpath", positionpath.toString());

			}

			if (securitypath != null) {

				this.setProperty("securitypath", securitypath.toString());

			}

			if (accountpath != null) {

				this.setProperty("accountpath", accountpath.toString());

			}

			if (username != null) {

				this.setProperty("username", username.toString());

			}

			if (localpath != null) {

				this.setProperty("localpath", localpath.toString());

			}

			if (commondb != null) {

				this.setProperty("commondb", commondb.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (stagingdb != null) {

				this.setProperty("stagingdb", stagingdb.toString());

			}

			if (host != null) {

				this.setProperty("host", host.toString());

			}

			if (rowCountStaging != null) {

				this.setProperty("rowCountStaging", rowCountStaging.toString());

			}

			if (rowCountTSV != null) {

				this.setProperty("rowCountTSV", rowCountTSV.toString());

			}

			if (rowCountFirm != null) {

				this.setProperty("rowCountFirm", rowCountFirm.toString());

			}

			if (teamPreferenceOption != null) {

				this.setProperty("teamPreferenceOption",
						teamPreferenceOption.toString());

			}

			if (firm != null) {

				this.setProperty("firm", firm.toString());

			}

			if (rowCountRejectedFirm != null) {

				this.setProperty("rowCountRejectedFirm",
						rowCountRejectedFirm.toString());

			}

			if (rowCountUpdated != null) {

				this.setProperty("rowCountUpdated", rowCountUpdated.toString());

			}

			if (date != null) {

				this.setProperty("date", date.toString());

			}

			if (firmId != null) {

				this.setProperty("firmId", firmId.toString());

			}

			if (firmint3 != null) {

				this.setProperty("firmint3", firmint3.toString());

			}

			if (pathforlocal != null) {

				this.setProperty("pathforlocal", pathforlocal.toString());

			}

			if (filestorage != null) {

				this.setProperty("filestorage", filestorage.toString());

			}

			if (a != null) {

				this.setProperty("a", a.toString());

			}

			if (b != null) {

				this.setProperty("b", b.toString());

			}

			if (c != null) {

				this.setProperty("c", c.toString());

			}

			if (d != null) {

				this.setProperty("d", d.toString());

			}

			if (e != null) {

				this.setProperty("e", e.toString());

			}

			if (f != null) {

				this.setProperty("f", f.toString());

			}

			if (g != null) {

				this.setProperty("g", g.toString());

			}

			if (filestorage2 != null) {

				this.setProperty("filestorage2", filestorage2.toString());

			}

			if (firmids != null) {

				this.setProperty("firmids", firmids.toString());

			}

		}

		public String serverIp;

		public String getServerIp() {
			return this.serverIp;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		public String custodianpath;

		public String getCustodianpath() {
			return this.custodianpath;
		}

		public String inputDir;

		public String getInputDir() {
			return this.inputDir;
		}

		public String taxlotpath;

		public String getTaxlotpath() {
			return this.taxlotpath;
		}

		public String contextDir;

		public String getContextDir() {
			return this.contextDir;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String filepath_advisor;

		public String getFilepath_advisor() {
			return this.filepath_advisor;
		}

		public String transactionpath;

		public String getTransactionpath() {
			return this.transactionpath;
		}

		public String positionpath;

		public String getPositionpath() {
			return this.positionpath;
		}

		public String securitypath;

		public String getSecuritypath() {
			return this.securitypath;
		}

		public String accountpath;

		public String getAccountpath() {
			return this.accountpath;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String localpath;

		public String getLocalpath() {
			return this.localpath;
		}

		public String commondb;

		public String getCommondb() {
			return this.commondb;
		}

		public String port;

		public String getPort() {
			return this.port;
		}

		public String stagingdb;

		public String getStagingdb() {
			return this.stagingdb;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public Integer rowCountStaging;

		public Integer getRowCountStaging() {
			return this.rowCountStaging;
		}

		public Integer rowCountTSV;

		public Integer getRowCountTSV() {
			return this.rowCountTSV;
		}

		public Integer rowCountFirm;

		public Integer getRowCountFirm() {
			return this.rowCountFirm;
		}

		public String teamPreferenceOption;

		public String getTeamPreferenceOption() {
			return this.teamPreferenceOption;
		}

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		public Integer rowCountRejectedFirm;

		public Integer getRowCountRejectedFirm() {
			return this.rowCountRejectedFirm;
		}

		public Integer rowCountUpdated;

		public Integer getRowCountUpdated() {
			return this.rowCountUpdated;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String firmId;

		public String getFirmId() {
			return this.firmId;
		}

		public String firmint3;

		public String getFirmint3() {
			return this.firmint3;
		}

		public String pathforlocal;

		public String getPathforlocal() {
			return this.pathforlocal;
		}

		public String filestorage;

		public String getFilestorage() {
			return this.filestorage;
		}

		public Boolean a;

		public Boolean getA() {
			return this.a;
		}

		public Boolean b;

		public Boolean getB() {
			return this.b;
		}

		public Boolean c;

		public Boolean getC() {
			return this.c;
		}

		public Boolean d;

		public Boolean getD() {
			return this.d;
		}

		public Boolean e;

		public Boolean getE() {
			return this.e;
		}

		public Boolean f;

		public Boolean getF() {
			return this.f;
		}

		public Boolean g;

		public Boolean getG() {
			return this.g;
		}

		public String filestorage2;

		public String getFilestorage2() {
			return this.filestorage2;
		}

		public Integer firmids;

		public Integer getFirmids() {
			return this.firmids;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Advisor_staging_to_firm";
	private final String projectName = "RELIAZEDGAINLOSS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Advisor_staging_to_firm.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Advisor_staging_to_firm.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tWarn_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_5_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_1_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_1_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_1_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraConnection_1_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraConnection_1_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_3_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_3_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_3_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_5_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_5_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_5_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_5_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_2_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_2_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_2_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_4_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_4_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_4_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tWarn_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_1_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraConnection_1_out_onSubJobError(
			Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_3_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_5_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_2_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_4_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());

				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */

				/**
				 * [tWarn_1 main ] start
				 */

				currentComponent = "tWarn_1";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread
						.currentThread().getId() + "", "FATAL", "",
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3, "", "");
				globalMap.put("tWarn_1_WARN_MESSAGES",
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3);
				globalMap.put("tWarn_1_WARN_PRIORITY", 6);
				globalMap.put("tWarn_1_WARN_CODE", 42);

				tos_count_tWarn_1++;

				/**
				 * [tWarn_1 main ] stop
				 */

				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				/**
				 * [tWarn_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tJavaRow_2 - inputs:(after_tAmazonAuroraInput_1)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2) outputs:(row5)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 main ] start
				 */

				currentComponent = "tJavaRow_2";

				row2.firm = context.firmint3;

				nb_line_tJavaRow_2++;

				tos_count_tJavaRow_2++;

				/**
				 * [tJavaRow_2 main ] stop
				 */

				/**
				 * [tAdvancedHash_row2 main ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				row2Struct row2_HashRow = new row2Struct();

				row2_HashRow.firm = row2.firm;

				tHash_Lookup_row2.put(row2_HashRow);

				tos_count_tAdvancedHash_row2++;

				/**
				 * [tAdvancedHash_row2 main ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_2_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row10";

				int tos_count_tAdvancedHash_row10 = 0;

				// connection name:row10
				// source node:tJavaRow_3 - inputs:(after_tAmazonAuroraInput_3)
				// outputs:(row10,row10) | target node:tAdvancedHash_row10 -
				// inputs:(row10) outputs:()
				// linked node: tMap_4 - inputs:(s,row10) outputs:(out1,mainout)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct> getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tJavaRow_3 main ] start
				 */

				currentComponent = "tJavaRow_3";

				row10.firm = context.firmint3;

				nb_line_tJavaRow_3++;

				tos_count_tJavaRow_3++;

				/**
				 * [tJavaRow_3 main ] stop
				 */

				/**
				 * [tAdvancedHash_row10 main ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				row10Struct row10_HashRow = new row10Struct();

				row10_HashRow.firm = row10.firm;

				tHash_Lookup_row10.put(row10_HashRow);

				tos_count_tAdvancedHash_row10++;

				/**
				 * [tAdvancedHash_row10 main ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row10 finally ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				/**
				 * [tAdvancedHash_row10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_3_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public String server_Ip;

		public String getServer_Ip() {
			return this.server_Ip;
		}

		public String Database;

		public String getDatabase() {
			return this.Database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.server_Ip = readString(dis);

					this.Database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server_Ip, dos);

				// String

				writeString(this.Database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server_Ip=" + server_Ip);
			sb.append(",Database=" + Database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_1_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_1_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_1_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_1Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_1_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_2Process(globalMap);

				row_tAmazonAuroraInput_1_inStruct row_tAmazonAuroraInput_1_in = new row_tAmazonAuroraInput_1_inStruct();
				row_tAmazonAuroraInput_1_inStruct row1 = row_tAmazonAuroraInput_1_in;
				row5Struct row5 = new row5Struct();
				row4Struct row4 = new row4Struct();
				row4Struct row3 = row4;

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tJava_1 begin ] start
				 */

				int NB_ITERATE_tAmazonAuroraConnection_1_in = 0; // for
																	// statistics

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println(context.database);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				row5Struct row5_tmp = new row5Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_out", false);
				start_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				int tos_count_tAmazonAuroraInput_1_out = 0;

				/**
				 * [tAmazonAuroraInput_1_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_in", false);
				start_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				int tos_count_tAmazonAuroraInput_1_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_1_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_1_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_1_in = calendar_tAmazonAuroraInput_1_in
						.getTime();
				int nb_line_tAmazonAuroraInput_1_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_1_in = null;
				String driverClass_tAmazonAuroraInput_1_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_1_in);
				String dbUser_tAmazonAuroraInput_1_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_1_in = context.password;

				String dbPwd_tAmazonAuroraInput_1_in = decryptedPassword_tAmazonAuroraInput_1_in;

				String url_tAmazonAuroraInput_1_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_1_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_1_in,
								dbUser_tAmazonAuroraInput_1_in,
								dbPwd_tAmazonAuroraInput_1_in);

				java.sql.Statement stmt_tAmazonAuroraInput_1_in = conn_tAmazonAuroraInput_1_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_1_in = "SELECT `name` , `server` , `database` FROM `orionEclipseFirm`";

				globalMap.put("tAmazonAuroraInput_1_QUERY",
						dbquery_tAmazonAuroraInput_1_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_1_in = null;
				try {
					rs_tAmazonAuroraInput_1_in = stmt_tAmazonAuroraInput_1_in
							.executeQuery(dbquery_tAmazonAuroraInput_1_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_1_in = rs_tAmazonAuroraInput_1_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_1_in = rsmd_tAmazonAuroraInput_1_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_1_in = null;

					while (rs_tAmazonAuroraInput_1_in.next()) {
						nb_line_tAmazonAuroraInput_1_in++;

						if (colQtyInRs_tAmazonAuroraInput_1_in < 1) {
							row_tAmazonAuroraInput_1_in.name = null;
						} else {

							row_tAmazonAuroraInput_1_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 1,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 2) {
							row_tAmazonAuroraInput_1_in.server = null;
						} else {

							row_tAmazonAuroraInput_1_in.server = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 3) {
							row_tAmazonAuroraInput_1_in.database = null;
						} else {

							row_tAmazonAuroraInput_1_in.database = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 3,
											false);
						}

						/**
						 * [tAmazonAuroraInput_1_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

						tos_count_tAmazonAuroraInput_1_in++;

						/**
						 * [tAmazonAuroraInput_1_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_out";

						row1 = row_tAmazonAuroraInput_1_in;

						tos_count_tAmazonAuroraInput_1_out++;

						/**
						 * [tAmazonAuroraInput_1_out main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.firm = row1.name;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

							if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.firm = '"
							// + row2HashKey.firm + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							row5 = null;

							if (!rejectedInnerJoin_tMap_1) {

								// # Output table : 'row5'
								row5_tmp.server_Ip = row1.server;
								row5_tmp.Database = row1.database;
								row5 = row5_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tJavaRow_1 main ] start
							 */

							currentComponent = "tJavaRow_1";

							context.serverIp = row5.server_Ip;
							context.database = row5.Database;
							System.out.println(context.database);
							nb_line_tJavaRow_1++;

							tos_count_tJavaRow_1++;

							/**
							 * [tJavaRow_1 main ] stop
							 */

							/**
							 * [tJava_1 main ] start
							 */

							currentComponent = "tJava_1";

							row3 = row4;

							tos_count_tJava_1++;

							/**
							 * [tJava_1 main ] stop
							 */

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							// /////////////////////

							strBuffer_tLogRow_1 = new StringBuilder();

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_1 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_1);
							}
							consoleOut_tLogRow_1.println(strBuffer_tLogRow_1
									.toString());
							consoleOut_tLogRow_1.flush();
							nb_line_tLogRow_1++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							NB_ITERATE_tAmazonAuroraConnection_1_in++;

							/**
							 * [tAmazonAuroraConnection_1_in begin ] start
							 */

							ok_Hash.put("tAmazonAuroraConnection_1_in", false);
							start_Hash.put("tAmazonAuroraConnection_1_in",
									System.currentTimeMillis());

							currentVirtualComponent = "tAmazonAuroraConnection_1";

							currentComponent = "tAmazonAuroraConnection_1_in";

							int tos_count_tAmazonAuroraConnection_1_in = 0;

							String properties_tAmazonAuroraConnection_1_in = "noDatetimeStringSync=true";
							if (properties_tAmazonAuroraConnection_1_in == null
									|| properties_tAmazonAuroraConnection_1_in
											.trim().length() == 0) {
								properties_tAmazonAuroraConnection_1_in += "rewriteBatchedStatements=true";
							} else if (properties_tAmazonAuroraConnection_1_in != null
									&& !properties_tAmazonAuroraConnection_1_in
											.contains("rewriteBatchedStatements")) {
								properties_tAmazonAuroraConnection_1_in += "&rewriteBatchedStatements=true";
							}

							String url_tAmazonAuroraConnection_1_in = "jdbc:mysql://"
									+ context.serverIp
									+ ":"
									+ "3306"
									+ "/"
									+ context.database
									+ "?"
									+ properties_tAmazonAuroraConnection_1_in;

							String dbUser_tAmazonAuroraConnection_1_in = context.username;

							final String decryptedPassword_tAmazonAuroraConnection_1_in = context.password;
							String dbPwd_tAmazonAuroraConnection_1_in = decryptedPassword_tAmazonAuroraConnection_1_in;

							java.sql.Connection conn_tAmazonAuroraConnection_1_in = null;

							String driverClass_tAmazonAuroraConnection_1_in = "org.gjt.mm.mysql.Driver";
							java.lang.Class
									.forName(driverClass_tAmazonAuroraConnection_1_in);

							conn_tAmazonAuroraConnection_1_in = java.sql.DriverManager
									.getConnection(
											url_tAmazonAuroraConnection_1_in,
											dbUser_tAmazonAuroraConnection_1_in,
											dbPwd_tAmazonAuroraConnection_1_in);

							globalMap.put("conn_tAmazonAuroraConnection_1_in",
									conn_tAmazonAuroraConnection_1_in);
							if (null != conn_tAmazonAuroraConnection_1_in) {

								conn_tAmazonAuroraConnection_1_in
										.setAutoCommit(false);
							}

							globalMap.put("conn_tAmazonAuroraConnection_1_in",
									conn_tAmazonAuroraConnection_1_in);

							globalMap.put("db_tAmazonAuroraConnection_1_in",
									context.database);

							/**
							 * [tAmazonAuroraConnection_1_in begin ] stop
							 */

							/**
							 * [tAmazonAuroraConnection_1_in main ] start
							 */

							currentVirtualComponent = "tAmazonAuroraConnection_1";

							currentComponent = "tAmazonAuroraConnection_1_in";

							tos_count_tAmazonAuroraConnection_1_in++;

							/**
							 * [tAmazonAuroraConnection_1_in main ] stop
							 */

							/**
							 * [tAmazonAuroraConnection_1_in end ] start
							 */

							currentVirtualComponent = "tAmazonAuroraConnection_1";

							currentComponent = "tAmazonAuroraConnection_1_in";

							ok_Hash.put("tAmazonAuroraConnection_1_in", true);
							end_Hash.put("tAmazonAuroraConnection_1_in",
									System.currentTimeMillis());

							/**
							 * [tAmazonAuroraConnection_1_in end ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tAmazonAuroraInput_1_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_1_in != null) {
						rs_tAmazonAuroraInput_1_in.close();
					}
					stmt_tAmazonAuroraInput_1_in.close();
					if (conn_tAmazonAuroraInput_1_in != null
							&& !conn_tAmazonAuroraInput_1_in.isClosed()) {

						conn_tAmazonAuroraInput_1_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_1_NB_LINE",
						nb_line_tAmazonAuroraInput_1_in);

				ok_Hash.put("tAmazonAuroraInput_1_in", true);
				end_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				ok_Hash.put("tAmazonAuroraInput_1_out", true);
				end_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_out end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tAmazonAuroraInput_1_in:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tAmazonAuroraConnection_1_outProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tAmazonAuroraInput_1_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				/**
				 * [tAmazonAuroraInput_1_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				/**
				 * [tAmazonAuroraInput_1_out finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tAmazonAuroraConnection_1_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraConnection_1";

				currentComponent = "tAmazonAuroraConnection_1_in";

				/**
				 * [tAmazonAuroraConnection_1_in finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 1);
	}

	public void tAmazonAuroraConnection_1_outProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraConnection_1_out_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tAmazonAuroraConnection_1_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraConnection_1_out", false);
				start_Hash.put("tAmazonAuroraConnection_1_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraConnection_1";

				currentComponent = "tAmazonAuroraConnection_1_out";

				int tos_count_tAmazonAuroraConnection_1_out = 0;

				/**
				 * [tAmazonAuroraConnection_1_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraConnection_1_out main ] start
				 */

				currentVirtualComponent = "tAmazonAuroraConnection_1";

				currentComponent = "tAmazonAuroraConnection_1_out";

				tos_count_tAmazonAuroraConnection_1_out++;

				/**
				 * [tAmazonAuroraConnection_1_out main ] stop
				 */

				/**
				 * [tAmazonAuroraConnection_1_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraConnection_1";

				currentComponent = "tAmazonAuroraConnection_1_out";

				ok_Hash.put("tAmazonAuroraConnection_1_out", true);
				end_Hash.put("tAmazonAuroraConnection_1_out",
						System.currentTimeMillis());

				tAmazonAuroraInput_3_inProcess(globalMap);

				/**
				 * [tAmazonAuroraConnection_1_out end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraConnection_1_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraConnection_1";

				currentComponent = "tAmazonAuroraConnection_1_out";

				/**
				 * [tAmazonAuroraConnection_1_out finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraConnection_1_out_SUBPROCESS_STATE", 1);
	}

	public static class ErrorRejectStruct implements
			routines.system.IPersistableRow<ErrorRejectStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String errorStackTrace;

		public String getErrorStackTrace() {
			return this.errorStackTrace;
		}

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AdvisorNumber;

		public String getAdvisorNumber() {
			return this.AdvisorNumber;
		}

		public String BrokerDealer;

		public String getBrokerDealer() {
			return this.BrokerDealer;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.errorMessage = readString(dis);

					this.errorStackTrace = readString(dis);

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AdvisorNumber = readString(dis);

					this.BrokerDealer = readString(dis);

					this.AdvisorName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.errorStackTrace, dos);

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AdvisorNumber, dos);

				// String

				writeString(this.BrokerDealer, dos);

				// String

				writeString(this.AdvisorName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorMessage=" + errorMessage);
			sb.append(",errorStackTrace=" + errorStackTrace);
			sb.append(",OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AdvisorNumber=" + AdvisorNumber);
			sb.append(",BrokerDealer=" + BrokerDealer);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ErrorRejectStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class MainOutputStruct implements
			routines.system.IPersistableRow<MainOutputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public int orionFirmId;

		public int getOrionFirmId() {
			return this.orionFirmId;
		}

		public int externalId;

		public int getExternalId() {
			return this.externalId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		public String advisorNumber;

		public String getAdvisorNumber() {
			return this.advisorNumber;
		}

		public String brokerDealer;

		public String getBrokerDealer() {
			return this.brokerDealer;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public boolean isDeleted;

		public boolean getIsDeleted() {
			return this.isDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public int createdBy;

		public int getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public int editedBy;

		public int getEditedBy() {
			return this.editedBy;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.orionFirmId = dis.readInt();

					this.externalId = dis.readInt();

					this.orionEclipseFirmId = readInteger(dis);

					this.advisorNumber = readString(dis);

					this.brokerDealer = readString(dis);

					this.name = readString(dis);

					this.isDeleted = dis.readBoolean();

					this.createdDate = readDate(dis);

					this.createdBy = dis.readInt();

					this.editedDate = readDate(dis);

					this.editedBy = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.orionFirmId);

				// int

				dos.writeInt(this.externalId);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

				// String

				writeString(this.advisorNumber, dos);

				// String

				writeString(this.brokerDealer, dos);

				// String

				writeString(this.name, dos);

				// boolean

				dos.writeBoolean(this.isDeleted);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// int

				dos.writeInt(this.createdBy);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// int

				dos.writeInt(this.editedBy);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append(",advisorNumber=" + advisorNumber);
			sb.append(",brokerDealer=" + brokerDealer);
			sb.append(",name=" + name);
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MainOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class NoDataFound_joinRejectStruct implements
			routines.system.IPersistableRow<NoDataFound_joinRejectStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AdvisorNumber;

		public String getAdvisorNumber() {
			return this.AdvisorNumber;
		}

		public String BrokerDealer;

		public String getBrokerDealer() {
			return this.BrokerDealer;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AdvisorNumber = readString(dis);

					this.BrokerDealer = readString(dis);

					this.AdvisorName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AdvisorNumber, dos);

				// String

				writeString(this.BrokerDealer, dos);

				// String

				writeString(this.AdvisorName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AdvisorNumber=" + AdvisorNumber);
			sb.append(",BrokerDealer=" + BrokerDealer);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(NoDataFound_joinRejectStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mainoutStruct implements
			routines.system.IPersistableRow<mainoutStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mainoutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sStruct implements
			routines.system.IPersistableRow<sStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_3_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_3_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_3_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_3Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_3_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_3_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tAmazonAuroraInput_4_inProcess(globalMap);
				tAmazonAuroraInput_2_inProcess(globalMap);
				tJavaRow_3Process(globalMap);
				tAmazonAuroraInput_5_inProcess(globalMap);

				row_tAmazonAuroraInput_3_inStruct row_tAmazonAuroraInput_3_in = new row_tAmazonAuroraInput_3_inStruct();
				row_tAmazonAuroraInput_3_inStruct row8 = row_tAmazonAuroraInput_3_in;
				sStruct s = new sStruct();
				out1Struct out1 = new out1Struct();
				mainoutStruct mainout = new mainoutStruct();
				ErrorRejectStruct ErrorReject = new ErrorRejectStruct();
				MainOutputStruct MainOutput = new MainOutputStruct();
				NoDataFound_joinRejectStruct NoDataFound_joinReject = new NoDataFound_joinRejectStruct();

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_2", false);
				start_Hash.put("tAmazonMysqlOutput_2",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_2";

				int tos_count_tAmazonMysqlOutput_2 = 0;

				int nb_line_tAmazonMysqlOutput_2 = 0;
				int nb_line_update_tAmazonMysqlOutput_2 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_2 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_2 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_2 = 0;

				int deletedCount_tAmazonMysqlOutput_2 = 0;
				int updatedCount_tAmazonMysqlOutput_2 = 0;
				int insertedCount_tAmazonMysqlOutput_2 = 0;

				int rejectedCount_tAmazonMysqlOutput_2 = 0;

				String tableName_tAmazonMysqlOutput_2 = "importError_Advisor";
				boolean whetherReject_tAmazonMysqlOutput_2 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_2 = calendar_tAmazonMysqlOutput_2
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_2 = calendar_tAmazonMysqlOutput_2
						.getTime().getTime();
				long date_tAmazonMysqlOutput_2;

				java.sql.Connection conn_tAmazonMysqlOutput_2 = null;
				String dbProperties_tAmazonMysqlOutput_2 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_2 = null;
				if (dbProperties_tAmazonMysqlOutput_2 == null
						|| dbProperties_tAmazonMysqlOutput_2.trim().length() == 0) {
					url_tAmazonMysqlOutput_2 = "jdbc:mysql://"
							+ context.serverIp + ":" + "3306" + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_2 = "jdbc:mysql://"
							+ context.serverIp + ":" + "3306" + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_2;
				}
				String dbUser_tAmazonMysqlOutput_2 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_2 = context.password;

				String dbPwd_tAmazonMysqlOutput_2 = decryptedPassword_tAmazonMysqlOutput_2;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_2 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_2,
								dbUser_tAmazonMysqlOutput_2,
								dbPwd_tAmazonMysqlOutput_2);

				resourceMap.put("conn_tAmazonMysqlOutput_2",
						conn_tAmazonMysqlOutput_2);

				conn_tAmazonMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_2 = 10000;
				int commitCounter_tAmazonMysqlOutput_2 = 0;

				int count_tAmazonMysqlOutput_2 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_2 = conn_tAmazonMysqlOutput_2
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_2 = dbMetaData_tAmazonMysqlOutput_2
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_2 = false;
				while (rsTable_tAmazonMysqlOutput_2.next()) {
					String table_tAmazonMysqlOutput_2 = rsTable_tAmazonMysqlOutput_2
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_2
							.equalsIgnoreCase("importError_Advisor")) {
						whetherExist_tAmazonMysqlOutput_2 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_2.close();
				if (!whetherExist_tAmazonMysqlOutput_2) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_2 = conn_tAmazonMysqlOutput_2
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_2
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_2
									+ "`(`errorMessage` VARCHAR(2555)  ,`errorStackTrace` VARCHAR(2555)  ,`OrionFirmId` INT(11)  ,`ExternalId` INT(11)  ,`AdvisorNumber` VARCHAR(255)  ,`BrokerDealer` VARCHAR(255)  ,`AdvisorName` VARCHAR(255)  )");
					stmtCreate_tAmazonMysqlOutput_2.close();
				}

				String insert_tAmazonMysqlOutput_2 = "INSERT INTO `"
						+ "importError_Advisor"
						+ "` (`errorMessage`,`errorStackTrace`,`OrionFirmId`,`ExternalId`,`AdvisorNumber`,`BrokerDealer`,`AdvisorName`) VALUES (?,?,?,?,?,?,?)";
				int batchSize_tAmazonMysqlOutput_2 = 100;
				int batchSizeCounter_tAmazonMysqlOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_2 = conn_tAmazonMysqlOutput_2
						.prepareStatement(insert_tAmazonMysqlOutput_2);

				/**
				 * [tAmazonMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_1", false);
				start_Hash.put("tAmazonMysqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_1";

				int tos_count_tAmazonMysqlOutput_1 = 0;

				int nb_line_tAmazonMysqlOutput_1 = 0;
				int nb_line_update_tAmazonMysqlOutput_1 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_1 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_1 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_1 = 0;

				int deletedCount_tAmazonMysqlOutput_1 = 0;
				int updatedCount_tAmazonMysqlOutput_1 = 0;
				int insertedCount_tAmazonMysqlOutput_1 = 0;

				int rejectedCount_tAmazonMysqlOutput_1 = 0;

				String tableName_tAmazonMysqlOutput_1 = "advisor";
				boolean whetherReject_tAmazonMysqlOutput_1 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_1 = calendar_tAmazonMysqlOutput_1
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_1 = calendar_tAmazonMysqlOutput_1
						.getTime().getTime();
				long date_tAmazonMysqlOutput_1;

				java.sql.Connection conn_tAmazonMysqlOutput_1 = null;
				String dbProperties_tAmazonMysqlOutput_1 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_1 = null;
				if (dbProperties_tAmazonMysqlOutput_1 == null
						|| dbProperties_tAmazonMysqlOutput_1.trim().length() == 0) {
					url_tAmazonMysqlOutput_1 = "jdbc:mysql://"
							+ context.serverIp + ":" + "3306" + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_1 = "jdbc:mysql://"
							+ context.serverIp + ":" + "3306" + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_1;
				}
				String dbUser_tAmazonMysqlOutput_1 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_1 = context.password;

				String dbPwd_tAmazonMysqlOutput_1 = decryptedPassword_tAmazonMysqlOutput_1;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_1 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_1,
								dbUser_tAmazonMysqlOutput_1,
								dbPwd_tAmazonMysqlOutput_1);

				resourceMap.put("conn_tAmazonMysqlOutput_1",
						conn_tAmazonMysqlOutput_1);

				conn_tAmazonMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_1 = 10000;
				int commitCounter_tAmazonMysqlOutput_1 = 0;

				int count_tAmazonMysqlOutput_1 = 0;

				String insertIgnore_tAmazonMysqlOutput_1 = "INSERT IGNORE INTO `"
						+ "advisor"
						+ "` (`orionFirmId`,`externalId`,`orionEclipseFirmId`,`advisorNumber`,`brokerDealer`,`name`,`isDeleted`,`createdDate`,`createdBy`,`editedDate`,`editedBy`) VALUES (?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `orionFirmId` = ?,`externalId` = ?,`orionEclipseFirmId` = ?,`advisorNumber` = ?,`brokerDealer` = ?,`name` = ?,`isDeleted` = ?,`createdDate` = ?,`createdBy` = ?,`editedDate` = ?,`editedBy` = ?";
				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_1 = conn_tAmazonMysqlOutput_1
						.prepareStatement(insertIgnore_tAmazonMysqlOutput_1);

				/**
				 * [tAmazonMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_3 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_3", false);
				start_Hash.put("tAmazonMysqlOutput_3",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_3";

				int tos_count_tAmazonMysqlOutput_3 = 0;

				int nb_line_tAmazonMysqlOutput_3 = 0;
				int nb_line_update_tAmazonMysqlOutput_3 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_3 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_3 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_3 = 0;

				int deletedCount_tAmazonMysqlOutput_3 = 0;
				int updatedCount_tAmazonMysqlOutput_3 = 0;
				int insertedCount_tAmazonMysqlOutput_3 = 0;

				int rejectedCount_tAmazonMysqlOutput_3 = 0;

				String tableName_tAmazonMysqlOutput_3 = "noDataFound_Advisor";
				boolean whetherReject_tAmazonMysqlOutput_3 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_3 = calendar_tAmazonMysqlOutput_3
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_3 = calendar_tAmazonMysqlOutput_3
						.getTime().getTime();
				long date_tAmazonMysqlOutput_3;

				java.sql.Connection conn_tAmazonMysqlOutput_3 = null;
				String dbProperties_tAmazonMysqlOutput_3 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_3 = null;
				if (dbProperties_tAmazonMysqlOutput_3 == null
						|| dbProperties_tAmazonMysqlOutput_3.trim().length() == 0) {
					url_tAmazonMysqlOutput_3 = "jdbc:mysql://"
							+ context.serverIp + ":" + "3306" + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_3 = "jdbc:mysql://"
							+ context.serverIp + ":" + "3306" + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_3;
				}
				String dbUser_tAmazonMysqlOutput_3 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_3 = context.password;

				String dbPwd_tAmazonMysqlOutput_3 = decryptedPassword_tAmazonMysqlOutput_3;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_3 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_3,
								dbUser_tAmazonMysqlOutput_3,
								dbPwd_tAmazonMysqlOutput_3);

				resourceMap.put("conn_tAmazonMysqlOutput_3",
						conn_tAmazonMysqlOutput_3);

				conn_tAmazonMysqlOutput_3.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_3 = 10000;
				int commitCounter_tAmazonMysqlOutput_3 = 0;

				int count_tAmazonMysqlOutput_3 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_3 = conn_tAmazonMysqlOutput_3
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_3 = dbMetaData_tAmazonMysqlOutput_3
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_3 = false;
				while (rsTable_tAmazonMysqlOutput_3.next()) {
					String table_tAmazonMysqlOutput_3 = rsTable_tAmazonMysqlOutput_3
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_3
							.equalsIgnoreCase("noDataFound_Advisor")) {
						whetherExist_tAmazonMysqlOutput_3 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_3.close();
				if (!whetherExist_tAmazonMysqlOutput_3) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_3 = conn_tAmazonMysqlOutput_3
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_3
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_3
									+ "`(`OrionFirmId` INT(11)  ,`ExternalId` INT(11)  ,`AdvisorNumber` VARCHAR(255)  ,`BrokerDealer` VARCHAR(255)  ,`AdvisorName` VARCHAR(255)  )");
					stmtCreate_tAmazonMysqlOutput_3.close();
				}

				String insert_tAmazonMysqlOutput_3 = "INSERT INTO `"
						+ "noDataFound_Advisor"
						+ "` (`OrionFirmId`,`ExternalId`,`AdvisorNumber`,`BrokerDealer`,`AdvisorName`) VALUES (?,?,?,?,?)";
				int batchSize_tAmazonMysqlOutput_3 = 100;
				int batchSizeCounter_tAmazonMysqlOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_3 = conn_tAmazonMysqlOutput_3
						.prepareStatement(insert_tAmazonMysqlOutput_3);

				/**
				 * [tAmazonMysqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ErrorRejectStruct ErrorReject_tmp = new ErrorRejectStruct();
				MainOutputStruct MainOutput_tmp = new MainOutputStruct();
				NoDataFound_joinRejectStruct NoDataFound_joinReject_tmp = new NoDataFound_joinRejectStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
						.get("tHash_Lookup_row10"));

				row10Struct row10HashKey = new row10Struct();
				row10Struct row10Default = new row10Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				mainoutStruct mainout_tmp = new mainoutStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) globalMap
						.get("tHash_Lookup_row9"));

				row9Struct row9HashKey = new row9Struct();
				row9Struct row9Default = new row9Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				sStruct s_tmp = new sStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_3_out", false);
				start_Hash.put("tAmazonAuroraInput_3_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				int tos_count_tAmazonAuroraInput_3_out = 0;

				/**
				 * [tAmazonAuroraInput_3_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_3_in", false);
				start_Hash.put("tAmazonAuroraInput_3_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_in";

				int tos_count_tAmazonAuroraInput_3_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_3_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_3_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_3_in = calendar_tAmazonAuroraInput_3_in
						.getTime();
				int nb_line_tAmazonAuroraInput_3_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_3_in = null;
				String driverClass_tAmazonAuroraInput_3_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_3_in);
				String dbUser_tAmazonAuroraInput_3_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_3_in = context.password;

				String dbPwd_tAmazonAuroraInput_3_in = decryptedPassword_tAmazonAuroraInput_3_in;

				String url_tAmazonAuroraInput_3_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_3_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_3_in,
								dbUser_tAmazonAuroraInput_3_in,
								dbPwd_tAmazonAuroraInput_3_in);

				java.sql.Statement stmt_tAmazonAuroraInput_3_in = conn_tAmazonAuroraInput_3_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_3_in = "select distinct OrionFirmId from advisor_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_3_QUERY",
						dbquery_tAmazonAuroraInput_3_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_3_in = null;
				try {
					rs_tAmazonAuroraInput_3_in = stmt_tAmazonAuroraInput_3_in
							.executeQuery(dbquery_tAmazonAuroraInput_3_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_3_in = rs_tAmazonAuroraInput_3_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_3_in = rsmd_tAmazonAuroraInput_3_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_3_in = null;

					while (rs_tAmazonAuroraInput_3_in.next()) {
						nb_line_tAmazonAuroraInput_3_in++;

						if (colQtyInRs_tAmazonAuroraInput_3_in < 1) {
							row_tAmazonAuroraInput_3_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(1) != null) {
								row_tAmazonAuroraInput_3_in.OrionFirmId = rs_tAmazonAuroraInput_3_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_3_in.OrionFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_3_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_in";

						tos_count_tAmazonAuroraInput_3_in++;

						/**
						 * [tAmazonAuroraInput_3_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_out";

						row8 = row_tAmazonAuroraInput_3_in;

						tos_count_tAmazonAuroraInput_3_out++;

						/**
						 * [tAmazonAuroraInput_3_out main ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row9"
						// /////////////////////////////////////////////

						boolean forceLooprow9 = false;

						row9Struct row9ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							row9HashKey.orionConnectFirmId = row8.OrionFirmId;

							row9HashKey.hashCodeDirty = true;

							tHash_Lookup_row9.lookup(row9HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row9 != null
								&& tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.orionConnectFirmId = '"
							// + row9HashKey.orionConnectFirmId + "'");
						} // G 071

						row9Struct row9 = null;

						row9Struct fromLookup_row9 = null;
						row9 = row9Default;

						if (tHash_Lookup_row9 != null
								&& tHash_Lookup_row9.hasNext()) { // G 099

							fromLookup_row9 = tHash_Lookup_row9.next();

						} // G 099

						if (fromLookup_row9 != null) {
							row9 = fromLookup_row9;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							s = null;

							// # Output table : 's'
							s_tmp.OrionFirmId = row8.OrionFirmId;
							s_tmp.orionEclipseFirmName = row9.orionEclipseFirmName;
							s = s_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */
						// Start of branch "s"
						if (s != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row10"
							// /////////////////////////////////////////////

							boolean forceLooprow10 = false;

							row10Struct row10ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								row10HashKey.firm = s.orionEclipseFirmName;

								row10HashKey.hashCodeDirty = true;

								tHash_Lookup_row10.lookup(row10HashKey);

								if (!tHash_Lookup_row10.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_4 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row10 != null
									&& tHash_Lookup_row10
											.getCount(row10HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.firm = '"
								// + row10HashKey.firm + "'");
							} // G 071

							row10Struct row10 = null;

							row10Struct fromLookup_row10 = null;
							row10 = row10Default;

							if (tHash_Lookup_row10 != null
									&& tHash_Lookup_row10.hasNext()) { // G 099

								fromLookup_row10 = tHash_Lookup_row10.next();

							} // G 099

							if (fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								mainout = null;
								out1 = null;

								if (!rejectedInnerJoin_tMap_4) {

									// # Output table : 'mainout'
									mainout_tmp.firm = s.OrionFirmId;
									mainout = mainout_tmp;
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'out1'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_4) {
									out1_tmp.firm = s.OrionFirmId;
									out1 = out1_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */
							// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tJavaRow_4 main ] start
								 */

								currentComponent = "tJavaRow_4";

								context.firmids = out1.firm;

								nb_line_tJavaRow_4++;

								tos_count_tJavaRow_4++;

								/**
								 * [tJavaRow_4 main ] stop
								 */

							} // End of branch "out1"

							// Start of branch "mainout"
							if (mainout != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row6"
								// /////////////////////////////////////////////

								boolean forceLooprow6 = false;

								row6Struct row6ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									row6HashKey.OrionFirmId = mainout.firm;

									row6HashKey.hashCodeDirty = true;

									tHash_Lookup_row6.lookup(row6HashKey);

									if (!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_2 = true;

										forceLooprow6 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow6 = true;
								} // G 21

								row6Struct row6 = null;

								while ((tHash_Lookup_row6 != null && tHash_Lookup_row6
										.hasNext()) || forceLooprow6) { // G_TM_M_043

									// CALL close loop of lookup 'row6'

									row6Struct fromLookup_row6 = null;
									row6 = row6Default;

									if (!forceLooprow6) { // G 46

										fromLookup_row6 = tHash_Lookup_row6
												.next();

										if (fromLookup_row6 != null) {
											row6 = fromLookup_row6;
										}

									} // G 46

									forceLooprow6 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row7"
									// /////////////////////////////////////////////

									boolean forceLooprow7 = false;

									row7Struct row7ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_2 = false;

										row7HashKey.orionConnectFirmId = row6.OrionFirmId;

										row7HashKey.hashCodeDirty = true;

										tHash_Lookup_row7.lookup(row7HashKey);

									} // G_TM_M_020

									if (tHash_Lookup_row7 != null
											&& tHash_Lookup_row7
													.getCount(row7HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.orionConnectFirmId = '"
										// + row7HashKey.orionConnectFirmId +
										// "'");
									} // G 071

									row7Struct row7 = null;

									row7Struct fromLookup_row7 = null;
									row7 = row7Default;

									if (tHash_Lookup_row7 != null
											&& tHash_Lookup_row7.hasNext()) { // G
																				// 099

										fromLookup_row7 = tHash_Lookup_row7
												.next();

									} // G 099

									if (fromLookup_row7 != null) {
										row7 = fromLookup_row7;
									}

									try {
										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
											// ###############################
											// # Output tables

											ErrorReject = null;
											MainOutput = null;
											NoDataFound_joinReject = null;

											if (!rejectedInnerJoin_tMap_2) {

												// # Output table : 'MainOutput'
												MainOutput_tmp.orionFirmId = row6.OrionFirmId;
												MainOutput_tmp.externalId = row6.ExternalId;
												MainOutput_tmp.orionEclipseFirmId = row7.orionEclipseFirmId;
												MainOutput_tmp.advisorNumber = row6.AdvisorNumber;
												MainOutput_tmp.brokerDealer = row6.BrokerDealer;
												MainOutput_tmp.name = row6.AdvisorName;
												MainOutput_tmp.isDeleted = false;
												MainOutput_tmp.createdDate = TalendDate
														.getCurrentDate();
												MainOutput_tmp.createdBy = 1;
												MainOutput_tmp.editedDate = TalendDate
														.getCurrentDate();
												MainOutput_tmp.editedBy = 1;
												MainOutput = MainOutput_tmp;
											} // closing inner join bracket (1)
												// ###### START REJECTS #####

											// # Output reject table :
											// 'NoDataFound_joinReject'
											// # Filter conditions
											if (rejectedInnerJoin_tMap_2) {
												NoDataFound_joinReject_tmp.OrionFirmId = row6.OrionFirmId;
												NoDataFound_joinReject_tmp.ExternalId = row6.ExternalId;
												NoDataFound_joinReject_tmp.AdvisorNumber = row6.AdvisorNumber;
												NoDataFound_joinReject_tmp.BrokerDealer = row6.BrokerDealer;
												NoDataFound_joinReject_tmp.AdvisorName = row6.AdvisorName;
												NoDataFound_joinReject = NoDataFound_joinReject_tmp;
											} // closing filter/reject
												// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_2 = false;

									} catch (java.lang.Exception e) {
										// if anohter java.lang.Exception when
										// processing an java.lang.Exception

										try {// EE
											Var__tMap_2__Struct Var = Var__tMap_2;

											ErrorReject_tmp.OrionFirmId = row6.OrionFirmId;
											ErrorReject_tmp.ExternalId = row6.ExternalId;
											ErrorReject_tmp.AdvisorNumber = row6.AdvisorNumber;
											ErrorReject_tmp.BrokerDealer = row6.BrokerDealer;
											ErrorReject_tmp.AdvisorName = row6.AdvisorName;
											ErrorReject = ErrorReject_tmp;
											ErrorReject.errorMessage = e
													.getMessage();
											ErrorReject.errorStackTrace = ResumeUtil
													.getExceptionStackTrace(e);

											MainOutput = null;
											NoDataFound_joinReject = null;
										} catch (java.lang.Exception ee) {// EE

											ee.printStackTrace();
											MainOutput = null;
											NoDataFound_joinReject = null;
										}// EE
									}// end catch

									tos_count_tMap_2++;

									/**
									 * [tMap_2 main ] stop
									 */
									// Start of branch "ErrorReject"
									if (ErrorReject != null) {

										/**
										 * [tAmazonMysqlOutput_2 main ] start
										 */

										currentComponent = "tAmazonMysqlOutput_2";

										whetherReject_tAmazonMysqlOutput_2 = false;
										if (ErrorReject.errorMessage == null) {
											pstmt_tAmazonMysqlOutput_2.setNull(
													1, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_2
													.setString(
															1,
															ErrorReject.errorMessage);
										}

										if (ErrorReject.errorStackTrace == null) {
											pstmt_tAmazonMysqlOutput_2.setNull(
													2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_2
													.setString(
															2,
															ErrorReject.errorStackTrace);
										}

										if (ErrorReject.OrionFirmId == null) {
											pstmt_tAmazonMysqlOutput_2.setNull(
													3, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_2.setInt(
													3, ErrorReject.OrionFirmId);
										}

										if (ErrorReject.ExternalId == null) {
											pstmt_tAmazonMysqlOutput_2.setNull(
													4, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_2.setInt(
													4, ErrorReject.ExternalId);
										}

										if (ErrorReject.AdvisorNumber == null) {
											pstmt_tAmazonMysqlOutput_2.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_2
													.setString(
															5,
															ErrorReject.AdvisorNumber);
										}

										if (ErrorReject.BrokerDealer == null) {
											pstmt_tAmazonMysqlOutput_2.setNull(
													6, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_2
													.setString(
															6,
															ErrorReject.BrokerDealer);
										}

										if (ErrorReject.AdvisorName == null) {
											pstmt_tAmazonMysqlOutput_2.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_2
													.setString(
															7,
															ErrorReject.AdvisorName);
										}

										pstmt_tAmazonMysqlOutput_2.addBatch();
										nb_line_tAmazonMysqlOutput_2++;

										batchSizeCounter_tAmazonMysqlOutput_2++;

										if (batchSize_tAmazonMysqlOutput_2 <= batchSizeCounter_tAmazonMysqlOutput_2) {
											try {
												int countSum_tAmazonMysqlOutput_2 = 0;

												for (int countEach_tAmazonMysqlOutput_2 : pstmt_tAmazonMysqlOutput_2
														.executeBatch()) {
													countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
															: 1);
												}

												insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

											} catch (java.sql.BatchUpdateException e) {

												int countSum_tAmazonMysqlOutput_2 = 0;
												for (int countEach_tAmazonMysqlOutput_2 : e
														.getUpdateCounts()) {
													countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
															: countEach_tAmazonMysqlOutput_2);
												}

												insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

												System.err.println(e
														.getMessage());

											}

											batchSizeCounter_tAmazonMysqlOutput_2 = 0;
										}

										commitCounter_tAmazonMysqlOutput_2++;
										if (commitEvery_tAmazonMysqlOutput_2 <= commitCounter_tAmazonMysqlOutput_2) {
											if ((batchSize_tAmazonMysqlOutput_2 > 0)
													&& (batchSizeCounter_tAmazonMysqlOutput_2 > 0)) {
												try {
													int countSum_tAmazonMysqlOutput_2 = 0;

													for (int countEach_tAmazonMysqlOutput_2 : pstmt_tAmazonMysqlOutput_2
															.executeBatch()) {
														countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
																: 1);
													}

													insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

													batchSizeCounter_tAmazonMysqlOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e) {

													int countSum_tAmazonMysqlOutput_2 = 0;
													for (int countEach_tAmazonMysqlOutput_2 : e
															.getUpdateCounts()) {
														countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
																: countEach_tAmazonMysqlOutput_2);
													}

													insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

													System.err.println(e
															.getMessage());

												}
											}

											conn_tAmazonMysqlOutput_2.commit();

											commitCounter_tAmazonMysqlOutput_2 = 0;
										}

										tos_count_tAmazonMysqlOutput_2++;

										/**
										 * [tAmazonMysqlOutput_2 main ] stop
										 */

									} // End of branch "ErrorReject"

									// Start of branch "MainOutput"
									if (MainOutput != null) {

										/**
										 * [tAmazonMysqlOutput_1 main ] start
										 */

										currentComponent = "tAmazonMysqlOutput_1";

										whetherReject_tAmazonMysqlOutput_1 = false;
										pstmt_tAmazonMysqlOutput_1.setInt(1,
												MainOutput.orionFirmId);

										pstmt_tAmazonMysqlOutput_1.setInt(2,
												MainOutput.externalId);

										if (MainOutput.orionEclipseFirmId == null) {
											pstmt_tAmazonMysqlOutput_1.setNull(
													3, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_1
													.setInt(3,
															MainOutput.orionEclipseFirmId);
										}

										if (MainOutput.advisorNumber == null) {
											pstmt_tAmazonMysqlOutput_1.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_1
													.setString(
															4,
															MainOutput.advisorNumber);
										}

										if (MainOutput.brokerDealer == null) {
											pstmt_tAmazonMysqlOutput_1.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_1
													.setString(
															5,
															MainOutput.brokerDealer);
										}

										if (MainOutput.name == null) {
											pstmt_tAmazonMysqlOutput_1.setNull(
													6, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_1
													.setString(6,
															MainOutput.name);
										}

										pstmt_tAmazonMysqlOutput_1.setBoolean(
												7, MainOutput.isDeleted);

										if (MainOutput.createdDate != null) {
											date_tAmazonMysqlOutput_1 = MainOutput.createdDate
													.getTime();
											if (date_tAmazonMysqlOutput_1 < year1_tAmazonMysqlOutput_1
													|| date_tAmazonMysqlOutput_1 >= year10000_tAmazonMysqlOutput_1) {
												pstmt_tAmazonMysqlOutput_1
														.setString(8,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonMysqlOutput_1
														.setTimestamp(
																8,
																new java.sql.Timestamp(
																		date_tAmazonMysqlOutput_1));
											}
										} else {
											pstmt_tAmazonMysqlOutput_1.setNull(
													8, java.sql.Types.DATE);
										}

										pstmt_tAmazonMysqlOutput_1.setInt(9,
												MainOutput.createdBy);

										if (MainOutput.editedDate != null) {
											date_tAmazonMysqlOutput_1 = MainOutput.editedDate
													.getTime();
											if (date_tAmazonMysqlOutput_1 < year1_tAmazonMysqlOutput_1
													|| date_tAmazonMysqlOutput_1 >= year10000_tAmazonMysqlOutput_1) {
												pstmt_tAmazonMysqlOutput_1
														.setString(10,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonMysqlOutput_1
														.setTimestamp(
																10,
																new java.sql.Timestamp(
																		date_tAmazonMysqlOutput_1));
											}
										} else {
											pstmt_tAmazonMysqlOutput_1.setNull(
													10, java.sql.Types.DATE);
										}

										pstmt_tAmazonMysqlOutput_1.setInt(11,
												MainOutput.editedBy);

										pstmt_tAmazonMysqlOutput_1.setInt(12,
												MainOutput.orionFirmId);

										pstmt_tAmazonMysqlOutput_1.setInt(13,
												MainOutput.externalId);

										if (MainOutput.orionEclipseFirmId == null) {
											pstmt_tAmazonMysqlOutput_1.setNull(
													14, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_1
													.setInt(14,
															MainOutput.orionEclipseFirmId);
										}

										if (MainOutput.advisorNumber == null) {
											pstmt_tAmazonMysqlOutput_1.setNull(
													15, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_1
													.setString(
															15,
															MainOutput.advisorNumber);
										}

										if (MainOutput.brokerDealer == null) {
											pstmt_tAmazonMysqlOutput_1.setNull(
													16, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_1
													.setString(
															16,
															MainOutput.brokerDealer);
										}

										if (MainOutput.name == null) {
											pstmt_tAmazonMysqlOutput_1.setNull(
													17, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_1
													.setString(17,
															MainOutput.name);
										}

										pstmt_tAmazonMysqlOutput_1.setBoolean(
												18, MainOutput.isDeleted);

										if (MainOutput.createdDate != null) {
											date_tAmazonMysqlOutput_1 = MainOutput.createdDate
													.getTime();
											if (date_tAmazonMysqlOutput_1 < year1_tAmazonMysqlOutput_1
													|| date_tAmazonMysqlOutput_1 >= year10000_tAmazonMysqlOutput_1) {
												pstmt_tAmazonMysqlOutput_1
														.setString(19,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonMysqlOutput_1
														.setTimestamp(
																19,
																new java.sql.Timestamp(
																		date_tAmazonMysqlOutput_1));
											}
										} else {
											pstmt_tAmazonMysqlOutput_1.setNull(
													19, java.sql.Types.DATE);
										}

										pstmt_tAmazonMysqlOutput_1.setInt(20,
												MainOutput.createdBy);

										if (MainOutput.editedDate != null) {
											date_tAmazonMysqlOutput_1 = MainOutput.editedDate
													.getTime();
											if (date_tAmazonMysqlOutput_1 < year1_tAmazonMysqlOutput_1
													|| date_tAmazonMysqlOutput_1 >= year10000_tAmazonMysqlOutput_1) {
												pstmt_tAmazonMysqlOutput_1
														.setString(21,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonMysqlOutput_1
														.setTimestamp(
																21,
																new java.sql.Timestamp(
																		date_tAmazonMysqlOutput_1));
											}
										} else {
											pstmt_tAmazonMysqlOutput_1.setNull(
													21, java.sql.Types.DATE);
										}

										pstmt_tAmazonMysqlOutput_1.setInt(22,
												MainOutput.editedBy);

										int count_on_duplicate_key_tAmazonMysqlOutput_1 = 0;
										try {
											count_on_duplicate_key_tAmazonMysqlOutput_1 = pstmt_tAmazonMysqlOutput_1
													.executeUpdate();
										} catch (java.lang.Exception e) {
											whetherReject_tAmazonMysqlOutput_1 = true;
											System.err.print(e.getMessage());
										}
										if (count_on_duplicate_key_tAmazonMysqlOutput_1 == 1) {
											insertedCount_tAmazonMysqlOutput_1 += count_on_duplicate_key_tAmazonMysqlOutput_1;
										} else {
											insertedCount_tAmazonMysqlOutput_1 += 1;
											updatedCount_tAmazonMysqlOutput_1 += count_on_duplicate_key_tAmazonMysqlOutput_1 - 1;
										}
										commitCounter_tAmazonMysqlOutput_1++;
										if (commitEvery_tAmazonMysqlOutput_1 <= commitCounter_tAmazonMysqlOutput_1) {

											conn_tAmazonMysqlOutput_1.commit();

											commitCounter_tAmazonMysqlOutput_1 = 0;
										}

										tos_count_tAmazonMysqlOutput_1++;

										/**
										 * [tAmazonMysqlOutput_1 main ] stop
										 */

									} // End of branch "MainOutput"

									// Start of branch "NoDataFound_joinReject"
									if (NoDataFound_joinReject != null) {

										/**
										 * [tAmazonMysqlOutput_3 main ] start
										 */

										currentComponent = "tAmazonMysqlOutput_3";

										whetherReject_tAmazonMysqlOutput_3 = false;
										if (NoDataFound_joinReject.OrionFirmId == null) {
											pstmt_tAmazonMysqlOutput_3.setNull(
													1, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_3
													.setInt(1,
															NoDataFound_joinReject.OrionFirmId);
										}

										if (NoDataFound_joinReject.ExternalId == null) {
											pstmt_tAmazonMysqlOutput_3.setNull(
													2, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_3
													.setInt(2,
															NoDataFound_joinReject.ExternalId);
										}

										if (NoDataFound_joinReject.AdvisorNumber == null) {
											pstmt_tAmazonMysqlOutput_3.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_3
													.setString(
															3,
															NoDataFound_joinReject.AdvisorNumber);
										}

										if (NoDataFound_joinReject.BrokerDealer == null) {
											pstmt_tAmazonMysqlOutput_3.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_3
													.setString(
															4,
															NoDataFound_joinReject.BrokerDealer);
										}

										if (NoDataFound_joinReject.AdvisorName == null) {
											pstmt_tAmazonMysqlOutput_3.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_3
													.setString(
															5,
															NoDataFound_joinReject.AdvisorName);
										}

										pstmt_tAmazonMysqlOutput_3.addBatch();
										nb_line_tAmazonMysqlOutput_3++;

										batchSizeCounter_tAmazonMysqlOutput_3++;

										if (batchSize_tAmazonMysqlOutput_3 <= batchSizeCounter_tAmazonMysqlOutput_3) {
											try {
												int countSum_tAmazonMysqlOutput_3 = 0;

												for (int countEach_tAmazonMysqlOutput_3 : pstmt_tAmazonMysqlOutput_3
														.executeBatch()) {
													countSum_tAmazonMysqlOutput_3 += (countEach_tAmazonMysqlOutput_3 < 0 ? 0
															: 1);
												}

												insertedCount_tAmazonMysqlOutput_3 += countSum_tAmazonMysqlOutput_3;

											} catch (java.sql.BatchUpdateException e) {

												int countSum_tAmazonMysqlOutput_3 = 0;
												for (int countEach_tAmazonMysqlOutput_3 : e
														.getUpdateCounts()) {
													countSum_tAmazonMysqlOutput_3 += (countEach_tAmazonMysqlOutput_3 < 0 ? 0
															: countEach_tAmazonMysqlOutput_3);
												}

												insertedCount_tAmazonMysqlOutput_3 += countSum_tAmazonMysqlOutput_3;

												System.err.println(e
														.getMessage());

											}

											batchSizeCounter_tAmazonMysqlOutput_3 = 0;
										}

										commitCounter_tAmazonMysqlOutput_3++;
										if (commitEvery_tAmazonMysqlOutput_3 <= commitCounter_tAmazonMysqlOutput_3) {
											if ((batchSize_tAmazonMysqlOutput_3 > 0)
													&& (batchSizeCounter_tAmazonMysqlOutput_3 > 0)) {
												try {
													int countSum_tAmazonMysqlOutput_3 = 0;

													for (int countEach_tAmazonMysqlOutput_3 : pstmt_tAmazonMysqlOutput_3
															.executeBatch()) {
														countSum_tAmazonMysqlOutput_3 += (countEach_tAmazonMysqlOutput_3 < 0 ? 0
																: 1);
													}

													insertedCount_tAmazonMysqlOutput_3 += countSum_tAmazonMysqlOutput_3;

													batchSizeCounter_tAmazonMysqlOutput_3 = 0;
												} catch (java.sql.BatchUpdateException e) {

													int countSum_tAmazonMysqlOutput_3 = 0;
													for (int countEach_tAmazonMysqlOutput_3 : e
															.getUpdateCounts()) {
														countSum_tAmazonMysqlOutput_3 += (countEach_tAmazonMysqlOutput_3 < 0 ? 0
																: countEach_tAmazonMysqlOutput_3);
													}

													insertedCount_tAmazonMysqlOutput_3 += countSum_tAmazonMysqlOutput_3;

													System.err.println(e
															.getMessage());

												}
											}

											conn_tAmazonMysqlOutput_3.commit();

											commitCounter_tAmazonMysqlOutput_3 = 0;
										}

										tos_count_tAmazonMysqlOutput_3++;

										/**
										 * [tAmazonMysqlOutput_3 main ] stop
										 */

									} // End of branch "NoDataFound_joinReject"

								} // close loop of lookup 'row6' // G_TM_M_043

							} // End of branch "mainout"

						} // End of branch "s"

						/**
						 * [tAmazonAuroraInput_3_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_3_in != null) {
						rs_tAmazonAuroraInput_3_in.close();
					}
					stmt_tAmazonAuroraInput_3_in.close();
					if (conn_tAmazonAuroraInput_3_in != null
							&& !conn_tAmazonAuroraInput_3_in.isClosed()) {

						conn_tAmazonAuroraInput_3_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_3_NB_LINE",
						nb_line_tAmazonAuroraInput_3_in);

				ok_Hash.put("tAmazonAuroraInput_3_in", true);
				end_Hash.put("tAmazonAuroraInput_3_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_3_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				ok_Hash.put("tAmazonAuroraInput_3_out", true);
				end_Hash.put("tAmazonAuroraInput_3_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_3_out end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row9 != null) {
					tHash_Lookup_row9.endGet();
				}
				globalMap.remove("tHash_Lookup_row9");

				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row10 != null) {
					tHash_Lookup_row10.endGet();
				}
				globalMap.remove("tHash_Lookup_row10");

				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				if (context.firmids != null) {

					tWarn_1Process(globalMap);
				}

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_2 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_2";

				try {
					if (batchSizeCounter_tAmazonMysqlOutput_2 != 0) {
						int countSum_tAmazonMysqlOutput_2 = 0;

						for (int countEach_tAmazonMysqlOutput_2 : pstmt_tAmazonMysqlOutput_2
								.executeBatch()) {
							countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonMysqlOutput_2 = 0;
					for (int countEach_tAmazonMysqlOutput_2 : e
							.getUpdateCounts()) {
						countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
								: countEach_tAmazonMysqlOutput_2);
					}

					insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonMysqlOutput_2 = 0;

				if (pstmt_tAmazonMysqlOutput_2 != null) {
					pstmt_tAmazonMysqlOutput_2.close();
				}

				if (commitCounter_tAmazonMysqlOutput_2 > 0) {

					conn_tAmazonMysqlOutput_2.commit();

				}

				conn_tAmazonMysqlOutput_2.close();

				resourceMap.put("finish_tAmazonMysqlOutput_2", true);

				nb_line_deleted_tAmazonMysqlOutput_2 = nb_line_deleted_tAmazonMysqlOutput_2
						+ deletedCount_tAmazonMysqlOutput_2;
				nb_line_update_tAmazonMysqlOutput_2 = nb_line_update_tAmazonMysqlOutput_2
						+ updatedCount_tAmazonMysqlOutput_2;
				nb_line_inserted_tAmazonMysqlOutput_2 = nb_line_inserted_tAmazonMysqlOutput_2
						+ insertedCount_tAmazonMysqlOutput_2;
				nb_line_rejected_tAmazonMysqlOutput_2 = nb_line_rejected_tAmazonMysqlOutput_2
						+ rejectedCount_tAmazonMysqlOutput_2;

				globalMap.put("tAmazonMysqlOutput_2_NB_LINE",
						nb_line_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_2);

				ok_Hash.put("tAmazonMysqlOutput_2", true);
				end_Hash.put("tAmazonMysqlOutput_2", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_2 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_1";

				if (pstmt_tAmazonMysqlOutput_1 != null) {
					pstmt_tAmazonMysqlOutput_1.close();
				}

				if (commitCounter_tAmazonMysqlOutput_1 > 0) {

					conn_tAmazonMysqlOutput_1.commit();

				}

				conn_tAmazonMysqlOutput_1.close();

				resourceMap.put("finish_tAmazonMysqlOutput_1", true);

				nb_line_deleted_tAmazonMysqlOutput_1 = nb_line_deleted_tAmazonMysqlOutput_1
						+ deletedCount_tAmazonMysqlOutput_1;
				nb_line_update_tAmazonMysqlOutput_1 = nb_line_update_tAmazonMysqlOutput_1
						+ updatedCount_tAmazonMysqlOutput_1;
				nb_line_inserted_tAmazonMysqlOutput_1 = nb_line_inserted_tAmazonMysqlOutput_1
						+ insertedCount_tAmazonMysqlOutput_1;
				nb_line_rejected_tAmazonMysqlOutput_1 = nb_line_rejected_tAmazonMysqlOutput_1
						+ rejectedCount_tAmazonMysqlOutput_1;

				globalMap.put("tAmazonMysqlOutput_1_NB_LINE",
						nb_line_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_1);

				ok_Hash.put("tAmazonMysqlOutput_1", true);
				end_Hash.put("tAmazonMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_1 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_3 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_3";

				try {
					if (batchSizeCounter_tAmazonMysqlOutput_3 != 0) {
						int countSum_tAmazonMysqlOutput_3 = 0;

						for (int countEach_tAmazonMysqlOutput_3 : pstmt_tAmazonMysqlOutput_3
								.executeBatch()) {
							countSum_tAmazonMysqlOutput_3 += (countEach_tAmazonMysqlOutput_3 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonMysqlOutput_3 += countSum_tAmazonMysqlOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonMysqlOutput_3 = 0;
					for (int countEach_tAmazonMysqlOutput_3 : e
							.getUpdateCounts()) {
						countSum_tAmazonMysqlOutput_3 += (countEach_tAmazonMysqlOutput_3 < 0 ? 0
								: countEach_tAmazonMysqlOutput_3);
					}

					insertedCount_tAmazonMysqlOutput_3 += countSum_tAmazonMysqlOutput_3;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonMysqlOutput_3 = 0;

				if (pstmt_tAmazonMysqlOutput_3 != null) {
					pstmt_tAmazonMysqlOutput_3.close();
				}

				if (commitCounter_tAmazonMysqlOutput_3 > 0) {

					conn_tAmazonMysqlOutput_3.commit();

				}

				conn_tAmazonMysqlOutput_3.close();

				resourceMap.put("finish_tAmazonMysqlOutput_3", true);

				nb_line_deleted_tAmazonMysqlOutput_3 = nb_line_deleted_tAmazonMysqlOutput_3
						+ deletedCount_tAmazonMysqlOutput_3;
				nb_line_update_tAmazonMysqlOutput_3 = nb_line_update_tAmazonMysqlOutput_3
						+ updatedCount_tAmazonMysqlOutput_3;
				nb_line_inserted_tAmazonMysqlOutput_3 = nb_line_inserted_tAmazonMysqlOutput_3
						+ insertedCount_tAmazonMysqlOutput_3;
				nb_line_rejected_tAmazonMysqlOutput_3 = nb_line_rejected_tAmazonMysqlOutput_3
						+ rejectedCount_tAmazonMysqlOutput_3;

				globalMap.put("tAmazonMysqlOutput_3_NB_LINE",
						nb_line_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_3);

				ok_Hash.put("tAmazonMysqlOutput_3", true);
				end_Hash.put("tAmazonMysqlOutput_3", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row7");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row10");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row9");

			try {

				/**
				 * [tAmazonAuroraInput_3_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_in";

				/**
				 * [tAmazonAuroraInput_3_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				/**
				 * [tAmazonAuroraInput_3_out finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_2 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_2";

				if (resourceMap.get("finish_tAmazonMysqlOutput_2") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_2) {
							String errorMessage_tAmazonMysqlOutput_2 = "failed to close the connection in tAmazonMysqlOutput_2 :"
									+ sqlEx_tAmazonMysqlOutput_2.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_2);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_2 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_1";

				if (resourceMap.get("finish_tAmazonMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_1) {
							String errorMessage_tAmazonMysqlOutput_1 = "failed to close the connection in tAmazonMysqlOutput_1 :"
									+ sqlEx_tAmazonMysqlOutput_1.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_1);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_1 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_3 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_3";

				if (resourceMap.get("finish_tAmazonMysqlOutput_3") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_3") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_3")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_3) {
							String errorMessage_tAmazonMysqlOutput_3 = "failed to close the connection in tAmazonMysqlOutput_3 :"
									+ sqlEx_tAmazonMysqlOutput_3.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_3);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_3_in_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableComparableLookupRow<row9Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmName = this.orionEclipseFirmName;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orionEclipseFirmName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_5_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_5_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_5_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_5_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_5_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_5_inStruct row_tAmazonAuroraInput_5_in = new row_tAmazonAuroraInput_5_inStruct();
				row_tAmazonAuroraInput_5_inStruct row9 = row_tAmazonAuroraInput_5_in;

				/**
				 * [tAdvancedHash_row9 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9", false);
				start_Hash
						.put("tAdvancedHash_row9", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row9";

				int tos_count_tAdvancedHash_row9 = 0;

				// connection name:row9
				// source node:tAmazonAuroraInput_5_out -
				// inputs:(row_tAmazonAuroraInput_5_in) outputs:(row9,row9) |
				// target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
				// linked node: tMap_3 - inputs:(row8,row9) outputs:(s)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row9Struct> getLookup(matchingModeEnum_row9);

				globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);

				/**
				 * [tAdvancedHash_row9 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_5_out", false);
				start_Hash.put("tAmazonAuroraInput_5_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				int tos_count_tAmazonAuroraInput_5_out = 0;

				/**
				 * [tAmazonAuroraInput_5_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_5_in", false);
				start_Hash.put("tAmazonAuroraInput_5_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_in";

				int tos_count_tAmazonAuroraInput_5_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_5_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_5_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_5_in = calendar_tAmazonAuroraInput_5_in
						.getTime();
				int nb_line_tAmazonAuroraInput_5_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_5_in = null;
				String driverClass_tAmazonAuroraInput_5_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_5_in);
				String dbUser_tAmazonAuroraInput_5_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_5_in = context.password;

				String dbPwd_tAmazonAuroraInput_5_in = decryptedPassword_tAmazonAuroraInput_5_in;

				String url_tAmazonAuroraInput_5_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_5_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_5_in,
								dbUser_tAmazonAuroraInput_5_in,
								dbPwd_tAmazonAuroraInput_5_in);

				java.sql.Statement stmt_tAmazonAuroraInput_5_in = conn_tAmazonAuroraInput_5_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_5_in = "select orionConnectFirmId , orionEclipseFirmName from firm";

				globalMap.put("tAmazonAuroraInput_5_QUERY",
						dbquery_tAmazonAuroraInput_5_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_5_in = null;
				try {
					rs_tAmazonAuroraInput_5_in = stmt_tAmazonAuroraInput_5_in
							.executeQuery(dbquery_tAmazonAuroraInput_5_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_5_in = rs_tAmazonAuroraInput_5_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_5_in = rsmd_tAmazonAuroraInput_5_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_5_in = null;

					while (rs_tAmazonAuroraInput_5_in.next()) {
						nb_line_tAmazonAuroraInput_5_in++;

						if (colQtyInRs_tAmazonAuroraInput_5_in < 1) {
							row_tAmazonAuroraInput_5_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_5_in.getObject(1) != null) {
								row_tAmazonAuroraInput_5_in.orionConnectFirmId = rs_tAmazonAuroraInput_5_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_5_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_5_in < 2) {
							row_tAmazonAuroraInput_5_in.orionEclipseFirmName = null;
						} else {

							row_tAmazonAuroraInput_5_in.orionEclipseFirmName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_5_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_5_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_in";

						tos_count_tAmazonAuroraInput_5_in++;

						/**
						 * [tAmazonAuroraInput_5_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_out";

						row9 = row_tAmazonAuroraInput_5_in;

						tos_count_tAmazonAuroraInput_5_out++;

						/**
						 * [tAmazonAuroraInput_5_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row9 main ] start
						 */

						currentComponent = "tAdvancedHash_row9";

						row9Struct row9_HashRow = new row9Struct();

						row9_HashRow.orionConnectFirmId = row9.orionConnectFirmId;

						row9_HashRow.orionEclipseFirmName = row9.orionEclipseFirmName;

						tHash_Lookup_row9.put(row9_HashRow);

						tos_count_tAdvancedHash_row9++;

						/**
						 * [tAdvancedHash_row9 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_5_in != null) {
						rs_tAmazonAuroraInput_5_in.close();
					}
					stmt_tAmazonAuroraInput_5_in.close();
					if (conn_tAmazonAuroraInput_5_in != null
							&& !conn_tAmazonAuroraInput_5_in.isClosed()) {

						conn_tAmazonAuroraInput_5_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_5_NB_LINE",
						nb_line_tAmazonAuroraInput_5_in);

				ok_Hash.put("tAmazonAuroraInput_5_in", true);
				end_Hash.put("tAmazonAuroraInput_5_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_5_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				ok_Hash.put("tAmazonAuroraInput_5_out", true);
				end_Hash.put("tAmazonAuroraInput_5_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_5_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 end ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				tHash_Lookup_row9.endPut();

				ok_Hash.put("tAdvancedHash_row9", true);
				end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_5_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_in";

				/**
				 * [tAmazonAuroraInput_5_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				/**
				 * [tAmazonAuroraInput_5_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row9 finally ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				/**
				 * [tAdvancedHash_row9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_5_in_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmId = this.orionEclipseFirmId;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmId = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.orionEclipseFirmId, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_2_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_2_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_2_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_2_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_2_inStruct row_tAmazonAuroraInput_2_in = new row_tAmazonAuroraInput_2_inStruct();
				row_tAmazonAuroraInput_2_inStruct row7 = row_tAmazonAuroraInput_2_in;

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tAmazonAuroraInput_2_out -
				// inputs:(row_tAmazonAuroraInput_2_in) outputs:(row7,row7) |
				// target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_2 - inputs:(mainout,row7,row6)
				// outputs:(ErrorReject,MainOutput,NoDataFound_joinReject)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_2_out", false);
				start_Hash.put("tAmazonAuroraInput_2_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				int tos_count_tAmazonAuroraInput_2_out = 0;

				/**
				 * [tAmazonAuroraInput_2_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_2_in", false);
				start_Hash.put("tAmazonAuroraInput_2_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_in";

				int tos_count_tAmazonAuroraInput_2_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_2_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_2_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_2_in = calendar_tAmazonAuroraInput_2_in
						.getTime();
				int nb_line_tAmazonAuroraInput_2_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_2_in = null;
				String driverClass_tAmazonAuroraInput_2_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_2_in);
				String dbUser_tAmazonAuroraInput_2_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_2_in = context.password;

				String dbPwd_tAmazonAuroraInput_2_in = decryptedPassword_tAmazonAuroraInput_2_in;

				String url_tAmazonAuroraInput_2_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_2_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_2_in,
								dbUser_tAmazonAuroraInput_2_in,
								dbPwd_tAmazonAuroraInput_2_in);

				java.sql.Statement stmt_tAmazonAuroraInput_2_in = conn_tAmazonAuroraInput_2_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_2_in = "select orionConnectFirmId , orionEclipseFirmId from firm";

				globalMap.put("tAmazonAuroraInput_2_QUERY",
						dbquery_tAmazonAuroraInput_2_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_2_in = null;
				try {
					rs_tAmazonAuroraInput_2_in = stmt_tAmazonAuroraInput_2_in
							.executeQuery(dbquery_tAmazonAuroraInput_2_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_2_in = rs_tAmazonAuroraInput_2_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_2_in = rsmd_tAmazonAuroraInput_2_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_2_in = null;

					while (rs_tAmazonAuroraInput_2_in.next()) {
						nb_line_tAmazonAuroraInput_2_in++;

						if (colQtyInRs_tAmazonAuroraInput_2_in < 1) {
							row_tAmazonAuroraInput_2_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(1) != null) {
								row_tAmazonAuroraInput_2_in.orionConnectFirmId = rs_tAmazonAuroraInput_2_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_2_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 2) {
							row_tAmazonAuroraInput_2_in.orionEclipseFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(2) != null) {
								row_tAmazonAuroraInput_2_in.orionEclipseFirmId = rs_tAmazonAuroraInput_2_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_2_in.orionEclipseFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_2_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_in";

						tos_count_tAmazonAuroraInput_2_in++;

						/**
						 * [tAmazonAuroraInput_2_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_out";

						row7 = row_tAmazonAuroraInput_2_in;

						tos_count_tAmazonAuroraInput_2_out++;

						/**
						 * [tAmazonAuroraInput_2_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.orionConnectFirmId = row7.orionConnectFirmId;

						row7_HashRow.orionEclipseFirmId = row7.orionEclipseFirmId;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_2_in != null) {
						rs_tAmazonAuroraInput_2_in.close();
					}
					stmt_tAmazonAuroraInput_2_in.close();
					if (conn_tAmazonAuroraInput_2_in != null
							&& !conn_tAmazonAuroraInput_2_in.isClosed()) {

						conn_tAmazonAuroraInput_2_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_2_NB_LINE",
						nb_line_tAmazonAuroraInput_2_in);

				ok_Hash.put("tAmazonAuroraInput_2_in", true);
				end_Hash.put("tAmazonAuroraInput_2_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_2_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				ok_Hash.put("tAmazonAuroraInput_2_out", true);
				end_Hash.put("tAmazonAuroraInput_2_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_2_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_2_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_in";

				/**
				 * [tAmazonAuroraInput_2_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				/**
				 * [tAmazonAuroraInput_2_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AdvisorNumber;

		public String getAdvisorNumber() {
			return this.AdvisorNumber;
		}

		public String BrokerDealer;

		public String getBrokerDealer() {
			return this.BrokerDealer;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OrionFirmId == null) ? 0 : this.OrionFirmId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.OrionFirmId == null) {
				if (other.OrionFirmId != null)
					return false;

			} else if (!this.OrionFirmId.equals(other.OrionFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.OrionFirmId = this.OrionFirmId;
			other.ExternalId = this.ExternalId;
			other.AdvisorNumber = this.AdvisorNumber;
			other.BrokerDealer = this.BrokerDealer;
			other.AdvisorName = this.AdvisorName;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.OrionFirmId = this.OrionFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ExternalId = readInteger(dis, ois);

				this.AdvisorNumber = readString(dis, ois);

				this.BrokerDealer = readString(dis, ois);

				this.AdvisorName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.ExternalId, dos, oos);

				writeString(this.AdvisorNumber, dos, oos);

				writeString(this.BrokerDealer, dos, oos);

				writeString(this.AdvisorName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AdvisorNumber=" + AdvisorNumber);
			sb.append(",BrokerDealer=" + BrokerDealer);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OrionFirmId,
					other.OrionFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_4_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_4_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AdvisorNumber;

		public String getAdvisorNumber() {
			return this.AdvisorNumber;
		}

		public String BrokerDealer;

		public String getBrokerDealer() {
			return this.BrokerDealer;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Advisor_staging_to_firm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Advisor_staging_to_firm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AdvisorNumber = readString(dis);

					this.BrokerDealer = readString(dis);

					this.AdvisorName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AdvisorNumber, dos);

				// String

				writeString(this.BrokerDealer, dos);

				// String

				writeString(this.AdvisorName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AdvisorNumber=" + AdvisorNumber);
			sb.append(",BrokerDealer=" + BrokerDealer);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_4_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_4_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_4_inStruct row_tAmazonAuroraInput_4_in = new row_tAmazonAuroraInput_4_inStruct();
				row_tAmazonAuroraInput_4_inStruct row6 = row_tAmazonAuroraInput_4_in;

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tAmazonAuroraInput_4_out -
				// inputs:(row_tAmazonAuroraInput_4_in) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_2 - inputs:(mainout,row7,row6)
				// outputs:(ErrorReject,MainOutput,NoDataFound_joinReject)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_4_out", false);
				start_Hash.put("tAmazonAuroraInput_4_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				int tos_count_tAmazonAuroraInput_4_out = 0;

				/**
				 * [tAmazonAuroraInput_4_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_4_in", false);
				start_Hash.put("tAmazonAuroraInput_4_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_in";

				int tos_count_tAmazonAuroraInput_4_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_4_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_4_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_4_in = calendar_tAmazonAuroraInput_4_in
						.getTime();
				int nb_line_tAmazonAuroraInput_4_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_4_in = null;
				String driverClass_tAmazonAuroraInput_4_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_4_in);
				String dbUser_tAmazonAuroraInput_4_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_4_in = context.password;

				String dbPwd_tAmazonAuroraInput_4_in = decryptedPassword_tAmazonAuroraInput_4_in;

				String url_tAmazonAuroraInput_4_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_4_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_4_in,
								dbUser_tAmazonAuroraInput_4_in,
								dbPwd_tAmazonAuroraInput_4_in);

				java.sql.Statement stmt_tAmazonAuroraInput_4_in = conn_tAmazonAuroraInput_4_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_4_in = "select * from advisor_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_4_QUERY",
						dbquery_tAmazonAuroraInput_4_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_4_in = null;
				try {
					rs_tAmazonAuroraInput_4_in = stmt_tAmazonAuroraInput_4_in
							.executeQuery(dbquery_tAmazonAuroraInput_4_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_4_in = rs_tAmazonAuroraInput_4_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_4_in = rsmd_tAmazonAuroraInput_4_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_4_in = null;

					while (rs_tAmazonAuroraInput_4_in.next()) {
						nb_line_tAmazonAuroraInput_4_in++;

						if (colQtyInRs_tAmazonAuroraInput_4_in < 1) {
							row_tAmazonAuroraInput_4_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_4_in.getObject(1) != null) {
								row_tAmazonAuroraInput_4_in.OrionFirmId = rs_tAmazonAuroraInput_4_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_4_in.OrionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_4_in < 2) {
							row_tAmazonAuroraInput_4_in.ExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_4_in.getObject(2) != null) {
								row_tAmazonAuroraInput_4_in.ExternalId = rs_tAmazonAuroraInput_4_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_4_in.ExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_4_in < 3) {
							row_tAmazonAuroraInput_4_in.AdvisorNumber = null;
						} else {

							row_tAmazonAuroraInput_4_in.AdvisorNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_4_in, 3,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_4_in < 4) {
							row_tAmazonAuroraInput_4_in.BrokerDealer = null;
						} else {

							row_tAmazonAuroraInput_4_in.BrokerDealer = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_4_in, 4,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_4_in < 5) {
							row_tAmazonAuroraInput_4_in.AdvisorName = null;
						} else {

							row_tAmazonAuroraInput_4_in.AdvisorName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_4_in, 5,
											false);
						}

						/**
						 * [tAmazonAuroraInput_4_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_in";

						tos_count_tAmazonAuroraInput_4_in++;

						/**
						 * [tAmazonAuroraInput_4_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_out";

						row6 = row_tAmazonAuroraInput_4_in;

						tos_count_tAmazonAuroraInput_4_out++;

						/**
						 * [tAmazonAuroraInput_4_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.OrionFirmId = row6.OrionFirmId;

						row6_HashRow.ExternalId = row6.ExternalId;

						row6_HashRow.AdvisorNumber = row6.AdvisorNumber;

						row6_HashRow.BrokerDealer = row6.BrokerDealer;

						row6_HashRow.AdvisorName = row6.AdvisorName;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_4_in != null) {
						rs_tAmazonAuroraInput_4_in.close();
					}
					stmt_tAmazonAuroraInput_4_in.close();
					if (conn_tAmazonAuroraInput_4_in != null
							&& !conn_tAmazonAuroraInput_4_in.isClosed()) {

						conn_tAmazonAuroraInput_4_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_4_NB_LINE",
						nb_line_tAmazonAuroraInput_4_in);

				ok_Hash.put("tAmazonAuroraInput_4_in", true);
				end_Hash.put("tAmazonAuroraInput_4_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_4_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				ok_Hash.put("tAmazonAuroraInput_4_out", true);
				end_Hash.put("tAmazonAuroraInput_4_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_4_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_4_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_in";

				/**
				 * [tAmazonAuroraInput_4_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				/**
				 * [tAmazonAuroraInput_4_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Advisor_staging_to_firm Advisor_staging_to_firmClass = new Advisor_staging_to_firm();

		int exitCode = Advisor_staging_to_firmClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Advisor_staging_to_firm.class
					.getClassLoader().getResourceAsStream(
							"reliazedgainloss/advisor_staging_to_firm_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.serverIp = (String) context.getProperty("serverIp");
			context.database = (String) context.getProperty("database");
			context.custodianpath = (String) context
					.getProperty("custodianpath");
			context.inputDir = (String) context.getProperty("inputDir");
			context.taxlotpath = (String) context.getProperty("taxlotpath");
			context.contextDir = (String) context.getProperty("contextDir");
			context.password = (String) context.getProperty("password");
			context.filepath_advisor = (String) context
					.getProperty("filepath_advisor");
			context.transactionpath = (String) context
					.getProperty("transactionpath");
			context.positionpath = (String) context.getProperty("positionpath");
			context.securitypath = (String) context.getProperty("securitypath");
			context.accountpath = (String) context.getProperty("accountpath");
			context.username = (String) context.getProperty("username");
			context.localpath = (String) context.getProperty("localpath");
			context.commondb = (String) context.getProperty("commondb");
			context.port = (String) context.getProperty("port");
			context.stagingdb = (String) context.getProperty("stagingdb");
			context.host = (String) context.getProperty("host");
			try {
				context.rowCountStaging = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountStaging"));
			} catch (NumberFormatException e) {
				context.rowCountStaging = null;
			}
			try {
				context.rowCountTSV = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountTSV"));
			} catch (NumberFormatException e) {
				context.rowCountTSV = null;
			}
			try {
				context.rowCountFirm = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountFirm"));
			} catch (NumberFormatException e) {
				context.rowCountFirm = null;
			}
			context.teamPreferenceOption = (String) context
					.getProperty("teamPreferenceOption");
			context.firm = (String) context.getProperty("firm");
			try {
				context.rowCountRejectedFirm = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("rowCountRejectedFirm"));
			} catch (NumberFormatException e) {
				context.rowCountRejectedFirm = null;
			}
			try {
				context.rowCountUpdated = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountUpdated"));
			} catch (NumberFormatException e) {
				context.rowCountUpdated = null;
			}
			context.date = (String) context.getProperty("date");
			context.firmId = (String) context.getProperty("firmId");
			context.firmint3 = (String) context.getProperty("firmint3");
			context.pathforlocal = (String) context.getProperty("pathforlocal");
			context.filestorage = (String) context.getProperty("filestorage");
			try {
				context.a = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("a"));
			} catch (NumberFormatException e) {
				context.a = null;
			}
			try {
				context.b = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("b"));
			} catch (NumberFormatException e) {
				context.b = null;
			}
			try {
				context.c = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("c"));
			} catch (NumberFormatException e) {
				context.c = null;
			}
			try {
				context.d = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("d"));
			} catch (NumberFormatException e) {
				context.d = null;
			}
			try {
				context.e = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("e"));
			} catch (NumberFormatException e) {
				context.e = null;
			}
			try {
				context.f = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("f"));
			} catch (NumberFormatException e) {
				context.f = null;
			}
			try {
				context.g = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("g"));
			} catch (NumberFormatException e) {
				context.g = null;
			}
			context.filestorage2 = (String) context.getProperty("filestorage2");
			try {
				context.firmids = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("firmids"));
			} catch (NumberFormatException e) {
				context.firmids = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("serverIp")) {
				context.serverIp = (String) parentContextMap.get("serverIp");
			}
			if (parentContextMap.containsKey("database")) {
				context.database = (String) parentContextMap.get("database");
			}
			if (parentContextMap.containsKey("custodianpath")) {
				context.custodianpath = (String) parentContextMap
						.get("custodianpath");
			}
			if (parentContextMap.containsKey("inputDir")) {
				context.inputDir = (String) parentContextMap.get("inputDir");
			}
			if (parentContextMap.containsKey("taxlotpath")) {
				context.taxlotpath = (String) parentContextMap
						.get("taxlotpath");
			}
			if (parentContextMap.containsKey("contextDir")) {
				context.contextDir = (String) parentContextMap
						.get("contextDir");
			}
			if (parentContextMap.containsKey("password")) {
				context.password = (String) parentContextMap.get("password");
			}
			if (parentContextMap.containsKey("filepath_advisor")) {
				context.filepath_advisor = (String) parentContextMap
						.get("filepath_advisor");
			}
			if (parentContextMap.containsKey("transactionpath")) {
				context.transactionpath = (String) parentContextMap
						.get("transactionpath");
			}
			if (parentContextMap.containsKey("positionpath")) {
				context.positionpath = (String) parentContextMap
						.get("positionpath");
			}
			if (parentContextMap.containsKey("securitypath")) {
				context.securitypath = (String) parentContextMap
						.get("securitypath");
			}
			if (parentContextMap.containsKey("accountpath")) {
				context.accountpath = (String) parentContextMap
						.get("accountpath");
			}
			if (parentContextMap.containsKey("username")) {
				context.username = (String) parentContextMap.get("username");
			}
			if (parentContextMap.containsKey("localpath")) {
				context.localpath = (String) parentContextMap.get("localpath");
			}
			if (parentContextMap.containsKey("commondb")) {
				context.commondb = (String) parentContextMap.get("commondb");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (String) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("stagingdb")) {
				context.stagingdb = (String) parentContextMap.get("stagingdb");
			}
			if (parentContextMap.containsKey("host")) {
				context.host = (String) parentContextMap.get("host");
			}
			if (parentContextMap.containsKey("rowCountStaging")) {
				context.rowCountStaging = (Integer) parentContextMap
						.get("rowCountStaging");
			}
			if (parentContextMap.containsKey("rowCountTSV")) {
				context.rowCountTSV = (Integer) parentContextMap
						.get("rowCountTSV");
			}
			if (parentContextMap.containsKey("rowCountFirm")) {
				context.rowCountFirm = (Integer) parentContextMap
						.get("rowCountFirm");
			}
			if (parentContextMap.containsKey("teamPreferenceOption")) {
				context.teamPreferenceOption = (String) parentContextMap
						.get("teamPreferenceOption");
			}
			if (parentContextMap.containsKey("firm")) {
				context.firm = (String) parentContextMap.get("firm");
			}
			if (parentContextMap.containsKey("rowCountRejectedFirm")) {
				context.rowCountRejectedFirm = (Integer) parentContextMap
						.get("rowCountRejectedFirm");
			}
			if (parentContextMap.containsKey("rowCountUpdated")) {
				context.rowCountUpdated = (Integer) parentContextMap
						.get("rowCountUpdated");
			}
			if (parentContextMap.containsKey("date")) {
				context.date = (String) parentContextMap.get("date");
			}
			if (parentContextMap.containsKey("firmId")) {
				context.firmId = (String) parentContextMap.get("firmId");
			}
			if (parentContextMap.containsKey("firmint3")) {
				context.firmint3 = (String) parentContextMap.get("firmint3");
			}
			if (parentContextMap.containsKey("pathforlocal")) {
				context.pathforlocal = (String) parentContextMap
						.get("pathforlocal");
			}
			if (parentContextMap.containsKey("filestorage")) {
				context.filestorage = (String) parentContextMap
						.get("filestorage");
			}
			if (parentContextMap.containsKey("a")) {
				context.a = (Boolean) parentContextMap.get("a");
			}
			if (parentContextMap.containsKey("b")) {
				context.b = (Boolean) parentContextMap.get("b");
			}
			if (parentContextMap.containsKey("c")) {
				context.c = (Boolean) parentContextMap.get("c");
			}
			if (parentContextMap.containsKey("d")) {
				context.d = (Boolean) parentContextMap.get("d");
			}
			if (parentContextMap.containsKey("e")) {
				context.e = (Boolean) parentContextMap.get("e");
			}
			if (parentContextMap.containsKey("f")) {
				context.f = (Boolean) parentContextMap.get("f");
			}
			if (parentContextMap.containsKey("g")) {
				context.g = (Boolean) parentContextMap.get("g");
			}
			if (parentContextMap.containsKey("filestorage2")) {
				context.filestorage2 = (String) parentContextMap
						.get("filestorage2");
			}
			if (parentContextMap.containsKey("firmids")) {
				context.firmids = (Integer) parentContextMap.get("firmids");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tAmazonAuroraInput_1_inProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tAmazonAuroraInput_1_in) {
			globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", -1);

			e_tAmazonAuroraInput_1_in.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Advisor_staging_to_firm");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tAmazonAuroraConnection_1_in");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tAmazonAuroraConnection_1_in",
				globalMap.get("conn_tAmazonAuroraConnection_1_in"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 279485 characters generated by Talend Open Studio for Data Integration on the
 * October 24, 2016 5:34:07 PM IST
 ************************************************************************************************/
