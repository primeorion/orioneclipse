// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package reliazedgainloss.realizedgainstagingtofirm_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: RealizedGainStagingToFirm Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.0.20160510_1709
 * @status 
 */
public class RealizedGainStagingToFirm implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (serverIp != null) {

				this.setProperty("serverIp", serverIp.toString());

			}

			if (database != null) {

				this.setProperty("database", database.toString());

			}

			if (filepath_advisor != null) {

				this.setProperty("filepath_advisor",
						filepath_advisor.toString());

			}

			if (positionpath != null) {

				this.setProperty("positionpath", positionpath.toString());

			}

			if (custodianpath != null) {

				this.setProperty("custodianpath", custodianpath.toString());

			}

			if (taxlotpath != null) {

				this.setProperty("taxlotpath", taxlotpath.toString());

			}

			if (transactionpath != null) {

				this.setProperty("transactionpath", transactionpath.toString());

			}

			if (securitypath != null) {

				this.setProperty("securitypath", securitypath.toString());

			}

			if (accountpath != null) {

				this.setProperty("accountpath", accountpath.toString());

			}

			if (inputDir != null) {

				this.setProperty("inputDir", inputDir.toString());

			}

			if (username != null) {

				this.setProperty("username", username.toString());

			}

			if (password != null) {

				this.setProperty("password", password.toString());

			}

			if (contextDir != null) {

				this.setProperty("contextDir", contextDir.toString());

			}

			if (stagingdb != null) {

				this.setProperty("stagingdb", stagingdb.toString());

			}

			if (commondb != null) {

				this.setProperty("commondb", commondb.toString());

			}

			if (localpath != null) {

				this.setProperty("localpath", localpath.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (host != null) {

				this.setProperty("host", host.toString());

			}

			if (teamPreferenceOption != null) {

				this.setProperty("teamPreferenceOption",
						teamPreferenceOption.toString());

			}

			if (rowCountTSV != null) {

				this.setProperty("rowCountTSV", rowCountTSV.toString());

			}

			if (rowCountStaging != null) {

				this.setProperty("rowCountStaging", rowCountStaging.toString());

			}

			if (rowCountFirm != null) {

				this.setProperty("rowCountFirm", rowCountFirm.toString());

			}

			if (firm != null) {

				this.setProperty("firm", firm.toString());

			}

			if (rowCountUpdated != null) {

				this.setProperty("rowCountUpdated", rowCountUpdated.toString());

			}

			if (rowCountRejectedFirm != null) {

				this.setProperty("rowCountRejectedFirm",
						rowCountRejectedFirm.toString());

			}

			if (firmId != null) {

				this.setProperty("firmId", firmId.toString());

			}

			if (date != null) {

				this.setProperty("date", date.toString());

			}

			if (filestorage != null) {

				this.setProperty("filestorage", filestorage.toString());

			}

			if (filestorage2 != null) {

				this.setProperty("filestorage2", filestorage2.toString());

			}

			if (pathforlocal != null) {

				this.setProperty("pathforlocal", pathforlocal.toString());

			}

			if (a != null) {

				this.setProperty("a", a.toString());

			}

			if (b != null) {

				this.setProperty("b", b.toString());

			}

			if (c != null) {

				this.setProperty("c", c.toString());

			}

			if (d != null) {

				this.setProperty("d", d.toString());

			}

			if (e != null) {

				this.setProperty("e", e.toString());

			}

			if (f != null) {

				this.setProperty("f", f.toString());

			}

			if (g != null) {

				this.setProperty("g", g.toString());

			}

			if (firmint3 != null) {

				this.setProperty("firmint3", firmint3.toString());

			}

			if (firmids != null) {

				this.setProperty("firmids", firmids.toString());

			}

			if (RealizedGainLossPath != null) {

				this.setProperty("RealizedGainLossPath",
						RealizedGainLossPath.toString());

			}

			if (currentDate != null) {

				this.setProperty("currentDate", currentDate.toString());

			}

		}

		public String serverIp;

		public String getServerIp() {
			return this.serverIp;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		public String filepath_advisor;

		public String getFilepath_advisor() {
			return this.filepath_advisor;
		}

		public String positionpath;

		public String getPositionpath() {
			return this.positionpath;
		}

		public String custodianpath;

		public String getCustodianpath() {
			return this.custodianpath;
		}

		public String taxlotpath;

		public String getTaxlotpath() {
			return this.taxlotpath;
		}

		public String transactionpath;

		public String getTransactionpath() {
			return this.transactionpath;
		}

		public String securitypath;

		public String getSecuritypath() {
			return this.securitypath;
		}

		public String accountpath;

		public String getAccountpath() {
			return this.accountpath;
		}

		public String inputDir;

		public String getInputDir() {
			return this.inputDir;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String contextDir;

		public String getContextDir() {
			return this.contextDir;
		}

		public String stagingdb;

		public String getStagingdb() {
			return this.stagingdb;
		}

		public String commondb;

		public String getCommondb() {
			return this.commondb;
		}

		public String localpath;

		public String getLocalpath() {
			return this.localpath;
		}

		public String port;

		public String getPort() {
			return this.port;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public String teamPreferenceOption;

		public String getTeamPreferenceOption() {
			return this.teamPreferenceOption;
		}

		public Integer rowCountTSV;

		public Integer getRowCountTSV() {
			return this.rowCountTSV;
		}

		public Integer rowCountStaging;

		public Integer getRowCountStaging() {
			return this.rowCountStaging;
		}

		public Integer rowCountFirm;

		public Integer getRowCountFirm() {
			return this.rowCountFirm;
		}

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		public Integer rowCountUpdated;

		public Integer getRowCountUpdated() {
			return this.rowCountUpdated;
		}

		public Integer rowCountRejectedFirm;

		public Integer getRowCountRejectedFirm() {
			return this.rowCountRejectedFirm;
		}

		public String firmId;

		public String getFirmId() {
			return this.firmId;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String filestorage;

		public String getFilestorage() {
			return this.filestorage;
		}

		public String filestorage2;

		public String getFilestorage2() {
			return this.filestorage2;
		}

		public String pathforlocal;

		public String getPathforlocal() {
			return this.pathforlocal;
		}

		public Boolean a;

		public Boolean getA() {
			return this.a;
		}

		public Boolean b;

		public Boolean getB() {
			return this.b;
		}

		public Boolean c;

		public Boolean getC() {
			return this.c;
		}

		public Boolean d;

		public Boolean getD() {
			return this.d;
		}

		public Boolean e;

		public Boolean getE() {
			return this.e;
		}

		public Boolean f;

		public Boolean getF() {
			return this.f;
		}

		public Boolean g;

		public Boolean getG() {
			return this.g;
		}

		public String firmint3;

		public String getFirmint3() {
			return this.firmint3;
		}

		public Integer firmids;

		public Integer getFirmids() {
			return this.firmids;
		}

		public String RealizedGainLossPath;

		public String getRealizedGainLossPath() {
			return this.RealizedGainLossPath;
		}

		public String currentDate;

		public String getCurrentDate() {
			return this.currentDate;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "RealizedGainStagingToFirm";
	private final String projectName = "RELIAZEDGAINLOSS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_oonPAIZoEeaGfP9wIwAEzw", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					RealizedGainStagingToFirm.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(RealizedGainStagingToFirm.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tWarn_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_8_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_5_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row9_0_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_6_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_7_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_3_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_3_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_3_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_4_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_4_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_4_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_1_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_1_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_1_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_6_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_6_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_6_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_2_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_2_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_2_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_2_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_2_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_2_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_5_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_5_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_5_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_8_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_8_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_8_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_8_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_1_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_1_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_1_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_5_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_5_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_5_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_5_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_6_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_6_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_6_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_6_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_7_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_7_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_7_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_7_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_3_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_3_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_3_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAmazonAuroraOutput_4_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_4_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_4_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_3_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_4_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_2_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_8_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_1_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_5_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_6_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_7_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());

				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */

				/**
				 * [tWarn_1 main ] start
				 */

				currentComponent = "tWarn_1";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread
						.currentThread().getId() + "", "FATAL", "",
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3, "", "");
				tLogCatcher_1.addMessage("tWarn", "tWarn_1", 6,
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3, 42);
				tLogCatcher_1Process(globalMap);
				globalMap.put("tWarn_1_WARN_MESSAGES",
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3);
				globalMap.put("tWarn_1_WARN_PRIORITY", 6);
				globalMap.put("tWarn_1_WARN_CODE", 42);

				tos_count_tWarn_1++;

				/**
				 * [tWarn_1 main ] stop
				 */

				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				/**
				 * [tWarn_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tJavaRow_1 - inputs:(after_tAmazonAuroraInput_3)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 -
				// inputs:(row3) outputs:()
				// linked node: tMap_3 - inputs:(row4,row3)
				// outputs:(firm_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct> getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 main ] start
				 */

				currentComponent = "tJavaRow_1";

				row3.firm = context.firmint3;

				nb_line_tJavaRow_1++;

				tos_count_tJavaRow_1++;

				/**
				 * [tJavaRow_1 main ] stop
				 */

				/**
				 * [tAdvancedHash_row3 main ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				row3Struct row3_HashRow = new row3Struct();

				row3_HashRow.firm = row3.firm;

				tHash_Lookup_row3.put(row3_HashRow);

				tos_count_tAdvancedHash_row3++;

				/**
				 * [tAdvancedHash_row3 main ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_1_SUBPROCESS_STATE", 1);
	}

	public static class row9_0Struct implements
			routines.system.IPersistableComparableLookupRow<row9_0Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9_0Struct other = (row9_0Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row9_0Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row9_0Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9_0Struct row9_0 = new row9_0Struct();

				/**
				 * [tAdvancedHash_row9_0 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9_0", false);
				start_Hash.put("tAdvancedHash_row9_0",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row9_0";

				int tos_count_tAdvancedHash_row9_0 = 0;

				// connection name:row9_0
				// source node:tJavaRow_2 - inputs:(after_tAmazonAuroraInput_4)
				// outputs:(row9_0,row9_0) | target node:tAdvancedHash_row9_0 -
				// inputs:(row9_0) outputs:()
				// linked node: tMap_4 - inputs:(s,row9_0)
				// outputs:(out1,mainout)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9_0 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9_0Struct> tHash_Lookup_row9_0 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row9_0Struct> getLookup(matchingModeEnum_row9_0);

				globalMap.put("tHash_Lookup_row9_0", tHash_Lookup_row9_0);

				/**
				 * [tAdvancedHash_row9_0 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 main ] start
				 */

				currentComponent = "tJavaRow_2";

				row9_0.firm = context.firmint3;

				nb_line_tJavaRow_2++;

				tos_count_tJavaRow_2++;

				/**
				 * [tJavaRow_2 main ] stop
				 */

				/**
				 * [tAdvancedHash_row9_0 main ] start
				 */

				currentComponent = "tAdvancedHash_row9_0";

				row9_0Struct row9_0_HashRow = new row9_0Struct();

				row9_0_HashRow.firm = row9_0.firm;

				tHash_Lookup_row9_0.put(row9_0_HashRow);

				tos_count_tAdvancedHash_row9_0++;

				/**
				 * [tAdvancedHash_row9_0 main ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row9_0 end ] start
				 */

				currentComponent = "tAdvancedHash_row9_0";

				tHash_Lookup_row9_0.endPut();

				ok_Hash.put("tAdvancedHash_row9_0", true);
				end_Hash.put("tAdvancedHash_row9_0", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9_0 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row9_0 finally ] start
				 */

				currentComponent = "tAdvancedHash_row9_0";

				/**
				 * [tAdvancedHash_row9_0 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_2_SUBPROCESS_STATE", 1);
	}

	public static class row_tAmazonAuroraOutput_3_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_3_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_3_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class statCatcherOutputStruct implements
			routines.system.IPersistableRow<statCatcherOutputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(statCatcherOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				statCatcherOutputStruct statCatcherOutput = new statCatcherOutputStruct();
				statCatcherOutputStruct row_tAmazonAuroraOutput_3_in = statCatcherOutput;

				/**
				 * [tAmazonAuroraOutput_3_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_3_out", false);
				start_Hash.put("tAmazonAuroraOutput_3_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_out";

				int tos_count_tAmazonAuroraOutput_3_out = 0;

				int nb_line_tAmazonAuroraOutput_3 = 0;
				int nb_line_update_tAmazonAuroraOutput_3 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_3 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_3 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_3 = 0;

				int deletedCount_tAmazonAuroraOutput_3 = 0;
				int updatedCount_tAmazonAuroraOutput_3 = 0;
				int insertedCount_tAmazonAuroraOutput_3 = 0;

				int rejectedCount_tAmazonAuroraOutput_3 = 0;

				String tableName_tAmazonAuroraOutput_3 = "statcatcher";
				boolean whetherReject_tAmazonAuroraOutput_3 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_3 = calendar_tAmazonAuroraOutput_3
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_3 = calendar_tAmazonAuroraOutput_3
						.getTime().getTime();
				long date_tAmazonAuroraOutput_3;

				java.sql.Connection conn_tAmazonAuroraOutput_3 = null;
				String dbProperties_tAmazonAuroraOutput_3 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_3 = null;
				if (dbProperties_tAmazonAuroraOutput_3 == null
						|| dbProperties_tAmazonAuroraOutput_3.trim().length() == 0) {
					url_tAmazonAuroraOutput_3 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_3 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ properties_tAmazonAuroraOutput_3;
				}
				String driverClass_tAmazonAuroraOutput_3 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_3 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_3 = context.password;

				String dbPwd_tAmazonAuroraOutput_3 = decryptedPassword_tAmazonAuroraOutput_3;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_3);

				conn_tAmazonAuroraOutput_3 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_3,
								dbUser_tAmazonAuroraOutput_3,
								dbPwd_tAmazonAuroraOutput_3);

				resourceMap.put("conn_tAmazonAuroraOutput_3",
						conn_tAmazonAuroraOutput_3);
				conn_tAmazonAuroraOutput_3.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_3 = 10000;
				int commitCounter_tAmazonAuroraOutput_3 = 0;

				int count_tAmazonAuroraOutput_3 = 0;

				String insert_tAmazonAuroraOutput_3 = "INSERT INTO `"
						+ "statcatcher"
						+ "` (`moment`,`project`,`job`,`job_version`,`context`,`message_type`,`message`,`duration`,`firmName`) VALUES (?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_3 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_3 = conn_tAmazonAuroraOutput_3
						.prepareStatement(insert_tAmazonAuroraOutput_3);

				/**
				 * [tAmazonAuroraOutput_3_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_3_in", false);
				start_Hash.put("tAmazonAuroraOutput_3_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_in";

				int tos_count_tAmazonAuroraOutput_3_in = 0;

				/**
				 * [tAmazonAuroraOutput_3_in begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
					String firmName;
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				statCatcherOutputStruct statCatcherOutput_tmp = new statCatcherOutputStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row6.pid = pid;
					row6.root_pid = rootPid;
					row6.father_pid = fatherPid;
					row6.project = projectName;
					row6.job = jobName;
					row6.context = contextStr;
					row6.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row6.message = scm.getMessage();
					row6.duration = scm.getDuration();
					row6.moment = scm.getMoment();
					row6.message_type = scm.getMessageType();
					row6.job_version = scm.getJobVersion();
					row6.job_repository_id = scm.getJobId();
					row6.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tMap_6 main ] start
					 */

					currentComponent = "tMap_6";

					boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_6 = false;
					boolean mainRowRejected_tMap_6 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_6__Struct Var = Var__tMap_6;
						Var.firmName = context.inputDir.substring(
								context.inputDir.indexOf("/") + 1,
								context.inputDir.indexOf("/",
										context.inputDir.indexOf("/") + 1));// ###############################
																			// ###############################
																			// #
																			// Output
																			// tables

						statCatcherOutput = null;

						// # Output table : 'statCatcherOutput'
						statCatcherOutput_tmp.moment = row6.moment;
						statCatcherOutput_tmp.project = row6.project;
						statCatcherOutput_tmp.job = row6.job;
						statCatcherOutput_tmp.job_version = row6.job_version;
						statCatcherOutput_tmp.context = row6.context;
						statCatcherOutput_tmp.message_type = row6.message_type;
						statCatcherOutput_tmp.message = row6.message;
						statCatcherOutput_tmp.duration = row6.duration;
						statCatcherOutput_tmp.firmName = Var.firmName;
						statCatcherOutput = statCatcherOutput_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_6 = false;

					tos_count_tMap_6++;

					/**
					 * [tMap_6 main ] stop
					 */
					// Start of branch "statCatcherOutput"
					if (statCatcherOutput != null) {

						/**
						 * [tAmazonAuroraOutput_3_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_3";

						currentComponent = "tAmazonAuroraOutput_3_in";

						row_tAmazonAuroraOutput_3_in = statCatcherOutput;

						tos_count_tAmazonAuroraOutput_3_in++;

						/**
						 * [tAmazonAuroraOutput_3_in main ] stop
						 */

						/**
						 * [tAmazonAuroraOutput_3_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_3";

						currentComponent = "tAmazonAuroraOutput_3_out";

						whetherReject_tAmazonAuroraOutput_3 = false;
						if (row_tAmazonAuroraOutput_3_in.moment != null) {
							date_tAmazonAuroraOutput_3 = row_tAmazonAuroraOutput_3_in.moment
									.getTime();
							if (date_tAmazonAuroraOutput_3 < year1_tAmazonAuroraOutput_3
									|| date_tAmazonAuroraOutput_3 >= year10000_tAmazonAuroraOutput_3) {
								pstmt_tAmazonAuroraOutput_3.setString(1,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tAmazonAuroraOutput_3.setTimestamp(1,
										new java.sql.Timestamp(
												date_tAmazonAuroraOutput_3));
							}
						} else {
							pstmt_tAmazonAuroraOutput_3.setNull(1,
									java.sql.Types.DATE);
						}

						if (row_tAmazonAuroraOutput_3_in.project == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(2,
									row_tAmazonAuroraOutput_3_in.project);
						}

						if (row_tAmazonAuroraOutput_3_in.job == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(3,
									row_tAmazonAuroraOutput_3_in.job);
						}

						if (row_tAmazonAuroraOutput_3_in.job_version == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(4,
									row_tAmazonAuroraOutput_3_in.job_version);
						}

						if (row_tAmazonAuroraOutput_3_in.context == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(5,
									row_tAmazonAuroraOutput_3_in.context);
						}

						if (row_tAmazonAuroraOutput_3_in.message_type == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(6,
									row_tAmazonAuroraOutput_3_in.message_type);
						}

						if (row_tAmazonAuroraOutput_3_in.message == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(7,
									row_tAmazonAuroraOutput_3_in.message);
						}

						if (row_tAmazonAuroraOutput_3_in.duration == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(8,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_3.setLong(8,
									row_tAmazonAuroraOutput_3_in.duration);
						}

						if (row_tAmazonAuroraOutput_3_in.firmName == null) {
							pstmt_tAmazonAuroraOutput_3.setNull(9,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_3.setString(9,
									row_tAmazonAuroraOutput_3_in.firmName);
						}

						pstmt_tAmazonAuroraOutput_3.addBatch();
						nb_line_tAmazonAuroraOutput_3++;

						batchSizeCounter_tAmazonAuroraOutput_3++;
						if (batchSize_tAmazonAuroraOutput_3 <= batchSizeCounter_tAmazonAuroraOutput_3) {
							try {
								int countSum_tAmazonAuroraOutput_3 = 0;
								for (int countEach_tAmazonAuroraOutput_3 : pstmt_tAmazonAuroraOutput_3
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_3 = 0;
								for (int countEach_tAmazonAuroraOutput_3 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
											: countEach_tAmazonAuroraOutput_3);
								}
								insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tAmazonAuroraOutput_3 = 0;
						}
						commitCounter_tAmazonAuroraOutput_3++;

						if (commitEvery_tAmazonAuroraOutput_3 <= commitCounter_tAmazonAuroraOutput_3) {

							try {
								int countSum_tAmazonAuroraOutput_3 = 0;
								for (int countEach_tAmazonAuroraOutput_3 : pstmt_tAmazonAuroraOutput_3
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_3 = 0;
								for (int countEach_tAmazonAuroraOutput_3 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
											: countEach_tAmazonAuroraOutput_3);
								}
								insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;
								System.err.println(e.getMessage());

							}
							conn_tAmazonAuroraOutput_3.commit();
							commitCounter_tAmazonAuroraOutput_3 = 0;

						}

						tos_count_tAmazonAuroraOutput_3_out++;

						/**
						 * [tAmazonAuroraOutput_3_out main ] stop
						 */

					} // End of branch "statCatcherOutput"

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_in";

				ok_Hash.put("tAmazonAuroraOutput_3_in", true);
				end_Hash.put("tAmazonAuroraOutput_3_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_3_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_3 != 0) {
						int countSum_tAmazonAuroraOutput_3 = 0;

						for (int countEach_tAmazonAuroraOutput_3 : pstmt_tAmazonAuroraOutput_3
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_3 = 0;
					for (int countEach_tAmazonAuroraOutput_3 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
								: countEach_tAmazonAuroraOutput_3);
					}

					insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_3 = 0;

				if (pstmt_tAmazonAuroraOutput_3 != null) {

					pstmt_tAmazonAuroraOutput_3.close();

				}

				if (commitCounter_tAmazonAuroraOutput_3 > 0) {

					conn_tAmazonAuroraOutput_3.commit();

				}

				conn_tAmazonAuroraOutput_3.close();

				resourceMap.put("finish_tAmazonAuroraOutput_3", true);

				nb_line_deleted_tAmazonAuroraOutput_3 = nb_line_deleted_tAmazonAuroraOutput_3
						+ deletedCount_tAmazonAuroraOutput_3;
				nb_line_update_tAmazonAuroraOutput_3 = nb_line_update_tAmazonAuroraOutput_3
						+ updatedCount_tAmazonAuroraOutput_3;
				nb_line_inserted_tAmazonAuroraOutput_3 = nb_line_inserted_tAmazonAuroraOutput_3
						+ insertedCount_tAmazonAuroraOutput_3;
				nb_line_rejected_tAmazonAuroraOutput_3 = nb_line_rejected_tAmazonAuroraOutput_3
						+ rejectedCount_tAmazonAuroraOutput_3;

				globalMap.put("tAmazonAuroraOutput_3_NB_LINE",
						nb_line_tAmazonAuroraOutput_3);
				globalMap.put("tAmazonAuroraOutput_3_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_3);
				globalMap.put("tAmazonAuroraOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_3);
				globalMap.put("tAmazonAuroraOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_3);
				globalMap.put("tAmazonAuroraOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_3);

				ok_Hash.put("tAmazonAuroraOutput_3_out", true);
				end_Hash.put("tAmazonAuroraOutput_3_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_3_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_in";

				/**
				 * [tAmazonAuroraOutput_3_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_3") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_3") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_3")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_3) {
							String errorMessage_tAmazonAuroraOutput_3 = "failed to close the connection in tAmazonAuroraOutput_3 :"
									+ sqlEx_tAmazonAuroraOutput_3.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_3);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_3_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row_tAmazonAuroraOutput_4_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_4_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_4_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class logCatcherOutputStruct implements
			routines.system.IPersistableRow<logCatcherOutputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(logCatcherOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				logCatcherOutputStruct logCatcherOutput = new logCatcherOutputStruct();
				logCatcherOutputStruct row_tAmazonAuroraOutput_4_in = logCatcherOutput;

				/**
				 * [tAmazonAuroraOutput_4_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_4_out", false);
				start_Hash.put("tAmazonAuroraOutput_4_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_4";

				currentComponent = "tAmazonAuroraOutput_4_out";

				int tos_count_tAmazonAuroraOutput_4_out = 0;

				int nb_line_tAmazonAuroraOutput_4 = 0;
				int nb_line_update_tAmazonAuroraOutput_4 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_4 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_4 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_4 = 0;

				int deletedCount_tAmazonAuroraOutput_4 = 0;
				int updatedCount_tAmazonAuroraOutput_4 = 0;
				int insertedCount_tAmazonAuroraOutput_4 = 0;

				int rejectedCount_tAmazonAuroraOutput_4 = 0;

				String tableName_tAmazonAuroraOutput_4 = "logcatcher";
				boolean whetherReject_tAmazonAuroraOutput_4 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_4 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_4 = calendar_tAmazonAuroraOutput_4
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_4 = calendar_tAmazonAuroraOutput_4
						.getTime().getTime();
				long date_tAmazonAuroraOutput_4;

				java.sql.Connection conn_tAmazonAuroraOutput_4 = null;
				String dbProperties_tAmazonAuroraOutput_4 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_4 = null;
				if (dbProperties_tAmazonAuroraOutput_4 == null
						|| dbProperties_tAmazonAuroraOutput_4.trim().length() == 0) {
					url_tAmazonAuroraOutput_4 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_4 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_4
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_4 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_4 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ properties_tAmazonAuroraOutput_4;
				}
				String driverClass_tAmazonAuroraOutput_4 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_4 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_4 = context.password;

				String dbPwd_tAmazonAuroraOutput_4 = decryptedPassword_tAmazonAuroraOutput_4;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_4);

				conn_tAmazonAuroraOutput_4 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_4,
								dbUser_tAmazonAuroraOutput_4,
								dbPwd_tAmazonAuroraOutput_4);

				resourceMap.put("conn_tAmazonAuroraOutput_4",
						conn_tAmazonAuroraOutput_4);
				conn_tAmazonAuroraOutput_4.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_4 = 10000;
				int commitCounter_tAmazonAuroraOutput_4 = 0;

				int count_tAmazonAuroraOutput_4 = 0;

				String insert_tAmazonAuroraOutput_4 = "INSERT INTO `"
						+ "logcatcher"
						+ "` (`moment`,`project`,`job`,`context`,`priority`,`type`,`origin`,`message`,`code`,`firmName`) VALUES (?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_4 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_4 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_4 = conn_tAmazonAuroraOutput_4
						.prepareStatement(insert_tAmazonAuroraOutput_4);

				/**
				 * [tAmazonAuroraOutput_4_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_4_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_4_in", false);
				start_Hash.put("tAmazonAuroraOutput_4_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_4";

				currentComponent = "tAmazonAuroraOutput_4_in";

				int tos_count_tAmazonAuroraOutput_4_in = 0;

				/**
				 * [tAmazonAuroraOutput_4_in begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
					String firmName;
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				logCatcherOutputStruct logCatcherOutput_tmp = new logCatcherOutputStruct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row7.type = lcm.getType();
					row7.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row7.priority = lcm.getPriority();
					row7.message = lcm.getMessage();
					row7.code = lcm.getCode();

					row7.moment = java.util.Calendar.getInstance().getTime();

					row7.pid = pid;
					row7.root_pid = rootPid;
					row7.father_pid = fatherPid;

					row7.project = projectName;
					row7.job = jobName;
					row7.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tMap_7 main ] start
					 */

					currentComponent = "tMap_7";

					boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_7 = false;
					boolean mainRowRejected_tMap_7 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_7__Struct Var = Var__tMap_7;
						Var.firmName = context.inputDir.substring(
								context.inputDir.indexOf("/") + 1,
								context.inputDir.indexOf("/",
										context.inputDir.indexOf("/") + 1));// ###############################
																			// ###############################
																			// #
																			// Output
																			// tables

						logCatcherOutput = null;

						// # Output table : 'logCatcherOutput'
						logCatcherOutput_tmp.moment = row7.moment;
						logCatcherOutput_tmp.project = row7.project;
						logCatcherOutput_tmp.job = row7.job;
						logCatcherOutput_tmp.context = row7.context;
						logCatcherOutput_tmp.priority = row7.priority;
						logCatcherOutput_tmp.type = row7.type;
						logCatcherOutput_tmp.origin = row7.origin;
						logCatcherOutput_tmp.message = row7.message;
						logCatcherOutput_tmp.code = row7.code;
						logCatcherOutput_tmp.firmName = Var.firmName;
						logCatcherOutput = logCatcherOutput_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_7 = false;

					tos_count_tMap_7++;

					/**
					 * [tMap_7 main ] stop
					 */
					// Start of branch "logCatcherOutput"
					if (logCatcherOutput != null) {

						/**
						 * [tAmazonAuroraOutput_4_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_4";

						currentComponent = "tAmazonAuroraOutput_4_in";

						row_tAmazonAuroraOutput_4_in = logCatcherOutput;

						tos_count_tAmazonAuroraOutput_4_in++;

						/**
						 * [tAmazonAuroraOutput_4_in main ] stop
						 */

						/**
						 * [tAmazonAuroraOutput_4_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_4";

						currentComponent = "tAmazonAuroraOutput_4_out";

						whetherReject_tAmazonAuroraOutput_4 = false;
						if (row_tAmazonAuroraOutput_4_in.moment != null) {
							date_tAmazonAuroraOutput_4 = row_tAmazonAuroraOutput_4_in.moment
									.getTime();
							if (date_tAmazonAuroraOutput_4 < year1_tAmazonAuroraOutput_4
									|| date_tAmazonAuroraOutput_4 >= year10000_tAmazonAuroraOutput_4) {
								pstmt_tAmazonAuroraOutput_4.setString(1,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tAmazonAuroraOutput_4.setTimestamp(1,
										new java.sql.Timestamp(
												date_tAmazonAuroraOutput_4));
							}
						} else {
							pstmt_tAmazonAuroraOutput_4.setNull(1,
									java.sql.Types.DATE);
						}

						if (row_tAmazonAuroraOutput_4_in.project == null) {
							pstmt_tAmazonAuroraOutput_4.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_4.setString(2,
									row_tAmazonAuroraOutput_4_in.project);
						}

						if (row_tAmazonAuroraOutput_4_in.job == null) {
							pstmt_tAmazonAuroraOutput_4.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_4.setString(3,
									row_tAmazonAuroraOutput_4_in.job);
						}

						if (row_tAmazonAuroraOutput_4_in.context == null) {
							pstmt_tAmazonAuroraOutput_4.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_4.setString(4,
									row_tAmazonAuroraOutput_4_in.context);
						}

						if (row_tAmazonAuroraOutput_4_in.priority == null) {
							pstmt_tAmazonAuroraOutput_4.setNull(5,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_4.setInt(5,
									row_tAmazonAuroraOutput_4_in.priority);
						}

						if (row_tAmazonAuroraOutput_4_in.type == null) {
							pstmt_tAmazonAuroraOutput_4.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_4.setString(6,
									row_tAmazonAuroraOutput_4_in.type);
						}

						if (row_tAmazonAuroraOutput_4_in.origin == null) {
							pstmt_tAmazonAuroraOutput_4.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_4.setString(7,
									row_tAmazonAuroraOutput_4_in.origin);
						}

						if (row_tAmazonAuroraOutput_4_in.message == null) {
							pstmt_tAmazonAuroraOutput_4.setNull(8,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_4.setString(8,
									row_tAmazonAuroraOutput_4_in.message);
						}

						if (row_tAmazonAuroraOutput_4_in.code == null) {
							pstmt_tAmazonAuroraOutput_4.setNull(9,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_4.setInt(9,
									row_tAmazonAuroraOutput_4_in.code);
						}

						if (row_tAmazonAuroraOutput_4_in.firmName == null) {
							pstmt_tAmazonAuroraOutput_4.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_4.setString(10,
									row_tAmazonAuroraOutput_4_in.firmName);
						}

						pstmt_tAmazonAuroraOutput_4.addBatch();
						nb_line_tAmazonAuroraOutput_4++;

						batchSizeCounter_tAmazonAuroraOutput_4++;
						if (batchSize_tAmazonAuroraOutput_4 <= batchSizeCounter_tAmazonAuroraOutput_4) {
							try {
								int countSum_tAmazonAuroraOutput_4 = 0;
								for (int countEach_tAmazonAuroraOutput_4 : pstmt_tAmazonAuroraOutput_4
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_4 += (countEach_tAmazonAuroraOutput_4 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_4 += countSum_tAmazonAuroraOutput_4;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_4 = 0;
								for (int countEach_tAmazonAuroraOutput_4 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_4 += (countEach_tAmazonAuroraOutput_4 < 0 ? 0
											: countEach_tAmazonAuroraOutput_4);
								}
								insertedCount_tAmazonAuroraOutput_4 += countSum_tAmazonAuroraOutput_4;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tAmazonAuroraOutput_4 = 0;
						}
						commitCounter_tAmazonAuroraOutput_4++;

						if (commitEvery_tAmazonAuroraOutput_4 <= commitCounter_tAmazonAuroraOutput_4) {

							try {
								int countSum_tAmazonAuroraOutput_4 = 0;
								for (int countEach_tAmazonAuroraOutput_4 : pstmt_tAmazonAuroraOutput_4
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_4 += (countEach_tAmazonAuroraOutput_4 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_4 += countSum_tAmazonAuroraOutput_4;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_4 = 0;
								for (int countEach_tAmazonAuroraOutput_4 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_4 += (countEach_tAmazonAuroraOutput_4 < 0 ? 0
											: countEach_tAmazonAuroraOutput_4);
								}
								insertedCount_tAmazonAuroraOutput_4 += countSum_tAmazonAuroraOutput_4;
								System.err.println(e.getMessage());

							}
							conn_tAmazonAuroraOutput_4.commit();
							commitCounter_tAmazonAuroraOutput_4 = 0;

						}

						tos_count_tAmazonAuroraOutput_4_out++;

						/**
						 * [tAmazonAuroraOutput_4_out main ] stop
						 */

					} // End of branch "logCatcherOutput"

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_4_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_4";

				currentComponent = "tAmazonAuroraOutput_4_in";

				ok_Hash.put("tAmazonAuroraOutput_4_in", true);
				end_Hash.put("tAmazonAuroraOutput_4_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_4_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_4_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_4";

				currentComponent = "tAmazonAuroraOutput_4_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_4 != 0) {
						int countSum_tAmazonAuroraOutput_4 = 0;

						for (int countEach_tAmazonAuroraOutput_4 : pstmt_tAmazonAuroraOutput_4
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_4 += (countEach_tAmazonAuroraOutput_4 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_4 += countSum_tAmazonAuroraOutput_4;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_4 = 0;
					for (int countEach_tAmazonAuroraOutput_4 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_4 += (countEach_tAmazonAuroraOutput_4 < 0 ? 0
								: countEach_tAmazonAuroraOutput_4);
					}

					insertedCount_tAmazonAuroraOutput_4 += countSum_tAmazonAuroraOutput_4;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_4 = 0;

				if (pstmt_tAmazonAuroraOutput_4 != null) {

					pstmt_tAmazonAuroraOutput_4.close();

				}

				if (commitCounter_tAmazonAuroraOutput_4 > 0) {

					conn_tAmazonAuroraOutput_4.commit();

				}

				conn_tAmazonAuroraOutput_4.close();

				resourceMap.put("finish_tAmazonAuroraOutput_4", true);

				nb_line_deleted_tAmazonAuroraOutput_4 = nb_line_deleted_tAmazonAuroraOutput_4
						+ deletedCount_tAmazonAuroraOutput_4;
				nb_line_update_tAmazonAuroraOutput_4 = nb_line_update_tAmazonAuroraOutput_4
						+ updatedCount_tAmazonAuroraOutput_4;
				nb_line_inserted_tAmazonAuroraOutput_4 = nb_line_inserted_tAmazonAuroraOutput_4
						+ insertedCount_tAmazonAuroraOutput_4;
				nb_line_rejected_tAmazonAuroraOutput_4 = nb_line_rejected_tAmazonAuroraOutput_4
						+ rejectedCount_tAmazonAuroraOutput_4;

				globalMap.put("tAmazonAuroraOutput_4_NB_LINE",
						nb_line_tAmazonAuroraOutput_4);
				globalMap.put("tAmazonAuroraOutput_4_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_4);
				globalMap.put("tAmazonAuroraOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_4);
				globalMap.put("tAmazonAuroraOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_4);
				globalMap.put("tAmazonAuroraOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_4);

				ok_Hash.put("tAmazonAuroraOutput_4_out", true);
				end_Hash.put("tAmazonAuroraOutput_4_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_4_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_4_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_4";

				currentComponent = "tAmazonAuroraOutput_4_in";

				/**
				 * [tAmazonAuroraOutput_4_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_4_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_4";

				currentComponent = "tAmazonAuroraOutput_4_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_4") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_4") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_4")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_4) {
							String errorMessage_tAmazonAuroraOutput_4 = "failed to close the connection in tAmazonAuroraOutput_4 :"
									+ sqlEx_tAmazonAuroraOutput_4.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_4);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_4_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row3_0Struct implements
			routines.system.IPersistableRow<row3_0Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class firm_connectionStruct implements
			routines.system.IPersistableRow<firm_connectionStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(firm_connectionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_3_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_3_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_3_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_3Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_3_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_3_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_1Process(globalMap);

				row_tAmazonAuroraInput_3_inStruct row_tAmazonAuroraInput_3_in = new row_tAmazonAuroraInput_3_inStruct();
				row_tAmazonAuroraInput_3_inStruct row4 = row_tAmazonAuroraInput_3_in;
				firm_connectionStruct firm_connection = new firm_connectionStruct();
				row3_0Struct row3_0 = new row3_0Struct();

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				firm_connectionStruct firm_connection_tmp = new firm_connectionStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_3_out", false);
				start_Hash.put("tAmazonAuroraInput_3_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				int tos_count_tAmazonAuroraInput_3_out = 0;

				/**
				 * [tAmazonAuroraInput_3_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_3_in", false);
				start_Hash.put("tAmazonAuroraInput_3_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_in";

				int tos_count_tAmazonAuroraInput_3_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_3_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_3_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_3_in = calendar_tAmazonAuroraInput_3_in
						.getTime();
				int nb_line_tAmazonAuroraInput_3_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_3_in = null;
				String driverClass_tAmazonAuroraInput_3_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_3_in);
				String dbUser_tAmazonAuroraInput_3_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_3_in = context.password;

				String dbPwd_tAmazonAuroraInput_3_in = decryptedPassword_tAmazonAuroraInput_3_in;

				String url_tAmazonAuroraInput_3_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_3_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_3_in,
								dbUser_tAmazonAuroraInput_3_in,
								dbPwd_tAmazonAuroraInput_3_in);

				java.sql.Statement stmt_tAmazonAuroraInput_3_in = conn_tAmazonAuroraInput_3_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_3_in = "SELECT `name` , `server` , `database` FROM `orionEclipseFirm`";

				globalMap.put("tAmazonAuroraInput_3_QUERY",
						dbquery_tAmazonAuroraInput_3_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_3_in = null;
				try {
					rs_tAmazonAuroraInput_3_in = stmt_tAmazonAuroraInput_3_in
							.executeQuery(dbquery_tAmazonAuroraInput_3_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_3_in = rs_tAmazonAuroraInput_3_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_3_in = rsmd_tAmazonAuroraInput_3_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_3_in = null;

					while (rs_tAmazonAuroraInput_3_in.next()) {
						nb_line_tAmazonAuroraInput_3_in++;

						if (colQtyInRs_tAmazonAuroraInput_3_in < 1) {
							row_tAmazonAuroraInput_3_in.name = null;
						} else {

							row_tAmazonAuroraInput_3_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 1,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 2) {
							row_tAmazonAuroraInput_3_in.server = null;
						} else {

							row_tAmazonAuroraInput_3_in.server = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 3) {
							row_tAmazonAuroraInput_3_in.database = null;
						} else {

							row_tAmazonAuroraInput_3_in.database = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 3,
											false);
						}

						/**
						 * [tAmazonAuroraInput_3_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_in";

						tos_count_tAmazonAuroraInput_3_in++;

						/**
						 * [tAmazonAuroraInput_3_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_out";

						row4 = row_tAmazonAuroraInput_3_in;

						tos_count_tAmazonAuroraInput_3_out++;

						/**
						 * [tAmazonAuroraInput_3_out main ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row3"
						// /////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							row3HashKey.firm = row4.name;

							row3HashKey.hashCodeDirty = true;

							tHash_Lookup_row3.lookup(row3HashKey);

							if (!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_3 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.firm = '"
							// + row3HashKey.firm + "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							firm_connection = null;

							if (!rejectedInnerJoin_tMap_3) {

								// # Output table : 'firm_connection'
								firm_connection_tmp.server = row4.server;
								firm_connection_tmp.database = row4.database;
								firm_connection = firm_connection_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */
						// Start of branch "firm_connection"
						if (firm_connection != null) {

							/**
							 * [tJavaRow_3 main ] start
							 */

							currentComponent = "tJavaRow_3";

							context.serverIp = firm_connection.server;
							context.database = firm_connection.database;
							context.currentDate = StringHandling.EREPLACE(
									TalendDate.formatDate("yyyy-MM-dd",
											new Date()), "-", "_");

							nb_line_tJavaRow_3++;

							tos_count_tJavaRow_3++;

							/**
							 * [tJavaRow_3 main ] stop
							 */

							/**
							 * [tJava_1 main ] start
							 */

							currentComponent = "tJava_1";

							tos_count_tJava_1++;

							/**
							 * [tJava_1 main ] stop
							 */

						} // End of branch "firm_connection"

						/**
						 * [tAmazonAuroraInput_3_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_3_in != null) {
						rs_tAmazonAuroraInput_3_in.close();
					}
					stmt_tAmazonAuroraInput_3_in.close();
					if (conn_tAmazonAuroraInput_3_in != null
							&& !conn_tAmazonAuroraInput_3_in.isClosed()) {

						conn_tAmazonAuroraInput_3_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_3_NB_LINE",
						nb_line_tAmazonAuroraInput_3_in);

				ok_Hash.put("tAmazonAuroraInput_3_in", true);
				end_Hash.put("tAmazonAuroraInput_3_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_3_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				ok_Hash.put("tAmazonAuroraInput_3_out", true);
				end_Hash.put("tAmazonAuroraInput_3_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_3_out end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tAmazonAuroraInput_4_inProcess(globalMap);

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row3");

			try {

				/**
				 * [tAmazonAuroraInput_3_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_in";

				/**
				 * [tAmazonAuroraInput_3_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				/**
				 * [tAmazonAuroraInput_3_out finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_3_in_SUBPROCESS_STATE", 1);
	}

	public static class row_tAmazonAuroraOutput_5_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_5_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public Double GrossProceeds;

		public Double getGrossProceeds() {
			return this.GrossProceeds;
		}

		public Double NetProceeds;

		public Double getNetProceeds() {
			return this.NetProceeds;
		}

		public Float CostAmount;

		public Float getCostAmount() {
			return this.CostAmount;
		}

		public java.util.Date DateAquired;

		public java.util.Date getDateAquired() {
			return this.DateAquired;
		}

		public java.util.Date SellDate;

		public java.util.Date getSellDate() {
			return this.SellDate;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Boolean LongTerm;

		public Boolean getLongTerm() {
			return this.LongTerm;
		}

		public String SellMethod;

		public String getSellMethod() {
			return this.SellMethod;
		}

		public Float TotalGains;

		public Float getTotalGains() {
			return this.TotalGains;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.GrossProceeds = null;
					} else {
						this.GrossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetProceeds = null;
					} else {
						this.NetProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CostAmount = null;
					} else {
						this.CostAmount = dis.readFloat();
					}

					this.DateAquired = readDate(dis);

					this.SellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.LongTerm = null;
					} else {
						this.LongTerm = dis.readBoolean();
					}

					this.SellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalGains = null;
					} else {
						this.TotalGains = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// Double

				if (this.GrossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.GrossProceeds);
				}

				// Double

				if (this.NetProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.NetProceeds);
				}

				// Float

				if (this.CostAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CostAmount);
				}

				// java.util.Date

				writeDate(this.DateAquired, dos);

				// java.util.Date

				writeDate(this.SellDate, dos);

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Boolean

				if (this.LongTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.LongTerm);
				}

				// String

				writeString(this.SellMethod, dos);

				// Float

				if (this.TotalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalGains);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",GrossProceeds=" + String.valueOf(GrossProceeds));
			sb.append(",NetProceeds=" + String.valueOf(NetProceeds));
			sb.append(",CostAmount=" + String.valueOf(CostAmount));
			sb.append(",DateAquired=" + String.valueOf(DateAquired));
			sb.append(",SellDate=" + String.valueOf(SellDate));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",LongTerm=" + String.valueOf(LongTerm));
			sb.append(",SellMethod=" + SellMethod);
			sb.append(",TotalGains=" + String.valueOf(TotalGains));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_5_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraOutput_6_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_6_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer accountId;

		public Integer getAccountId() {
			return this.accountId;
		}

		public Integer securityId;

		public Integer getSecurityId() {
			return this.securityId;
		}

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public Double grossProceeds;

		public Double getGrossProceeds() {
			return this.grossProceeds;
		}

		public Double netProceeds;

		public Double getNetProceeds() {
			return this.netProceeds;
		}

		public Float costAmount;

		public Float getCostAmount() {
			return this.costAmount;
		}

		public java.util.Date dateAcquired;

		public java.util.Date getDateAcquired() {
			return this.dateAcquired;
		}

		public java.util.Date sellDate;

		public java.util.Date getSellDate() {
			return this.sellDate;
		}

		public Float quantity;

		public Float getQuantity() {
			return this.quantity;
		}

		public Boolean longTerm;

		public Boolean getLongTerm() {
			return this.longTerm;
		}

		public String sellMethod;

		public String getSellMethod() {
			return this.sellMethod;
		}

		public Float totalGains;

		public Float getTotalGains() {
			return this.totalGains;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.accountId = readInteger(dis);

					this.securityId = readInteger(dis);

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.grossProceeds = null;
					} else {
						this.grossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.netProceeds = null;
					} else {
						this.netProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.costAmount = null;
					} else {
						this.costAmount = dis.readFloat();
					}

					this.dateAcquired = readDate(dis);

					this.sellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantity = null;
					} else {
						this.quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.longTerm = null;
					} else {
						this.longTerm = dis.readBoolean();
					}

					this.sellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.totalGains = null;
					} else {
						this.totalGains = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.createdDate = readDate(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.accountId, dos);

				// Integer

				writeInteger(this.securityId, dos);

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// Double

				if (this.grossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.grossProceeds);
				}

				// Double

				if (this.netProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.netProceeds);
				}

				// Float

				if (this.costAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.costAmount);
				}

				// java.util.Date

				writeDate(this.dateAcquired, dos);

				// java.util.Date

				writeDate(this.sellDate, dos);

				// Float

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.quantity);
				}

				// Boolean

				if (this.longTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.longTerm);
				}

				// String

				writeString(this.sellMethod, dos);

				// Float

				if (this.totalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.totalGains);
				}

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// java.util.Date

				writeDate(this.createdDate, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("accountId=" + String.valueOf(accountId));
			sb.append(",securityId=" + String.valueOf(securityId));
			sb.append(",orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",grossProceeds=" + String.valueOf(grossProceeds));
			sb.append(",netProceeds=" + String.valueOf(netProceeds));
			sb.append(",costAmount=" + String.valueOf(costAmount));
			sb.append(",dateAcquired=" + String.valueOf(dateAcquired));
			sb.append(",sellDate=" + String.valueOf(sellDate));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",longTerm=" + String.valueOf(longTerm));
			sb.append(",sellMethod=" + sellMethod);
			sb.append(",totalGains=" + String.valueOf(totalGains));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_6_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraOutput_1_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_1_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String errorStackTrace;

		public String getErrorStackTrace() {
			return this.errorStackTrace;
		}

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public Double GrossProceeds;

		public Double getGrossProceeds() {
			return this.GrossProceeds;
		}

		public Double NetProceeds;

		public Double getNetProceeds() {
			return this.NetProceeds;
		}

		public Float CostAmount;

		public Float getCostAmount() {
			return this.CostAmount;
		}

		public java.util.Date DateAquired;

		public java.util.Date getDateAquired() {
			return this.DateAquired;
		}

		public java.util.Date SellDate;

		public java.util.Date getSellDate() {
			return this.SellDate;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Boolean LongTerm;

		public Boolean getLongTerm() {
			return this.LongTerm;
		}

		public String SellMethod;

		public String getSellMethod() {
			return this.SellMethod;
		}

		public Float TotalGains;

		public Float getTotalGains() {
			return this.TotalGains;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.errorMessage = readString(dis);

					this.errorStackTrace = readString(dis);

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.GrossProceeds = null;
					} else {
						this.GrossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetProceeds = null;
					} else {
						this.NetProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CostAmount = null;
					} else {
						this.CostAmount = dis.readFloat();
					}

					this.DateAquired = readDate(dis);

					this.SellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.LongTerm = null;
					} else {
						this.LongTerm = dis.readBoolean();
					}

					this.SellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalGains = null;
					} else {
						this.TotalGains = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.errorStackTrace, dos);

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// Double

				if (this.GrossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.GrossProceeds);
				}

				// Double

				if (this.NetProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.NetProceeds);
				}

				// Float

				if (this.CostAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CostAmount);
				}

				// java.util.Date

				writeDate(this.DateAquired, dos);

				// java.util.Date

				writeDate(this.SellDate, dos);

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Boolean

				if (this.LongTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.LongTerm);
				}

				// String

				writeString(this.SellMethod, dos);

				// Float

				if (this.TotalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalGains);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorMessage=" + errorMessage);
			sb.append(",errorStackTrace=" + errorStackTrace);
			sb.append(",OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",GrossProceeds=" + String.valueOf(GrossProceeds));
			sb.append(",NetProceeds=" + String.valueOf(NetProceeds));
			sb.append(",CostAmount=" + String.valueOf(CostAmount));
			sb.append(",DateAquired=" + String.valueOf(DateAquired));
			sb.append(",SellDate=" + String.valueOf(SellDate));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",LongTerm=" + String.valueOf(LongTerm));
			sb.append(",SellMethod=" + SellMethod);
			sb.append(",TotalGains=" + String.valueOf(TotalGains));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_1_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ErrorRejectStruct implements
			routines.system.IPersistableRow<ErrorRejectStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public Double GrossProceeds;

		public Double getGrossProceeds() {
			return this.GrossProceeds;
		}

		public Double NetProceeds;

		public Double getNetProceeds() {
			return this.NetProceeds;
		}

		public Float CostAmount;

		public Float getCostAmount() {
			return this.CostAmount;
		}

		public java.util.Date DateAquired;

		public java.util.Date getDateAquired() {
			return this.DateAquired;
		}

		public java.util.Date SellDate;

		public java.util.Date getSellDate() {
			return this.SellDate;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Boolean LongTerm;

		public Boolean getLongTerm() {
			return this.LongTerm;
		}

		public String SellMethod;

		public String getSellMethod() {
			return this.SellMethod;
		}

		public Float TotalGains;

		public Float getTotalGains() {
			return this.TotalGains;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String errorStackTrace;

		public String getErrorStackTrace() {
			return this.errorStackTrace;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.GrossProceeds = null;
					} else {
						this.GrossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetProceeds = null;
					} else {
						this.NetProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CostAmount = null;
					} else {
						this.CostAmount = dis.readFloat();
					}

					this.DateAquired = readDate(dis);

					this.SellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.LongTerm = null;
					} else {
						this.LongTerm = dis.readBoolean();
					}

					this.SellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalGains = null;
					} else {
						this.TotalGains = dis.readFloat();
					}

					this.errorMessage = readString(dis);

					this.errorStackTrace = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// Double

				if (this.GrossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.GrossProceeds);
				}

				// Double

				if (this.NetProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.NetProceeds);
				}

				// Float

				if (this.CostAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CostAmount);
				}

				// java.util.Date

				writeDate(this.DateAquired, dos);

				// java.util.Date

				writeDate(this.SellDate, dos);

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Boolean

				if (this.LongTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.LongTerm);
				}

				// String

				writeString(this.SellMethod, dos);

				// Float

				if (this.TotalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalGains);
				}

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.errorStackTrace, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",GrossProceeds=" + String.valueOf(GrossProceeds));
			sb.append(",NetProceeds=" + String.valueOf(NetProceeds));
			sb.append(",CostAmount=" + String.valueOf(CostAmount));
			sb.append(",DateAquired=" + String.valueOf(DateAquired));
			sb.append(",SellDate=" + String.valueOf(SellDate));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",LongTerm=" + String.valueOf(LongTerm));
			sb.append(",SellMethod=" + SellMethod);
			sb.append(",TotalGains=" + String.valueOf(TotalGains));
			sb.append(",errorMessage=" + errorMessage);
			sb.append(",errorStackTrace=" + errorStackTrace);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ErrorRejectStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class firm_current_reliazedGainLoss_ouputStruct
			implements
			routines.system.IPersistableRow<firm_current_reliazedGainLoss_ouputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer accountId;

		public Integer getAccountId() {
			return this.accountId;
		}

		public Integer securityId;

		public Integer getSecurityId() {
			return this.securityId;
		}

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public Double grossProceeds;

		public Double getGrossProceeds() {
			return this.grossProceeds;
		}

		public Double netProceeds;

		public Double getNetProceeds() {
			return this.netProceeds;
		}

		public Float costAmount;

		public Float getCostAmount() {
			return this.costAmount;
		}

		public java.util.Date dateAcquired;

		public java.util.Date getDateAcquired() {
			return this.dateAcquired;
		}

		public java.util.Date sellDate;

		public java.util.Date getSellDate() {
			return this.sellDate;
		}

		public Float quantity;

		public Float getQuantity() {
			return this.quantity;
		}

		public Boolean longTerm;

		public Boolean getLongTerm() {
			return this.longTerm;
		}

		public String sellMethod;

		public String getSellMethod() {
			return this.sellMethod;
		}

		public Float totalGains;

		public Float getTotalGains() {
			return this.totalGains;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.accountId = readInteger(dis);

					this.securityId = readInteger(dis);

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.grossProceeds = null;
					} else {
						this.grossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.netProceeds = null;
					} else {
						this.netProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.costAmount = null;
					} else {
						this.costAmount = dis.readFloat();
					}

					this.dateAcquired = readDate(dis);

					this.sellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantity = null;
					} else {
						this.quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.longTerm = null;
					} else {
						this.longTerm = dis.readBoolean();
					}

					this.sellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.totalGains = null;
					} else {
						this.totalGains = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.createdDate = readDate(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.accountId, dos);

				// Integer

				writeInteger(this.securityId, dos);

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// Double

				if (this.grossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.grossProceeds);
				}

				// Double

				if (this.netProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.netProceeds);
				}

				// Float

				if (this.costAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.costAmount);
				}

				// java.util.Date

				writeDate(this.dateAcquired, dos);

				// java.util.Date

				writeDate(this.sellDate, dos);

				// Float

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.quantity);
				}

				// Boolean

				if (this.longTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.longTerm);
				}

				// String

				writeString(this.sellMethod, dos);

				// Float

				if (this.totalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.totalGains);
				}

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// java.util.Date

				writeDate(this.createdDate, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("accountId=" + String.valueOf(accountId));
			sb.append(",securityId=" + String.valueOf(securityId));
			sb.append(",orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",grossProceeds=" + String.valueOf(grossProceeds));
			sb.append(",netProceeds=" + String.valueOf(netProceeds));
			sb.append(",costAmount=" + String.valueOf(costAmount));
			sb.append(",dateAcquired=" + String.valueOf(dateAcquired));
			sb.append(",sellDate=" + String.valueOf(sellDate));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",longTerm=" + String.valueOf(longTerm));
			sb.append(",sellMethod=" + sellMethod);
			sb.append(",totalGains=" + String.valueOf(totalGains));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(firm_current_reliazedGainLoss_ouputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class JoinRejectStruct implements
			routines.system.IPersistableRow<JoinRejectStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public Double GrossProceeds;

		public Double getGrossProceeds() {
			return this.GrossProceeds;
		}

		public Double NetProceeds;

		public Double getNetProceeds() {
			return this.NetProceeds;
		}

		public Float CostAmount;

		public Float getCostAmount() {
			return this.CostAmount;
		}

		public java.util.Date DateAquired;

		public java.util.Date getDateAquired() {
			return this.DateAquired;
		}

		public java.util.Date SellDate;

		public java.util.Date getSellDate() {
			return this.SellDate;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Boolean LongTerm;

		public Boolean getLongTerm() {
			return this.LongTerm;
		}

		public String SellMethod;

		public String getSellMethod() {
			return this.SellMethod;
		}

		public Float TotalGains;

		public Float getTotalGains() {
			return this.TotalGains;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.GrossProceeds = null;
					} else {
						this.GrossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetProceeds = null;
					} else {
						this.NetProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CostAmount = null;
					} else {
						this.CostAmount = dis.readFloat();
					}

					this.DateAquired = readDate(dis);

					this.SellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.LongTerm = null;
					} else {
						this.LongTerm = dis.readBoolean();
					}

					this.SellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalGains = null;
					} else {
						this.TotalGains = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// Double

				if (this.GrossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.GrossProceeds);
				}

				// Double

				if (this.NetProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.NetProceeds);
				}

				// Float

				if (this.CostAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CostAmount);
				}

				// java.util.Date

				writeDate(this.DateAquired, dos);

				// java.util.Date

				writeDate(this.SellDate, dos);

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Boolean

				if (this.LongTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.LongTerm);
				}

				// String

				writeString(this.SellMethod, dos);

				// Float

				if (this.TotalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalGains);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",GrossProceeds=" + String.valueOf(GrossProceeds));
			sb.append(",NetProceeds=" + String.valueOf(NetProceeds));
			sb.append(",CostAmount=" + String.valueOf(CostAmount));
			sb.append(",DateAquired=" + String.valueOf(DateAquired));
			sb.append(",SellDate=" + String.valueOf(SellDate));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",LongTerm=" + String.valueOf(LongTerm));
			sb.append(",SellMethod=" + SellMethod);
			sb.append(",TotalGains=" + String.valueOf(TotalGains));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(JoinRejectStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mainoutStruct implements
			routines.system.IPersistableRow<mainoutStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mainoutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sStruct implements
			routines.system.IPersistableRow<sStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_4_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_4_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_4_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_4Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_4Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_4_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tAmazonAuroraInput_7_inProcess(globalMap);
				tAmazonAuroraInput_6_inProcess(globalMap);
				tJavaRow_2Process(globalMap);
				tAmazonAuroraInput_5_inProcess(globalMap);
				tAmazonAuroraInput_1_inProcess(globalMap);

				row_tAmazonAuroraInput_4_inStruct row_tAmazonAuroraInput_4_in = new row_tAmazonAuroraInput_4_inStruct();
				row_tAmazonAuroraInput_4_inStruct row9 = row_tAmazonAuroraInput_4_in;
				sStruct s = new sStruct();
				out1Struct out1 = new out1Struct();
				mainoutStruct mainout = new mainoutStruct();
				ErrorRejectStruct ErrorReject = new ErrorRejectStruct();
				ErrorRejectStruct row_tAmazonAuroraOutput_1_in = ErrorReject;
				firm_current_reliazedGainLoss_ouputStruct firm_current_reliazedGainLoss_ouput = new firm_current_reliazedGainLoss_ouputStruct();
				firm_current_reliazedGainLoss_ouputStruct row_tAmazonAuroraOutput_6_in = firm_current_reliazedGainLoss_ouput;
				JoinRejectStruct JoinReject = new JoinRejectStruct();
				JoinRejectStruct row_tAmazonAuroraOutput_5_in = JoinReject;

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_1_out", false);
				start_Hash.put("tAmazonAuroraOutput_1_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_out";

				int tos_count_tAmazonAuroraOutput_1_out = 0;

				int nb_line_tAmazonAuroraOutput_1 = 0;
				int nb_line_update_tAmazonAuroraOutput_1 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_1 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_1 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_1 = 0;

				int deletedCount_tAmazonAuroraOutput_1 = 0;
				int updatedCount_tAmazonAuroraOutput_1 = 0;
				int insertedCount_tAmazonAuroraOutput_1 = 0;

				int rejectedCount_tAmazonAuroraOutput_1 = 0;

				String tableName_tAmazonAuroraOutput_1 = "importError_ReliazedGainLoss";
				boolean whetherReject_tAmazonAuroraOutput_1 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_1 = calendar_tAmazonAuroraOutput_1
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_1 = calendar_tAmazonAuroraOutput_1
						.getTime().getTime();
				long date_tAmazonAuroraOutput_1;

				java.sql.Connection conn_tAmazonAuroraOutput_1 = null;
				String dbProperties_tAmazonAuroraOutput_1 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_1 = null;
				if (dbProperties_tAmazonAuroraOutput_1 == null
						|| dbProperties_tAmazonAuroraOutput_1.trim().length() == 0) {
					url_tAmazonAuroraOutput_1 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_1 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_1;
				}
				String driverClass_tAmazonAuroraOutput_1 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_1 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_1 = context.password;

				String dbPwd_tAmazonAuroraOutput_1 = decryptedPassword_tAmazonAuroraOutput_1;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_1);

				conn_tAmazonAuroraOutput_1 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_1,
								dbUser_tAmazonAuroraOutput_1,
								dbPwd_tAmazonAuroraOutput_1);

				resourceMap.put("conn_tAmazonAuroraOutput_1",
						conn_tAmazonAuroraOutput_1);
				conn_tAmazonAuroraOutput_1.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_1 = 10000;
				int commitCounter_tAmazonAuroraOutput_1 = 0;

				int count_tAmazonAuroraOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonAuroraOutput_1 = conn_tAmazonAuroraOutput_1
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonAuroraOutput_1 = dbMetaData_tAmazonAuroraOutput_1
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonAuroraOutput_1 = false;
				while (rsTable_tAmazonAuroraOutput_1.next()) {
					String table_tAmazonAuroraOutput_1 = rsTable_tAmazonAuroraOutput_1
							.getString("TABLE_NAME");
					if (table_tAmazonAuroraOutput_1
							.equalsIgnoreCase("importError_ReliazedGainLoss")) {
						whetherExist_tAmazonAuroraOutput_1 = true;
						break;
					}
				}
				rsTable_tAmazonAuroraOutput_1.close();
				if (!whetherExist_tAmazonAuroraOutput_1) {
					java.sql.Statement stmtCreate_tAmazonAuroraOutput_1 = conn_tAmazonAuroraOutput_1
							.createStatement();
					stmtCreate_tAmazonAuroraOutput_1
							.execute("CREATE TABLE `"
									+ tableName_tAmazonAuroraOutput_1
									+ "`(`errorMessage` VARCHAR(2555)  ,`errorStackTrace` VARCHAR(2555)  ,`OrionFirmId` INT(11)  ,`ExternalId` INT(11)  ,`Symbol` VARCHAR(100)  ,`AccountId` VARCHAR(255)  ,`AccountNumber` VARCHAR(255)  ,`GrossProceeds` DOUBLE(22,2)  ,`NetProceeds` DOUBLE(22,2)  ,`CostAmount` FLOAT(22,2)  ,`DateAquired` DATETIME ,`SellDate` DATETIME ,`Quantity` FLOAT(22,7)  ,`LongTerm` BIT(0)  ,`SellMethod` VARCHAR(255)  ,`TotalGains` FLOAT(22,2)  )");
					stmtCreate_tAmazonAuroraOutput_1.close();
				}

				String insert_tAmazonAuroraOutput_1 = "INSERT INTO `"
						+ "importError_ReliazedGainLoss"
						+ "` (`errorMessage`,`errorStackTrace`,`OrionFirmId`,`ExternalId`,`Symbol`,`AccountId`,`AccountNumber`,`GrossProceeds`,`NetProceeds`,`CostAmount`,`DateAquired`,`SellDate`,`Quantity`,`LongTerm`,`SellMethod`,`TotalGains`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_1 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_1 = conn_tAmazonAuroraOutput_1
						.prepareStatement(insert_tAmazonAuroraOutput_1);

				/**
				 * [tAmazonAuroraOutput_1_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_1_in", false);
				start_Hash.put("tAmazonAuroraOutput_1_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_in";

				int tos_count_tAmazonAuroraOutput_1_in = 0;

				/**
				 * [tAmazonAuroraOutput_1_in begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_6_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_6_out", false);
				start_Hash.put("tAmazonAuroraOutput_6_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_6";

				currentComponent = "tAmazonAuroraOutput_6_out";

				int tos_count_tAmazonAuroraOutput_6_out = 0;

				int nb_line_tAmazonAuroraOutput_6 = 0;
				int nb_line_update_tAmazonAuroraOutput_6 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_6 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_6 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_6 = 0;

				int deletedCount_tAmazonAuroraOutput_6 = 0;
				int updatedCount_tAmazonAuroraOutput_6 = 0;
				int insertedCount_tAmazonAuroraOutput_6 = 0;

				int rejectedCount_tAmazonAuroraOutput_6 = 0;

				String tableName_tAmazonAuroraOutput_6 = "reliazedgainloss_"
						+ context.currentDate;
				boolean whetherReject_tAmazonAuroraOutput_6 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_6 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_6.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_6 = calendar_tAmazonAuroraOutput_6
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_6.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_6 = calendar_tAmazonAuroraOutput_6
						.getTime().getTime();
				long date_tAmazonAuroraOutput_6;

				java.sql.Connection conn_tAmazonAuroraOutput_6 = null;
				String dbProperties_tAmazonAuroraOutput_6 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_6 = null;
				if (dbProperties_tAmazonAuroraOutput_6 == null
						|| dbProperties_tAmazonAuroraOutput_6.trim().length() == 0) {
					url_tAmazonAuroraOutput_6 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_6 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_6
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_6 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_6 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_6;
				}
				String driverClass_tAmazonAuroraOutput_6 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_6 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_6 = context.password;

				String dbPwd_tAmazonAuroraOutput_6 = decryptedPassword_tAmazonAuroraOutput_6;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_6);

				conn_tAmazonAuroraOutput_6 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_6,
								dbUser_tAmazonAuroraOutput_6,
								dbPwd_tAmazonAuroraOutput_6);

				resourceMap.put("conn_tAmazonAuroraOutput_6",
						conn_tAmazonAuroraOutput_6);
				conn_tAmazonAuroraOutput_6.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_6 = 10000;
				int commitCounter_tAmazonAuroraOutput_6 = 0;

				int count_tAmazonAuroraOutput_6 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonAuroraOutput_6 = conn_tAmazonAuroraOutput_6
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonAuroraOutput_6 = dbMetaData_tAmazonAuroraOutput_6
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonAuroraOutput_6 = false;
				while (rsTable_tAmazonAuroraOutput_6.next()) {
					String table_tAmazonAuroraOutput_6 = rsTable_tAmazonAuroraOutput_6
							.getString("TABLE_NAME");
					if (table_tAmazonAuroraOutput_6
							.equalsIgnoreCase("reliazedgainloss_"
									+ context.currentDate)) {
						whetherExist_tAmazonAuroraOutput_6 = true;
						break;
					}
				}
				rsTable_tAmazonAuroraOutput_6.close();
				if (whetherExist_tAmazonAuroraOutput_6) {
					java.sql.Statement stmtDrop_tAmazonAuroraOutput_6 = conn_tAmazonAuroraOutput_6
							.createStatement();
					stmtDrop_tAmazonAuroraOutput_6.execute("DROP TABLE `"
							+ tableName_tAmazonAuroraOutput_6 + "`");
					stmtDrop_tAmazonAuroraOutput_6.close();
				}
				java.sql.Statement stmtCreate_tAmazonAuroraOutput_6 = conn_tAmazonAuroraOutput_6
						.createStatement();
				stmtCreate_tAmazonAuroraOutput_6
						.execute("CREATE TABLE `"
								+ tableName_tAmazonAuroraOutput_6
								+ "`(`accountId` INT(255)  ,`securityId` INT(10)  ,`orionFirmId` INT(10)  ,`externalId` INT(10)  ,`grossProceeds` DOUBLE(22,2)  ,`netProceeds` DOUBLE(22,2)  ,`costAmount` FLOAT(22,2)  ,`dateAcquired` DATETIME ,`sellDate` DATETIME ,`quantity` FLOAT(22,7)  ,`longTerm` BIT(1)  ,`sellMethod` VARCHAR(255)  ,`totalGains` FLOAT(22,2)  ,`isDeleted` BIT(0)  ,`createdDate` DATETIME ,`createdBy` INT(11)  ,`editedDate` DATETIME ,`editedBy` INT(11)  )");
				stmtCreate_tAmazonAuroraOutput_6.close();

				String insert_tAmazonAuroraOutput_6 = "INSERT INTO `"
						+ "reliazedgainloss_"
						+ context.currentDate
						+ "` (`accountId`,`securityId`,`orionFirmId`,`externalId`,`grossProceeds`,`netProceeds`,`costAmount`,`dateAcquired`,`sellDate`,`quantity`,`longTerm`,`sellMethod`,`totalGains`,`isDeleted`,`createdDate`,`createdBy`,`editedDate`,`editedBy`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_6 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_6 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_6 = conn_tAmazonAuroraOutput_6
						.prepareStatement(insert_tAmazonAuroraOutput_6);

				/**
				 * [tAmazonAuroraOutput_6_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_6_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_6_in", false);
				start_Hash.put("tAmazonAuroraOutput_6_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_6";

				currentComponent = "tAmazonAuroraOutput_6_in";

				int tos_count_tAmazonAuroraOutput_6_in = 0;

				/**
				 * [tAmazonAuroraOutput_6_in begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_5_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_5_out", false);
				start_Hash.put("tAmazonAuroraOutput_5_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_5";

				currentComponent = "tAmazonAuroraOutput_5_out";

				int tos_count_tAmazonAuroraOutput_5_out = 0;

				int nb_line_tAmazonAuroraOutput_5 = 0;
				int nb_line_update_tAmazonAuroraOutput_5 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_5 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_5 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_5 = 0;

				int deletedCount_tAmazonAuroraOutput_5 = 0;
				int updatedCount_tAmazonAuroraOutput_5 = 0;
				int insertedCount_tAmazonAuroraOutput_5 = 0;

				int rejectedCount_tAmazonAuroraOutput_5 = 0;

				String tableName_tAmazonAuroraOutput_5 = "noDataFound_ReliazedGainLoss";
				boolean whetherReject_tAmazonAuroraOutput_5 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_5 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_5 = calendar_tAmazonAuroraOutput_5
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_5 = calendar_tAmazonAuroraOutput_5
						.getTime().getTime();
				long date_tAmazonAuroraOutput_5;

				java.sql.Connection conn_tAmazonAuroraOutput_5 = null;
				String dbProperties_tAmazonAuroraOutput_5 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_5 = null;
				if (dbProperties_tAmazonAuroraOutput_5 == null
						|| dbProperties_tAmazonAuroraOutput_5.trim().length() == 0) {
					url_tAmazonAuroraOutput_5 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_5 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_5
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_5 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_5 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_5;
				}
				String driverClass_tAmazonAuroraOutput_5 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_5 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_5 = context.password;

				String dbPwd_tAmazonAuroraOutput_5 = decryptedPassword_tAmazonAuroraOutput_5;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_5);

				conn_tAmazonAuroraOutput_5 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_5,
								dbUser_tAmazonAuroraOutput_5,
								dbPwd_tAmazonAuroraOutput_5);

				resourceMap.put("conn_tAmazonAuroraOutput_5",
						conn_tAmazonAuroraOutput_5);
				conn_tAmazonAuroraOutput_5.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_5 = 10000;
				int commitCounter_tAmazonAuroraOutput_5 = 0;

				int count_tAmazonAuroraOutput_5 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonAuroraOutput_5 = conn_tAmazonAuroraOutput_5
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonAuroraOutput_5 = dbMetaData_tAmazonAuroraOutput_5
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonAuroraOutput_5 = false;
				while (rsTable_tAmazonAuroraOutput_5.next()) {
					String table_tAmazonAuroraOutput_5 = rsTable_tAmazonAuroraOutput_5
							.getString("TABLE_NAME");
					if (table_tAmazonAuroraOutput_5
							.equalsIgnoreCase("noDataFound_ReliazedGainLoss")) {
						whetherExist_tAmazonAuroraOutput_5 = true;
						break;
					}
				}
				rsTable_tAmazonAuroraOutput_5.close();
				if (!whetherExist_tAmazonAuroraOutput_5) {
					java.sql.Statement stmtCreate_tAmazonAuroraOutput_5 = conn_tAmazonAuroraOutput_5
							.createStatement();
					stmtCreate_tAmazonAuroraOutput_5
							.execute("CREATE TABLE `"
									+ tableName_tAmazonAuroraOutput_5
									+ "`(`OrionFirmId` INT(11)  ,`ExternalId` INT(11)  ,`Symbol` VARCHAR(100)  ,`AccountId` VARCHAR(255)  ,`AccountNumber` VARCHAR(255)  ,`GrossProceeds` DOUBLE(22,2)  ,`NetProceeds` DOUBLE(22,2)  ,`CostAmount` FLOAT(22,2)  ,`DateAquired` DATETIME ,`SellDate` DATETIME ,`Quantity` FLOAT(22,7)  ,`LongTerm` BIT(0)  ,`SellMethod` VARCHAR(255)  ,`TotalGains` FLOAT(22,2)  )");
					stmtCreate_tAmazonAuroraOutput_5.close();
				}

				String insert_tAmazonAuroraOutput_5 = "INSERT INTO `"
						+ "noDataFound_ReliazedGainLoss"
						+ "` (`OrionFirmId`,`ExternalId`,`Symbol`,`AccountId`,`AccountNumber`,`GrossProceeds`,`NetProceeds`,`CostAmount`,`DateAquired`,`SellDate`,`Quantity`,`LongTerm`,`SellMethod`,`TotalGains`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_5 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_5 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_5 = conn_tAmazonAuroraOutput_5
						.prepareStatement(insert_tAmazonAuroraOutput_5);

				/**
				 * [tAmazonAuroraOutput_5_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_5_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_5_in", false);
				start_Hash.put("tAmazonAuroraOutput_5_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_5";

				currentComponent = "tAmazonAuroraOutput_5_in";

				int tos_count_tAmazonAuroraOutput_5_in = 0;

				/**
				 * [tAmazonAuroraOutput_5_in begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) globalMap
						.get("tHash_Lookup_row1"));

				row1Struct row1HashKey = new row1Struct();
				row1Struct row1Default = new row1Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) globalMap
						.get("tHash_Lookup_row11"));

				row11Struct row11HashKey = new row11Struct();
				row11Struct row11Default = new row11Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ErrorRejectStruct ErrorReject_tmp = new ErrorRejectStruct();
				firm_current_reliazedGainLoss_ouputStruct firm_current_reliazedGainLoss_ouput_tmp = new firm_current_reliazedGainLoss_ouputStruct();
				JoinRejectStruct JoinReject_tmp = new JoinRejectStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9_0Struct> tHash_Lookup_row9_0 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9_0Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9_0Struct>) globalMap
						.get("tHash_Lookup_row9_0"));

				row9_0Struct row9_0HashKey = new row9_0Struct();
				row9_0Struct row9_0Default = new row9_0Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				mainoutStruct mainout_tmp = new mainoutStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
						.get("tHash_Lookup_row10"));

				row10Struct row10HashKey = new row10Struct();
				row10Struct row10Default = new row10Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				sStruct s_tmp = new sStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_4_out", false);
				start_Hash.put("tAmazonAuroraInput_4_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				int tos_count_tAmazonAuroraInput_4_out = 0;

				/**
				 * [tAmazonAuroraInput_4_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_4_in", false);
				start_Hash.put("tAmazonAuroraInput_4_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_in";

				int tos_count_tAmazonAuroraInput_4_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_4_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_4_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_4_in = calendar_tAmazonAuroraInput_4_in
						.getTime();
				int nb_line_tAmazonAuroraInput_4_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_4_in = null;
				String driverClass_tAmazonAuroraInput_4_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_4_in);
				String dbUser_tAmazonAuroraInput_4_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_4_in = context.password;

				String dbPwd_tAmazonAuroraInput_4_in = decryptedPassword_tAmazonAuroraInput_4_in;

				String url_tAmazonAuroraInput_4_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_4_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_4_in,
								dbUser_tAmazonAuroraInput_4_in,
								dbPwd_tAmazonAuroraInput_4_in);

				java.sql.Statement stmt_tAmazonAuroraInput_4_in = conn_tAmazonAuroraInput_4_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_4_in = "select distinct OrionFirmId from realizedgainloss_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_4_QUERY",
						dbquery_tAmazonAuroraInput_4_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_4_in = null;
				try {
					rs_tAmazonAuroraInput_4_in = stmt_tAmazonAuroraInput_4_in
							.executeQuery(dbquery_tAmazonAuroraInput_4_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_4_in = rs_tAmazonAuroraInput_4_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_4_in = rsmd_tAmazonAuroraInput_4_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_4_in = null;

					while (rs_tAmazonAuroraInput_4_in.next()) {
						nb_line_tAmazonAuroraInput_4_in++;

						if (colQtyInRs_tAmazonAuroraInput_4_in < 1) {
							row_tAmazonAuroraInput_4_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_4_in.getObject(1) != null) {
								row_tAmazonAuroraInput_4_in.OrionFirmId = rs_tAmazonAuroraInput_4_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_4_in.OrionFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_4_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_in";

						tos_count_tAmazonAuroraInput_4_in++;

						/**
						 * [tAmazonAuroraInput_4_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_out";

						row9 = row_tAmazonAuroraInput_4_in;

						tos_count_tAmazonAuroraInput_4_out++;

						/**
						 * [tAmazonAuroraInput_4_out main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row10"
						// /////////////////////////////////////////////

						boolean forceLooprow10 = false;

						row10Struct row10ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row10HashKey.orionConnectFirmId = row9.OrionFirmId;

							row10HashKey.hashCodeDirty = true;

							tHash_Lookup_row10.lookup(row10HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row10 != null
								&& tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.orionConnectFirmId = '"
							// + row10HashKey.orionConnectFirmId + "'");
						} // G 071

						row10Struct row10 = null;

						row10Struct fromLookup_row10 = null;
						row10 = row10Default;

						if (tHash_Lookup_row10 != null
								&& tHash_Lookup_row10.hasNext()) { // G 099

							fromLookup_row10 = tHash_Lookup_row10.next();

						} // G 099

						if (fromLookup_row10 != null) {
							row10 = fromLookup_row10;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							s = null;

							// # Output table : 's'
							s_tmp.OrionFirmId = row9.OrionFirmId;
							s_tmp.orionEclipseFirmName = row10.orionEclipseFirmName;
							s = s_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "s"
						if (s != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row9_0"
							// /////////////////////////////////////////////

							boolean forceLooprow9_0 = false;

							row9_0Struct row9_0ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								row9_0HashKey.firm = s.orionEclipseFirmName;

								row9_0HashKey.hashCodeDirty = true;

								tHash_Lookup_row9_0.lookup(row9_0HashKey);

								if (!tHash_Lookup_row9_0.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_4 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row9_0 != null
									&& tHash_Lookup_row9_0
											.getCount(row9_0HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9_0' and it contains more one result from keys :  row9_0.firm = '"
								// + row9_0HashKey.firm + "'");
							} // G 071

							row9_0Struct row9_0 = null;

							row9_0Struct fromLookup_row9_0 = null;
							row9_0 = row9_0Default;

							if (tHash_Lookup_row9_0 != null
									&& tHash_Lookup_row9_0.hasNext()) { // G 099

								fromLookup_row9_0 = tHash_Lookup_row9_0.next();

							} // G 099

							if (fromLookup_row9_0 != null) {
								row9_0 = fromLookup_row9_0;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								mainout = null;
								out1 = null;

								if (!rejectedInnerJoin_tMap_4) {

									// # Output table : 'mainout'
									mainout_tmp.firm = s.OrionFirmId;
									mainout = mainout_tmp;
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'out1'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_4) {
									out1_tmp.firm = s.OrionFirmId;
									out1 = out1_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */
							// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tJavaRow_4 main ] start
								 */

								currentComponent = "tJavaRow_4";

								context.firmids = out1.firm;

								nb_line_tJavaRow_4++;

								tos_count_tJavaRow_4++;

								/**
								 * [tJavaRow_4 main ] stop
								 */

							} // End of branch "out1"

							// Start of branch "mainout"
							if (mainout != null) {

								/**
								 * [tMap_5 main ] start
								 */

								currentComponent = "tMap_5";

								boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_5 = false;
								boolean mainRowRejected_tMap_5 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row1"
								// /////////////////////////////////////////////

								boolean forceLooprow1 = false;

								row1Struct row1ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_5 = false;

									row1HashKey.OrionFirmId = mainout.firm;

									row1HashKey.hashCodeDirty = true;

									tHash_Lookup_row1.lookup(row1HashKey);

									if (!tHash_Lookup_row1.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_5 = true;

										forceLooprow1 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow1 = true;
								} // G 21

								row1Struct row1 = null;

								while ((tHash_Lookup_row1 != null && tHash_Lookup_row1
										.hasNext()) || forceLooprow1) { // G_TM_M_043

									// CALL close loop of lookup 'row1'

									row1Struct fromLookup_row1 = null;
									row1 = row1Default;

									if (!forceLooprow1) { // G 46

										fromLookup_row1 = tHash_Lookup_row1
												.next();

										if (fromLookup_row1 != null) {
											row1 = fromLookup_row1;
										}

									} // G 46

									forceLooprow1 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row2"
									// /////////////////////////////////////////////

									boolean forceLooprow2 = false;

									row2Struct row2ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_5 = false;

										row2HashKey.symbol = row1.Symbol;

										row2HashKey.hashCodeDirty = true;

										tHash_Lookup_row2.lookup(row2HashKey);

										if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_5 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									if (tHash_Lookup_row2 != null
											&& tHash_Lookup_row2
													.getCount(row2HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.symbol = '"
										// + row2HashKey.symbol + "'");
									} // G 071

									row2Struct row2 = null;

									row2Struct fromLookup_row2 = null;
									row2 = row2Default;

									if (tHash_Lookup_row2 != null
											&& tHash_Lookup_row2.hasNext()) { // G
																				// 099

										fromLookup_row2 = tHash_Lookup_row2
												.next();

									} // G 099

									if (fromLookup_row2 != null) {
										row2 = fromLookup_row2;
									}

									// /////////////////////////////////////////////
									// Starting Lookup Table "row11"
									// /////////////////////////////////////////////

									boolean forceLooprow11 = false;

									row11Struct row11ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_5 = false;

										row11HashKey.accountId = row1.AccountId;

										row11HashKey.hashCodeDirty = true;

										tHash_Lookup_row11.lookup(row11HashKey);

										if (!tHash_Lookup_row11.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_5 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									if (tHash_Lookup_row11 != null
											&& tHash_Lookup_row11
													.getCount(row11HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.accountId = '"
										// + row11HashKey.accountId + "'");
									} // G 071

									row11Struct row11 = null;

									row11Struct fromLookup_row11 = null;
									row11 = row11Default;

									if (tHash_Lookup_row11 != null
											&& tHash_Lookup_row11.hasNext()) { // G
																				// 099

										fromLookup_row11 = tHash_Lookup_row11
												.next();

									} // G 099

									if (fromLookup_row11 != null) {
										row11 = fromLookup_row11;
									}

									try {
										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
											// ###############################
											// # Output tables

											ErrorReject = null;
											firm_current_reliazedGainLoss_ouput = null;
											JoinReject = null;

											if (!rejectedInnerJoin_tMap_5) {

												// # Output table :
												// 'firm_current_reliazedGainLoss_ouput'
												firm_current_reliazedGainLoss_ouput_tmp.accountId = row11.id;
												firm_current_reliazedGainLoss_ouput_tmp.securityId = row2.id;
												firm_current_reliazedGainLoss_ouput_tmp.orionFirmId = row1.OrionFirmId;
												firm_current_reliazedGainLoss_ouput_tmp.externalId = row1.ExternalId;
												firm_current_reliazedGainLoss_ouput_tmp.grossProceeds = row1.GrossProceeds;
												firm_current_reliazedGainLoss_ouput_tmp.netProceeds = row1.NetProceeds;
												firm_current_reliazedGainLoss_ouput_tmp.costAmount = row1.CostAmount;
												firm_current_reliazedGainLoss_ouput_tmp.dateAcquired = row1.DateAquired;
												firm_current_reliazedGainLoss_ouput_tmp.sellDate = row1.SellDate;
												firm_current_reliazedGainLoss_ouput_tmp.quantity = row1.Quantity;
												firm_current_reliazedGainLoss_ouput_tmp.longTerm = row1.LongTerm;
												firm_current_reliazedGainLoss_ouput_tmp.sellMethod = row1.SellMethod;
												firm_current_reliazedGainLoss_ouput_tmp.totalGains = row1.TotalGains;
												firm_current_reliazedGainLoss_ouput_tmp.isDeleted = null;
												firm_current_reliazedGainLoss_ouput_tmp.createdDate = TalendDate
														.getCurrentDate();
												firm_current_reliazedGainLoss_ouput_tmp.createdBy = 1;
												firm_current_reliazedGainLoss_ouput_tmp.editedDate = TalendDate
														.getCurrentDate();
												firm_current_reliazedGainLoss_ouput_tmp.editedBy = 1;
												firm_current_reliazedGainLoss_ouput = firm_current_reliazedGainLoss_ouput_tmp;
											} // closing inner join bracket (1)
												// ###### START REJECTS #####

											// # Output reject table :
											// 'JoinReject'
											// # Filter conditions
											if (rejectedInnerJoin_tMap_5) {
												JoinReject_tmp.OrionFirmId = row1.OrionFirmId;
												JoinReject_tmp.ExternalId = row1.ExternalId;
												JoinReject_tmp.Symbol = row1.Symbol;
												JoinReject_tmp.AccountId = row1.AccountId;
												JoinReject_tmp.AccountNumber = row1.AccountNumber;
												JoinReject_tmp.GrossProceeds = row1.GrossProceeds;
												JoinReject_tmp.NetProceeds = row1.NetProceeds;
												JoinReject_tmp.CostAmount = row1.CostAmount;
												JoinReject_tmp.DateAquired = row1.DateAquired;
												JoinReject_tmp.SellDate = row1.SellDate;
												JoinReject_tmp.Quantity = row1.Quantity;
												JoinReject_tmp.LongTerm = row1.LongTerm;
												JoinReject_tmp.SellMethod = row1.SellMethod;
												JoinReject_tmp.TotalGains = row1.TotalGains;
												JoinReject = JoinReject_tmp;
											} // closing filter/reject
												// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_5 = false;

									} catch (java.lang.Exception e) {
										// if anohter java.lang.Exception when
										// processing an java.lang.Exception

										try {// EE
											Var__tMap_5__Struct Var = Var__tMap_5;

											ErrorReject_tmp.OrionFirmId = row1.OrionFirmId;
											ErrorReject_tmp.ExternalId = row1.ExternalId;
											ErrorReject_tmp.Symbol = row1.Symbol;
											ErrorReject_tmp.AccountId = row1.AccountId;
											ErrorReject_tmp.AccountNumber = row1.AccountNumber;
											ErrorReject_tmp.GrossProceeds = row1.GrossProceeds;
											ErrorReject_tmp.NetProceeds = row1.NetProceeds;
											ErrorReject_tmp.CostAmount = row1.CostAmount;
											ErrorReject_tmp.DateAquired = row1.DateAquired;
											ErrorReject_tmp.SellDate = row1.SellDate;
											ErrorReject_tmp.Quantity = row1.Quantity;
											ErrorReject_tmp.LongTerm = row1.LongTerm;
											ErrorReject_tmp.SellMethod = row1.SellMethod;
											ErrorReject_tmp.TotalGains = row1.TotalGains;
											ErrorReject = ErrorReject_tmp;
											ErrorReject.errorMessage = e
													.getMessage();
											ErrorReject.errorStackTrace = ResumeUtil
													.getExceptionStackTrace(e);

											firm_current_reliazedGainLoss_ouput = null;
											JoinReject = null;
										} catch (java.lang.Exception ee) {// EE

											ee.printStackTrace();
											firm_current_reliazedGainLoss_ouput = null;
											JoinReject = null;
										}// EE
									}// end catch

									tos_count_tMap_5++;

									/**
									 * [tMap_5 main ] stop
									 */
									// Start of branch "ErrorReject"
									if (ErrorReject != null) {

										/**
										 * [tAmazonAuroraOutput_1_in main ]
										 * start
										 */

										currentVirtualComponent = "tAmazonAuroraOutput_1";

										currentComponent = "tAmazonAuroraOutput_1_in";

										row_tAmazonAuroraOutput_1_in = ErrorReject;

										tos_count_tAmazonAuroraOutput_1_in++;

										/**
										 * [tAmazonAuroraOutput_1_in main ] stop
										 */

										/**
										 * [tAmazonAuroraOutput_1_out main ]
										 * start
										 */

										currentVirtualComponent = "tAmazonAuroraOutput_1";

										currentComponent = "tAmazonAuroraOutput_1_out";

										whetherReject_tAmazonAuroraOutput_1 = false;
										if (row_tAmazonAuroraOutput_1_in.errorMessage == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															1,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setString(
															1,
															row_tAmazonAuroraOutput_1_in.errorMessage);
										}

										if (row_tAmazonAuroraOutput_1_in.errorStackTrace == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															2,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setString(
															2,
															row_tAmazonAuroraOutput_1_in.errorStackTrace);
										}

										if (row_tAmazonAuroraOutput_1_in.OrionFirmId == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															3,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setInt(3,
															row_tAmazonAuroraOutput_1_in.OrionFirmId);
										}

										if (row_tAmazonAuroraOutput_1_in.ExternalId == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															4,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setInt(4,
															row_tAmazonAuroraOutput_1_in.ExternalId);
										}

										if (row_tAmazonAuroraOutput_1_in.Symbol == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															5,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setString(
															5,
															row_tAmazonAuroraOutput_1_in.Symbol);
										}

										if (row_tAmazonAuroraOutput_1_in.AccountId == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															6,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setString(
															6,
															row_tAmazonAuroraOutput_1_in.AccountId);
										}

										if (row_tAmazonAuroraOutput_1_in.AccountNumber == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															7,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setString(
															7,
															row_tAmazonAuroraOutput_1_in.AccountNumber);
										}

										if (row_tAmazonAuroraOutput_1_in.GrossProceeds == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															8,
															java.sql.Types.DOUBLE);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setDouble(
															8,
															row_tAmazonAuroraOutput_1_in.GrossProceeds);
										}

										if (row_tAmazonAuroraOutput_1_in.NetProceeds == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															9,
															java.sql.Types.DOUBLE);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setDouble(
															9,
															row_tAmazonAuroraOutput_1_in.NetProceeds);
										}

										if (row_tAmazonAuroraOutput_1_in.CostAmount == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															10,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setFloat(
															10,
															row_tAmazonAuroraOutput_1_in.CostAmount);
										}

										if (row_tAmazonAuroraOutput_1_in.DateAquired != null) {
											date_tAmazonAuroraOutput_1 = row_tAmazonAuroraOutput_1_in.DateAquired
													.getTime();
											if (date_tAmazonAuroraOutput_1 < year1_tAmazonAuroraOutput_1
													|| date_tAmazonAuroraOutput_1 >= year10000_tAmazonAuroraOutput_1) {
												pstmt_tAmazonAuroraOutput_1
														.setString(11,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonAuroraOutput_1
														.setTimestamp(
																11,
																new java.sql.Timestamp(
																		date_tAmazonAuroraOutput_1));
											}
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setNull(11,
															java.sql.Types.DATE);
										}

										if (row_tAmazonAuroraOutput_1_in.SellDate != null) {
											date_tAmazonAuroraOutput_1 = row_tAmazonAuroraOutput_1_in.SellDate
													.getTime();
											if (date_tAmazonAuroraOutput_1 < year1_tAmazonAuroraOutput_1
													|| date_tAmazonAuroraOutput_1 >= year10000_tAmazonAuroraOutput_1) {
												pstmt_tAmazonAuroraOutput_1
														.setString(12,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonAuroraOutput_1
														.setTimestamp(
																12,
																new java.sql.Timestamp(
																		date_tAmazonAuroraOutput_1));
											}
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setNull(12,
															java.sql.Types.DATE);
										}

										if (row_tAmazonAuroraOutput_1_in.Quantity == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															13,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setFloat(
															13,
															row_tAmazonAuroraOutput_1_in.Quantity);
										}

										if (row_tAmazonAuroraOutput_1_in.LongTerm == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															14,
															java.sql.Types.BOOLEAN);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setBoolean(
															14,
															row_tAmazonAuroraOutput_1_in.LongTerm);
										}

										if (row_tAmazonAuroraOutput_1_in.SellMethod == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															15,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setString(
															15,
															row_tAmazonAuroraOutput_1_in.SellMethod);
										}

										if (row_tAmazonAuroraOutput_1_in.TotalGains == null) {
											pstmt_tAmazonAuroraOutput_1
													.setNull(
															16,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_1
													.setFloat(
															16,
															row_tAmazonAuroraOutput_1_in.TotalGains);
										}

										pstmt_tAmazonAuroraOutput_1.addBatch();
										nb_line_tAmazonAuroraOutput_1++;

										batchSizeCounter_tAmazonAuroraOutput_1++;
										if (batchSize_tAmazonAuroraOutput_1 <= batchSizeCounter_tAmazonAuroraOutput_1) {
											try {
												int countSum_tAmazonAuroraOutput_1 = 0;
												for (int countEach_tAmazonAuroraOutput_1 : pstmt_tAmazonAuroraOutput_1
														.executeBatch()) {
													countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
															: 1);
												}
												insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tAmazonAuroraOutput_1 = 0;
												for (int countEach_tAmazonAuroraOutput_1 : e
														.getUpdateCounts()) {
													countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
															: countEach_tAmazonAuroraOutput_1);
												}
												insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
												System.err.println(e
														.getMessage());
											}

											batchSizeCounter_tAmazonAuroraOutput_1 = 0;
										}
										commitCounter_tAmazonAuroraOutput_1++;

										if (commitEvery_tAmazonAuroraOutput_1 <= commitCounter_tAmazonAuroraOutput_1) {

											try {
												int countSum_tAmazonAuroraOutput_1 = 0;
												for (int countEach_tAmazonAuroraOutput_1 : pstmt_tAmazonAuroraOutput_1
														.executeBatch()) {
													countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
															: 1);
												}
												insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tAmazonAuroraOutput_1 = 0;
												for (int countEach_tAmazonAuroraOutput_1 : e
														.getUpdateCounts()) {
													countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
															: countEach_tAmazonAuroraOutput_1);
												}
												insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
												System.err.println(e
														.getMessage());

											}
											conn_tAmazonAuroraOutput_1.commit();
											commitCounter_tAmazonAuroraOutput_1 = 0;

										}

										tos_count_tAmazonAuroraOutput_1_out++;

										/**
										 * [tAmazonAuroraOutput_1_out main ]
										 * stop
										 */

									} // End of branch "ErrorReject"

									// Start of branch
									// "firm_current_reliazedGainLoss_ouput"
									if (firm_current_reliazedGainLoss_ouput != null) {

										/**
										 * [tAmazonAuroraOutput_6_in main ]
										 * start
										 */

										currentVirtualComponent = "tAmazonAuroraOutput_6";

										currentComponent = "tAmazonAuroraOutput_6_in";

										row_tAmazonAuroraOutput_6_in = firm_current_reliazedGainLoss_ouput;

										tos_count_tAmazonAuroraOutput_6_in++;

										/**
										 * [tAmazonAuroraOutput_6_in main ] stop
										 */

										/**
										 * [tAmazonAuroraOutput_6_out main ]
										 * start
										 */

										currentVirtualComponent = "tAmazonAuroraOutput_6";

										currentComponent = "tAmazonAuroraOutput_6_out";

										whetherReject_tAmazonAuroraOutput_6 = false;
										if (row_tAmazonAuroraOutput_6_in.accountId == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															1,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setInt(1,
															row_tAmazonAuroraOutput_6_in.accountId);
										}

										if (row_tAmazonAuroraOutput_6_in.securityId == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															2,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setInt(2,
															row_tAmazonAuroraOutput_6_in.securityId);
										}

										if (row_tAmazonAuroraOutput_6_in.orionFirmId == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															3,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setInt(3,
															row_tAmazonAuroraOutput_6_in.orionFirmId);
										}

										if (row_tAmazonAuroraOutput_6_in.externalId == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															4,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setInt(4,
															row_tAmazonAuroraOutput_6_in.externalId);
										}

										if (row_tAmazonAuroraOutput_6_in.grossProceeds == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															5,
															java.sql.Types.DOUBLE);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setDouble(
															5,
															row_tAmazonAuroraOutput_6_in.grossProceeds);
										}

										if (row_tAmazonAuroraOutput_6_in.netProceeds == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															6,
															java.sql.Types.DOUBLE);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setDouble(
															6,
															row_tAmazonAuroraOutput_6_in.netProceeds);
										}

										if (row_tAmazonAuroraOutput_6_in.costAmount == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															7,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setFloat(
															7,
															row_tAmazonAuroraOutput_6_in.costAmount);
										}

										if (row_tAmazonAuroraOutput_6_in.dateAcquired != null) {
											date_tAmazonAuroraOutput_6 = row_tAmazonAuroraOutput_6_in.dateAcquired
													.getTime();
											if (date_tAmazonAuroraOutput_6 < year1_tAmazonAuroraOutput_6
													|| date_tAmazonAuroraOutput_6 >= year10000_tAmazonAuroraOutput_6) {
												pstmt_tAmazonAuroraOutput_6
														.setString(8,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonAuroraOutput_6
														.setTimestamp(
																8,
																new java.sql.Timestamp(
																		date_tAmazonAuroraOutput_6));
											}
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setNull(8,
															java.sql.Types.DATE);
										}

										if (row_tAmazonAuroraOutput_6_in.sellDate != null) {
											date_tAmazonAuroraOutput_6 = row_tAmazonAuroraOutput_6_in.sellDate
													.getTime();
											if (date_tAmazonAuroraOutput_6 < year1_tAmazonAuroraOutput_6
													|| date_tAmazonAuroraOutput_6 >= year10000_tAmazonAuroraOutput_6) {
												pstmt_tAmazonAuroraOutput_6
														.setString(9,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonAuroraOutput_6
														.setTimestamp(
																9,
																new java.sql.Timestamp(
																		date_tAmazonAuroraOutput_6));
											}
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setNull(9,
															java.sql.Types.DATE);
										}

										if (row_tAmazonAuroraOutput_6_in.quantity == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															10,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setFloat(
															10,
															row_tAmazonAuroraOutput_6_in.quantity);
										}

										if (row_tAmazonAuroraOutput_6_in.longTerm == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															11,
															java.sql.Types.BOOLEAN);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setBoolean(
															11,
															row_tAmazonAuroraOutput_6_in.longTerm);
										}

										if (row_tAmazonAuroraOutput_6_in.sellMethod == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															12,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setString(
															12,
															row_tAmazonAuroraOutput_6_in.sellMethod);
										}

										if (row_tAmazonAuroraOutput_6_in.totalGains == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															13,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setFloat(
															13,
															row_tAmazonAuroraOutput_6_in.totalGains);
										}

										if (row_tAmazonAuroraOutput_6_in.isDeleted == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															14,
															java.sql.Types.BOOLEAN);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setBoolean(
															14,
															row_tAmazonAuroraOutput_6_in.isDeleted);
										}

										if (row_tAmazonAuroraOutput_6_in.createdDate != null) {
											date_tAmazonAuroraOutput_6 = row_tAmazonAuroraOutput_6_in.createdDate
													.getTime();
											if (date_tAmazonAuroraOutput_6 < year1_tAmazonAuroraOutput_6
													|| date_tAmazonAuroraOutput_6 >= year10000_tAmazonAuroraOutput_6) {
												pstmt_tAmazonAuroraOutput_6
														.setString(15,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonAuroraOutput_6
														.setTimestamp(
																15,
																new java.sql.Timestamp(
																		date_tAmazonAuroraOutput_6));
											}
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setNull(15,
															java.sql.Types.DATE);
										}

										if (row_tAmazonAuroraOutput_6_in.createdBy == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															16,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setInt(16,
															row_tAmazonAuroraOutput_6_in.createdBy);
										}

										if (row_tAmazonAuroraOutput_6_in.editedDate != null) {
											date_tAmazonAuroraOutput_6 = row_tAmazonAuroraOutput_6_in.editedDate
													.getTime();
											if (date_tAmazonAuroraOutput_6 < year1_tAmazonAuroraOutput_6
													|| date_tAmazonAuroraOutput_6 >= year10000_tAmazonAuroraOutput_6) {
												pstmt_tAmazonAuroraOutput_6
														.setString(17,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonAuroraOutput_6
														.setTimestamp(
																17,
																new java.sql.Timestamp(
																		date_tAmazonAuroraOutput_6));
											}
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setNull(17,
															java.sql.Types.DATE);
										}

										if (row_tAmazonAuroraOutput_6_in.editedBy == null) {
											pstmt_tAmazonAuroraOutput_6
													.setNull(
															18,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_6
													.setInt(18,
															row_tAmazonAuroraOutput_6_in.editedBy);
										}

										pstmt_tAmazonAuroraOutput_6.addBatch();
										nb_line_tAmazonAuroraOutput_6++;

										batchSizeCounter_tAmazonAuroraOutput_6++;
										if (!whetherReject_tAmazonAuroraOutput_6) {
										}
										if (batchSize_tAmazonAuroraOutput_6 <= batchSizeCounter_tAmazonAuroraOutput_6) {
											try {
												int countSum_tAmazonAuroraOutput_6 = 0;
												for (int countEach_tAmazonAuroraOutput_6 : pstmt_tAmazonAuroraOutput_6
														.executeBatch()) {
													countSum_tAmazonAuroraOutput_6 += (countEach_tAmazonAuroraOutput_6 < 0 ? 0
															: 1);
												}
												insertedCount_tAmazonAuroraOutput_6 += countSum_tAmazonAuroraOutput_6;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tAmazonAuroraOutput_6 = 0;
												for (int countEach_tAmazonAuroraOutput_6 : e
														.getUpdateCounts()) {
													countSum_tAmazonAuroraOutput_6 += (countEach_tAmazonAuroraOutput_6 < 0 ? 0
															: countEach_tAmazonAuroraOutput_6);
												}
												insertedCount_tAmazonAuroraOutput_6 += countSum_tAmazonAuroraOutput_6;
												System.err.println(e
														.getMessage());
											}

											batchSizeCounter_tAmazonAuroraOutput_6 = 0;
										}
										commitCounter_tAmazonAuroraOutput_6++;

										if (commitEvery_tAmazonAuroraOutput_6 <= commitCounter_tAmazonAuroraOutput_6) {

											try {
												int countSum_tAmazonAuroraOutput_6 = 0;
												for (int countEach_tAmazonAuroraOutput_6 : pstmt_tAmazonAuroraOutput_6
														.executeBatch()) {
													countSum_tAmazonAuroraOutput_6 += (countEach_tAmazonAuroraOutput_6 < 0 ? 0
															: 1);
												}
												insertedCount_tAmazonAuroraOutput_6 += countSum_tAmazonAuroraOutput_6;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tAmazonAuroraOutput_6 = 0;
												for (int countEach_tAmazonAuroraOutput_6 : e
														.getUpdateCounts()) {
													countSum_tAmazonAuroraOutput_6 += (countEach_tAmazonAuroraOutput_6 < 0 ? 0
															: countEach_tAmazonAuroraOutput_6);
												}
												insertedCount_tAmazonAuroraOutput_6 += countSum_tAmazonAuroraOutput_6;
												System.err.println(e
														.getMessage());

											}
											conn_tAmazonAuroraOutput_6.commit();
											commitCounter_tAmazonAuroraOutput_6 = 0;

										}

										tos_count_tAmazonAuroraOutput_6_out++;

										/**
										 * [tAmazonAuroraOutput_6_out main ]
										 * stop
										 */

									} // End of branch
										// "firm_current_reliazedGainLoss_ouput"

									// Start of branch "JoinReject"
									if (JoinReject != null) {

										/**
										 * [tAmazonAuroraOutput_5_in main ]
										 * start
										 */

										currentVirtualComponent = "tAmazonAuroraOutput_5";

										currentComponent = "tAmazonAuroraOutput_5_in";

										row_tAmazonAuroraOutput_5_in = JoinReject;

										tos_count_tAmazonAuroraOutput_5_in++;

										/**
										 * [tAmazonAuroraOutput_5_in main ] stop
										 */

										/**
										 * [tAmazonAuroraOutput_5_out main ]
										 * start
										 */

										currentVirtualComponent = "tAmazonAuroraOutput_5";

										currentComponent = "tAmazonAuroraOutput_5_out";

										whetherReject_tAmazonAuroraOutput_5 = false;
										if (row_tAmazonAuroraOutput_5_in.OrionFirmId == null) {
											pstmt_tAmazonAuroraOutput_5
													.setNull(
															1,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setInt(1,
															row_tAmazonAuroraOutput_5_in.OrionFirmId);
										}

										if (row_tAmazonAuroraOutput_5_in.ExternalId == null) {
											pstmt_tAmazonAuroraOutput_5
													.setNull(
															2,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setInt(2,
															row_tAmazonAuroraOutput_5_in.ExternalId);
										}

										if (row_tAmazonAuroraOutput_5_in.Symbol == null) {
											pstmt_tAmazonAuroraOutput_5
													.setNull(
															3,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setString(
															3,
															row_tAmazonAuroraOutput_5_in.Symbol);
										}

										if (row_tAmazonAuroraOutput_5_in.AccountId == null) {
											pstmt_tAmazonAuroraOutput_5
													.setNull(
															4,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setString(
															4,
															row_tAmazonAuroraOutput_5_in.AccountId);
										}

										if (row_tAmazonAuroraOutput_5_in.AccountNumber == null) {
											pstmt_tAmazonAuroraOutput_5
													.setNull(
															5,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setString(
															5,
															row_tAmazonAuroraOutput_5_in.AccountNumber);
										}

										if (row_tAmazonAuroraOutput_5_in.GrossProceeds == null) {
											pstmt_tAmazonAuroraOutput_5
													.setNull(
															6,
															java.sql.Types.DOUBLE);
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setDouble(
															6,
															row_tAmazonAuroraOutput_5_in.GrossProceeds);
										}

										if (row_tAmazonAuroraOutput_5_in.NetProceeds == null) {
											pstmt_tAmazonAuroraOutput_5
													.setNull(
															7,
															java.sql.Types.DOUBLE);
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setDouble(
															7,
															row_tAmazonAuroraOutput_5_in.NetProceeds);
										}

										if (row_tAmazonAuroraOutput_5_in.CostAmount == null) {
											pstmt_tAmazonAuroraOutput_5
													.setNull(
															8,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setFloat(
															8,
															row_tAmazonAuroraOutput_5_in.CostAmount);
										}

										if (row_tAmazonAuroraOutput_5_in.DateAquired != null) {
											date_tAmazonAuroraOutput_5 = row_tAmazonAuroraOutput_5_in.DateAquired
													.getTime();
											if (date_tAmazonAuroraOutput_5 < year1_tAmazonAuroraOutput_5
													|| date_tAmazonAuroraOutput_5 >= year10000_tAmazonAuroraOutput_5) {
												pstmt_tAmazonAuroraOutput_5
														.setString(9,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonAuroraOutput_5
														.setTimestamp(
																9,
																new java.sql.Timestamp(
																		date_tAmazonAuroraOutput_5));
											}
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setNull(9,
															java.sql.Types.DATE);
										}

										if (row_tAmazonAuroraOutput_5_in.SellDate != null) {
											date_tAmazonAuroraOutput_5 = row_tAmazonAuroraOutput_5_in.SellDate
													.getTime();
											if (date_tAmazonAuroraOutput_5 < year1_tAmazonAuroraOutput_5
													|| date_tAmazonAuroraOutput_5 >= year10000_tAmazonAuroraOutput_5) {
												pstmt_tAmazonAuroraOutput_5
														.setString(10,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonAuroraOutput_5
														.setTimestamp(
																10,
																new java.sql.Timestamp(
																		date_tAmazonAuroraOutput_5));
											}
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setNull(10,
															java.sql.Types.DATE);
										}

										if (row_tAmazonAuroraOutput_5_in.Quantity == null) {
											pstmt_tAmazonAuroraOutput_5
													.setNull(
															11,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setFloat(
															11,
															row_tAmazonAuroraOutput_5_in.Quantity);
										}

										if (row_tAmazonAuroraOutput_5_in.LongTerm == null) {
											pstmt_tAmazonAuroraOutput_5
													.setNull(
															12,
															java.sql.Types.BOOLEAN);
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setBoolean(
															12,
															row_tAmazonAuroraOutput_5_in.LongTerm);
										}

										if (row_tAmazonAuroraOutput_5_in.SellMethod == null) {
											pstmt_tAmazonAuroraOutput_5
													.setNull(
															13,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setString(
															13,
															row_tAmazonAuroraOutput_5_in.SellMethod);
										}

										if (row_tAmazonAuroraOutput_5_in.TotalGains == null) {
											pstmt_tAmazonAuroraOutput_5
													.setNull(
															14,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_5
													.setFloat(
															14,
															row_tAmazonAuroraOutput_5_in.TotalGains);
										}

										pstmt_tAmazonAuroraOutput_5.addBatch();
										nb_line_tAmazonAuroraOutput_5++;

										batchSizeCounter_tAmazonAuroraOutput_5++;
										if (batchSize_tAmazonAuroraOutput_5 <= batchSizeCounter_tAmazonAuroraOutput_5) {
											try {
												int countSum_tAmazonAuroraOutput_5 = 0;
												for (int countEach_tAmazonAuroraOutput_5 : pstmt_tAmazonAuroraOutput_5
														.executeBatch()) {
													countSum_tAmazonAuroraOutput_5 += (countEach_tAmazonAuroraOutput_5 < 0 ? 0
															: 1);
												}
												insertedCount_tAmazonAuroraOutput_5 += countSum_tAmazonAuroraOutput_5;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tAmazonAuroraOutput_5 = 0;
												for (int countEach_tAmazonAuroraOutput_5 : e
														.getUpdateCounts()) {
													countSum_tAmazonAuroraOutput_5 += (countEach_tAmazonAuroraOutput_5 < 0 ? 0
															: countEach_tAmazonAuroraOutput_5);
												}
												insertedCount_tAmazonAuroraOutput_5 += countSum_tAmazonAuroraOutput_5;
												System.err.println(e
														.getMessage());
											}

											batchSizeCounter_tAmazonAuroraOutput_5 = 0;
										}
										commitCounter_tAmazonAuroraOutput_5++;

										if (commitEvery_tAmazonAuroraOutput_5 <= commitCounter_tAmazonAuroraOutput_5) {

											try {
												int countSum_tAmazonAuroraOutput_5 = 0;
												for (int countEach_tAmazonAuroraOutput_5 : pstmt_tAmazonAuroraOutput_5
														.executeBatch()) {
													countSum_tAmazonAuroraOutput_5 += (countEach_tAmazonAuroraOutput_5 < 0 ? 0
															: 1);
												}
												insertedCount_tAmazonAuroraOutput_5 += countSum_tAmazonAuroraOutput_5;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tAmazonAuroraOutput_5 = 0;
												for (int countEach_tAmazonAuroraOutput_5 : e
														.getUpdateCounts()) {
													countSum_tAmazonAuroraOutput_5 += (countEach_tAmazonAuroraOutput_5 < 0 ? 0
															: countEach_tAmazonAuroraOutput_5);
												}
												insertedCount_tAmazonAuroraOutput_5 += countSum_tAmazonAuroraOutput_5;
												System.err.println(e
														.getMessage());

											}
											conn_tAmazonAuroraOutput_5.commit();
											commitCounter_tAmazonAuroraOutput_5 = 0;

										}

										tos_count_tAmazonAuroraOutput_5_out++;

										/**
										 * [tAmazonAuroraOutput_5_out main ]
										 * stop
										 */

									} // End of branch "JoinReject"

								} // close loop of lookup 'row1' // G_TM_M_043

							} // End of branch "mainout"

						} // End of branch "s"

						/**
						 * [tAmazonAuroraInput_4_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_4_in != null) {
						rs_tAmazonAuroraInput_4_in.close();
					}
					stmt_tAmazonAuroraInput_4_in.close();
					if (conn_tAmazonAuroraInput_4_in != null
							&& !conn_tAmazonAuroraInput_4_in.isClosed()) {

						conn_tAmazonAuroraInput_4_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_4_NB_LINE",
						nb_line_tAmazonAuroraInput_4_in);

				ok_Hash.put("tAmazonAuroraInput_4_in", true);
				end_Hash.put("tAmazonAuroraInput_4_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_4_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				ok_Hash.put("tAmazonAuroraInput_4_out", true);
				end_Hash.put("tAmazonAuroraInput_4_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_4_out end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row10 != null) {
					tHash_Lookup_row10.endGet();
				}
				globalMap.remove("tHash_Lookup_row10");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row9_0 != null) {
					tHash_Lookup_row9_0.endGet();
				}
				globalMap.remove("tHash_Lookup_row9_0");

				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				if (context.firmids != null) {

					tWarn_1Process(globalMap);
				}

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row1 != null) {
					tHash_Lookup_row1.endGet();
				}
				globalMap.remove("tHash_Lookup_row1");

				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row11 != null) {
					tHash_Lookup_row11.endGet();
				}
				globalMap.remove("tHash_Lookup_row11");

				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_in";

				ok_Hash.put("tAmazonAuroraOutput_1_in", true);
				end_Hash.put("tAmazonAuroraOutput_1_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_1_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_1 != 0) {
						int countSum_tAmazonAuroraOutput_1 = 0;

						for (int countEach_tAmazonAuroraOutput_1 : pstmt_tAmazonAuroraOutput_1
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_1 = 0;
					for (int countEach_tAmazonAuroraOutput_1 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
								: countEach_tAmazonAuroraOutput_1);
					}

					insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_1 = 0;

				if (pstmt_tAmazonAuroraOutput_1 != null) {

					pstmt_tAmazonAuroraOutput_1.close();

				}

				if (commitCounter_tAmazonAuroraOutput_1 > 0) {

					conn_tAmazonAuroraOutput_1.commit();

				}

				conn_tAmazonAuroraOutput_1.close();

				resourceMap.put("finish_tAmazonAuroraOutput_1", true);

				nb_line_deleted_tAmazonAuroraOutput_1 = nb_line_deleted_tAmazonAuroraOutput_1
						+ deletedCount_tAmazonAuroraOutput_1;
				nb_line_update_tAmazonAuroraOutput_1 = nb_line_update_tAmazonAuroraOutput_1
						+ updatedCount_tAmazonAuroraOutput_1;
				nb_line_inserted_tAmazonAuroraOutput_1 = nb_line_inserted_tAmazonAuroraOutput_1
						+ insertedCount_tAmazonAuroraOutput_1;
				nb_line_rejected_tAmazonAuroraOutput_1 = nb_line_rejected_tAmazonAuroraOutput_1
						+ rejectedCount_tAmazonAuroraOutput_1;

				globalMap.put("tAmazonAuroraOutput_1_NB_LINE",
						nb_line_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_1);

				ok_Hash.put("tAmazonAuroraOutput_1_out", true);
				end_Hash.put("tAmazonAuroraOutput_1_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_1_out end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_6_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_6";

				currentComponent = "tAmazonAuroraOutput_6_in";

				ok_Hash.put("tAmazonAuroraOutput_6_in", true);
				end_Hash.put("tAmazonAuroraOutput_6_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_6_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_6_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_6";

				currentComponent = "tAmazonAuroraOutput_6_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_6 != 0) {
						int countSum_tAmazonAuroraOutput_6 = 0;

						for (int countEach_tAmazonAuroraOutput_6 : pstmt_tAmazonAuroraOutput_6
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_6 += (countEach_tAmazonAuroraOutput_6 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_6 += countSum_tAmazonAuroraOutput_6;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_6 = 0;
					for (int countEach_tAmazonAuroraOutput_6 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_6 += (countEach_tAmazonAuroraOutput_6 < 0 ? 0
								: countEach_tAmazonAuroraOutput_6);
					}

					insertedCount_tAmazonAuroraOutput_6 += countSum_tAmazonAuroraOutput_6;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_6 = 0;

				if (pstmt_tAmazonAuroraOutput_6 != null) {

					pstmt_tAmazonAuroraOutput_6.close();

				}

				if (commitCounter_tAmazonAuroraOutput_6 > 0) {

					conn_tAmazonAuroraOutput_6.commit();

				}

				conn_tAmazonAuroraOutput_6.close();

				resourceMap.put("finish_tAmazonAuroraOutput_6", true);

				nb_line_deleted_tAmazonAuroraOutput_6 = nb_line_deleted_tAmazonAuroraOutput_6
						+ deletedCount_tAmazonAuroraOutput_6;
				nb_line_update_tAmazonAuroraOutput_6 = nb_line_update_tAmazonAuroraOutput_6
						+ updatedCount_tAmazonAuroraOutput_6;
				nb_line_inserted_tAmazonAuroraOutput_6 = nb_line_inserted_tAmazonAuroraOutput_6
						+ insertedCount_tAmazonAuroraOutput_6;
				nb_line_rejected_tAmazonAuroraOutput_6 = nb_line_rejected_tAmazonAuroraOutput_6
						+ rejectedCount_tAmazonAuroraOutput_6;

				globalMap.put("tAmazonAuroraOutput_6_NB_LINE",
						nb_line_tAmazonAuroraOutput_6);
				globalMap.put("tAmazonAuroraOutput_6_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_6);
				globalMap.put("tAmazonAuroraOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_6);
				globalMap.put("tAmazonAuroraOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_6);
				globalMap.put("tAmazonAuroraOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_6);

				ok_Hash.put("tAmazonAuroraOutput_6_out", true);
				end_Hash.put("tAmazonAuroraOutput_6_out",
						System.currentTimeMillis());

				tAmazonAuroraInput_2_inProcess(globalMap);

				/**
				 * [tAmazonAuroraOutput_6_out end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_5_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_5";

				currentComponent = "tAmazonAuroraOutput_5_in";

				ok_Hash.put("tAmazonAuroraOutput_5_in", true);
				end_Hash.put("tAmazonAuroraOutput_5_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_5_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_5_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_5";

				currentComponent = "tAmazonAuroraOutput_5_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_5 != 0) {
						int countSum_tAmazonAuroraOutput_5 = 0;

						for (int countEach_tAmazonAuroraOutput_5 : pstmt_tAmazonAuroraOutput_5
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_5 += (countEach_tAmazonAuroraOutput_5 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_5 += countSum_tAmazonAuroraOutput_5;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_5 = 0;
					for (int countEach_tAmazonAuroraOutput_5 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_5 += (countEach_tAmazonAuroraOutput_5 < 0 ? 0
								: countEach_tAmazonAuroraOutput_5);
					}

					insertedCount_tAmazonAuroraOutput_5 += countSum_tAmazonAuroraOutput_5;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_5 = 0;

				if (pstmt_tAmazonAuroraOutput_5 != null) {

					pstmt_tAmazonAuroraOutput_5.close();

				}

				if (commitCounter_tAmazonAuroraOutput_5 > 0) {

					conn_tAmazonAuroraOutput_5.commit();

				}

				conn_tAmazonAuroraOutput_5.close();

				resourceMap.put("finish_tAmazonAuroraOutput_5", true);

				nb_line_deleted_tAmazonAuroraOutput_5 = nb_line_deleted_tAmazonAuroraOutput_5
						+ deletedCount_tAmazonAuroraOutput_5;
				nb_line_update_tAmazonAuroraOutput_5 = nb_line_update_tAmazonAuroraOutput_5
						+ updatedCount_tAmazonAuroraOutput_5;
				nb_line_inserted_tAmazonAuroraOutput_5 = nb_line_inserted_tAmazonAuroraOutput_5
						+ insertedCount_tAmazonAuroraOutput_5;
				nb_line_rejected_tAmazonAuroraOutput_5 = nb_line_rejected_tAmazonAuroraOutput_5
						+ rejectedCount_tAmazonAuroraOutput_5;

				globalMap.put("tAmazonAuroraOutput_5_NB_LINE",
						nb_line_tAmazonAuroraOutput_5);
				globalMap.put("tAmazonAuroraOutput_5_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_5);
				globalMap.put("tAmazonAuroraOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_5);
				globalMap.put("tAmazonAuroraOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_5);
				globalMap.put("tAmazonAuroraOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_5);

				ok_Hash.put("tAmazonAuroraOutput_5_out", true);
				end_Hash.put("tAmazonAuroraOutput_5_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_5_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row1");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row11");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row2");

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row9_0");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row10");

			try {

				/**
				 * [tAmazonAuroraInput_4_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_in";

				/**
				 * [tAmazonAuroraInput_4_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				/**
				 * [tAmazonAuroraInput_4_out finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_in";

				/**
				 * [tAmazonAuroraOutput_1_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_1") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_1) {
							String errorMessage_tAmazonAuroraOutput_1 = "failed to close the connection in tAmazonAuroraOutput_1 :"
									+ sqlEx_tAmazonAuroraOutput_1.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_1);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_1_out finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_6_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_6";

				currentComponent = "tAmazonAuroraOutput_6_in";

				/**
				 * [tAmazonAuroraOutput_6_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_6_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_6";

				currentComponent = "tAmazonAuroraOutput_6_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_6") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_6") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_6")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_6) {
							String errorMessage_tAmazonAuroraOutput_6 = "failed to close the connection in tAmazonAuroraOutput_6 :"
									+ sqlEx_tAmazonAuroraOutput_6.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_6);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_6_out finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_5_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_5";

				currentComponent = "tAmazonAuroraOutput_5_in";

				/**
				 * [tAmazonAuroraOutput_5_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_5_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_5";

				currentComponent = "tAmazonAuroraOutput_5_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_5") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_5") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_5")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_5) {
							String errorMessage_tAmazonAuroraOutput_5 = "failed to close the connection in tAmazonAuroraOutput_5 :"
									+ sqlEx_tAmazonAuroraOutput_5.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_5);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_5_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE", 1);
	}

	public static class row_tAmazonAuroraOutput_2_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_2_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer accountId;

		public Integer getAccountId() {
			return this.accountId;
		}

		public Integer securityId;

		public Integer getSecurityId() {
			return this.securityId;
		}

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		public Double grossProceeds;

		public Double getGrossProceeds() {
			return this.grossProceeds;
		}

		public Double netProceeds;

		public Double getNetProceeds() {
			return this.netProceeds;
		}

		public Double costAmount;

		public Double getCostAmount() {
			return this.costAmount;
		}

		public java.util.Date dateAcquired;

		public java.util.Date getDateAcquired() {
			return this.dateAcquired;
		}

		public java.util.Date sellDate;

		public java.util.Date getSellDate() {
			return this.sellDate;
		}

		public Double quantity;

		public Double getQuantity() {
			return this.quantity;
		}

		public Boolean longTerm;

		public Boolean getLongTerm() {
			return this.longTerm;
		}

		public String sellMethod;

		public String getSellMethod() {
			return this.sellMethod;
		}

		public Double totalGains;

		public Double getTotalGains() {
			return this.totalGains;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.accountId = readInteger(dis);

					this.securityId = readInteger(dis);

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.grossProceeds = null;
					} else {
						this.grossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.netProceeds = null;
					} else {
						this.netProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.costAmount = null;
					} else {
						this.costAmount = dis.readDouble();
					}

					this.dateAcquired = readDate(dis);

					this.sellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantity = null;
					} else {
						this.quantity = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.longTerm = null;
					} else {
						this.longTerm = dis.readBoolean();
					}

					this.sellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.totalGains = null;
					} else {
						this.totalGains = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.createdDate = readDate(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.accountId, dos);

				// Integer

				writeInteger(this.securityId, dos);

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

				// Double

				if (this.grossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.grossProceeds);
				}

				// Double

				if (this.netProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.netProceeds);
				}

				// Double

				if (this.costAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.costAmount);
				}

				// java.util.Date

				writeDate(this.dateAcquired, dos);

				// java.util.Date

				writeDate(this.sellDate, dos);

				// Double

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantity);
				}

				// Boolean

				if (this.longTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.longTerm);
				}

				// String

				writeString(this.sellMethod, dos);

				// Double

				if (this.totalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.totalGains);
				}

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// java.util.Date

				writeDate(this.createdDate, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("accountId=" + String.valueOf(accountId));
			sb.append(",securityId=" + String.valueOf(securityId));
			sb.append(",orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append(",grossProceeds=" + String.valueOf(grossProceeds));
			sb.append(",netProceeds=" + String.valueOf(netProceeds));
			sb.append(",costAmount=" + String.valueOf(costAmount));
			sb.append(",dateAcquired=" + String.valueOf(dateAcquired));
			sb.append(",sellDate=" + String.valueOf(sellDate));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",longTerm=" + String.valueOf(longTerm));
			sb.append(",sellMethod=" + sellMethod);
			sb.append(",totalGains=" + String.valueOf(totalGains));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_2_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class firm_relaizedGainLoss_ouputStruct implements
			routines.system.IPersistableRow<firm_relaizedGainLoss_ouputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer accountId;

		public Integer getAccountId() {
			return this.accountId;
		}

		public Integer securityId;

		public Integer getSecurityId() {
			return this.securityId;
		}

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		public Double grossProceeds;

		public Double getGrossProceeds() {
			return this.grossProceeds;
		}

		public Double netProceeds;

		public Double getNetProceeds() {
			return this.netProceeds;
		}

		public Double costAmount;

		public Double getCostAmount() {
			return this.costAmount;
		}

		public java.util.Date dateAcquired;

		public java.util.Date getDateAcquired() {
			return this.dateAcquired;
		}

		public java.util.Date sellDate;

		public java.util.Date getSellDate() {
			return this.sellDate;
		}

		public Double quantity;

		public Double getQuantity() {
			return this.quantity;
		}

		public Boolean longTerm;

		public Boolean getLongTerm() {
			return this.longTerm;
		}

		public String sellMethod;

		public String getSellMethod() {
			return this.sellMethod;
		}

		public Double totalGains;

		public Double getTotalGains() {
			return this.totalGains;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.accountId = readInteger(dis);

					this.securityId = readInteger(dis);

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.grossProceeds = null;
					} else {
						this.grossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.netProceeds = null;
					} else {
						this.netProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.costAmount = null;
					} else {
						this.costAmount = dis.readDouble();
					}

					this.dateAcquired = readDate(dis);

					this.sellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantity = null;
					} else {
						this.quantity = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.longTerm = null;
					} else {
						this.longTerm = dis.readBoolean();
					}

					this.sellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.totalGains = null;
					} else {
						this.totalGains = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.createdDate = readDate(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.accountId, dos);

				// Integer

				writeInteger(this.securityId, dos);

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

				// Double

				if (this.grossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.grossProceeds);
				}

				// Double

				if (this.netProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.netProceeds);
				}

				// Double

				if (this.costAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.costAmount);
				}

				// java.util.Date

				writeDate(this.dateAcquired, dos);

				// java.util.Date

				writeDate(this.sellDate, dos);

				// Double

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantity);
				}

				// Boolean

				if (this.longTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.longTerm);
				}

				// String

				writeString(this.sellMethod, dos);

				// Double

				if (this.totalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.totalGains);
				}

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// java.util.Date

				writeDate(this.createdDate, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("accountId=" + String.valueOf(accountId));
			sb.append(",securityId=" + String.valueOf(securityId));
			sb.append(",orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append(",grossProceeds=" + String.valueOf(grossProceeds));
			sb.append(",netProceeds=" + String.valueOf(netProceeds));
			sb.append(",costAmount=" + String.valueOf(costAmount));
			sb.append(",dateAcquired=" + String.valueOf(dateAcquired));
			sb.append(",sellDate=" + String.valueOf(sellDate));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",longTerm=" + String.valueOf(longTerm));
			sb.append(",sellMethod=" + sellMethod);
			sb.append(",totalGains=" + String.valueOf(totalGains));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(firm_relaizedGainLoss_ouputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer accountId;

		public Integer getAccountId() {
			return this.accountId;
		}

		public Integer securityId;

		public Integer getSecurityId() {
			return this.securityId;
		}

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public Double grossProceeds;

		public Double getGrossProceeds() {
			return this.grossProceeds;
		}

		public Double netProceeds;

		public Double getNetProceeds() {
			return this.netProceeds;
		}

		public Double costAmount;

		public Double getCostAmount() {
			return this.costAmount;
		}

		public java.util.Date dateAcquired;

		public java.util.Date getDateAcquired() {
			return this.dateAcquired;
		}

		public java.util.Date sellDate;

		public java.util.Date getSellDate() {
			return this.sellDate;
		}

		public Double quantity;

		public Double getQuantity() {
			return this.quantity;
		}

		public Boolean longTerm;

		public Boolean getLongTerm() {
			return this.longTerm;
		}

		public String sellMethod;

		public String getSellMethod() {
			return this.sellMethod;
		}

		public Double totalGains;

		public Double getTotalGains() {
			return this.totalGains;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.accountId = readInteger(dis);

					this.securityId = readInteger(dis);

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.grossProceeds = null;
					} else {
						this.grossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.netProceeds = null;
					} else {
						this.netProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.costAmount = null;
					} else {
						this.costAmount = dis.readDouble();
					}

					this.dateAcquired = readDate(dis);

					this.sellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantity = null;
					} else {
						this.quantity = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.longTerm = null;
					} else {
						this.longTerm = dis.readBoolean();
					}

					this.sellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.totalGains = null;
					} else {
						this.totalGains = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.createdDate = readDate(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.accountId, dos);

				// Integer

				writeInteger(this.securityId, dos);

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// Double

				if (this.grossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.grossProceeds);
				}

				// Double

				if (this.netProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.netProceeds);
				}

				// Double

				if (this.costAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.costAmount);
				}

				// java.util.Date

				writeDate(this.dateAcquired, dos);

				// java.util.Date

				writeDate(this.sellDate, dos);

				// Double

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantity);
				}

				// Boolean

				if (this.longTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.longTerm);
				}

				// String

				writeString(this.sellMethod, dos);

				// Double

				if (this.totalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.totalGains);
				}

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// java.util.Date

				writeDate(this.createdDate, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("accountId=" + String.valueOf(accountId));
			sb.append(",securityId=" + String.valueOf(securityId));
			sb.append(",orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",grossProceeds=" + String.valueOf(grossProceeds));
			sb.append(",netProceeds=" + String.valueOf(netProceeds));
			sb.append(",costAmount=" + String.valueOf(costAmount));
			sb.append(",dateAcquired=" + String.valueOf(dateAcquired));
			sb.append(",sellDate=" + String.valueOf(sellDate));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",longTerm=" + String.valueOf(longTerm));
			sb.append(",sellMethod=" + sellMethod);
			sb.append(",totalGains=" + String.valueOf(totalGains));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_2_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_2_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer accountId;

		public Integer getAccountId() {
			return this.accountId;
		}

		public Integer securityId;

		public Integer getSecurityId() {
			return this.securityId;
		}

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public Double grossProceeds;

		public Double getGrossProceeds() {
			return this.grossProceeds;
		}

		public Double netProceeds;

		public Double getNetProceeds() {
			return this.netProceeds;
		}

		public Double costAmount;

		public Double getCostAmount() {
			return this.costAmount;
		}

		public java.util.Date dateAcquired;

		public java.util.Date getDateAcquired() {
			return this.dateAcquired;
		}

		public java.util.Date sellDate;

		public java.util.Date getSellDate() {
			return this.sellDate;
		}

		public Double quantity;

		public Double getQuantity() {
			return this.quantity;
		}

		public Boolean longTerm;

		public Boolean getLongTerm() {
			return this.longTerm;
		}

		public String sellMethod;

		public String getSellMethod() {
			return this.sellMethod;
		}

		public Double totalGains;

		public Double getTotalGains() {
			return this.totalGains;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.accountId = readInteger(dis);

					this.securityId = readInteger(dis);

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.grossProceeds = null;
					} else {
						this.grossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.netProceeds = null;
					} else {
						this.netProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.costAmount = null;
					} else {
						this.costAmount = dis.readDouble();
					}

					this.dateAcquired = readDate(dis);

					this.sellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantity = null;
					} else {
						this.quantity = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.longTerm = null;
					} else {
						this.longTerm = dis.readBoolean();
					}

					this.sellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.totalGains = null;
					} else {
						this.totalGains = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.createdDate = readDate(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.accountId, dos);

				// Integer

				writeInteger(this.securityId, dos);

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// Double

				if (this.grossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.grossProceeds);
				}

				// Double

				if (this.netProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.netProceeds);
				}

				// Double

				if (this.costAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.costAmount);
				}

				// java.util.Date

				writeDate(this.dateAcquired, dos);

				// java.util.Date

				writeDate(this.sellDate, dos);

				// Double

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantity);
				}

				// Boolean

				if (this.longTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.longTerm);
				}

				// String

				writeString(this.sellMethod, dos);

				// Double

				if (this.totalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.totalGains);
				}

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// java.util.Date

				writeDate(this.createdDate, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("accountId=" + String.valueOf(accountId));
			sb.append(",securityId=" + String.valueOf(securityId));
			sb.append(",orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",grossProceeds=" + String.valueOf(grossProceeds));
			sb.append(",netProceeds=" + String.valueOf(netProceeds));
			sb.append(",costAmount=" + String.valueOf(costAmount));
			sb.append(",dateAcquired=" + String.valueOf(dateAcquired));
			sb.append(",sellDate=" + String.valueOf(sellDate));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",longTerm=" + String.valueOf(longTerm));
			sb.append(",sellMethod=" + sellMethod);
			sb.append(",totalGains=" + String.valueOf(totalGains));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_2_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_2Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer accountId;

		public Integer getAccountId() {
			return this.accountId;
		}

		public Integer securityId;

		public Integer getSecurityId() {
			return this.securityId;
		}

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public Double grossProceeds;

		public Double getGrossProceeds() {
			return this.grossProceeds;
		}

		public Double netProceeds;

		public Double getNetProceeds() {
			return this.netProceeds;
		}

		public Double costAmount;

		public Double getCostAmount() {
			return this.costAmount;
		}

		public java.util.Date dateAcquired;

		public java.util.Date getDateAcquired() {
			return this.dateAcquired;
		}

		public java.util.Date sellDate;

		public java.util.Date getSellDate() {
			return this.sellDate;
		}

		public Double quantity;

		public Double getQuantity() {
			return this.quantity;
		}

		public Boolean longTerm;

		public Boolean getLongTerm() {
			return this.longTerm;
		}

		public String sellMethod;

		public String getSellMethod() {
			return this.sellMethod;
		}

		public Double totalGains;

		public Double getTotalGains() {
			return this.totalGains;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.accountId = readInteger(dis);

					this.securityId = readInteger(dis);

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.grossProceeds = null;
					} else {
						this.grossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.netProceeds = null;
					} else {
						this.netProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.costAmount = null;
					} else {
						this.costAmount = dis.readDouble();
					}

					this.dateAcquired = readDate(dis);

					this.sellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantity = null;
					} else {
						this.quantity = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.longTerm = null;
					} else {
						this.longTerm = dis.readBoolean();
					}

					this.sellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.totalGains = null;
					} else {
						this.totalGains = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.createdDate = readDate(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.accountId, dos);

				// Integer

				writeInteger(this.securityId, dos);

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// Double

				if (this.grossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.grossProceeds);
				}

				// Double

				if (this.netProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.netProceeds);
				}

				// Double

				if (this.costAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.costAmount);
				}

				// java.util.Date

				writeDate(this.dateAcquired, dos);

				// java.util.Date

				writeDate(this.sellDate, dos);

				// Double

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quantity);
				}

				// Boolean

				if (this.longTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.longTerm);
				}

				// String

				writeString(this.sellMethod, dos);

				// Double

				if (this.totalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.totalGains);
				}

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// java.util.Date

				writeDate(this.createdDate, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("accountId=" + String.valueOf(accountId));
			sb.append(",securityId=" + String.valueOf(securityId));
			sb.append(",orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",grossProceeds=" + String.valueOf(grossProceeds));
			sb.append(",netProceeds=" + String.valueOf(netProceeds));
			sb.append(",costAmount=" + String.valueOf(costAmount));
			sb.append(",dateAcquired=" + String.valueOf(dateAcquired));
			sb.append(",sellDate=" + String.valueOf(sellDate));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",longTerm=" + String.valueOf(longTerm));
			sb.append(",sellMethod=" + sellMethod);
			sb.append(",totalGains=" + String.valueOf(totalGains));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_2_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tAmazonAuroraInput_8_inProcess(globalMap);

				row_tAmazonAuroraInput_2_inStruct row_tAmazonAuroraInput_2_in = new row_tAmazonAuroraInput_2_inStruct();
				row_tAmazonAuroraInput_2_inStruct row5 = row_tAmazonAuroraInput_2_in;
				firm_relaizedGainLoss_ouputStruct firm_relaizedGainLoss_ouput = new firm_relaizedGainLoss_ouputStruct();
				firm_relaizedGainLoss_ouputStruct row_tAmazonAuroraOutput_2_in = firm_relaizedGainLoss_ouput;

				/**
				 * [tAmazonAuroraOutput_2_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_2_out", false);
				start_Hash.put("tAmazonAuroraOutput_2_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				int tos_count_tAmazonAuroraOutput_2_out = 0;

				int nb_line_tAmazonAuroraOutput_2 = 0;
				int nb_line_update_tAmazonAuroraOutput_2 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_2 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_2 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_2 = 0;

				int deletedCount_tAmazonAuroraOutput_2 = 0;
				int updatedCount_tAmazonAuroraOutput_2 = 0;
				int insertedCount_tAmazonAuroraOutput_2 = 0;

				int rejectedCount_tAmazonAuroraOutput_2 = 0;

				String tableName_tAmazonAuroraOutput_2 = "realizedGainLoss";
				boolean whetherReject_tAmazonAuroraOutput_2 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_2 = calendar_tAmazonAuroraOutput_2
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_2 = calendar_tAmazonAuroraOutput_2
						.getTime().getTime();
				long date_tAmazonAuroraOutput_2;

				java.sql.Connection conn_tAmazonAuroraOutput_2 = null;
				String dbProperties_tAmazonAuroraOutput_2 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_2 = null;
				if (dbProperties_tAmazonAuroraOutput_2 == null
						|| dbProperties_tAmazonAuroraOutput_2.trim().length() == 0) {
					url_tAmazonAuroraOutput_2 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_2 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_2;
				}
				String driverClass_tAmazonAuroraOutput_2 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_2 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_2 = context.password;

				String dbPwd_tAmazonAuroraOutput_2 = decryptedPassword_tAmazonAuroraOutput_2;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_2);

				conn_tAmazonAuroraOutput_2 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_2,
								dbUser_tAmazonAuroraOutput_2,
								dbPwd_tAmazonAuroraOutput_2);

				resourceMap.put("conn_tAmazonAuroraOutput_2",
						conn_tAmazonAuroraOutput_2);
				conn_tAmazonAuroraOutput_2.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_2 = 10000;
				int commitCounter_tAmazonAuroraOutput_2 = 0;

				int count_tAmazonAuroraOutput_2 = 0;

				java.sql.Statement stmtClear_tAmazonAuroraOutput_2 = conn_tAmazonAuroraOutput_2
						.createStatement();
				stmtClear_tAmazonAuroraOutput_2.executeUpdate("DELETE FROM `"
						+ tableName_tAmazonAuroraOutput_2 + "`");
				stmtClear_tAmazonAuroraOutput_2.close();

				String insert_tAmazonAuroraOutput_2 = "INSERT INTO `"
						+ "realizedGainLoss"
						+ "` (`accountId`,`securityId`,`orionFirmId`,`externalId`,`orionEclipseFirmId`,`grossProceeds`,`netProceeds`,`costAmount`,`dateAcquired`,`sellDate`,`quantity`,`longTerm`,`sellMethod`,`totalGains`,`isDeleted`,`createdDate`,`createdBy`,`editedDate`,`editedBy`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_2 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_2 = conn_tAmazonAuroraOutput_2
						.prepareStatement(insert_tAmazonAuroraOutput_2);

				/**
				 * [tAmazonAuroraOutput_2_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_2_in", false);
				start_Hash.put("tAmazonAuroraOutput_2_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				int tos_count_tAmazonAuroraOutput_2_in = 0;

				/**
				 * [tAmazonAuroraOutput_2_in begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				firm_relaizedGainLoss_ouputStruct firm_relaizedGainLoss_ouput_tmp = new firm_relaizedGainLoss_ouputStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_2_out", false);
				start_Hash.put("tAmazonAuroraInput_2_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				int tos_count_tAmazonAuroraInput_2_out = 0;

				/**
				 * [tAmazonAuroraInput_2_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_2_in", false);
				start_Hash.put("tAmazonAuroraInput_2_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_in";

				int tos_count_tAmazonAuroraInput_2_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_2_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_2_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_2_in = calendar_tAmazonAuroraInput_2_in
						.getTime();
				int nb_line_tAmazonAuroraInput_2_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_2_in = null;
				String driverClass_tAmazonAuroraInput_2_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_2_in);
				String dbUser_tAmazonAuroraInput_2_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_2_in = context.password;

				String dbPwd_tAmazonAuroraInput_2_in = decryptedPassword_tAmazonAuroraInput_2_in;

				String url_tAmazonAuroraInput_2_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_2_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_2_in,
								dbUser_tAmazonAuroraInput_2_in,
								dbPwd_tAmazonAuroraInput_2_in);

				java.sql.Statement stmt_tAmazonAuroraInput_2_in = conn_tAmazonAuroraInput_2_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_2_in = "select * from reliazedgainloss_"
						+ context.currentDate;

				globalMap.put("tAmazonAuroraInput_2_QUERY",
						dbquery_tAmazonAuroraInput_2_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_2_in = null;
				try {
					rs_tAmazonAuroraInput_2_in = stmt_tAmazonAuroraInput_2_in
							.executeQuery(dbquery_tAmazonAuroraInput_2_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_2_in = rs_tAmazonAuroraInput_2_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_2_in = rsmd_tAmazonAuroraInput_2_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_2_in = null;

					while (rs_tAmazonAuroraInput_2_in.next()) {
						nb_line_tAmazonAuroraInput_2_in++;

						if (colQtyInRs_tAmazonAuroraInput_2_in < 1) {
							row_tAmazonAuroraInput_2_in.accountId = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(1) != null) {
								row_tAmazonAuroraInput_2_in.accountId = rs_tAmazonAuroraInput_2_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_2_in.accountId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 2) {
							row_tAmazonAuroraInput_2_in.securityId = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(2) != null) {
								row_tAmazonAuroraInput_2_in.securityId = rs_tAmazonAuroraInput_2_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_2_in.securityId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 3) {
							row_tAmazonAuroraInput_2_in.orionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(3) != null) {
								row_tAmazonAuroraInput_2_in.orionFirmId = rs_tAmazonAuroraInput_2_in
										.getInt(3);
							} else {
								row_tAmazonAuroraInput_2_in.orionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 4) {
							row_tAmazonAuroraInput_2_in.externalId = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(4) != null) {
								row_tAmazonAuroraInput_2_in.externalId = rs_tAmazonAuroraInput_2_in
										.getInt(4);
							} else {
								row_tAmazonAuroraInput_2_in.externalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 5) {
							row_tAmazonAuroraInput_2_in.grossProceeds = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(5) != null) {
								row_tAmazonAuroraInput_2_in.grossProceeds = rs_tAmazonAuroraInput_2_in
										.getDouble(5);
							} else {
								row_tAmazonAuroraInput_2_in.grossProceeds = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 6) {
							row_tAmazonAuroraInput_2_in.netProceeds = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(6) != null) {
								row_tAmazonAuroraInput_2_in.netProceeds = rs_tAmazonAuroraInput_2_in
										.getDouble(6);
							} else {
								row_tAmazonAuroraInput_2_in.netProceeds = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 7) {
							row_tAmazonAuroraInput_2_in.costAmount = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(7) != null) {
								row_tAmazonAuroraInput_2_in.costAmount = rs_tAmazonAuroraInput_2_in
										.getDouble(7);
							} else {
								row_tAmazonAuroraInput_2_in.costAmount = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 8) {
							row_tAmazonAuroraInput_2_in.dateAcquired = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getString(8) != null) {
								String dateString_tAmazonAuroraInput_2_in = rs_tAmazonAuroraInput_2_in
										.getString(8);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_2_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_2_in)) {
									row_tAmazonAuroraInput_2_in.dateAcquired = rs_tAmazonAuroraInput_2_in
											.getTimestamp(8);
								} else {
									row_tAmazonAuroraInput_2_in.dateAcquired = (java.util.Date) year0_tAmazonAuroraInput_2_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_2_in.dateAcquired = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 9) {
							row_tAmazonAuroraInput_2_in.sellDate = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getString(9) != null) {
								String dateString_tAmazonAuroraInput_2_in = rs_tAmazonAuroraInput_2_in
										.getString(9);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_2_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_2_in)) {
									row_tAmazonAuroraInput_2_in.sellDate = rs_tAmazonAuroraInput_2_in
											.getTimestamp(9);
								} else {
									row_tAmazonAuroraInput_2_in.sellDate = (java.util.Date) year0_tAmazonAuroraInput_2_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_2_in.sellDate = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 10) {
							row_tAmazonAuroraInput_2_in.quantity = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(10) != null) {
								row_tAmazonAuroraInput_2_in.quantity = rs_tAmazonAuroraInput_2_in
										.getDouble(10);
							} else {
								row_tAmazonAuroraInput_2_in.quantity = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 11) {
							row_tAmazonAuroraInput_2_in.longTerm = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(11) != null) {
								row_tAmazonAuroraInput_2_in.longTerm = rs_tAmazonAuroraInput_2_in
										.getBoolean(11);
							} else {
								row_tAmazonAuroraInput_2_in.longTerm = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 12) {
							row_tAmazonAuroraInput_2_in.sellMethod = null;
						} else {

							row_tAmazonAuroraInput_2_in.sellMethod = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_2_in, 12,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 13) {
							row_tAmazonAuroraInput_2_in.totalGains = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(13) != null) {
								row_tAmazonAuroraInput_2_in.totalGains = rs_tAmazonAuroraInput_2_in
										.getDouble(13);
							} else {
								row_tAmazonAuroraInput_2_in.totalGains = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 14) {
							row_tAmazonAuroraInput_2_in.isDeleted = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(14) != null) {
								row_tAmazonAuroraInput_2_in.isDeleted = rs_tAmazonAuroraInput_2_in
										.getBoolean(14);
							} else {
								row_tAmazonAuroraInput_2_in.isDeleted = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 15) {
							row_tAmazonAuroraInput_2_in.createdDate = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getString(15) != null) {
								String dateString_tAmazonAuroraInput_2_in = rs_tAmazonAuroraInput_2_in
										.getString(15);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_2_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_2_in)) {
									row_tAmazonAuroraInput_2_in.createdDate = rs_tAmazonAuroraInput_2_in
											.getTimestamp(15);
								} else {
									row_tAmazonAuroraInput_2_in.createdDate = (java.util.Date) year0_tAmazonAuroraInput_2_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_2_in.createdDate = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 16) {
							row_tAmazonAuroraInput_2_in.createdBy = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(16) != null) {
								row_tAmazonAuroraInput_2_in.createdBy = rs_tAmazonAuroraInput_2_in
										.getInt(16);
							} else {
								row_tAmazonAuroraInput_2_in.createdBy = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 17) {
							row_tAmazonAuroraInput_2_in.editedDate = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getString(17) != null) {
								String dateString_tAmazonAuroraInput_2_in = rs_tAmazonAuroraInput_2_in
										.getString(17);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_2_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_2_in)) {
									row_tAmazonAuroraInput_2_in.editedDate = rs_tAmazonAuroraInput_2_in
											.getTimestamp(17);
								} else {
									row_tAmazonAuroraInput_2_in.editedDate = (java.util.Date) year0_tAmazonAuroraInput_2_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_2_in.editedDate = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 18) {
							row_tAmazonAuroraInput_2_in.editedBy = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(18) != null) {
								row_tAmazonAuroraInput_2_in.editedBy = rs_tAmazonAuroraInput_2_in
										.getInt(18);
							} else {
								row_tAmazonAuroraInput_2_in.editedBy = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_2_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_in";

						tos_count_tAmazonAuroraInput_2_in++;

						/**
						 * [tAmazonAuroraInput_2_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_out";

						row5 = row_tAmazonAuroraInput_2_in;

						tos_count_tAmazonAuroraInput_2_out++;

						/**
						 * [tAmazonAuroraInput_2_out main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row8"
						// /////////////////////////////////////////////

						boolean forceLooprow8 = false;

						row8Struct row8ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row8HashKey.orionConnectFirmId = row5.orionFirmId;

							row8HashKey.hashCodeDirty = true;

							tHash_Lookup_row8.lookup(row8HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row8 != null
								&& tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.orionConnectFirmId = '"
							// + row8HashKey.orionConnectFirmId + "'");
						} // G 071

						row8Struct row8 = null;

						row8Struct fromLookup_row8 = null;
						row8 = row8Default;

						if (tHash_Lookup_row8 != null
								&& tHash_Lookup_row8.hasNext()) { // G 099

							fromLookup_row8 = tHash_Lookup_row8.next();

						} // G 099

						if (fromLookup_row8 != null) {
							row8 = fromLookup_row8;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							firm_relaizedGainLoss_ouput = null;

							// # Output table : 'firm_relaizedGainLoss_ouput'
							firm_relaizedGainLoss_ouput_tmp.accountId = row5.accountId;
							firm_relaizedGainLoss_ouput_tmp.securityId = row5.securityId;
							firm_relaizedGainLoss_ouput_tmp.orionFirmId = row5.orionFirmId;
							firm_relaizedGainLoss_ouput_tmp.externalId = row5.externalId;
							firm_relaizedGainLoss_ouput_tmp.orionEclipseFirmId = row8.orionEclipseFirmId;
							firm_relaizedGainLoss_ouput_tmp.grossProceeds = row5.grossProceeds;
							firm_relaizedGainLoss_ouput_tmp.netProceeds = row5.netProceeds;
							firm_relaizedGainLoss_ouput_tmp.costAmount = row5.costAmount;
							firm_relaizedGainLoss_ouput_tmp.dateAcquired = row5.dateAcquired;
							firm_relaizedGainLoss_ouput_tmp.sellDate = row5.sellDate;
							firm_relaizedGainLoss_ouput_tmp.quantity = row5.quantity;
							firm_relaizedGainLoss_ouput_tmp.longTerm = row5.longTerm;
							firm_relaizedGainLoss_ouput_tmp.sellMethod = row5.sellMethod;
							firm_relaizedGainLoss_ouput_tmp.totalGains = row5.totalGains;
							firm_relaizedGainLoss_ouput_tmp.isDeleted = row5.isDeleted;
							firm_relaizedGainLoss_ouput_tmp.createdDate = row5.createdDate;
							firm_relaizedGainLoss_ouput_tmp.createdBy = row5.createdBy;
							firm_relaizedGainLoss_ouput_tmp.editedDate = row5.editedDate;
							firm_relaizedGainLoss_ouput_tmp.editedBy = row5.editedBy;
							firm_relaizedGainLoss_ouput = firm_relaizedGainLoss_ouput_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "firm_relaizedGainLoss_ouput"
						if (firm_relaizedGainLoss_ouput != null) {

							/**
							 * [tAmazonAuroraOutput_2_in main ] start
							 */

							currentVirtualComponent = "tAmazonAuroraOutput_2";

							currentComponent = "tAmazonAuroraOutput_2_in";

							row_tAmazonAuroraOutput_2_in = firm_relaizedGainLoss_ouput;

							tos_count_tAmazonAuroraOutput_2_in++;

							/**
							 * [tAmazonAuroraOutput_2_in main ] stop
							 */

							/**
							 * [tAmazonAuroraOutput_2_out main ] start
							 */

							currentVirtualComponent = "tAmazonAuroraOutput_2";

							currentComponent = "tAmazonAuroraOutput_2_out";

							whetherReject_tAmazonAuroraOutput_2 = false;
							if (row_tAmazonAuroraOutput_2_in.accountId == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonAuroraOutput_2.setInt(1,
										row_tAmazonAuroraOutput_2_in.accountId);
							}

							if (row_tAmazonAuroraOutput_2_in.securityId == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(2,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setInt(2,
												row_tAmazonAuroraOutput_2_in.securityId);
							}

							if (row_tAmazonAuroraOutput_2_in.orionFirmId == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(3,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setInt(3,
												row_tAmazonAuroraOutput_2_in.orionFirmId);
							}

							if (row_tAmazonAuroraOutput_2_in.externalId == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(4,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setInt(4,
												row_tAmazonAuroraOutput_2_in.externalId);
							}

							if (row_tAmazonAuroraOutput_2_in.orionEclipseFirmId == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(5,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setInt(5,
												row_tAmazonAuroraOutput_2_in.orionEclipseFirmId);
							}

							if (row_tAmazonAuroraOutput_2_in.grossProceeds == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(6,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setDouble(
												6,
												row_tAmazonAuroraOutput_2_in.grossProceeds);
							}

							if (row_tAmazonAuroraOutput_2_in.netProceeds == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(7,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setDouble(
												7,
												row_tAmazonAuroraOutput_2_in.netProceeds);
							}

							if (row_tAmazonAuroraOutput_2_in.costAmount == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(8,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setDouble(
												8,
												row_tAmazonAuroraOutput_2_in.costAmount);
							}

							if (row_tAmazonAuroraOutput_2_in.dateAcquired != null) {
								date_tAmazonAuroraOutput_2 = row_tAmazonAuroraOutput_2_in.dateAcquired
										.getTime();
								if (date_tAmazonAuroraOutput_2 < year1_tAmazonAuroraOutput_2
										|| date_tAmazonAuroraOutput_2 >= year10000_tAmazonAuroraOutput_2) {
									pstmt_tAmazonAuroraOutput_2.setString(9,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tAmazonAuroraOutput_2
											.setTimestamp(
													9,
													new java.sql.Timestamp(
															date_tAmazonAuroraOutput_2));
								}
							} else {
								pstmt_tAmazonAuroraOutput_2.setNull(9,
										java.sql.Types.DATE);
							}

							if (row_tAmazonAuroraOutput_2_in.sellDate != null) {
								date_tAmazonAuroraOutput_2 = row_tAmazonAuroraOutput_2_in.sellDate
										.getTime();
								if (date_tAmazonAuroraOutput_2 < year1_tAmazonAuroraOutput_2
										|| date_tAmazonAuroraOutput_2 >= year10000_tAmazonAuroraOutput_2) {
									pstmt_tAmazonAuroraOutput_2.setString(10,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tAmazonAuroraOutput_2
											.setTimestamp(
													10,
													new java.sql.Timestamp(
															date_tAmazonAuroraOutput_2));
								}
							} else {
								pstmt_tAmazonAuroraOutput_2.setNull(10,
										java.sql.Types.DATE);
							}

							if (row_tAmazonAuroraOutput_2_in.quantity == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(11,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tAmazonAuroraOutput_2.setDouble(11,
										row_tAmazonAuroraOutput_2_in.quantity);
							}

							if (row_tAmazonAuroraOutput_2_in.longTerm == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(12,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tAmazonAuroraOutput_2.setBoolean(12,
										row_tAmazonAuroraOutput_2_in.longTerm);
							}

							if (row_tAmazonAuroraOutput_2_in.sellMethod == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setString(
												13,
												row_tAmazonAuroraOutput_2_in.sellMethod);
							}

							if (row_tAmazonAuroraOutput_2_in.totalGains == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(14,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setDouble(
												14,
												row_tAmazonAuroraOutput_2_in.totalGains);
							}

							if (row_tAmazonAuroraOutput_2_in.isDeleted == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(15,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tAmazonAuroraOutput_2.setBoolean(15,
										row_tAmazonAuroraOutput_2_in.isDeleted);
							}

							if (row_tAmazonAuroraOutput_2_in.createdDate != null) {
								date_tAmazonAuroraOutput_2 = row_tAmazonAuroraOutput_2_in.createdDate
										.getTime();
								if (date_tAmazonAuroraOutput_2 < year1_tAmazonAuroraOutput_2
										|| date_tAmazonAuroraOutput_2 >= year10000_tAmazonAuroraOutput_2) {
									pstmt_tAmazonAuroraOutput_2.setString(16,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tAmazonAuroraOutput_2
											.setTimestamp(
													16,
													new java.sql.Timestamp(
															date_tAmazonAuroraOutput_2));
								}
							} else {
								pstmt_tAmazonAuroraOutput_2.setNull(16,
										java.sql.Types.DATE);
							}

							if (row_tAmazonAuroraOutput_2_in.createdBy == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(17,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonAuroraOutput_2.setInt(17,
										row_tAmazonAuroraOutput_2_in.createdBy);
							}

							if (row_tAmazonAuroraOutput_2_in.editedDate != null) {
								date_tAmazonAuroraOutput_2 = row_tAmazonAuroraOutput_2_in.editedDate
										.getTime();
								if (date_tAmazonAuroraOutput_2 < year1_tAmazonAuroraOutput_2
										|| date_tAmazonAuroraOutput_2 >= year10000_tAmazonAuroraOutput_2) {
									pstmt_tAmazonAuroraOutput_2.setString(18,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tAmazonAuroraOutput_2
											.setTimestamp(
													18,
													new java.sql.Timestamp(
															date_tAmazonAuroraOutput_2));
								}
							} else {
								pstmt_tAmazonAuroraOutput_2.setNull(18,
										java.sql.Types.DATE);
							}

							if (row_tAmazonAuroraOutput_2_in.editedBy == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(19,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonAuroraOutput_2.setInt(19,
										row_tAmazonAuroraOutput_2_in.editedBy);
							}

							pstmt_tAmazonAuroraOutput_2.addBatch();
							nb_line_tAmazonAuroraOutput_2++;

							batchSizeCounter_tAmazonAuroraOutput_2++;
							if (batchSize_tAmazonAuroraOutput_2 <= batchSizeCounter_tAmazonAuroraOutput_2) {
								try {
									int countSum_tAmazonAuroraOutput_2 = 0;
									for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
											.executeBatch()) {
										countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
												: 1);
									}
									insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tAmazonAuroraOutput_2 = 0;
									for (int countEach_tAmazonAuroraOutput_2 : e
											.getUpdateCounts()) {
										countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
												: countEach_tAmazonAuroraOutput_2);
									}
									insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tAmazonAuroraOutput_2 = 0;
							}
							commitCounter_tAmazonAuroraOutput_2++;

							if (commitEvery_tAmazonAuroraOutput_2 <= commitCounter_tAmazonAuroraOutput_2) {

								try {
									int countSum_tAmazonAuroraOutput_2 = 0;
									for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
											.executeBatch()) {
										countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
												: 1);
									}
									insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tAmazonAuroraOutput_2 = 0;
									for (int countEach_tAmazonAuroraOutput_2 : e
											.getUpdateCounts()) {
										countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
												: countEach_tAmazonAuroraOutput_2);
									}
									insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
									System.err.println(e.getMessage());

								}
								conn_tAmazonAuroraOutput_2.commit();
								commitCounter_tAmazonAuroraOutput_2 = 0;

							}

							tos_count_tAmazonAuroraOutput_2_out++;

							/**
							 * [tAmazonAuroraOutput_2_out main ] stop
							 */

						} // End of branch "firm_relaizedGainLoss_ouput"

						/**
						 * [tAmazonAuroraInput_2_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_2_in != null) {
						rs_tAmazonAuroraInput_2_in.close();
					}
					stmt_tAmazonAuroraInput_2_in.close();
					if (conn_tAmazonAuroraInput_2_in != null
							&& !conn_tAmazonAuroraInput_2_in.isClosed()) {

						conn_tAmazonAuroraInput_2_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_2_NB_LINE",
						nb_line_tAmazonAuroraInput_2_in);

				ok_Hash.put("tAmazonAuroraInput_2_in", true);
				end_Hash.put("tAmazonAuroraInput_2_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_2_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				ok_Hash.put("tAmazonAuroraInput_2_out", true);
				end_Hash.put("tAmazonAuroraInput_2_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_2_out end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				ok_Hash.put("tAmazonAuroraOutput_2_in", true);
				end_Hash.put("tAmazonAuroraOutput_2_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_2_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_2 != 0) {
						int countSum_tAmazonAuroraOutput_2 = 0;

						for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_2 = 0;
					for (int countEach_tAmazonAuroraOutput_2 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
								: countEach_tAmazonAuroraOutput_2);
					}

					insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_2 = 0;

				if (pstmt_tAmazonAuroraOutput_2 != null) {

					pstmt_tAmazonAuroraOutput_2.close();

				}

				if (commitCounter_tAmazonAuroraOutput_2 > 0) {

					conn_tAmazonAuroraOutput_2.commit();

				}

				conn_tAmazonAuroraOutput_2.close();

				resourceMap.put("finish_tAmazonAuroraOutput_2", true);

				nb_line_deleted_tAmazonAuroraOutput_2 = nb_line_deleted_tAmazonAuroraOutput_2
						+ deletedCount_tAmazonAuroraOutput_2;
				nb_line_update_tAmazonAuroraOutput_2 = nb_line_update_tAmazonAuroraOutput_2
						+ updatedCount_tAmazonAuroraOutput_2;
				nb_line_inserted_tAmazonAuroraOutput_2 = nb_line_inserted_tAmazonAuroraOutput_2
						+ insertedCount_tAmazonAuroraOutput_2;
				nb_line_rejected_tAmazonAuroraOutput_2 = nb_line_rejected_tAmazonAuroraOutput_2
						+ rejectedCount_tAmazonAuroraOutput_2;

				globalMap.put("tAmazonAuroraOutput_2_NB_LINE",
						nb_line_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_2);

				ok_Hash.put("tAmazonAuroraOutput_2_out", true);
				end_Hash.put("tAmazonAuroraOutput_2_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_2_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row8");

			try {

				/**
				 * [tAmazonAuroraInput_2_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_in";

				/**
				 * [tAmazonAuroraInput_2_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				/**
				 * [tAmazonAuroraInput_2_out finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				/**
				 * [tAmazonAuroraOutput_2_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_2") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_2) {
							String errorMessage_tAmazonAuroraOutput_2 = "failed to close the connection in tAmazonAuroraOutput_2 :"
									+ sqlEx_tAmazonAuroraOutput_2.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_2);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_2_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmId = this.orionEclipseFirmId;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmId = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.orionEclipseFirmId, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_8_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_8_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_8_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_8_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_8_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_8_inStruct row_tAmazonAuroraInput_8_in = new row_tAmazonAuroraInput_8_inStruct();
				row_tAmazonAuroraInput_8_inStruct row8 = row_tAmazonAuroraInput_8_in;

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tAmazonAuroraInput_8_out -
				// inputs:(row_tAmazonAuroraInput_8_in) outputs:(row8,row8) |
				// target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_2 - inputs:(row5,row8)
				// outputs:(firm_relaizedGainLoss_ouput)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_8_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_8_out", false);
				start_Hash.put("tAmazonAuroraInput_8_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_out";

				int tos_count_tAmazonAuroraInput_8_out = 0;

				/**
				 * [tAmazonAuroraInput_8_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_8_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_8_in", false);
				start_Hash.put("tAmazonAuroraInput_8_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_in";

				int tos_count_tAmazonAuroraInput_8_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_8_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_8_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_8_in = calendar_tAmazonAuroraInput_8_in
						.getTime();
				int nb_line_tAmazonAuroraInput_8_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_8_in = null;
				String driverClass_tAmazonAuroraInput_8_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_8_in);
				String dbUser_tAmazonAuroraInput_8_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_8_in = context.password;

				String dbPwd_tAmazonAuroraInput_8_in = decryptedPassword_tAmazonAuroraInput_8_in;

				String url_tAmazonAuroraInput_8_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_8_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_8_in,
								dbUser_tAmazonAuroraInput_8_in,
								dbPwd_tAmazonAuroraInput_8_in);

				java.sql.Statement stmt_tAmazonAuroraInput_8_in = conn_tAmazonAuroraInput_8_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_8_in = "select orionConnectFirmId , orionEclipseFirmId from firm";

				globalMap.put("tAmazonAuroraInput_8_QUERY",
						dbquery_tAmazonAuroraInput_8_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_8_in = null;
				try {
					rs_tAmazonAuroraInput_8_in = stmt_tAmazonAuroraInput_8_in
							.executeQuery(dbquery_tAmazonAuroraInput_8_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_8_in = rs_tAmazonAuroraInput_8_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_8_in = rsmd_tAmazonAuroraInput_8_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_8_in = null;

					while (rs_tAmazonAuroraInput_8_in.next()) {
						nb_line_tAmazonAuroraInput_8_in++;

						if (colQtyInRs_tAmazonAuroraInput_8_in < 1) {
							row_tAmazonAuroraInput_8_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_8_in.getObject(1) != null) {
								row_tAmazonAuroraInput_8_in.orionConnectFirmId = rs_tAmazonAuroraInput_8_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_8_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_8_in < 2) {
							row_tAmazonAuroraInput_8_in.orionEclipseFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_8_in.getObject(2) != null) {
								row_tAmazonAuroraInput_8_in.orionEclipseFirmId = rs_tAmazonAuroraInput_8_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_8_in.orionEclipseFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_8_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_8_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_8";

						currentComponent = "tAmazonAuroraInput_8_in";

						tos_count_tAmazonAuroraInput_8_in++;

						/**
						 * [tAmazonAuroraInput_8_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_8_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_8";

						currentComponent = "tAmazonAuroraInput_8_out";

						row8 = row_tAmazonAuroraInput_8_in;

						tos_count_tAmazonAuroraInput_8_out++;

						/**
						 * [tAmazonAuroraInput_8_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row8 main ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						row8Struct row8_HashRow = new row8Struct();

						row8_HashRow.orionConnectFirmId = row8.orionConnectFirmId;

						row8_HashRow.orionEclipseFirmId = row8.orionEclipseFirmId;

						tHash_Lookup_row8.put(row8_HashRow);

						tos_count_tAdvancedHash_row8++;

						/**
						 * [tAdvancedHash_row8 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_8_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_8";

						currentComponent = "tAmazonAuroraInput_8_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_8_in != null) {
						rs_tAmazonAuroraInput_8_in.close();
					}
					stmt_tAmazonAuroraInput_8_in.close();
					if (conn_tAmazonAuroraInput_8_in != null
							&& !conn_tAmazonAuroraInput_8_in.isClosed()) {

						conn_tAmazonAuroraInput_8_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_8_NB_LINE",
						nb_line_tAmazonAuroraInput_8_in);

				ok_Hash.put("tAmazonAuroraInput_8_in", true);
				end_Hash.put("tAmazonAuroraInput_8_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_8_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_8_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_out";

				ok_Hash.put("tAmazonAuroraInput_8_out", true);
				end_Hash.put("tAmazonAuroraInput_8_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_8_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_8_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_in";

				/**
				 * [tAmazonAuroraInput_8_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_8_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_out";

				/**
				 * [tAmazonAuroraInput_8_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_8_in_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableComparableLookupRow<row1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public Double GrossProceeds;

		public Double getGrossProceeds() {
			return this.GrossProceeds;
		}

		public Double NetProceeds;

		public Double getNetProceeds() {
			return this.NetProceeds;
		}

		public Float CostAmount;

		public Float getCostAmount() {
			return this.CostAmount;
		}

		public java.util.Date DateAquired;

		public java.util.Date getDateAquired() {
			return this.DateAquired;
		}

		public java.util.Date SellDate;

		public java.util.Date getSellDate() {
			return this.SellDate;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Boolean LongTerm;

		public Boolean getLongTerm() {
			return this.LongTerm;
		}

		public String SellMethod;

		public String getSellMethod() {
			return this.SellMethod;
		}

		public Float TotalGains;

		public Float getTotalGains() {
			return this.TotalGains;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OrionFirmId == null) ? 0 : this.OrionFirmId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.OrionFirmId == null) {
				if (other.OrionFirmId != null)
					return false;

			} else if (!this.OrionFirmId.equals(other.OrionFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.OrionFirmId = this.OrionFirmId;
			other.ExternalId = this.ExternalId;
			other.Symbol = this.Symbol;
			other.AccountId = this.AccountId;
			other.AccountNumber = this.AccountNumber;
			other.GrossProceeds = this.GrossProceeds;
			other.NetProceeds = this.NetProceeds;
			other.CostAmount = this.CostAmount;
			other.DateAquired = this.DateAquired;
			other.SellDate = this.SellDate;
			other.Quantity = this.Quantity;
			other.LongTerm = this.LongTerm;
			other.SellMethod = this.SellMethod;
			other.TotalGains = this.TotalGains;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.OrionFirmId = this.OrionFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ExternalId = readInteger(dis, ois);

				this.Symbol = readString(dis, ois);

				this.AccountId = readString(dis, ois);

				this.AccountNumber = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.GrossProceeds = null;
				} else {
					this.GrossProceeds = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.NetProceeds = null;
				} else {
					this.NetProceeds = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.CostAmount = null;
				} else {
					this.CostAmount = dis.readFloat();
				}

				this.DateAquired = readDate(dis, ois);

				this.SellDate = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Quantity = null;
				} else {
					this.Quantity = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.LongTerm = null;
				} else {
					this.LongTerm = dis.readBoolean();
				}

				this.SellMethod = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.TotalGains = null;
				} else {
					this.TotalGains = dis.readFloat();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.ExternalId, dos, oos);

				writeString(this.Symbol, dos, oos);

				writeString(this.AccountId, dos, oos);

				writeString(this.AccountNumber, dos, oos);

				if (this.GrossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.GrossProceeds);
				}

				if (this.NetProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.NetProceeds);
				}

				if (this.CostAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CostAmount);
				}

				writeDate(this.DateAquired, dos, oos);

				writeDate(this.SellDate, dos, oos);

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				if (this.LongTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.LongTerm);
				}

				writeString(this.SellMethod, dos, oos);

				if (this.TotalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalGains);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",GrossProceeds=" + String.valueOf(GrossProceeds));
			sb.append(",NetProceeds=" + String.valueOf(NetProceeds));
			sb.append(",CostAmount=" + String.valueOf(CostAmount));
			sb.append(",DateAquired=" + String.valueOf(DateAquired));
			sb.append(",SellDate=" + String.valueOf(SellDate));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",LongTerm=" + String.valueOf(LongTerm));
			sb.append(",SellMethod=" + SellMethod);
			sb.append(",TotalGains=" + String.valueOf(TotalGains));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OrionFirmId,
					other.OrionFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_1_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_1_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public Double GrossProceeds;

		public Double getGrossProceeds() {
			return this.GrossProceeds;
		}

		public Double NetProceeds;

		public Double getNetProceeds() {
			return this.NetProceeds;
		}

		public Float CostAmount;

		public Float getCostAmount() {
			return this.CostAmount;
		}

		public java.util.Date DateAquired;

		public java.util.Date getDateAquired() {
			return this.DateAquired;
		}

		public java.util.Date SellDate;

		public java.util.Date getSellDate() {
			return this.SellDate;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Boolean LongTerm;

		public Boolean getLongTerm() {
			return this.LongTerm;
		}

		public String SellMethod;

		public String getSellMethod() {
			return this.SellMethod;
		}

		public Float TotalGains;

		public Float getTotalGains() {
			return this.TotalGains;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.GrossProceeds = null;
					} else {
						this.GrossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetProceeds = null;
					} else {
						this.NetProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CostAmount = null;
					} else {
						this.CostAmount = dis.readFloat();
					}

					this.DateAquired = readDate(dis);

					this.SellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.LongTerm = null;
					} else {
						this.LongTerm = dis.readBoolean();
					}

					this.SellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalGains = null;
					} else {
						this.TotalGains = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// Double

				if (this.GrossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.GrossProceeds);
				}

				// Double

				if (this.NetProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.NetProceeds);
				}

				// Float

				if (this.CostAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CostAmount);
				}

				// java.util.Date

				writeDate(this.DateAquired, dos);

				// java.util.Date

				writeDate(this.SellDate, dos);

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Boolean

				if (this.LongTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.LongTerm);
				}

				// String

				writeString(this.SellMethod, dos);

				// Float

				if (this.TotalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalGains);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",GrossProceeds=" + String.valueOf(GrossProceeds));
			sb.append(",NetProceeds=" + String.valueOf(NetProceeds));
			sb.append(",CostAmount=" + String.valueOf(CostAmount));
			sb.append(",DateAquired=" + String.valueOf(DateAquired));
			sb.append(",SellDate=" + String.valueOf(SellDate));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",LongTerm=" + String.valueOf(LongTerm));
			sb.append(",SellMethod=" + SellMethod);
			sb.append(",TotalGains=" + String.valueOf(TotalGains));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_1_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_1_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_1_inStruct row_tAmazonAuroraInput_1_in = new row_tAmazonAuroraInput_1_inStruct();
				row_tAmazonAuroraInput_1_inStruct row1 = row_tAmazonAuroraInput_1_in;

				/**
				 * [tAdvancedHash_row1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row1", false);
				start_Hash
						.put("tAdvancedHash_row1", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row1";

				int tos_count_tAdvancedHash_row1 = 0;

				// connection name:row1
				// source node:tAmazonAuroraInput_1_out -
				// inputs:(row_tAmazonAuroraInput_1_in) outputs:(row1,row1) |
				// target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
				// linked node: tMap_5 - inputs:(mainout,row1,row11,row2)
				// outputs:(ErrorReject,firm_current_reliazedGainLoss_ouput,JoinReject)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row1Struct> getLookup(matchingModeEnum_row1);

				globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);

				/**
				 * [tAdvancedHash_row1 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_out", false);
				start_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				int tos_count_tAmazonAuroraInput_1_out = 0;

				/**
				 * [tAmazonAuroraInput_1_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_in", false);
				start_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				int tos_count_tAmazonAuroraInput_1_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_1_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_1_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_1_in = calendar_tAmazonAuroraInput_1_in
						.getTime();
				int nb_line_tAmazonAuroraInput_1_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_1_in = null;
				String driverClass_tAmazonAuroraInput_1_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_1_in);
				String dbUser_tAmazonAuroraInput_1_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_1_in = context.password;

				String dbPwd_tAmazonAuroraInput_1_in = decryptedPassword_tAmazonAuroraInput_1_in;

				String url_tAmazonAuroraInput_1_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_1_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_1_in,
								dbUser_tAmazonAuroraInput_1_in,
								dbPwd_tAmazonAuroraInput_1_in);

				java.sql.Statement stmt_tAmazonAuroraInput_1_in = conn_tAmazonAuroraInput_1_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_1_in = "select * from realizedgainloss_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_1_QUERY",
						dbquery_tAmazonAuroraInput_1_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_1_in = null;
				try {
					rs_tAmazonAuroraInput_1_in = stmt_tAmazonAuroraInput_1_in
							.executeQuery(dbquery_tAmazonAuroraInput_1_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_1_in = rs_tAmazonAuroraInput_1_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_1_in = rsmd_tAmazonAuroraInput_1_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_1_in = null;

					while (rs_tAmazonAuroraInput_1_in.next()) {
						nb_line_tAmazonAuroraInput_1_in++;

						if (colQtyInRs_tAmazonAuroraInput_1_in < 1) {
							row_tAmazonAuroraInput_1_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(1) != null) {
								row_tAmazonAuroraInput_1_in.OrionFirmId = rs_tAmazonAuroraInput_1_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_1_in.OrionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 2) {
							row_tAmazonAuroraInput_1_in.ExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(2) != null) {
								row_tAmazonAuroraInput_1_in.ExternalId = rs_tAmazonAuroraInput_1_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_1_in.ExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 3) {
							row_tAmazonAuroraInput_1_in.Symbol = null;
						} else {

							row_tAmazonAuroraInput_1_in.Symbol = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 3,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 4) {
							row_tAmazonAuroraInput_1_in.AccountId = null;
						} else {

							row_tAmazonAuroraInput_1_in.AccountId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 4,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 5) {
							row_tAmazonAuroraInput_1_in.AccountNumber = null;
						} else {

							row_tAmazonAuroraInput_1_in.AccountNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 5,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 6) {
							row_tAmazonAuroraInput_1_in.GrossProceeds = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(6) != null) {
								row_tAmazonAuroraInput_1_in.GrossProceeds = rs_tAmazonAuroraInput_1_in
										.getDouble(6);
							} else {
								row_tAmazonAuroraInput_1_in.GrossProceeds = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 7) {
							row_tAmazonAuroraInput_1_in.NetProceeds = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(7) != null) {
								row_tAmazonAuroraInput_1_in.NetProceeds = rs_tAmazonAuroraInput_1_in
										.getDouble(7);
							} else {
								row_tAmazonAuroraInput_1_in.NetProceeds = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 8) {
							row_tAmazonAuroraInput_1_in.CostAmount = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(8) != null) {
								row_tAmazonAuroraInput_1_in.CostAmount = rs_tAmazonAuroraInput_1_in
										.getFloat(8);
							} else {
								row_tAmazonAuroraInput_1_in.CostAmount = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 9) {
							row_tAmazonAuroraInput_1_in.DateAquired = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getString(9) != null) {
								String dateString_tAmazonAuroraInput_1_in = rs_tAmazonAuroraInput_1_in
										.getString(9);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_1_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_1_in)) {
									row_tAmazonAuroraInput_1_in.DateAquired = rs_tAmazonAuroraInput_1_in
											.getTimestamp(9);
								} else {
									row_tAmazonAuroraInput_1_in.DateAquired = (java.util.Date) year0_tAmazonAuroraInput_1_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_1_in.DateAquired = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 10) {
							row_tAmazonAuroraInput_1_in.SellDate = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getString(10) != null) {
								String dateString_tAmazonAuroraInput_1_in = rs_tAmazonAuroraInput_1_in
										.getString(10);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_1_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_1_in)) {
									row_tAmazonAuroraInput_1_in.SellDate = rs_tAmazonAuroraInput_1_in
											.getTimestamp(10);
								} else {
									row_tAmazonAuroraInput_1_in.SellDate = (java.util.Date) year0_tAmazonAuroraInput_1_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_1_in.SellDate = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 11) {
							row_tAmazonAuroraInput_1_in.Quantity = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(11) != null) {
								row_tAmazonAuroraInput_1_in.Quantity = rs_tAmazonAuroraInput_1_in
										.getFloat(11);
							} else {
								row_tAmazonAuroraInput_1_in.Quantity = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 12) {
							row_tAmazonAuroraInput_1_in.LongTerm = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(12) != null) {
								row_tAmazonAuroraInput_1_in.LongTerm = rs_tAmazonAuroraInput_1_in
										.getBoolean(12);
							} else {
								row_tAmazonAuroraInput_1_in.LongTerm = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 13) {
							row_tAmazonAuroraInput_1_in.SellMethod = null;
						} else {

							row_tAmazonAuroraInput_1_in.SellMethod = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 13,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 14) {
							row_tAmazonAuroraInput_1_in.TotalGains = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(14) != null) {
								row_tAmazonAuroraInput_1_in.TotalGains = rs_tAmazonAuroraInput_1_in
										.getFloat(14);
							} else {
								row_tAmazonAuroraInput_1_in.TotalGains = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_1_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

						tos_count_tAmazonAuroraInput_1_in++;

						/**
						 * [tAmazonAuroraInput_1_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_out";

						row1 = row_tAmazonAuroraInput_1_in;

						tos_count_tAmazonAuroraInput_1_out++;

						/**
						 * [tAmazonAuroraInput_1_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row1 main ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						row1Struct row1_HashRow = new row1Struct();

						row1_HashRow.OrionFirmId = row1.OrionFirmId;

						row1_HashRow.ExternalId = row1.ExternalId;

						row1_HashRow.Symbol = row1.Symbol;

						row1_HashRow.AccountId = row1.AccountId;

						row1_HashRow.AccountNumber = row1.AccountNumber;

						row1_HashRow.GrossProceeds = row1.GrossProceeds;

						row1_HashRow.NetProceeds = row1.NetProceeds;

						row1_HashRow.CostAmount = row1.CostAmount;

						row1_HashRow.DateAquired = row1.DateAquired;

						row1_HashRow.SellDate = row1.SellDate;

						row1_HashRow.Quantity = row1.Quantity;

						row1_HashRow.LongTerm = row1.LongTerm;

						row1_HashRow.SellMethod = row1.SellMethod;

						row1_HashRow.TotalGains = row1.TotalGains;

						tHash_Lookup_row1.put(row1_HashRow);

						tos_count_tAdvancedHash_row1++;

						/**
						 * [tAdvancedHash_row1 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_1_in != null) {
						rs_tAmazonAuroraInput_1_in.close();
					}
					stmt_tAmazonAuroraInput_1_in.close();
					if (conn_tAmazonAuroraInput_1_in != null
							&& !conn_tAmazonAuroraInput_1_in.isClosed()) {

						conn_tAmazonAuroraInput_1_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_1_NB_LINE",
						nb_line_tAmazonAuroraInput_1_in);

				ok_Hash.put("tAmazonAuroraInput_1_in", true);
				end_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				ok_Hash.put("tAmazonAuroraInput_1_out", true);
				end_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row1 end ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				tHash_Lookup_row1.endPut();

				ok_Hash.put("tAdvancedHash_row1", true);
				end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_1_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				/**
				 * [tAmazonAuroraInput_1_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				/**
				 * [tAmazonAuroraInput_1_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row1 finally ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				/**
				 * [tAdvancedHash_row1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmName = this.orionEclipseFirmName;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orionEclipseFirmName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_5_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_5_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_5_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_5_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_5_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_5_inStruct row_tAmazonAuroraInput_5_in = new row_tAmazonAuroraInput_5_inStruct();
				row_tAmazonAuroraInput_5_inStruct row10 = row_tAmazonAuroraInput_5_in;

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row10";

				int tos_count_tAdvancedHash_row10 = 0;

				// connection name:row10
				// source node:tAmazonAuroraInput_5_out -
				// inputs:(row_tAmazonAuroraInput_5_in) outputs:(row10,row10) |
				// target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
				// linked node: tMap_1 - inputs:(row9,row10) outputs:(s)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct> getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_5_out", false);
				start_Hash.put("tAmazonAuroraInput_5_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				int tos_count_tAmazonAuroraInput_5_out = 0;

				/**
				 * [tAmazonAuroraInput_5_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_5_in", false);
				start_Hash.put("tAmazonAuroraInput_5_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_in";

				int tos_count_tAmazonAuroraInput_5_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_5_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_5_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_5_in = calendar_tAmazonAuroraInput_5_in
						.getTime();
				int nb_line_tAmazonAuroraInput_5_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_5_in = null;
				String driverClass_tAmazonAuroraInput_5_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_5_in);
				String dbUser_tAmazonAuroraInput_5_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_5_in = context.password;

				String dbPwd_tAmazonAuroraInput_5_in = decryptedPassword_tAmazonAuroraInput_5_in;

				String url_tAmazonAuroraInput_5_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_5_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_5_in,
								dbUser_tAmazonAuroraInput_5_in,
								dbPwd_tAmazonAuroraInput_5_in);

				java.sql.Statement stmt_tAmazonAuroraInput_5_in = conn_tAmazonAuroraInput_5_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_5_in = "select orionConnectFirmId , orionEclipseFirmName from firm";

				globalMap.put("tAmazonAuroraInput_5_QUERY",
						dbquery_tAmazonAuroraInput_5_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_5_in = null;
				try {
					rs_tAmazonAuroraInput_5_in = stmt_tAmazonAuroraInput_5_in
							.executeQuery(dbquery_tAmazonAuroraInput_5_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_5_in = rs_tAmazonAuroraInput_5_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_5_in = rsmd_tAmazonAuroraInput_5_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_5_in = null;

					while (rs_tAmazonAuroraInput_5_in.next()) {
						nb_line_tAmazonAuroraInput_5_in++;

						if (colQtyInRs_tAmazonAuroraInput_5_in < 1) {
							row_tAmazonAuroraInput_5_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_5_in.getObject(1) != null) {
								row_tAmazonAuroraInput_5_in.orionConnectFirmId = rs_tAmazonAuroraInput_5_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_5_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_5_in < 2) {
							row_tAmazonAuroraInput_5_in.orionEclipseFirmName = null;
						} else {

							row_tAmazonAuroraInput_5_in.orionEclipseFirmName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_5_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_5_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_in";

						tos_count_tAmazonAuroraInput_5_in++;

						/**
						 * [tAmazonAuroraInput_5_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_out";

						row10 = row_tAmazonAuroraInput_5_in;

						tos_count_tAmazonAuroraInput_5_out++;

						/**
						 * [tAmazonAuroraInput_5_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row10 main ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						row10Struct row10_HashRow = new row10Struct();

						row10_HashRow.orionConnectFirmId = row10.orionConnectFirmId;

						row10_HashRow.orionEclipseFirmName = row10.orionEclipseFirmName;

						tHash_Lookup_row10.put(row10_HashRow);

						tos_count_tAdvancedHash_row10++;

						/**
						 * [tAdvancedHash_row10 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_5_in != null) {
						rs_tAmazonAuroraInput_5_in.close();
					}
					stmt_tAmazonAuroraInput_5_in.close();
					if (conn_tAmazonAuroraInput_5_in != null
							&& !conn_tAmazonAuroraInput_5_in.isClosed()) {

						conn_tAmazonAuroraInput_5_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_5_NB_LINE",
						nb_line_tAmazonAuroraInput_5_in);

				ok_Hash.put("tAmazonAuroraInput_5_in", true);
				end_Hash.put("tAmazonAuroraInput_5_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_5_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				ok_Hash.put("tAmazonAuroraInput_5_out", true);
				end_Hash.put("tAmazonAuroraInput_5_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_5_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_5_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_in";

				/**
				 * [tAmazonAuroraInput_5_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				/**
				 * [tAmazonAuroraInput_5_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row10 finally ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				/**
				 * [tAdvancedHash_row10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_5_in_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableComparableLookupRow<row11Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.accountId == null) ? 0 : this.accountId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.accountId == null) {
				if (other.accountId != null)
					return false;

			} else if (!this.accountId.equals(other.accountId))

				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.id = this.id;
			other.accountId = this.accountId;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.accountId = this.accountId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.accountId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.accountId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",accountId=" + accountId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.accountId, other.accountId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_6_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_6_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public int id;

		public int getId() {
			return this.id;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.accountId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.accountId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",accountId=" + accountId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_6_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_6_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_6_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_6_inStruct row_tAmazonAuroraInput_6_in = new row_tAmazonAuroraInput_6_inStruct();
				row_tAmazonAuroraInput_6_inStruct row11 = row_tAmazonAuroraInput_6_in;

				/**
				 * [tAdvancedHash_row11 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row11", false);
				start_Hash.put("tAdvancedHash_row11",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row11";

				int tos_count_tAdvancedHash_row11 = 0;

				// connection name:row11
				// source node:tAmazonAuroraInput_6_out -
				// inputs:(row_tAmazonAuroraInput_6_in) outputs:(row11,row11) |
				// target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
				// linked node: tMap_5 - inputs:(mainout,row1,row11,row2)
				// outputs:(ErrorReject,firm_current_reliazedGainLoss_ouput,JoinReject)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row11Struct> getLookup(matchingModeEnum_row11);

				globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);

				/**
				 * [tAdvancedHash_row11 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_6_out", false);
				start_Hash.put("tAmazonAuroraInput_6_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_out";

				int tos_count_tAmazonAuroraInput_6_out = 0;

				/**
				 * [tAmazonAuroraInput_6_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_6_in", false);
				start_Hash.put("tAmazonAuroraInput_6_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_in";

				int tos_count_tAmazonAuroraInput_6_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_6_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_6_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_6_in = calendar_tAmazonAuroraInput_6_in
						.getTime();
				int nb_line_tAmazonAuroraInput_6_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_6_in = null;
				String driverClass_tAmazonAuroraInput_6_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_6_in);
				String dbUser_tAmazonAuroraInput_6_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_6_in = context.password;

				String dbPwd_tAmazonAuroraInput_6_in = decryptedPassword_tAmazonAuroraInput_6_in;

				String url_tAmazonAuroraInput_6_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_6_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_6_in,
								dbUser_tAmazonAuroraInput_6_in,
								dbPwd_tAmazonAuroraInput_6_in);

				java.sql.Statement stmt_tAmazonAuroraInput_6_in = conn_tAmazonAuroraInput_6_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_6_in = "select id , accountId from account";

				globalMap.put("tAmazonAuroraInput_6_QUERY",
						dbquery_tAmazonAuroraInput_6_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_6_in = null;
				try {
					rs_tAmazonAuroraInput_6_in = stmt_tAmazonAuroraInput_6_in
							.executeQuery(dbquery_tAmazonAuroraInput_6_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_6_in = rs_tAmazonAuroraInput_6_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_6_in = rsmd_tAmazonAuroraInput_6_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_6_in = null;

					while (rs_tAmazonAuroraInput_6_in.next()) {
						nb_line_tAmazonAuroraInput_6_in++;

						if (colQtyInRs_tAmazonAuroraInput_6_in < 1) {
							row_tAmazonAuroraInput_6_in.id = 0;
						} else {

							if (rs_tAmazonAuroraInput_6_in.getObject(1) != null) {
								row_tAmazonAuroraInput_6_in.id = rs_tAmazonAuroraInput_6_in
										.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_6_in < 2) {
							row_tAmazonAuroraInput_6_in.accountId = null;
						} else {

							row_tAmazonAuroraInput_6_in.accountId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_6_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_6_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_6_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_6";

						currentComponent = "tAmazonAuroraInput_6_in";

						tos_count_tAmazonAuroraInput_6_in++;

						/**
						 * [tAmazonAuroraInput_6_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_6_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_6";

						currentComponent = "tAmazonAuroraInput_6_out";

						row11 = row_tAmazonAuroraInput_6_in;

						tos_count_tAmazonAuroraInput_6_out++;

						/**
						 * [tAmazonAuroraInput_6_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row11 main ] start
						 */

						currentComponent = "tAdvancedHash_row11";

						row11Struct row11_HashRow = new row11Struct();

						row11_HashRow.id = row11.id;

						row11_HashRow.accountId = row11.accountId;

						tHash_Lookup_row11.put(row11_HashRow);

						tos_count_tAdvancedHash_row11++;

						/**
						 * [tAdvancedHash_row11 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_6_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_6";

						currentComponent = "tAmazonAuroraInput_6_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_6_in != null) {
						rs_tAmazonAuroraInput_6_in.close();
					}
					stmt_tAmazonAuroraInput_6_in.close();
					if (conn_tAmazonAuroraInput_6_in != null
							&& !conn_tAmazonAuroraInput_6_in.isClosed()) {

						conn_tAmazonAuroraInput_6_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_6_NB_LINE",
						nb_line_tAmazonAuroraInput_6_in);

				ok_Hash.put("tAmazonAuroraInput_6_in", true);
				end_Hash.put("tAmazonAuroraInput_6_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_6_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_out";

				ok_Hash.put("tAmazonAuroraInput_6_out", true);
				end_Hash.put("tAmazonAuroraInput_6_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_6_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row11 end ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				tHash_Lookup_row11.endPut();

				ok_Hash.put("tAdvancedHash_row11", true);
				end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_6_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_in";

				/**
				 * [tAmazonAuroraInput_6_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_out";

				/**
				 * [tAmazonAuroraInput_6_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row11 finally ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				/**
				 * [tAdvancedHash_row11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_6_in_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.symbol == null) ? 0 : this.symbol.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.symbol == null) {
				if (other.symbol != null)
					return false;

			} else if (!this.symbol.equals(other.symbol))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id = this.id;
			other.symbol = this.symbol;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.symbol = this.symbol;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.symbol = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.symbol, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",symbol=" + symbol);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.symbol, other.symbol);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_7_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_7_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_RealizedGainStagingToFirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_RealizedGainStagingToFirm) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.symbol = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.symbol, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",symbol=" + symbol);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_7_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_7_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_7_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_7_inStruct row_tAmazonAuroraInput_7_in = new row_tAmazonAuroraInput_7_inStruct();
				row_tAmazonAuroraInput_7_inStruct row2 = row_tAmazonAuroraInput_7_in;

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tAmazonAuroraInput_7_out -
				// inputs:(row_tAmazonAuroraInput_7_in) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_5 - inputs:(mainout,row1,row11,row2)
				// outputs:(ErrorReject,firm_current_reliazedGainLoss_ouput,JoinReject)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_7_out", false);
				start_Hash.put("tAmazonAuroraInput_7_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_out";

				int tos_count_tAmazonAuroraInput_7_out = 0;

				/**
				 * [tAmazonAuroraInput_7_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_7_in", false);
				start_Hash.put("tAmazonAuroraInput_7_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_in";

				int tos_count_tAmazonAuroraInput_7_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_7_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_7_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_7_in = calendar_tAmazonAuroraInput_7_in
						.getTime();
				int nb_line_tAmazonAuroraInput_7_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_7_in = null;
				String driverClass_tAmazonAuroraInput_7_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_7_in);
				String dbUser_tAmazonAuroraInput_7_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_7_in = context.password;

				String dbPwd_tAmazonAuroraInput_7_in = decryptedPassword_tAmazonAuroraInput_7_in;

				String url_tAmazonAuroraInput_7_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_7_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_7_in,
								dbUser_tAmazonAuroraInput_7_in,
								dbPwd_tAmazonAuroraInput_7_in);

				java.sql.Statement stmt_tAmazonAuroraInput_7_in = conn_tAmazonAuroraInput_7_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_7_in = "select  id  , symbol from security";

				globalMap.put("tAmazonAuroraInput_7_QUERY",
						dbquery_tAmazonAuroraInput_7_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_7_in = null;
				try {
					rs_tAmazonAuroraInput_7_in = stmt_tAmazonAuroraInput_7_in
							.executeQuery(dbquery_tAmazonAuroraInput_7_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_7_in = rs_tAmazonAuroraInput_7_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_7_in = rsmd_tAmazonAuroraInput_7_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_7_in = null;

					while (rs_tAmazonAuroraInput_7_in.next()) {
						nb_line_tAmazonAuroraInput_7_in++;

						if (colQtyInRs_tAmazonAuroraInput_7_in < 1) {
							row_tAmazonAuroraInput_7_in.id = null;
						} else {

							if (rs_tAmazonAuroraInput_7_in.getObject(1) != null) {
								row_tAmazonAuroraInput_7_in.id = rs_tAmazonAuroraInput_7_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_7_in.id = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_7_in < 2) {
							row_tAmazonAuroraInput_7_in.symbol = null;
						} else {

							row_tAmazonAuroraInput_7_in.symbol = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_7_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_7_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_7_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_7";

						currentComponent = "tAmazonAuroraInput_7_in";

						tos_count_tAmazonAuroraInput_7_in++;

						/**
						 * [tAmazonAuroraInput_7_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_7_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_7";

						currentComponent = "tAmazonAuroraInput_7_out";

						row2 = row_tAmazonAuroraInput_7_in;

						tos_count_tAmazonAuroraInput_7_out++;

						/**
						 * [tAmazonAuroraInput_7_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.id = row2.id;

						row2_HashRow.symbol = row2.symbol;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_7_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_7";

						currentComponent = "tAmazonAuroraInput_7_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_7_in != null) {
						rs_tAmazonAuroraInput_7_in.close();
					}
					stmt_tAmazonAuroraInput_7_in.close();
					if (conn_tAmazonAuroraInput_7_in != null
							&& !conn_tAmazonAuroraInput_7_in.isClosed()) {

						conn_tAmazonAuroraInput_7_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_7_NB_LINE",
						nb_line_tAmazonAuroraInput_7_in);

				ok_Hash.put("tAmazonAuroraInput_7_in", true);
				end_Hash.put("tAmazonAuroraInput_7_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_7_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_out";

				ok_Hash.put("tAmazonAuroraInput_7_out", true);
				end_Hash.put("tAmazonAuroraInput_7_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_7_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_7_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_in";

				/**
				 * [tAmazonAuroraInput_7_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_out";

				/**
				 * [tAmazonAuroraInput_7_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_7_in_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final RealizedGainStagingToFirm RealizedGainStagingToFirmClass = new RealizedGainStagingToFirm();

		int exitCode = RealizedGainStagingToFirmClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = RealizedGainStagingToFirm.class
					.getClassLoader().getResourceAsStream(
							"reliazedgainloss/realizedgainstagingtofirm_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.serverIp = (String) context.getProperty("serverIp");
			context.database = (String) context.getProperty("database");
			context.filepath_advisor = (String) context
					.getProperty("filepath_advisor");
			context.positionpath = (String) context.getProperty("positionpath");
			context.custodianpath = (String) context
					.getProperty("custodianpath");
			context.taxlotpath = (String) context.getProperty("taxlotpath");
			context.transactionpath = (String) context
					.getProperty("transactionpath");
			context.securitypath = (String) context.getProperty("securitypath");
			context.accountpath = (String) context.getProperty("accountpath");
			context.inputDir = (String) context.getProperty("inputDir");
			context.username = (String) context.getProperty("username");
			context.password = (String) context.getProperty("password");
			context.contextDir = (String) context.getProperty("contextDir");
			context.stagingdb = (String) context.getProperty("stagingdb");
			context.commondb = (String) context.getProperty("commondb");
			context.localpath = (String) context.getProperty("localpath");
			context.port = (String) context.getProperty("port");
			context.host = (String) context.getProperty("host");
			context.teamPreferenceOption = (String) context
					.getProperty("teamPreferenceOption");
			try {
				context.rowCountTSV = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountTSV"));
			} catch (NumberFormatException e) {
				context.rowCountTSV = null;
			}
			try {
				context.rowCountStaging = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountStaging"));
			} catch (NumberFormatException e) {
				context.rowCountStaging = null;
			}
			try {
				context.rowCountFirm = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountFirm"));
			} catch (NumberFormatException e) {
				context.rowCountFirm = null;
			}
			context.firm = (String) context.getProperty("firm");
			try {
				context.rowCountUpdated = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountUpdated"));
			} catch (NumberFormatException e) {
				context.rowCountUpdated = null;
			}
			try {
				context.rowCountRejectedFirm = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("rowCountRejectedFirm"));
			} catch (NumberFormatException e) {
				context.rowCountRejectedFirm = null;
			}
			context.firmId = (String) context.getProperty("firmId");
			context.date = (String) context.getProperty("date");
			context.filestorage = (String) context.getProperty("filestorage");
			context.filestorage2 = (String) context.getProperty("filestorage2");
			context.pathforlocal = (String) context.getProperty("pathforlocal");
			try {
				context.a = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("a"));
			} catch (NumberFormatException e) {
				context.a = null;
			}
			try {
				context.b = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("b"));
			} catch (NumberFormatException e) {
				context.b = null;
			}
			try {
				context.c = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("c"));
			} catch (NumberFormatException e) {
				context.c = null;
			}
			try {
				context.d = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("d"));
			} catch (NumberFormatException e) {
				context.d = null;
			}
			try {
				context.e = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("e"));
			} catch (NumberFormatException e) {
				context.e = null;
			}
			try {
				context.f = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("f"));
			} catch (NumberFormatException e) {
				context.f = null;
			}
			try {
				context.g = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("g"));
			} catch (NumberFormatException e) {
				context.g = null;
			}
			context.firmint3 = (String) context.getProperty("firmint3");
			try {
				context.firmids = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("firmids"));
			} catch (NumberFormatException e) {
				context.firmids = null;
			}
			context.RealizedGainLossPath = (String) context
					.getProperty("RealizedGainLossPath");
			context.currentDate = (String) context.getProperty("currentDate");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("serverIp")) {
				context.serverIp = (String) parentContextMap.get("serverIp");
			}
			if (parentContextMap.containsKey("database")) {
				context.database = (String) parentContextMap.get("database");
			}
			if (parentContextMap.containsKey("filepath_advisor")) {
				context.filepath_advisor = (String) parentContextMap
						.get("filepath_advisor");
			}
			if (parentContextMap.containsKey("positionpath")) {
				context.positionpath = (String) parentContextMap
						.get("positionpath");
			}
			if (parentContextMap.containsKey("custodianpath")) {
				context.custodianpath = (String) parentContextMap
						.get("custodianpath");
			}
			if (parentContextMap.containsKey("taxlotpath")) {
				context.taxlotpath = (String) parentContextMap
						.get("taxlotpath");
			}
			if (parentContextMap.containsKey("transactionpath")) {
				context.transactionpath = (String) parentContextMap
						.get("transactionpath");
			}
			if (parentContextMap.containsKey("securitypath")) {
				context.securitypath = (String) parentContextMap
						.get("securitypath");
			}
			if (parentContextMap.containsKey("accountpath")) {
				context.accountpath = (String) parentContextMap
						.get("accountpath");
			}
			if (parentContextMap.containsKey("inputDir")) {
				context.inputDir = (String) parentContextMap.get("inputDir");
			}
			if (parentContextMap.containsKey("username")) {
				context.username = (String) parentContextMap.get("username");
			}
			if (parentContextMap.containsKey("password")) {
				context.password = (String) parentContextMap.get("password");
			}
			if (parentContextMap.containsKey("contextDir")) {
				context.contextDir = (String) parentContextMap
						.get("contextDir");
			}
			if (parentContextMap.containsKey("stagingdb")) {
				context.stagingdb = (String) parentContextMap.get("stagingdb");
			}
			if (parentContextMap.containsKey("commondb")) {
				context.commondb = (String) parentContextMap.get("commondb");
			}
			if (parentContextMap.containsKey("localpath")) {
				context.localpath = (String) parentContextMap.get("localpath");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (String) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("host")) {
				context.host = (String) parentContextMap.get("host");
			}
			if (parentContextMap.containsKey("teamPreferenceOption")) {
				context.teamPreferenceOption = (String) parentContextMap
						.get("teamPreferenceOption");
			}
			if (parentContextMap.containsKey("rowCountTSV")) {
				context.rowCountTSV = (Integer) parentContextMap
						.get("rowCountTSV");
			}
			if (parentContextMap.containsKey("rowCountStaging")) {
				context.rowCountStaging = (Integer) parentContextMap
						.get("rowCountStaging");
			}
			if (parentContextMap.containsKey("rowCountFirm")) {
				context.rowCountFirm = (Integer) parentContextMap
						.get("rowCountFirm");
			}
			if (parentContextMap.containsKey("firm")) {
				context.firm = (String) parentContextMap.get("firm");
			}
			if (parentContextMap.containsKey("rowCountUpdated")) {
				context.rowCountUpdated = (Integer) parentContextMap
						.get("rowCountUpdated");
			}
			if (parentContextMap.containsKey("rowCountRejectedFirm")) {
				context.rowCountRejectedFirm = (Integer) parentContextMap
						.get("rowCountRejectedFirm");
			}
			if (parentContextMap.containsKey("firmId")) {
				context.firmId = (String) parentContextMap.get("firmId");
			}
			if (parentContextMap.containsKey("date")) {
				context.date = (String) parentContextMap.get("date");
			}
			if (parentContextMap.containsKey("filestorage")) {
				context.filestorage = (String) parentContextMap
						.get("filestorage");
			}
			if (parentContextMap.containsKey("filestorage2")) {
				context.filestorage2 = (String) parentContextMap
						.get("filestorage2");
			}
			if (parentContextMap.containsKey("pathforlocal")) {
				context.pathforlocal = (String) parentContextMap
						.get("pathforlocal");
			}
			if (parentContextMap.containsKey("a")) {
				context.a = (Boolean) parentContextMap.get("a");
			}
			if (parentContextMap.containsKey("b")) {
				context.b = (Boolean) parentContextMap.get("b");
			}
			if (parentContextMap.containsKey("c")) {
				context.c = (Boolean) parentContextMap.get("c");
			}
			if (parentContextMap.containsKey("d")) {
				context.d = (Boolean) parentContextMap.get("d");
			}
			if (parentContextMap.containsKey("e")) {
				context.e = (Boolean) parentContextMap.get("e");
			}
			if (parentContextMap.containsKey("f")) {
				context.f = (Boolean) parentContextMap.get("f");
			}
			if (parentContextMap.containsKey("g")) {
				context.g = (Boolean) parentContextMap.get("g");
			}
			if (parentContextMap.containsKey("firmint3")) {
				context.firmint3 = (String) parentContextMap.get("firmint3");
			}
			if (parentContextMap.containsKey("firmids")) {
				context.firmids = (Integer) parentContextMap.get("firmids");
			}
			if (parentContextMap.containsKey("RealizedGainLossPath")) {
				context.RealizedGainLossPath = (String) parentContextMap
						.get("RealizedGainLossPath");
			}
			if (parentContextMap.containsKey("currentDate")) {
				context.currentDate = (String) parentContextMap
						.get("currentDate");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tAmazonAuroraInput_3_inProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tAmazonAuroraInput_3_in) {
			globalMap.put("tAmazonAuroraInput_3_in_SUBPROCESS_STATE", -1);

			e_tAmazonAuroraInput_3_in.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : RealizedGainStagingToFirm");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 588139 characters generated by Talend Open Studio for Data Integration on the
 * October 24, 2016 5:34:31 PM IST
 ************************************************************************************************/
