// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package reliazedgainloss.firmaccountimport_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: FirmAccountImport Purpose: Firm Account Import<br>
 * Description: Firm Account Import <br>
 * @author user@talend.com
 * @version 6.2.0.20160510_1709
 * @status 
 */
public class FirmAccountImport implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (currentDate != null) {

				this.setProperty("currentDate", currentDate.toString());

			}

			if (preferenceOption != null) {

				this.setProperty("preferenceOption",
						preferenceOption.toString());

			}

			if (custodianpath != null) {

				this.setProperty("custodianpath", custodianpath.toString());

			}

			if (inputDir != null) {

				this.setProperty("inputDir", inputDir.toString());

			}

			if (taxlotpath != null) {

				this.setProperty("taxlotpath", taxlotpath.toString());

			}

			if (contextDir != null) {

				this.setProperty("contextDir", contextDir.toString());

			}

			if (database != null) {

				this.setProperty("database", database.toString());

			}

			if (password != null) {

				this.setProperty("password", password.toString());

			}

			if (filepath_advisor != null) {

				this.setProperty("filepath_advisor",
						filepath_advisor.toString());

			}

			if (transactionpath != null) {

				this.setProperty("transactionpath", transactionpath.toString());

			}

			if (serverIp != null) {

				this.setProperty("serverIp", serverIp.toString());

			}

			if (positionpath != null) {

				this.setProperty("positionpath", positionpath.toString());

			}

			if (securitypath != null) {

				this.setProperty("securitypath", securitypath.toString());

			}

			if (accountpath != null) {

				this.setProperty("accountpath", accountpath.toString());

			}

			if (username != null) {

				this.setProperty("username", username.toString());

			}

			if (localpath != null) {

				this.setProperty("localpath", localpath.toString());

			}

			if (commondb != null) {

				this.setProperty("commondb", commondb.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (stagingdb != null) {

				this.setProperty("stagingdb", stagingdb.toString());

			}

			if (host != null) {

				this.setProperty("host", host.toString());

			}

			if (rowCountRejectedFirm != null) {

				this.setProperty("rowCountRejectedFirm",
						rowCountRejectedFirm.toString());

			}

			if (firm != null) {

				this.setProperty("firm", firm.toString());

			}

			if (rowCountFirm != null) {

				this.setProperty("rowCountFirm", rowCountFirm.toString());

			}

			if (rowCountStaging != null) {

				this.setProperty("rowCountStaging", rowCountStaging.toString());

			}

			if (rowCountTSV != null) {

				this.setProperty("rowCountTSV", rowCountTSV.toString());

			}

			if (rowCountUpdated != null) {

				this.setProperty("rowCountUpdated", rowCountUpdated.toString());

			}

			if (teamPreferenceOption != null) {

				this.setProperty("teamPreferenceOption",
						teamPreferenceOption.toString());

			}

			if (date != null) {

				this.setProperty("date", date.toString());

			}

			if (firmId != null) {

				this.setProperty("firmId", firmId.toString());

			}

			if (firmint3 != null) {

				this.setProperty("firmint3", firmint3.toString());

			}

			if (pathforlocal != null) {

				this.setProperty("pathforlocal", pathforlocal.toString());

			}

			if (filestorage != null) {

				this.setProperty("filestorage", filestorage.toString());

			}

			if (a != null) {

				this.setProperty("a", a.toString());

			}

			if (b != null) {

				this.setProperty("b", b.toString());

			}

			if (c != null) {

				this.setProperty("c", c.toString());

			}

			if (d != null) {

				this.setProperty("d", d.toString());

			}

			if (e != null) {

				this.setProperty("e", e.toString());

			}

			if (f != null) {

				this.setProperty("f", f.toString());

			}

			if (g != null) {

				this.setProperty("g", g.toString());

			}

			if (filestorage2 != null) {

				this.setProperty("filestorage2", filestorage2.toString());

			}

			if (firmids != null) {

				this.setProperty("firmids", firmids.toString());

			}

		}

		public String currentDate;

		public String getCurrentDate() {
			return this.currentDate;
		}

		public String preferenceOption;

		public String getPreferenceOption() {
			return this.preferenceOption;
		}

		public String custodianpath;

		public String getCustodianpath() {
			return this.custodianpath;
		}

		public String inputDir;

		public String getInputDir() {
			return this.inputDir;
		}

		public String taxlotpath;

		public String getTaxlotpath() {
			return this.taxlotpath;
		}

		public String contextDir;

		public String getContextDir() {
			return this.contextDir;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String filepath_advisor;

		public String getFilepath_advisor() {
			return this.filepath_advisor;
		}

		public String transactionpath;

		public String getTransactionpath() {
			return this.transactionpath;
		}

		public String serverIp;

		public String getServerIp() {
			return this.serverIp;
		}

		public String positionpath;

		public String getPositionpath() {
			return this.positionpath;
		}

		public String securitypath;

		public String getSecuritypath() {
			return this.securitypath;
		}

		public String accountpath;

		public String getAccountpath() {
			return this.accountpath;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String localpath;

		public String getLocalpath() {
			return this.localpath;
		}

		public String commondb;

		public String getCommondb() {
			return this.commondb;
		}

		public String port;

		public String getPort() {
			return this.port;
		}

		public String stagingdb;

		public String getStagingdb() {
			return this.stagingdb;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public Integer rowCountRejectedFirm;

		public Integer getRowCountRejectedFirm() {
			return this.rowCountRejectedFirm;
		}

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		public Integer rowCountFirm;

		public Integer getRowCountFirm() {
			return this.rowCountFirm;
		}

		public Integer rowCountStaging;

		public Integer getRowCountStaging() {
			return this.rowCountStaging;
		}

		public Integer rowCountTSV;

		public Integer getRowCountTSV() {
			return this.rowCountTSV;
		}

		public Integer rowCountUpdated;

		public Integer getRowCountUpdated() {
			return this.rowCountUpdated;
		}

		public String teamPreferenceOption;

		public String getTeamPreferenceOption() {
			return this.teamPreferenceOption;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String firmId;

		public String getFirmId() {
			return this.firmId;
		}

		public String firmint3;

		public String getFirmint3() {
			return this.firmint3;
		}

		public String pathforlocal;

		public String getPathforlocal() {
			return this.pathforlocal;
		}

		public String filestorage;

		public String getFilestorage() {
			return this.filestorage;
		}

		public Boolean a;

		public Boolean getA() {
			return this.a;
		}

		public Boolean b;

		public Boolean getB() {
			return this.b;
		}

		public Boolean c;

		public Boolean getC() {
			return this.c;
		}

		public Boolean d;

		public Boolean getD() {
			return this.d;
		}

		public Boolean e;

		public Boolean getE() {
			return this.e;
		}

		public Boolean f;

		public Boolean getF() {
			return this.f;
		}

		public Boolean g;

		public Boolean getG() {
			return this.g;
		}

		public String filestorage2;

		public String getFilestorage2() {
			return this.filestorage2;
		}

		public Integer firmids;

		public Integer getFirmids() {
			return this.firmids;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "FirmAccountImport";
	private final String projectName = "RELIAZEDGAINLOSS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_CB99QC1vEea736U70H88Eg", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					FirmAccountImport.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(FirmAccountImport.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_12_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_12_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tWarn_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tWarn_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row18_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_18_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row19_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_new_account_lookup_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_10_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_new_portfolio_lookup_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_11_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_9_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row21_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_20_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row22_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_custodian_lookup_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_advisor_lookup_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_5_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_account_type_lookup_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_6_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_account_lookup_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_7_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_household_portfolioId_lookup_error(
			Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_8_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_14_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row13_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_13_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_15_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row16_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_16_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_12_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_12_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_12_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_12_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_17_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_17_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_17_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_12_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_12_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_12_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_2_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_2_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_2_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_13_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_13_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_13_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_19_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_19_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_19_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_5_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_5_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_5_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_11_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_11_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_11_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_1_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_1_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_1_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_3_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_3_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_3_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_8_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_8_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_8_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_4_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_4_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_4_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_9_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_9_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_9_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_6_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_6_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_6_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAmazonAuroraOutput_7_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_7_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_7_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAmazonAuroraInput_1_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_1_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_1_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_18_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_18_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_18_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_18_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_10_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_10_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_10_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_10_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_11_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_11_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_11_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_11_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_9_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_9_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_9_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_9_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_20_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_20_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_20_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_20_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_4_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_4_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_4_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_5_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_5_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_5_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_5_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_6_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_6_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_6_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_6_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_7_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_7_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_7_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_7_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_8_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_8_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_8_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_8_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_14_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_14_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_14_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_14_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_2_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_2_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_2_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_13_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_13_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_13_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_13_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_15_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_15_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_15_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_15_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_16_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_16_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_16_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_16_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_3_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_3_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_3_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tWarn_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_12_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_17_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_19_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_1_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_18_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_10_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_11_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_9_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_20_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_4_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_5_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_6_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_7_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_8_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_14_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_2_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_13_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_15_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_16_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_3_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());

				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */

				/**
				 * [tWarn_1 main ] start
				 */

				currentComponent = "tWarn_1";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread
						.currentThread().getId() + "", "FATAL", "",
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3, "", "");
				tLogCatcher_1.addMessage("tWarn", "tWarn_1", 6,
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3, 42);
				tLogCatcher_1Process(globalMap);
				globalMap.put("tWarn_1_WARN_MESSAGES",
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3);
				globalMap.put("tWarn_1_WARN_PRIORITY", 6);
				globalMap.put("tWarn_1_WARN_CODE", 42);

				tos_count_tWarn_1++;

				/**
				 * [tWarn_1 main ] stop
				 */

				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				/**
				 * [tWarn_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_2 begin ] start
				 */

				ok_Hash.put("tWarn_2", false);
				start_Hash.put("tWarn_2", System.currentTimeMillis());

				currentComponent = "tWarn_2";

				int tos_count_tWarn_2 = 0;

				/**
				 * [tWarn_2 begin ] stop
				 */

				/**
				 * [tWarn_2 main ] start
				 */

				currentComponent = "tWarn_2";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread
						.currentThread().getId() + "", "FATAL", "",
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3, "", "");
				tLogCatcher_1.addMessage("tWarn", "tWarn_2", 6,
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3, 42);
				tLogCatcher_1Process(globalMap);
				globalMap.put("tWarn_2_WARN_MESSAGES",
						"File contains Non permitted OrionConnectId"
								+ context.firmids + "  for OrionEclipseFirmId "
								+ context.firmint3);
				globalMap.put("tWarn_2_WARN_PRIORITY", 6);
				globalMap.put("tWarn_2_WARN_CODE", 42);

				tos_count_tWarn_2++;

				/**
				 * [tWarn_2 main ] stop
				 */

				/**
				 * [tWarn_2 end ] start
				 */

				currentComponent = "tWarn_2";

				ok_Hash.put("tWarn_2", true);
				end_Hash.put("tWarn_2", System.currentTimeMillis());

				/**
				 * [tWarn_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_2 finally ] start
				 */

				currentComponent = "tWarn_2";

				/**
				 * [tWarn_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}

				parentContextMap_tRunJob_1.put("currentDate",
						context.currentDate);

				parentContextMap_tRunJob_1.put("preferenceOption",
						context.preferenceOption);

				parentContextMap_tRunJob_1.put("custodianpath",
						context.custodianpath);

				parentContextMap_tRunJob_1.put("inputDir", context.inputDir);

				parentContextMap_tRunJob_1
						.put("taxlotpath", context.taxlotpath);

				parentContextMap_tRunJob_1
						.put("contextDir", context.contextDir);

				parentContextMap_tRunJob_1.put("database", context.database);

				parentContextMap_tRunJob_1.put("password", context.password);

				parentContextMap_tRunJob_1.put("filepath_advisor",
						context.filepath_advisor);

				parentContextMap_tRunJob_1.put("transactionpath",
						context.transactionpath);

				parentContextMap_tRunJob_1.put("serverIp", context.serverIp);

				parentContextMap_tRunJob_1.put("positionpath",
						context.positionpath);

				parentContextMap_tRunJob_1.put("securitypath",
						context.securitypath);

				parentContextMap_tRunJob_1.put("accountpath",
						context.accountpath);

				parentContextMap_tRunJob_1.put("username", context.username);

				parentContextMap_tRunJob_1.put("localpath", context.localpath);

				parentContextMap_tRunJob_1.put("commondb", context.commondb);

				parentContextMap_tRunJob_1.put("port", context.port);

				parentContextMap_tRunJob_1.put("stagingdb", context.stagingdb);

				parentContextMap_tRunJob_1.put("host", context.host);

				parentContextMap_tRunJob_1.put("rowCountRejectedFirm",
						context.rowCountRejectedFirm);

				parentContextMap_tRunJob_1.put("firm", context.firm);

				parentContextMap_tRunJob_1.put("rowCountFirm",
						context.rowCountFirm);

				parentContextMap_tRunJob_1.put("rowCountStaging",
						context.rowCountStaging);

				parentContextMap_tRunJob_1.put("rowCountTSV",
						context.rowCountTSV);

				parentContextMap_tRunJob_1.put("rowCountUpdated",
						context.rowCountUpdated);

				parentContextMap_tRunJob_1.put("teamPreferenceOption",
						context.teamPreferenceOption);

				parentContextMap_tRunJob_1.put("date", context.date);

				parentContextMap_tRunJob_1.put("firmId", context.firmId);

				parentContextMap_tRunJob_1.put("firmint3", context.firmint3);

				parentContextMap_tRunJob_1.put("pathforlocal",
						context.pathforlocal);

				parentContextMap_tRunJob_1.put("filestorage",
						context.filestorage);

				parentContextMap_tRunJob_1.put("a", context.a);

				parentContextMap_tRunJob_1.put("b", context.b);

				parentContextMap_tRunJob_1.put("c", context.c);

				parentContextMap_tRunJob_1.put("d", context.d);

				parentContextMap_tRunJob_1.put("e", context.e);

				parentContextMap_tRunJob_1.put("f", context.f);

				parentContextMap_tRunJob_1.put("g", context.g);

				parentContextMap_tRunJob_1.put("filestorage2",
						context.filestorage2);

				parentContextMap_tRunJob_1.put("firmids", context.firmids);

				Object obj_tRunJob_1 = null;

				reliazedgainloss.account_and_portfolio_creation_for_sleeve_0_1.Account_AND_Portfolio_creation_for_sleeve childJob_tRunJob_1 = new reliazedgainloss.account_and_portfolio_creation_for_sleeve_0_1.Account_AND_Portfolio_creation_for_sleeve();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public static class row_tAmazonAuroraOutput_6_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_6_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_6_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class statCatcherOutputStruct implements
			routines.system.IPersistableRow<statCatcherOutputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(statCatcherOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				statCatcherOutputStruct statCatcherOutput = new statCatcherOutputStruct();
				statCatcherOutputStruct row_tAmazonAuroraOutput_6_in = statCatcherOutput;

				/**
				 * [tAmazonAuroraOutput_6_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_6_out", false);
				start_Hash.put("tAmazonAuroraOutput_6_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_6";

				currentComponent = "tAmazonAuroraOutput_6_out";

				int tos_count_tAmazonAuroraOutput_6_out = 0;

				int nb_line_tAmazonAuroraOutput_6 = 0;
				int nb_line_update_tAmazonAuroraOutput_6 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_6 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_6 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_6 = 0;

				int deletedCount_tAmazonAuroraOutput_6 = 0;
				int updatedCount_tAmazonAuroraOutput_6 = 0;
				int insertedCount_tAmazonAuroraOutput_6 = 0;

				int rejectedCount_tAmazonAuroraOutput_6 = 0;

				String tableName_tAmazonAuroraOutput_6 = "statcatcher";
				boolean whetherReject_tAmazonAuroraOutput_6 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_6 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_6.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_6 = calendar_tAmazonAuroraOutput_6
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_6.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_6 = calendar_tAmazonAuroraOutput_6
						.getTime().getTime();
				long date_tAmazonAuroraOutput_6;

				java.sql.Connection conn_tAmazonAuroraOutput_6 = null;
				String dbProperties_tAmazonAuroraOutput_6 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_6 = null;
				if (dbProperties_tAmazonAuroraOutput_6 == null
						|| dbProperties_tAmazonAuroraOutput_6.trim().length() == 0) {
					url_tAmazonAuroraOutput_6 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_6 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_6
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_6 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_6 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ properties_tAmazonAuroraOutput_6;
				}
				String driverClass_tAmazonAuroraOutput_6 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_6 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_6 = context.password;

				String dbPwd_tAmazonAuroraOutput_6 = decryptedPassword_tAmazonAuroraOutput_6;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_6);

				conn_tAmazonAuroraOutput_6 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_6,
								dbUser_tAmazonAuroraOutput_6,
								dbPwd_tAmazonAuroraOutput_6);

				resourceMap.put("conn_tAmazonAuroraOutput_6",
						conn_tAmazonAuroraOutput_6);
				conn_tAmazonAuroraOutput_6.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_6 = 10000;
				int commitCounter_tAmazonAuroraOutput_6 = 0;

				int count_tAmazonAuroraOutput_6 = 0;

				String insert_tAmazonAuroraOutput_6 = "INSERT INTO `"
						+ "statcatcher"
						+ "` (`moment`,`project`,`job`,`job_version`,`context`,`message_type`,`message`,`duration`,`firmName`) VALUES (?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_6 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_6 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_6 = conn_tAmazonAuroraOutput_6
						.prepareStatement(insert_tAmazonAuroraOutput_6);

				/**
				 * [tAmazonAuroraOutput_6_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_6_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_6_in", false);
				start_Hash.put("tAmazonAuroraOutput_6_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_6";

				currentComponent = "tAmazonAuroraOutput_6_in";

				int tos_count_tAmazonAuroraOutput_6_in = 0;

				/**
				 * [tAmazonAuroraOutput_6_in begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				int tos_count_tMap_9 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_9__Struct {
					String firmName;
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				statCatcherOutputStruct statCatcherOutput_tmp = new statCatcherOutputStruct();
				// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row11.pid = pid;
					row11.root_pid = rootPid;
					row11.father_pid = fatherPid;
					row11.project = projectName;
					row11.job = jobName;
					row11.context = contextStr;
					row11.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row11.message = scm.getMessage();
					row11.duration = scm.getDuration();
					row11.moment = scm.getMoment();
					row11.message_type = scm.getMessageType();
					row11.job_version = scm.getJobVersion();
					row11.job_repository_id = scm.getJobId();
					row11.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tMap_9 main ] start
					 */

					currentComponent = "tMap_9";

					boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_9 = false;
					boolean mainRowRejected_tMap_9 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_9__Struct Var = Var__tMap_9;
						Var.firmName = context.inputDir.substring(
								context.inputDir.indexOf("/") + 1,
								context.inputDir.indexOf("/",
										context.inputDir.indexOf("/") + 1));// ###############################
																			// ###############################
																			// #
																			// Output
																			// tables

						statCatcherOutput = null;

						// # Output table : 'statCatcherOutput'
						statCatcherOutput_tmp.moment = row11.moment;
						statCatcherOutput_tmp.project = row11.project;
						statCatcherOutput_tmp.job = row11.job;
						statCatcherOutput_tmp.job_version = row11.job_version;
						statCatcherOutput_tmp.context = row11.context;
						statCatcherOutput_tmp.message_type = row11.message_type;
						statCatcherOutput_tmp.message = row11.message;
						statCatcherOutput_tmp.duration = row11.duration;
						statCatcherOutput_tmp.firmName = Var.firmName;
						statCatcherOutput = statCatcherOutput_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_9 = false;

					tos_count_tMap_9++;

					/**
					 * [tMap_9 main ] stop
					 */
					// Start of branch "statCatcherOutput"
					if (statCatcherOutput != null) {

						/**
						 * [tAmazonAuroraOutput_6_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_6";

						currentComponent = "tAmazonAuroraOutput_6_in";

						row_tAmazonAuroraOutput_6_in = statCatcherOutput;

						tos_count_tAmazonAuroraOutput_6_in++;

						/**
						 * [tAmazonAuroraOutput_6_in main ] stop
						 */

						/**
						 * [tAmazonAuroraOutput_6_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_6";

						currentComponent = "tAmazonAuroraOutput_6_out";

						whetherReject_tAmazonAuroraOutput_6 = false;
						if (row_tAmazonAuroraOutput_6_in.moment != null) {
							date_tAmazonAuroraOutput_6 = row_tAmazonAuroraOutput_6_in.moment
									.getTime();
							if (date_tAmazonAuroraOutput_6 < year1_tAmazonAuroraOutput_6
									|| date_tAmazonAuroraOutput_6 >= year10000_tAmazonAuroraOutput_6) {
								pstmt_tAmazonAuroraOutput_6.setString(1,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tAmazonAuroraOutput_6.setTimestamp(1,
										new java.sql.Timestamp(
												date_tAmazonAuroraOutput_6));
							}
						} else {
							pstmt_tAmazonAuroraOutput_6.setNull(1,
									java.sql.Types.DATE);
						}

						if (row_tAmazonAuroraOutput_6_in.project == null) {
							pstmt_tAmazonAuroraOutput_6.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_6.setString(2,
									row_tAmazonAuroraOutput_6_in.project);
						}

						if (row_tAmazonAuroraOutput_6_in.job == null) {
							pstmt_tAmazonAuroraOutput_6.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_6.setString(3,
									row_tAmazonAuroraOutput_6_in.job);
						}

						if (row_tAmazonAuroraOutput_6_in.job_version == null) {
							pstmt_tAmazonAuroraOutput_6.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_6.setString(4,
									row_tAmazonAuroraOutput_6_in.job_version);
						}

						if (row_tAmazonAuroraOutput_6_in.context == null) {
							pstmt_tAmazonAuroraOutput_6.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_6.setString(5,
									row_tAmazonAuroraOutput_6_in.context);
						}

						if (row_tAmazonAuroraOutput_6_in.message_type == null) {
							pstmt_tAmazonAuroraOutput_6.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_6.setString(6,
									row_tAmazonAuroraOutput_6_in.message_type);
						}

						if (row_tAmazonAuroraOutput_6_in.message == null) {
							pstmt_tAmazonAuroraOutput_6.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_6.setString(7,
									row_tAmazonAuroraOutput_6_in.message);
						}

						if (row_tAmazonAuroraOutput_6_in.duration == null) {
							pstmt_tAmazonAuroraOutput_6.setNull(8,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_6.setLong(8,
									row_tAmazonAuroraOutput_6_in.duration);
						}

						if (row_tAmazonAuroraOutput_6_in.firmName == null) {
							pstmt_tAmazonAuroraOutput_6.setNull(9,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_6.setString(9,
									row_tAmazonAuroraOutput_6_in.firmName);
						}

						pstmt_tAmazonAuroraOutput_6.addBatch();
						nb_line_tAmazonAuroraOutput_6++;

						batchSizeCounter_tAmazonAuroraOutput_6++;
						if (batchSize_tAmazonAuroraOutput_6 <= batchSizeCounter_tAmazonAuroraOutput_6) {
							try {
								int countSum_tAmazonAuroraOutput_6 = 0;
								for (int countEach_tAmazonAuroraOutput_6 : pstmt_tAmazonAuroraOutput_6
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_6 += (countEach_tAmazonAuroraOutput_6 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_6 += countSum_tAmazonAuroraOutput_6;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_6 = 0;
								for (int countEach_tAmazonAuroraOutput_6 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_6 += (countEach_tAmazonAuroraOutput_6 < 0 ? 0
											: countEach_tAmazonAuroraOutput_6);
								}
								insertedCount_tAmazonAuroraOutput_6 += countSum_tAmazonAuroraOutput_6;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tAmazonAuroraOutput_6 = 0;
						}
						commitCounter_tAmazonAuroraOutput_6++;

						if (commitEvery_tAmazonAuroraOutput_6 <= commitCounter_tAmazonAuroraOutput_6) {

							try {
								int countSum_tAmazonAuroraOutput_6 = 0;
								for (int countEach_tAmazonAuroraOutput_6 : pstmt_tAmazonAuroraOutput_6
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_6 += (countEach_tAmazonAuroraOutput_6 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_6 += countSum_tAmazonAuroraOutput_6;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_6 = 0;
								for (int countEach_tAmazonAuroraOutput_6 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_6 += (countEach_tAmazonAuroraOutput_6 < 0 ? 0
											: countEach_tAmazonAuroraOutput_6);
								}
								insertedCount_tAmazonAuroraOutput_6 += countSum_tAmazonAuroraOutput_6;
								System.err.println(e.getMessage());

							}
							conn_tAmazonAuroraOutput_6.commit();
							commitCounter_tAmazonAuroraOutput_6 = 0;

						}

						tos_count_tAmazonAuroraOutput_6_out++;

						/**
						 * [tAmazonAuroraOutput_6_out main ] stop
						 */

					} // End of branch "statCatcherOutput"

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_6_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_6";

				currentComponent = "tAmazonAuroraOutput_6_in";

				ok_Hash.put("tAmazonAuroraOutput_6_in", true);
				end_Hash.put("tAmazonAuroraOutput_6_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_6_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_6_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_6";

				currentComponent = "tAmazonAuroraOutput_6_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_6 != 0) {
						int countSum_tAmazonAuroraOutput_6 = 0;

						for (int countEach_tAmazonAuroraOutput_6 : pstmt_tAmazonAuroraOutput_6
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_6 += (countEach_tAmazonAuroraOutput_6 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_6 += countSum_tAmazonAuroraOutput_6;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_6 = 0;
					for (int countEach_tAmazonAuroraOutput_6 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_6 += (countEach_tAmazonAuroraOutput_6 < 0 ? 0
								: countEach_tAmazonAuroraOutput_6);
					}

					insertedCount_tAmazonAuroraOutput_6 += countSum_tAmazonAuroraOutput_6;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_6 = 0;

				if (pstmt_tAmazonAuroraOutput_6 != null) {

					pstmt_tAmazonAuroraOutput_6.close();

				}

				if (commitCounter_tAmazonAuroraOutput_6 > 0) {

					conn_tAmazonAuroraOutput_6.commit();

				}

				conn_tAmazonAuroraOutput_6.close();

				resourceMap.put("finish_tAmazonAuroraOutput_6", true);

				nb_line_deleted_tAmazonAuroraOutput_6 = nb_line_deleted_tAmazonAuroraOutput_6
						+ deletedCount_tAmazonAuroraOutput_6;
				nb_line_update_tAmazonAuroraOutput_6 = nb_line_update_tAmazonAuroraOutput_6
						+ updatedCount_tAmazonAuroraOutput_6;
				nb_line_inserted_tAmazonAuroraOutput_6 = nb_line_inserted_tAmazonAuroraOutput_6
						+ insertedCount_tAmazonAuroraOutput_6;
				nb_line_rejected_tAmazonAuroraOutput_6 = nb_line_rejected_tAmazonAuroraOutput_6
						+ rejectedCount_tAmazonAuroraOutput_6;

				globalMap.put("tAmazonAuroraOutput_6_NB_LINE",
						nb_line_tAmazonAuroraOutput_6);
				globalMap.put("tAmazonAuroraOutput_6_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_6);
				globalMap.put("tAmazonAuroraOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_6);
				globalMap.put("tAmazonAuroraOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_6);
				globalMap.put("tAmazonAuroraOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_6);

				ok_Hash.put("tAmazonAuroraOutput_6_out", true);
				end_Hash.put("tAmazonAuroraOutput_6_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_6_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_6_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_6";

				currentComponent = "tAmazonAuroraOutput_6_in";

				/**
				 * [tAmazonAuroraOutput_6_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_6_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_6";

				currentComponent = "tAmazonAuroraOutput_6_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_6") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_6") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_6")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_6) {
							String errorMessage_tAmazonAuroraOutput_6 = "failed to close the connection in tAmazonAuroraOutput_6 :"
									+ sqlEx_tAmazonAuroraOutput_6.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_6);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_6_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row_tAmazonAuroraOutput_7_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_7_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_7_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class logCatcherOutputStruct implements
			routines.system.IPersistableRow<logCatcherOutputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(logCatcherOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();
				logCatcherOutputStruct logCatcherOutput = new logCatcherOutputStruct();
				logCatcherOutputStruct row_tAmazonAuroraOutput_7_in = logCatcherOutput;

				/**
				 * [tAmazonAuroraOutput_7_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_7_out", false);
				start_Hash.put("tAmazonAuroraOutput_7_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_7";

				currentComponent = "tAmazonAuroraOutput_7_out";

				int tos_count_tAmazonAuroraOutput_7_out = 0;

				int nb_line_tAmazonAuroraOutput_7 = 0;
				int nb_line_update_tAmazonAuroraOutput_7 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_7 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_7 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_7 = 0;

				int deletedCount_tAmazonAuroraOutput_7 = 0;
				int updatedCount_tAmazonAuroraOutput_7 = 0;
				int insertedCount_tAmazonAuroraOutput_7 = 0;

				int rejectedCount_tAmazonAuroraOutput_7 = 0;

				String tableName_tAmazonAuroraOutput_7 = "logcatcher";
				boolean whetherReject_tAmazonAuroraOutput_7 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_7 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_7.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_7 = calendar_tAmazonAuroraOutput_7
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_7.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_7 = calendar_tAmazonAuroraOutput_7
						.getTime().getTime();
				long date_tAmazonAuroraOutput_7;

				java.sql.Connection conn_tAmazonAuroraOutput_7 = null;
				String dbProperties_tAmazonAuroraOutput_7 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_7 = null;
				if (dbProperties_tAmazonAuroraOutput_7 == null
						|| dbProperties_tAmazonAuroraOutput_7.trim().length() == 0) {
					url_tAmazonAuroraOutput_7 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_7 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_7
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_7 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_7 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ properties_tAmazonAuroraOutput_7;
				}
				String driverClass_tAmazonAuroraOutput_7 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_7 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_7 = context.password;

				String dbPwd_tAmazonAuroraOutput_7 = decryptedPassword_tAmazonAuroraOutput_7;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_7);

				conn_tAmazonAuroraOutput_7 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_7,
								dbUser_tAmazonAuroraOutput_7,
								dbPwd_tAmazonAuroraOutput_7);

				resourceMap.put("conn_tAmazonAuroraOutput_7",
						conn_tAmazonAuroraOutput_7);
				conn_tAmazonAuroraOutput_7.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_7 = 10000;
				int commitCounter_tAmazonAuroraOutput_7 = 0;

				int count_tAmazonAuroraOutput_7 = 0;

				String insert_tAmazonAuroraOutput_7 = "INSERT INTO `"
						+ "logcatcher"
						+ "` (`moment`,`project`,`job`,`context`,`priority`,`type`,`origin`,`message`,`code`,`firmName`) VALUES (?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_7 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_7 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_7 = conn_tAmazonAuroraOutput_7
						.prepareStatement(insert_tAmazonAuroraOutput_7);

				/**
				 * [tAmazonAuroraOutput_7_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_7_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_7_in", false);
				start_Hash.put("tAmazonAuroraOutput_7_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_7";

				currentComponent = "tAmazonAuroraOutput_7_in";

				int tos_count_tAmazonAuroraOutput_7_in = 0;

				/**
				 * [tAmazonAuroraOutput_7_in begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				int tos_count_tMap_10 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_10__Struct {
					String firmName;
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				logCatcherOutputStruct logCatcherOutput_tmp = new logCatcherOutputStruct();
				// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row12.type = lcm.getType();
					row12.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row12.priority = lcm.getPriority();
					row12.message = lcm.getMessage();
					row12.code = lcm.getCode();

					row12.moment = java.util.Calendar.getInstance().getTime();

					row12.pid = pid;
					row12.root_pid = rootPid;
					row12.father_pid = fatherPid;

					row12.project = projectName;
					row12.job = jobName;
					row12.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tMap_10 main ] start
					 */

					currentComponent = "tMap_10";

					boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_10 = false;
					boolean mainRowRejected_tMap_10 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_10__Struct Var = Var__tMap_10;
						Var.firmName = context.inputDir.substring(
								context.inputDir.indexOf("/") + 1,
								context.inputDir.indexOf("/",
										context.inputDir.indexOf("/") + 1));// ###############################
																			// ###############################
																			// #
																			// Output
																			// tables

						logCatcherOutput = null;

						// # Output table : 'logCatcherOutput'
						logCatcherOutput_tmp.moment = row12.moment;
						logCatcherOutput_tmp.project = row12.project;
						logCatcherOutput_tmp.job = row12.job;
						logCatcherOutput_tmp.context = row12.context;
						logCatcherOutput_tmp.priority = row12.priority;
						logCatcherOutput_tmp.type = row12.type;
						logCatcherOutput_tmp.origin = row12.origin;
						logCatcherOutput_tmp.message = row12.message;
						logCatcherOutput_tmp.code = row12.code;
						logCatcherOutput_tmp.firmName = Var.firmName;
						logCatcherOutput = logCatcherOutput_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_10 = false;

					tos_count_tMap_10++;

					/**
					 * [tMap_10 main ] stop
					 */
					// Start of branch "logCatcherOutput"
					if (logCatcherOutput != null) {

						/**
						 * [tAmazonAuroraOutput_7_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_7";

						currentComponent = "tAmazonAuroraOutput_7_in";

						row_tAmazonAuroraOutput_7_in = logCatcherOutput;

						tos_count_tAmazonAuroraOutput_7_in++;

						/**
						 * [tAmazonAuroraOutput_7_in main ] stop
						 */

						/**
						 * [tAmazonAuroraOutput_7_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_7";

						currentComponent = "tAmazonAuroraOutput_7_out";

						whetherReject_tAmazonAuroraOutput_7 = false;
						if (row_tAmazonAuroraOutput_7_in.moment != null) {
							date_tAmazonAuroraOutput_7 = row_tAmazonAuroraOutput_7_in.moment
									.getTime();
							if (date_tAmazonAuroraOutput_7 < year1_tAmazonAuroraOutput_7
									|| date_tAmazonAuroraOutput_7 >= year10000_tAmazonAuroraOutput_7) {
								pstmt_tAmazonAuroraOutput_7.setString(1,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tAmazonAuroraOutput_7.setTimestamp(1,
										new java.sql.Timestamp(
												date_tAmazonAuroraOutput_7));
							}
						} else {
							pstmt_tAmazonAuroraOutput_7.setNull(1,
									java.sql.Types.DATE);
						}

						if (row_tAmazonAuroraOutput_7_in.project == null) {
							pstmt_tAmazonAuroraOutput_7.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_7.setString(2,
									row_tAmazonAuroraOutput_7_in.project);
						}

						if (row_tAmazonAuroraOutput_7_in.job == null) {
							pstmt_tAmazonAuroraOutput_7.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_7.setString(3,
									row_tAmazonAuroraOutput_7_in.job);
						}

						if (row_tAmazonAuroraOutput_7_in.context == null) {
							pstmt_tAmazonAuroraOutput_7.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_7.setString(4,
									row_tAmazonAuroraOutput_7_in.context);
						}

						if (row_tAmazonAuroraOutput_7_in.priority == null) {
							pstmt_tAmazonAuroraOutput_7.setNull(5,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_7.setInt(5,
									row_tAmazonAuroraOutput_7_in.priority);
						}

						if (row_tAmazonAuroraOutput_7_in.type == null) {
							pstmt_tAmazonAuroraOutput_7.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_7.setString(6,
									row_tAmazonAuroraOutput_7_in.type);
						}

						if (row_tAmazonAuroraOutput_7_in.origin == null) {
							pstmt_tAmazonAuroraOutput_7.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_7.setString(7,
									row_tAmazonAuroraOutput_7_in.origin);
						}

						if (row_tAmazonAuroraOutput_7_in.message == null) {
							pstmt_tAmazonAuroraOutput_7.setNull(8,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_7.setString(8,
									row_tAmazonAuroraOutput_7_in.message);
						}

						if (row_tAmazonAuroraOutput_7_in.code == null) {
							pstmt_tAmazonAuroraOutput_7.setNull(9,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_7.setInt(9,
									row_tAmazonAuroraOutput_7_in.code);
						}

						if (row_tAmazonAuroraOutput_7_in.firmName == null) {
							pstmt_tAmazonAuroraOutput_7.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_7.setString(10,
									row_tAmazonAuroraOutput_7_in.firmName);
						}

						pstmt_tAmazonAuroraOutput_7.addBatch();
						nb_line_tAmazonAuroraOutput_7++;

						batchSizeCounter_tAmazonAuroraOutput_7++;
						if (batchSize_tAmazonAuroraOutput_7 <= batchSizeCounter_tAmazonAuroraOutput_7) {
							try {
								int countSum_tAmazonAuroraOutput_7 = 0;
								for (int countEach_tAmazonAuroraOutput_7 : pstmt_tAmazonAuroraOutput_7
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_7 += (countEach_tAmazonAuroraOutput_7 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_7 += countSum_tAmazonAuroraOutput_7;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_7 = 0;
								for (int countEach_tAmazonAuroraOutput_7 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_7 += (countEach_tAmazonAuroraOutput_7 < 0 ? 0
											: countEach_tAmazonAuroraOutput_7);
								}
								insertedCount_tAmazonAuroraOutput_7 += countSum_tAmazonAuroraOutput_7;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tAmazonAuroraOutput_7 = 0;
						}
						commitCounter_tAmazonAuroraOutput_7++;

						if (commitEvery_tAmazonAuroraOutput_7 <= commitCounter_tAmazonAuroraOutput_7) {

							try {
								int countSum_tAmazonAuroraOutput_7 = 0;
								for (int countEach_tAmazonAuroraOutput_7 : pstmt_tAmazonAuroraOutput_7
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_7 += (countEach_tAmazonAuroraOutput_7 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_7 += countSum_tAmazonAuroraOutput_7;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_7 = 0;
								for (int countEach_tAmazonAuroraOutput_7 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_7 += (countEach_tAmazonAuroraOutput_7 < 0 ? 0
											: countEach_tAmazonAuroraOutput_7);
								}
								insertedCount_tAmazonAuroraOutput_7 += countSum_tAmazonAuroraOutput_7;
								System.err.println(e.getMessage());

							}
							conn_tAmazonAuroraOutput_7.commit();
							commitCounter_tAmazonAuroraOutput_7 = 0;

						}

						tos_count_tAmazonAuroraOutput_7_out++;

						/**
						 * [tAmazonAuroraOutput_7_out main ] stop
						 */

					} // End of branch "logCatcherOutput"

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_7_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_7";

				currentComponent = "tAmazonAuroraOutput_7_in";

				ok_Hash.put("tAmazonAuroraOutput_7_in", true);
				end_Hash.put("tAmazonAuroraOutput_7_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_7_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_7_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_7";

				currentComponent = "tAmazonAuroraOutput_7_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_7 != 0) {
						int countSum_tAmazonAuroraOutput_7 = 0;

						for (int countEach_tAmazonAuroraOutput_7 : pstmt_tAmazonAuroraOutput_7
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_7 += (countEach_tAmazonAuroraOutput_7 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_7 += countSum_tAmazonAuroraOutput_7;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_7 = 0;
					for (int countEach_tAmazonAuroraOutput_7 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_7 += (countEach_tAmazonAuroraOutput_7 < 0 ? 0
								: countEach_tAmazonAuroraOutput_7);
					}

					insertedCount_tAmazonAuroraOutput_7 += countSum_tAmazonAuroraOutput_7;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_7 = 0;

				if (pstmt_tAmazonAuroraOutput_7 != null) {

					pstmt_tAmazonAuroraOutput_7.close();

				}

				if (commitCounter_tAmazonAuroraOutput_7 > 0) {

					conn_tAmazonAuroraOutput_7.commit();

				}

				conn_tAmazonAuroraOutput_7.close();

				resourceMap.put("finish_tAmazonAuroraOutput_7", true);

				nb_line_deleted_tAmazonAuroraOutput_7 = nb_line_deleted_tAmazonAuroraOutput_7
						+ deletedCount_tAmazonAuroraOutput_7;
				nb_line_update_tAmazonAuroraOutput_7 = nb_line_update_tAmazonAuroraOutput_7
						+ updatedCount_tAmazonAuroraOutput_7;
				nb_line_inserted_tAmazonAuroraOutput_7 = nb_line_inserted_tAmazonAuroraOutput_7
						+ insertedCount_tAmazonAuroraOutput_7;
				nb_line_rejected_tAmazonAuroraOutput_7 = nb_line_rejected_tAmazonAuroraOutput_7
						+ rejectedCount_tAmazonAuroraOutput_7;

				globalMap.put("tAmazonAuroraOutput_7_NB_LINE",
						nb_line_tAmazonAuroraOutput_7);
				globalMap.put("tAmazonAuroraOutput_7_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_7);
				globalMap.put("tAmazonAuroraOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_7);
				globalMap.put("tAmazonAuroraOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_7);
				globalMap.put("tAmazonAuroraOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_7);

				ok_Hash.put("tAmazonAuroraOutput_7_out", true);
				end_Hash.put("tAmazonAuroraOutput_7_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_7_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_7_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_7";

				currentComponent = "tAmazonAuroraOutput_7_in";

				/**
				 * [tAmazonAuroraOutput_7_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_7_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_7";

				currentComponent = "tAmazonAuroraOutput_7_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_7") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_7") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_7")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_7) {
							String errorMessage_tAmazonAuroraOutput_7 = "failed to close the connection in tAmazonAuroraOutput_7 :"
									+ sqlEx_tAmazonAuroraOutput_7.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_7);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_7_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tJavaRow_3 - inputs:(after_tAmazonAuroraInput_1)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 -
				// inputs:(row3) outputs:()
				// linked node: tMap_1 - inputs:(row4,row3)
				// outputs:(firm_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct> getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tJavaRow_3 main ] start
				 */

				currentComponent = "tJavaRow_3";

				row3.firm = context.firmint3;

				nb_line_tJavaRow_3++;

				tos_count_tJavaRow_3++;

				/**
				 * [tJavaRow_3 main ] stop
				 */

				/**
				 * [tAdvancedHash_row3 main ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				row3Struct row3_HashRow = new row3Struct();

				row3_HashRow.firm = row3.firm;

				tHash_Lookup_row3.put(row3_HashRow);

				tos_count_tAdvancedHash_row3++;

				/**
				 * [tAdvancedHash_row3 main ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_3_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableComparableLookupRow<row19Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row19Struct other = (row19Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row19Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row19Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();

				/**
				 * [tAdvancedHash_row19 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row19", false);
				start_Hash.put("tAdvancedHash_row19",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row19";

				int tos_count_tAdvancedHash_row19 = 0;

				// connection name:row19
				// source node:tJavaRow_5 - inputs:(after_tAmazonAuroraInput_17)
				// outputs:(row19,row19) | target node:tAdvancedHash_row19 -
				// inputs:(row19) outputs:()
				// linked node: tMap_13 - inputs:(s,row19)
				// outputs:(out1,mainout)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row19Struct> getLookup(matchingModeEnum_row19);

				globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);

				/**
				 * [tAdvancedHash_row19 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tJavaRow_5 main ] start
				 */

				currentComponent = "tJavaRow_5";

				row19.firm = context.firmint3;

				nb_line_tJavaRow_5++;

				tos_count_tJavaRow_5++;

				/**
				 * [tJavaRow_5 main ] stop
				 */

				/**
				 * [tAdvancedHash_row19 main ] start
				 */

				currentComponent = "tAdvancedHash_row19";

				row19Struct row19_HashRow = new row19Struct();

				row19_HashRow.firm = row19.firm;

				tHash_Lookup_row19.put(row19_HashRow);

				tos_count_tAdvancedHash_row19++;

				/**
				 * [tAdvancedHash_row19 main ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row19 end ] start
				 */

				currentComponent = "tAdvancedHash_row19";

				tHash_Lookup_row19.endPut();

				ok_Hash.put("tAdvancedHash_row19", true);
				end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row19 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row19 finally ] start
				 */

				currentComponent = "tAdvancedHash_row19";

				/**
				 * [tAdvancedHash_row19 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_5_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements
			routines.system.IPersistableComparableLookupRow<row22Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row22Struct other = (row22Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row22Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row22Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();

				/**
				 * [tAdvancedHash_row22 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row22", false);
				start_Hash.put("tAdvancedHash_row22",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row22";

				int tos_count_tAdvancedHash_row22 = 0;

				// connection name:row22
				// source node:tJavaRow_6 - inputs:(after_tAmazonAuroraInput_19)
				// outputs:(row22,row22) | target node:tAdvancedHash_row22 -
				// inputs:(row22) outputs:()
				// linked node: tMap_15 - inputs:(copyOfs,row22)
				// outputs:(copyOfout1,copyOfmainout)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row22Struct> getLookup(matchingModeEnum_row22);

				globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);

				/**
				 * [tAdvancedHash_row22 begin ] stop
				 */

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());

				currentComponent = "tJavaRow_6";

				int tos_count_tJavaRow_6 = 0;

				int nb_line_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tJavaRow_6 main ] start
				 */

				currentComponent = "tJavaRow_6";

				row22.firm = context.firmint3;

				nb_line_tJavaRow_6++;

				tos_count_tJavaRow_6++;

				/**
				 * [tJavaRow_6 main ] stop
				 */

				/**
				 * [tAdvancedHash_row22 main ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				row22Struct row22_HashRow = new row22Struct();

				row22_HashRow.firm = row22.firm;

				tHash_Lookup_row22.put(row22_HashRow);

				tos_count_tAdvancedHash_row22++;

				/**
				 * [tAdvancedHash_row22 main ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				/**
				 * [tJavaRow_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row22 end ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				tHash_Lookup_row22.endPut();

				ok_Hash.put("tAdvancedHash_row22", true);
				end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row22 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row22 finally ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				/**
				 * [tAdvancedHash_row22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_6_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public String preferenceName;

		public String getPreferenceName() {
			return this.preferenceName;
		}

		public String preferenceOption;

		public String getPreferenceOption() {
			return this.preferenceOption;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.preferenceName = readString(dis);

					this.preferenceOption = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.preferenceName, dos);

				// String

				writeString(this.preferenceOption, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("preferenceName=" + preferenceName);
			sb.append(",preferenceOption=" + preferenceOption);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public String optionName;

		public String getOptionName() {
			return this.optionName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.optionName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.optionName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("optionName=" + optionName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_12_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_12_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public String optionName;

		public String getOptionName() {
			return this.optionName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.optionName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.optionName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("optionName=" + optionName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_12_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_12_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_12_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_12_inStruct row_tAmazonAuroraInput_12_in = new row_tAmazonAuroraInput_12_inStruct();
				row_tAmazonAuroraInput_12_inStruct row9 = row_tAmazonAuroraInput_12_in;
				row10Struct row10 = new row10Struct();

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_12_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_12_out", false);
				start_Hash.put("tAmazonAuroraInput_12_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_12";

				currentComponent = "tAmazonAuroraInput_12_out";

				int tos_count_tAmazonAuroraInput_12_out = 0;

				/**
				 * [tAmazonAuroraInput_12_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_12_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_12_in", false);
				start_Hash.put("tAmazonAuroraInput_12_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_12";

				currentComponent = "tAmazonAuroraInput_12_in";

				int tos_count_tAmazonAuroraInput_12_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_12_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_12_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_12_in = calendar_tAmazonAuroraInput_12_in
						.getTime();
				int nb_line_tAmazonAuroraInput_12_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_12_in = null;
				String driverClass_tAmazonAuroraInput_12_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_12_in);
				String dbUser_tAmazonAuroraInput_12_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_12_in = context.password;

				String dbPwd_tAmazonAuroraInput_12_in = decryptedPassword_tAmazonAuroraInput_12_in;

				String url_tAmazonAuroraInput_12_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_12_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_12_in,
								dbUser_tAmazonAuroraInput_12_in,
								dbPwd_tAmazonAuroraInput_12_in);

				java.sql.Statement stmt_tAmazonAuroraInput_12_in = conn_tAmazonAuroraInput_12_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_12_in = "Select po1.optionName from preferenceOption po1 inner join preferenceOptionValue pov on po1.id = pov.preferenceOptionId where pov.preferenceValueId = \n(SELECT  pv.id FROM preference AS p \nINNER JOIN preferenceValue AS pv\nON p.id = pv.preferenceId\nWHERE p.name = 'AutoCreatePortfolios')";

				globalMap.put("tAmazonAuroraInput_12_QUERY",
						dbquery_tAmazonAuroraInput_12_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_12_in = null;
				try {
					rs_tAmazonAuroraInput_12_in = stmt_tAmazonAuroraInput_12_in
							.executeQuery(dbquery_tAmazonAuroraInput_12_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_12_in = rs_tAmazonAuroraInput_12_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_12_in = rsmd_tAmazonAuroraInput_12_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_12_in = null;

					while (rs_tAmazonAuroraInput_12_in.next()) {
						nb_line_tAmazonAuroraInput_12_in++;

						if (colQtyInRs_tAmazonAuroraInput_12_in < 1) {
							row_tAmazonAuroraInput_12_in.optionName = null;
						} else {

							row_tAmazonAuroraInput_12_in.optionName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_12_in, 1,
											false);
						}

						/**
						 * [tAmazonAuroraInput_12_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_12_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_12";

						currentComponent = "tAmazonAuroraInput_12_in";

						tos_count_tAmazonAuroraInput_12_in++;

						/**
						 * [tAmazonAuroraInput_12_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_12_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_12";

						currentComponent = "tAmazonAuroraInput_12_out";

						row9 = row_tAmazonAuroraInput_12_in;

						tos_count_tAmazonAuroraInput_12_out++;

						/**
						 * [tAmazonAuroraInput_12_out main ] stop
						 */

						/**
						 * [tJavaRow_2 main ] start
						 */

						currentComponent = "tJavaRow_2";

						context.preferenceOption = row9.optionName;

						nb_line_tJavaRow_2++;

						tos_count_tJavaRow_2++;

						/**
						 * [tJavaRow_2 main ] stop
						 */

						/**
						 * [tJava_2 main ] start
						 */

						currentComponent = "tJava_2";

						tos_count_tJava_2++;

						/**
						 * [tJava_2 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_12_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_12";

						currentComponent = "tAmazonAuroraInput_12_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_12_in != null) {
						rs_tAmazonAuroraInput_12_in.close();
					}
					stmt_tAmazonAuroraInput_12_in.close();
					if (conn_tAmazonAuroraInput_12_in != null
							&& !conn_tAmazonAuroraInput_12_in.isClosed()) {

						conn_tAmazonAuroraInput_12_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_12_NB_LINE",
						nb_line_tAmazonAuroraInput_12_in);

				ok_Hash.put("tAmazonAuroraInput_12_in", true);
				end_Hash.put("tAmazonAuroraInput_12_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_12_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_12_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_12";

				currentComponent = "tAmazonAuroraInput_12_out";

				ok_Hash.put("tAmazonAuroraInput_12_out", true);
				end_Hash.put("tAmazonAuroraInput_12_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_12_out end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				if (context.preferenceOption.equals("Household")) {

					tAmazonAuroraInput_17_inProcess(globalMap);
				}

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tAmazonAuroraInput_12_in:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRunJob_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tAmazonAuroraInput_12_in:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tAmazonAuroraInput_19_inProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_12_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_12";

				currentComponent = "tAmazonAuroraInput_12_in";

				/**
				 * [tAmazonAuroraInput_12_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_12_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_12";

				currentComponent = "tAmazonAuroraInput_12_out";

				/**
				 * [tAmazonAuroraInput_12_out finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_12_in_SUBPROCESS_STATE", 1);
	}

	public static class row_tAmazonAuroraOutput_13_inStruct
			implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_13_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_13_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraOutput_2_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_2_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public String tags;

		public String getTags() {
			return this.tags;
		}

		public boolean isDisabled;

		public boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public boolean isSleevePortfolio;

		public boolean getIsSleevePortfolio() {
			return this.isSleevePortfolio;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		public boolean IsDeleted;

		public boolean getIsDeleted() {
			return this.IsDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public int createdBy;

		public int getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public int editedBy;

		public int getEditedBy() {
			return this.editedBy;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_tAmazonAuroraOutput_2_inStruct other = (row_tAmazonAuroraOutput_2_inStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row_tAmazonAuroraOutput_2_inStruct other) {

			other.id = this.id;
			other.name = this.name;
			other.modelId = this.modelId;
			other.tags = this.tags;
			other.isDisabled = this.isDisabled;
			other.disabledReason = this.disabledReason;
			other.isSleevePortfolio = this.isSleevePortfolio;
			other.sleeveContributionMethod = this.sleeveContributionMethod;
			other.sleeveStrategyName = this.sleeveStrategyName;
			other.sleeveDistributionMethod = this.sleeveDistributionMethod;
			other.registrationId = this.registrationId;
			other.IsDeleted = this.IsDeleted;
			other.createdDate = this.createdDate;
			other.createdBy = this.createdBy;
			other.editedDate = this.editedDate;
			other.editedBy = this.editedBy;

		}

		public void copyKeysDataTo(row_tAmazonAuroraOutput_2_inStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.name = readString(dis);

					this.modelId = readInteger(dis);

					this.tags = readString(dis);

					this.isDisabled = dis.readBoolean();

					this.disabledReason = readString(dis);

					this.isSleevePortfolio = dis.readBoolean();

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

					this.IsDeleted = dis.readBoolean();

					this.createdDate = readDate(dis);

					this.createdBy = dis.readInt();

					this.editedDate = readDate(dis);

					this.editedBy = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.modelId, dos);

				// String

				writeString(this.tags, dos);

				// boolean

				dos.writeBoolean(this.isDisabled);

				// String

				writeString(this.disabledReason, dos);

				// boolean

				dos.writeBoolean(this.isSleevePortfolio);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

				// boolean

				dos.writeBoolean(this.IsDeleted);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// int

				dos.writeInt(this.createdBy);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// int

				dos.writeInt(this.editedBy);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",tags=" + tags);
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",isSleevePortfolio=" + String.valueOf(isSleevePortfolio));
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append(",IsDeleted=" + String.valueOf(IsDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_2_inStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class portfolio_outputStruct implements
			routines.system.IPersistableRow<portfolio_outputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public String tags;

		public String getTags() {
			return this.tags;
		}

		public boolean isDisabled;

		public boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public boolean isSleevePortfolio;

		public boolean getIsSleevePortfolio() {
			return this.isSleevePortfolio;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		public boolean IsDeleted;

		public boolean getIsDeleted() {
			return this.IsDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public int createdBy;

		public int getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public int editedBy;

		public int getEditedBy() {
			return this.editedBy;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final portfolio_outputStruct other = (portfolio_outputStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(portfolio_outputStruct other) {

			other.id = this.id;
			other.name = this.name;
			other.modelId = this.modelId;
			other.tags = this.tags;
			other.isDisabled = this.isDisabled;
			other.disabledReason = this.disabledReason;
			other.isSleevePortfolio = this.isSleevePortfolio;
			other.sleeveContributionMethod = this.sleeveContributionMethod;
			other.sleeveStrategyName = this.sleeveStrategyName;
			other.sleeveDistributionMethod = this.sleeveDistributionMethod;
			other.registrationId = this.registrationId;
			other.IsDeleted = this.IsDeleted;
			other.createdDate = this.createdDate;
			other.createdBy = this.createdBy;
			other.editedDate = this.editedDate;
			other.editedBy = this.editedBy;

		}

		public void copyKeysDataTo(portfolio_outputStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.name = readString(dis);

					this.modelId = readInteger(dis);

					this.tags = readString(dis);

					this.isDisabled = dis.readBoolean();

					this.disabledReason = readString(dis);

					this.isSleevePortfolio = dis.readBoolean();

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

					this.IsDeleted = dis.readBoolean();

					this.createdDate = readDate(dis);

					this.createdBy = dis.readInt();

					this.editedDate = readDate(dis);

					this.editedBy = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.modelId, dos);

				// String

				writeString(this.tags, dos);

				// boolean

				dos.writeBoolean(this.isDisabled);

				// String

				writeString(this.disabledReason, dos);

				// boolean

				dos.writeBoolean(this.isSleevePortfolio);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

				// boolean

				dos.writeBoolean(this.IsDeleted);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// int

				dos.writeInt(this.createdBy);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// int

				dos.writeInt(this.editedBy);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",tags=" + tags);
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",isSleevePortfolio=" + String.valueOf(isSleevePortfolio));
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append(",IsDeleted=" + String.valueOf(IsDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(portfolio_outputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class unique_portfoliosStruct implements
			routines.system.IPersistableRow<unique_portfoliosStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(unique_portfoliosStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraOutput_12_inStruct
			implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_12_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String errorStackTrace;

		public String getErrorStackTrace() {
			return this.errorStackTrace;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

					this.errorMessage = readString(dis);

					this.errorStackTrace = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.errorStackTrace, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append(",errorMessage=" + errorMessage);
			sb.append(",errorStackTrace=" + errorStackTrace);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_12_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1_ErrorRejectStruct implements
			routines.system.IPersistableRow<row1_ErrorRejectStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String errorStackTrace;

		public String getErrorStackTrace() {
			return this.errorStackTrace;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

					this.errorMessage = readString(dis);

					this.errorStackTrace = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.errorStackTrace, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append(",errorMessage=" + errorMessage);
			sb.append(",errorStackTrace=" + errorStackTrace);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1_ErrorRejectStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sort_portfoliosStruct implements
			routines.system.IPersistableRow<sort_portfoliosStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sort_portfoliosStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class noDataFound_joinReject3Struct implements
			routines.system.IPersistableRow<noDataFound_joinReject3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(noDataFound_joinReject3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mainoutStruct implements
			routines.system.IPersistableRow<mainoutStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mainoutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sStruct implements
			routines.system.IPersistableRow<sStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_17_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_17_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_17_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_17Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_17Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_17_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_17_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tAmazonAuroraInput_9_inProcess(globalMap);
				tAmazonAuroraInput_11_inProcess(globalMap);
				tAmazonAuroraInput_10_inProcess(globalMap);
				tJavaRow_5Process(globalMap);
				tAmazonAuroraInput_18_inProcess(globalMap);

				row_tAmazonAuroraInput_17_inStruct row_tAmazonAuroraInput_17_in = new row_tAmazonAuroraInput_17_inStruct();
				row_tAmazonAuroraInput_17_inStruct row17 = row_tAmazonAuroraInput_17_in;
				sStruct s = new sStruct();
				out1Struct out1 = new out1Struct();
				mainoutStruct mainout = new mainoutStruct();
				row1_ErrorRejectStruct row1_ErrorReject = new row1_ErrorRejectStruct();
				row1_ErrorRejectStruct row_tAmazonAuroraOutput_12_in = row1_ErrorReject;
				sort_portfoliosStruct sort_portfolios = new sort_portfoliosStruct();
				unique_portfoliosStruct unique_portfolios = new unique_portfoliosStruct();
				row8Struct row8 = new row8Struct();
				portfolio_outputStruct portfolio_output = new portfolio_outputStruct();
				portfolio_outputStruct row_tAmazonAuroraOutput_2_in = portfolio_output;
				noDataFound_joinReject3Struct noDataFound_joinReject3 = new noDataFound_joinReject3Struct();
				noDataFound_joinReject3Struct row_tAmazonAuroraOutput_13_in = noDataFound_joinReject3;

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_12_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_12_out", false);
				start_Hash.put("tAmazonAuroraOutput_12_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_12";

				currentComponent = "tAmazonAuroraOutput_12_out";

				int tos_count_tAmazonAuroraOutput_12_out = 0;

				int nb_line_tAmazonAuroraOutput_12 = 0;
				int nb_line_update_tAmazonAuroraOutput_12 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_12 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_12 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_12 = 0;

				int deletedCount_tAmazonAuroraOutput_12 = 0;
				int updatedCount_tAmazonAuroraOutput_12 = 0;
				int insertedCount_tAmazonAuroraOutput_12 = 0;

				int rejectedCount_tAmazonAuroraOutput_12 = 0;

				String tableName_tAmazonAuroraOutput_12 = "importError_Portfolio";
				boolean whetherReject_tAmazonAuroraOutput_12 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_12 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_12.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_12 = calendar_tAmazonAuroraOutput_12
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_12.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_12 = calendar_tAmazonAuroraOutput_12
						.getTime().getTime();
				long date_tAmazonAuroraOutput_12;

				java.sql.Connection conn_tAmazonAuroraOutput_12 = null;
				String dbProperties_tAmazonAuroraOutput_12 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_12 = null;
				if (dbProperties_tAmazonAuroraOutput_12 == null
						|| dbProperties_tAmazonAuroraOutput_12.trim().length() == 0) {
					url_tAmazonAuroraOutput_12 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_12 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_12
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_12 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_12 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_12;
				}
				String driverClass_tAmazonAuroraOutput_12 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_12 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_12 = context.password;

				String dbPwd_tAmazonAuroraOutput_12 = decryptedPassword_tAmazonAuroraOutput_12;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_12);

				conn_tAmazonAuroraOutput_12 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_12,
								dbUser_tAmazonAuroraOutput_12,
								dbPwd_tAmazonAuroraOutput_12);

				resourceMap.put("conn_tAmazonAuroraOutput_12",
						conn_tAmazonAuroraOutput_12);
				conn_tAmazonAuroraOutput_12.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_12 = 10000;
				int commitCounter_tAmazonAuroraOutput_12 = 0;

				int count_tAmazonAuroraOutput_12 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonAuroraOutput_12 = conn_tAmazonAuroraOutput_12
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonAuroraOutput_12 = dbMetaData_tAmazonAuroraOutput_12
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonAuroraOutput_12 = false;
				while (rsTable_tAmazonAuroraOutput_12.next()) {
					String table_tAmazonAuroraOutput_12 = rsTable_tAmazonAuroraOutput_12
							.getString("TABLE_NAME");
					if (table_tAmazonAuroraOutput_12
							.equalsIgnoreCase("importError_Portfolio")) {
						whetherExist_tAmazonAuroraOutput_12 = true;
						break;
					}
				}
				rsTable_tAmazonAuroraOutput_12.close();
				if (!whetherExist_tAmazonAuroraOutput_12) {
					java.sql.Statement stmtCreate_tAmazonAuroraOutput_12 = conn_tAmazonAuroraOutput_12
							.createStatement();
					stmtCreate_tAmazonAuroraOutput_12
							.execute("CREATE TABLE `"
									+ tableName_tAmazonAuroraOutput_12
									+ "`(`OrionFirmId` INT(10)  ,`ExternalId` INT(10)  ,`PortfolioId` VARCHAR(50)  ,`PortfolioName` VARCHAR(50)  ,`sleeveContributionMethod` VARCHAR(255)  ,`sleeveStrategyName` VARCHAR(255)  ,`sleeveDistributionMethod` VARCHAR(255)  ,`registrationId` INT(0)  ,`errorMessage` VARCHAR(0)  ,`errorStackTrace` VARCHAR(0)  )");
					stmtCreate_tAmazonAuroraOutput_12.close();
				}

				String insert_tAmazonAuroraOutput_12 = "INSERT INTO `"
						+ "importError_Portfolio"
						+ "` (`OrionFirmId`,`ExternalId`,`PortfolioId`,`PortfolioName`,`sleeveContributionMethod`,`sleeveStrategyName`,`sleeveDistributionMethod`,`registrationId`,`errorMessage`,`errorStackTrace`) VALUES (?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_12 = 1000;
				int batchSizeCounter_tAmazonAuroraOutput_12 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_12 = conn_tAmazonAuroraOutput_12
						.prepareStatement(insert_tAmazonAuroraOutput_12);

				/**
				 * [tAmazonAuroraOutput_12_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_12_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_12_in", false);
				start_Hash.put("tAmazonAuroraOutput_12_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_12";

				currentComponent = "tAmazonAuroraOutput_12_in";

				int tos_count_tAmazonAuroraOutput_12_in = 0;

				/**
				 * [tAmazonAuroraOutput_12_in begin ] stop
				 */

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash
						.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparablesort_portfoliosStruct extends
						sort_portfoliosStruct implements
						Comparable<Comparablesort_portfoliosStruct> {

					public int compareTo(Comparablesort_portfoliosStruct other) {

						if (this.PortfolioName == null
								&& other.PortfolioName != null) {
							return -1;

						} else if (this.PortfolioName != null
								&& other.PortfolioName == null) {
							return 1;

						} else if (this.PortfolioName != null
								&& other.PortfolioName != null) {
							if (!this.PortfolioName.equals(other.PortfolioName)) {
								return this.PortfolioName
										.compareTo(other.PortfolioName);
							}
						}
						if (this.PortfolioId == null
								&& other.PortfolioId != null) {
							return -1;

						} else if (this.PortfolioId != null
								&& other.PortfolioId == null) {
							return 1;

						} else if (this.PortfolioId != null
								&& other.PortfolioId != null) {
							if (!this.PortfolioId.equals(other.PortfolioId)) {
								return this.PortfolioId
										.compareTo(other.PortfolioId);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablesort_portfoliosStruct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablesort_portfoliosStruct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_13_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_13_out", false);
				start_Hash.put("tAmazonAuroraOutput_13_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_13";

				currentComponent = "tAmazonAuroraOutput_13_out";

				int tos_count_tAmazonAuroraOutput_13_out = 0;

				int nb_line_tAmazonAuroraOutput_13 = 0;
				int nb_line_update_tAmazonAuroraOutput_13 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_13 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_13 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_13 = 0;

				int deletedCount_tAmazonAuroraOutput_13 = 0;
				int updatedCount_tAmazonAuroraOutput_13 = 0;
				int insertedCount_tAmazonAuroraOutput_13 = 0;

				int rejectedCount_tAmazonAuroraOutput_13 = 0;

				String tableName_tAmazonAuroraOutput_13 = "noDataFound_Portfolio";
				boolean whetherReject_tAmazonAuroraOutput_13 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_13 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_13.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_13 = calendar_tAmazonAuroraOutput_13
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_13.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_13 = calendar_tAmazonAuroraOutput_13
						.getTime().getTime();
				long date_tAmazonAuroraOutput_13;

				java.sql.Connection conn_tAmazonAuroraOutput_13 = null;
				String dbProperties_tAmazonAuroraOutput_13 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_13 = null;
				if (dbProperties_tAmazonAuroraOutput_13 == null
						|| dbProperties_tAmazonAuroraOutput_13.trim().length() == 0) {
					url_tAmazonAuroraOutput_13 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_13 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_13
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_13 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_13 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_13;
				}
				String driverClass_tAmazonAuroraOutput_13 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_13 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_13 = context.password;

				String dbPwd_tAmazonAuroraOutput_13 = decryptedPassword_tAmazonAuroraOutput_13;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_13);

				conn_tAmazonAuroraOutput_13 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_13,
								dbUser_tAmazonAuroraOutput_13,
								dbPwd_tAmazonAuroraOutput_13);

				resourceMap.put("conn_tAmazonAuroraOutput_13",
						conn_tAmazonAuroraOutput_13);
				conn_tAmazonAuroraOutput_13.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_13 = 10000;
				int commitCounter_tAmazonAuroraOutput_13 = 0;

				int count_tAmazonAuroraOutput_13 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonAuroraOutput_13 = conn_tAmazonAuroraOutput_13
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonAuroraOutput_13 = dbMetaData_tAmazonAuroraOutput_13
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonAuroraOutput_13 = false;
				while (rsTable_tAmazonAuroraOutput_13.next()) {
					String table_tAmazonAuroraOutput_13 = rsTable_tAmazonAuroraOutput_13
							.getString("TABLE_NAME");
					if (table_tAmazonAuroraOutput_13
							.equalsIgnoreCase("noDataFound_Portfolio")) {
						whetherExist_tAmazonAuroraOutput_13 = true;
						break;
					}
				}
				rsTable_tAmazonAuroraOutput_13.close();
				if (!whetherExist_tAmazonAuroraOutput_13) {
					java.sql.Statement stmtCreate_tAmazonAuroraOutput_13 = conn_tAmazonAuroraOutput_13
							.createStatement();
					stmtCreate_tAmazonAuroraOutput_13
							.execute("CREATE TABLE `"
									+ tableName_tAmazonAuroraOutput_13
									+ "`(`OrionFirmId` INT(10)  ,`ExternalId` INT(10)  ,`PortfolioId` VARCHAR(50)  ,`PortfolioName` VARCHAR(50)  ,`sleeveContributionMethod` VARCHAR(255)  ,`sleeveStrategyName` VARCHAR(255)  ,`sleeveDistributionMethod` VARCHAR(255)  ,`registrationId` INT(0)  )");
					stmtCreate_tAmazonAuroraOutput_13.close();
				}

				String insert_tAmazonAuroraOutput_13 = "INSERT INTO `"
						+ "noDataFound_Portfolio"
						+ "` (`OrionFirmId`,`ExternalId`,`PortfolioId`,`PortfolioName`,`sleeveContributionMethod`,`sleeveStrategyName`,`sleeveDistributionMethod`,`registrationId`) VALUES (?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_13 = 1000;
				int batchSizeCounter_tAmazonAuroraOutput_13 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_13 = conn_tAmazonAuroraOutput_13
						.prepareStatement(insert_tAmazonAuroraOutput_13);

				/**
				 * [tAmazonAuroraOutput_13_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_13_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_13_in", false);
				start_Hash.put("tAmazonAuroraOutput_13_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_13";

				currentComponent = "tAmazonAuroraOutput_13_in";

				int tos_count_tAmazonAuroraOutput_13_in = 0;

				/**
				 * [tAmazonAuroraOutput_13_in begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<new_account_lookupStruct> tHash_Lookup_new_account_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<new_account_lookupStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<new_account_lookupStruct>) globalMap
						.get("tHash_Lookup_new_account_lookup"));

				new_account_lookupStruct new_account_lookupHashKey = new new_account_lookupStruct();
				new_account_lookupStruct new_account_lookupDefault = new new_account_lookupStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<new_portfolio_lookupStruct> tHash_Lookup_new_portfolio_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<new_portfolio_lookupStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<new_portfolio_lookupStruct>) globalMap
						.get("tHash_Lookup_new_portfolio_lookup"));

				new_portfolio_lookupStruct new_portfolio_lookupHashKey = new new_portfolio_lookupStruct();
				new_portfolio_lookupStruct new_portfolio_lookupDefault = new new_portfolio_lookupStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				row1_ErrorRejectStruct row1_ErrorReject_tmp = new row1_ErrorRejectStruct();
				sort_portfoliosStruct sort_portfolios_tmp = new sort_portfoliosStruct();
				noDataFound_joinReject3Struct noDataFound_joinReject3_tmp = new noDataFound_joinReject3Struct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tMap_13 begin ] start
				 */

				ok_Hash.put("tMap_13", false);
				start_Hash.put("tMap_13", System.currentTimeMillis());

				currentComponent = "tMap_13";

				int tos_count_tMap_13 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) globalMap
						.get("tHash_Lookup_row19"));

				row19Struct row19HashKey = new row19Struct();
				row19Struct row19Default = new row19Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_13__Struct {
				}
				Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				mainoutStruct mainout_tmp = new mainoutStruct();
				// ###############################

				/**
				 * [tMap_13 begin ] stop
				 */

				/**
				 * [tMap_12 begin ] start
				 */

				ok_Hash.put("tMap_12", false);
				start_Hash.put("tMap_12", System.currentTimeMillis());

				currentComponent = "tMap_12";

				int tos_count_tMap_12 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) globalMap
						.get("tHash_Lookup_row18"));

				row18Struct row18HashKey = new row18Struct();
				row18Struct row18Default = new row18Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_12__Struct {
				}
				Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				sStruct s_tmp = new sStruct();
				// ###############################

				/**
				 * [tMap_12 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_17_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_17_out", false);
				start_Hash.put("tAmazonAuroraInput_17_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_17";

				currentComponent = "tAmazonAuroraInput_17_out";

				int tos_count_tAmazonAuroraInput_17_out = 0;

				/**
				 * [tAmazonAuroraInput_17_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_17_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_17_in", false);
				start_Hash.put("tAmazonAuroraInput_17_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_17";

				currentComponent = "tAmazonAuroraInput_17_in";

				int tos_count_tAmazonAuroraInput_17_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_17_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_17_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_17_in = calendar_tAmazonAuroraInput_17_in
						.getTime();
				int nb_line_tAmazonAuroraInput_17_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_17_in = null;
				String driverClass_tAmazonAuroraInput_17_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_17_in);
				String dbUser_tAmazonAuroraInput_17_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_17_in = context.password;

				String dbPwd_tAmazonAuroraInput_17_in = decryptedPassword_tAmazonAuroraInput_17_in;

				String url_tAmazonAuroraInput_17_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_17_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_17_in,
								dbUser_tAmazonAuroraInput_17_in,
								dbPwd_tAmazonAuroraInput_17_in);

				java.sql.Statement stmt_tAmazonAuroraInput_17_in = conn_tAmazonAuroraInput_17_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_17_in = "select distinct OrionFirmId from account_"
						+ context.firmId
						+ "_"
						+ context.date
						+ " where SleeveType ='None'";

				globalMap.put("tAmazonAuroraInput_17_QUERY",
						dbquery_tAmazonAuroraInput_17_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_17_in = null;
				try {
					rs_tAmazonAuroraInput_17_in = stmt_tAmazonAuroraInput_17_in
							.executeQuery(dbquery_tAmazonAuroraInput_17_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_17_in = rs_tAmazonAuroraInput_17_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_17_in = rsmd_tAmazonAuroraInput_17_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_17_in = null;

					while (rs_tAmazonAuroraInput_17_in.next()) {
						nb_line_tAmazonAuroraInput_17_in++;

						if (colQtyInRs_tAmazonAuroraInput_17_in < 1) {
							row_tAmazonAuroraInput_17_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_17_in.getObject(1) != null) {
								row_tAmazonAuroraInput_17_in.OrionFirmId = rs_tAmazonAuroraInput_17_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_17_in.OrionFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_17_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_17_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_17";

						currentComponent = "tAmazonAuroraInput_17_in";

						tos_count_tAmazonAuroraInput_17_in++;

						/**
						 * [tAmazonAuroraInput_17_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_17_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_17";

						currentComponent = "tAmazonAuroraInput_17_out";

						row17 = row_tAmazonAuroraInput_17_in;

						tos_count_tAmazonAuroraInput_17_out++;

						/**
						 * [tAmazonAuroraInput_17_out main ] stop
						 */

						/**
						 * [tMap_12 main ] start
						 */

						currentComponent = "tMap_12";

						boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_12 = false;
						boolean mainRowRejected_tMap_12 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row18"
						// /////////////////////////////////////////////

						boolean forceLooprow18 = false;

						row18Struct row18ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_12) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_12 = false;

							row18HashKey.orionConnectFirmId = row17.OrionFirmId;

							row18HashKey.hashCodeDirty = true;

							tHash_Lookup_row18.lookup(row18HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row18 != null
								&& tHash_Lookup_row18.getCount(row18HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.orionConnectFirmId = '"
							// + row18HashKey.orionConnectFirmId + "'");
						} // G 071

						row18Struct row18 = null;

						row18Struct fromLookup_row18 = null;
						row18 = row18Default;

						if (tHash_Lookup_row18 != null
								&& tHash_Lookup_row18.hasNext()) { // G 099

							fromLookup_row18 = tHash_Lookup_row18.next();

						} // G 099

						if (fromLookup_row18 != null) {
							row18 = fromLookup_row18;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
							// ###############################
							// # Output tables

							s = null;

							// # Output table : 's'
							s_tmp.OrionFirmId = row17.OrionFirmId;
							s_tmp.orionEclipseFirmName = row18.orionEclipseFirmName;
							s = s_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_12 = false;

						tos_count_tMap_12++;

						/**
						 * [tMap_12 main ] stop
						 */
						// Start of branch "s"
						if (s != null) {

							/**
							 * [tMap_13 main ] start
							 */

							currentComponent = "tMap_13";

							boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_13 = false;
							boolean mainRowRejected_tMap_13 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row19"
							// /////////////////////////////////////////////

							boolean forceLooprow19 = false;

							row19Struct row19ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_13) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_13 = false;

								row19HashKey.firm = s.orionEclipseFirmName;

								row19HashKey.hashCodeDirty = true;

								tHash_Lookup_row19.lookup(row19HashKey);

								if (!tHash_Lookup_row19.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_13 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row19 != null
									&& tHash_Lookup_row19
											.getCount(row19HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row19' and it contains more one result from keys :  row19.firm = '"
								// + row19HashKey.firm + "'");
							} // G 071

							row19Struct row19 = null;

							row19Struct fromLookup_row19 = null;
							row19 = row19Default;

							if (tHash_Lookup_row19 != null
									&& tHash_Lookup_row19.hasNext()) { // G 099

								fromLookup_row19 = tHash_Lookup_row19.next();

							} // G 099

							if (fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
								// ###############################
								// # Output tables

								mainout = null;
								out1 = null;

								if (!rejectedInnerJoin_tMap_13) {

									// # Output table : 'mainout'
									mainout_tmp.firm = s.OrionFirmId;
									mainout = mainout_tmp;
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'out1'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_13) {
									out1_tmp.firm = s.OrionFirmId;
									out1 = out1_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_13 = false;

							tos_count_tMap_13++;

							/**
							 * [tMap_13 main ] stop
							 */
							// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tJavaRow_4 main ] start
								 */

								currentComponent = "tJavaRow_4";

								context.firmids = out1.firm;

								nb_line_tJavaRow_4++;

								tos_count_tJavaRow_4++;

								/**
								 * [tJavaRow_4 main ] stop
								 */

							} // End of branch "out1"

							// Start of branch "mainout"
							if (mainout != null) {

								/**
								 * [tMap_6 main ] start
								 */

								currentComponent = "tMap_6";

								boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_6 = false;
								boolean mainRowRejected_tMap_6 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row7"
								// /////////////////////////////////////////////

								boolean forceLooprow7 = false;

								row7Struct row7ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_6 = false;

									row7HashKey.OrionFirmId = mainout.firm;

									row7HashKey.hashCodeDirty = true;

									tHash_Lookup_row7.lookup(row7HashKey);

									if (!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_6 = true;

										forceLooprow7 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow7 = true;
								} // G 21

								row7Struct row7 = null;

								while ((tHash_Lookup_row7 != null && tHash_Lookup_row7
										.hasNext()) || forceLooprow7) { // G_TM_M_043

									// CALL close loop of lookup 'row7'

									row7Struct fromLookup_row7 = null;
									row7 = row7Default;

									if (!forceLooprow7) { // G 46

										fromLookup_row7 = tHash_Lookup_row7
												.next();

										if (fromLookup_row7 != null) {
											row7 = fromLookup_row7;
										}

									} // G 46

									forceLooprow7 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table
									// "new_account_lookup"
									// /////////////////////////////////////////////

									boolean forceLoopnew_account_lookup = false;

									new_account_lookupStruct new_account_lookupObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_6 = false;

										new_account_lookupHashKey.orionConnectExternalId = row7.ExternalId;

										new_account_lookupHashKey.hashCodeDirty = true;

										tHash_Lookup_new_account_lookup
												.lookup(new_account_lookupHashKey);

									} // G_TM_M_020

									if (tHash_Lookup_new_account_lookup != null
											&& tHash_Lookup_new_account_lookup
													.getCount(new_account_lookupHashKey) > 1) { // G
																								// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'new_account_lookup' and it contains more one result from keys :  new_account_lookup.orionConnectExternalId = '"
										// +
										// new_account_lookupHashKey.orionConnectExternalId
										// + "'");
									} // G 071

									new_account_lookupStruct new_account_lookup = null;

									new_account_lookupStruct fromLookup_new_account_lookup = null;
									new_account_lookup = new_account_lookupDefault;

									if (tHash_Lookup_new_account_lookup != null
											&& tHash_Lookup_new_account_lookup
													.hasNext()) { // G 099

										fromLookup_new_account_lookup = tHash_Lookup_new_account_lookup
												.next();

									} // G 099

									if (fromLookup_new_account_lookup != null) {
										new_account_lookup = fromLookup_new_account_lookup;
									}

									// /////////////////////////////////////////////
									// Starting Lookup Table
									// "new_portfolio_lookup"
									// /////////////////////////////////////////////

									boolean forceLoopnew_portfolio_lookup = false;

									new_portfolio_lookupStruct new_portfolio_lookupObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_6 = false;

										new_portfolio_lookupHashKey.name = row7.PortfolioName;

										new_portfolio_lookupHashKey.hashCodeDirty = true;

										tHash_Lookup_new_portfolio_lookup
												.lookup(new_portfolio_lookupHashKey);

									} // G_TM_M_020

									if (tHash_Lookup_new_portfolio_lookup != null
											&& tHash_Lookup_new_portfolio_lookup
													.getCount(new_portfolio_lookupHashKey) > 1) { // G
																									// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'new_portfolio_lookup' and it contains more one result from keys :  new_portfolio_lookup.name = '"
										// + new_portfolio_lookupHashKey.name +
										// "'");
									} // G 071

									new_portfolio_lookupStruct new_portfolio_lookup = null;

									new_portfolio_lookupStruct fromLookup_new_portfolio_lookup = null;
									new_portfolio_lookup = new_portfolio_lookupDefault;

									if (tHash_Lookup_new_portfolio_lookup != null
											&& tHash_Lookup_new_portfolio_lookup
													.hasNext()) { // G 099

										fromLookup_new_portfolio_lookup = tHash_Lookup_new_portfolio_lookup
												.next();

									} // G 099

									if (fromLookup_new_portfolio_lookup != null) {
										new_portfolio_lookup = fromLookup_new_portfolio_lookup;
									}

									try {
										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
											// ###############################
											// # Output tables

											row1_ErrorReject = null;
											sort_portfolios = null;
											noDataFound_joinReject3 = null;

											if (!rejectedInnerJoin_tMap_6) {

												// # Output table :
												// 'sort_portfolios'
												// # Filter conditions
												if (

												Relational
														.ISNULL(new_account_lookup.accountNumber)
														&& (Relational
																.ISNULL(new_portfolio_lookup.id) || new_portfolio_lookup.id == 0)

												) {
													sort_portfolios_tmp.OrionFirmId = row7.OrionFirmId;
													sort_portfolios_tmp.PortfolioId = row7.PortfolioId;
													sort_portfolios_tmp.PortfolioName = row7.PortfolioName;
													sort_portfolios_tmp.sleeveContributionMethod = row7.sleeveContributionMethod;
													sort_portfolios_tmp.sleeveStrategyName = row7.sleeveStrategyName;
													sort_portfolios_tmp.sleeveDistributionMethod = row7.sleeveDistributionMethod;
													sort_portfolios_tmp.registrationId = row7.registrationId;
													sort_portfolios = sort_portfolios_tmp;
												} // closing filter/reject
											} // closing inner join bracket (1)
												// ###### START REJECTS #####

											// # Output reject table :
											// 'noDataFound_joinReject3'
											// # Filter conditions
											if (rejectedInnerJoin_tMap_6) {
												noDataFound_joinReject3_tmp.OrionFirmId = row7.OrionFirmId;
												noDataFound_joinReject3_tmp.ExternalId = row7.ExternalId;
												noDataFound_joinReject3_tmp.PortfolioId = row7.PortfolioId;
												noDataFound_joinReject3_tmp.PortfolioName = row7.PortfolioName;
												noDataFound_joinReject3_tmp.sleeveContributionMethod = row7.sleeveContributionMethod;
												noDataFound_joinReject3_tmp.sleeveStrategyName = row7.sleeveStrategyName;
												noDataFound_joinReject3_tmp.sleeveDistributionMethod = row7.sleeveDistributionMethod;
												noDataFound_joinReject3_tmp.registrationId = row7.registrationId;
												noDataFound_joinReject3 = noDataFound_joinReject3_tmp;
											} // closing filter/reject
												// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_6 = false;

									} catch (java.lang.Exception e) {
										// if anohter java.lang.Exception when
										// processing an java.lang.Exception

										try {// EE
											Var__tMap_6__Struct Var = Var__tMap_6;

											row1_ErrorReject_tmp.OrionFirmId = row7.OrionFirmId;
											row1_ErrorReject_tmp.ExternalId = row7.ExternalId;
											row1_ErrorReject_tmp.PortfolioId = row7.PortfolioId;
											row1_ErrorReject_tmp.PortfolioName = row7.PortfolioName;
											row1_ErrorReject_tmp.sleeveContributionMethod = row7.sleeveContributionMethod;
											row1_ErrorReject_tmp.sleeveStrategyName = row7.sleeveStrategyName;
											row1_ErrorReject_tmp.sleeveDistributionMethod = row7.sleeveDistributionMethod;
											row1_ErrorReject_tmp.registrationId = row7.registrationId;
											row1_ErrorReject = row1_ErrorReject_tmp;
											row1_ErrorReject.errorMessage = e
													.getMessage();
											row1_ErrorReject.errorStackTrace = ResumeUtil
													.getExceptionStackTrace(e);

											sort_portfolios = null;
											noDataFound_joinReject3 = null;
										} catch (java.lang.Exception ee) {// EE

											ee.printStackTrace();
											sort_portfolios = null;
											noDataFound_joinReject3 = null;
										}// EE
									}// end catch

									tos_count_tMap_6++;

									/**
									 * [tMap_6 main ] stop
									 */
									// Start of branch "row1_ErrorReject"
									if (row1_ErrorReject != null) {

										/**
										 * [tAmazonAuroraOutput_12_in main ]
										 * start
										 */

										currentVirtualComponent = "tAmazonAuroraOutput_12";

										currentComponent = "tAmazonAuroraOutput_12_in";

										row_tAmazonAuroraOutput_12_in = row1_ErrorReject;

										tos_count_tAmazonAuroraOutput_12_in++;

										/**
										 * [tAmazonAuroraOutput_12_in main ]
										 * stop
										 */

										/**
										 * [tAmazonAuroraOutput_12_out main ]
										 * start
										 */

										currentVirtualComponent = "tAmazonAuroraOutput_12";

										currentComponent = "tAmazonAuroraOutput_12_out";

										whetherReject_tAmazonAuroraOutput_12 = false;
										if (row_tAmazonAuroraOutput_12_in.OrionFirmId == null) {
											pstmt_tAmazonAuroraOutput_12
													.setNull(
															1,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_12
													.setInt(1,
															row_tAmazonAuroraOutput_12_in.OrionFirmId);
										}

										if (row_tAmazonAuroraOutput_12_in.ExternalId == null) {
											pstmt_tAmazonAuroraOutput_12
													.setNull(
															2,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_12
													.setInt(2,
															row_tAmazonAuroraOutput_12_in.ExternalId);
										}

										if (row_tAmazonAuroraOutput_12_in.PortfolioId == null) {
											pstmt_tAmazonAuroraOutput_12
													.setNull(
															3,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_12
													.setString(
															3,
															row_tAmazonAuroraOutput_12_in.PortfolioId);
										}

										if (row_tAmazonAuroraOutput_12_in.PortfolioName == null) {
											pstmt_tAmazonAuroraOutput_12
													.setNull(
															4,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_12
													.setString(
															4,
															row_tAmazonAuroraOutput_12_in.PortfolioName);
										}

										if (row_tAmazonAuroraOutput_12_in.sleeveContributionMethod == null) {
											pstmt_tAmazonAuroraOutput_12
													.setNull(
															5,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_12
													.setString(
															5,
															row_tAmazonAuroraOutput_12_in.sleeveContributionMethod);
										}

										if (row_tAmazonAuroraOutput_12_in.sleeveStrategyName == null) {
											pstmt_tAmazonAuroraOutput_12
													.setNull(
															6,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_12
													.setString(
															6,
															row_tAmazonAuroraOutput_12_in.sleeveStrategyName);
										}

										if (row_tAmazonAuroraOutput_12_in.sleeveDistributionMethod == null) {
											pstmt_tAmazonAuroraOutput_12
													.setNull(
															7,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_12
													.setString(
															7,
															row_tAmazonAuroraOutput_12_in.sleeveDistributionMethod);
										}

										if (row_tAmazonAuroraOutput_12_in.registrationId == null) {
											pstmt_tAmazonAuroraOutput_12
													.setNull(
															8,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_12
													.setInt(8,
															row_tAmazonAuroraOutput_12_in.registrationId);
										}

										if (row_tAmazonAuroraOutput_12_in.errorMessage == null) {
											pstmt_tAmazonAuroraOutput_12
													.setNull(
															9,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_12
													.setString(
															9,
															row_tAmazonAuroraOutput_12_in.errorMessage);
										}

										if (row_tAmazonAuroraOutput_12_in.errorStackTrace == null) {
											pstmt_tAmazonAuroraOutput_12
													.setNull(
															10,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_12
													.setString(
															10,
															row_tAmazonAuroraOutput_12_in.errorStackTrace);
										}

										pstmt_tAmazonAuroraOutput_12.addBatch();
										nb_line_tAmazonAuroraOutput_12++;

										batchSizeCounter_tAmazonAuroraOutput_12++;
										if (batchSize_tAmazonAuroraOutput_12 <= batchSizeCounter_tAmazonAuroraOutput_12) {
											try {
												int countSum_tAmazonAuroraOutput_12 = 0;
												for (int countEach_tAmazonAuroraOutput_12 : pstmt_tAmazonAuroraOutput_12
														.executeBatch()) {
													countSum_tAmazonAuroraOutput_12 += (countEach_tAmazonAuroraOutput_12 < 0 ? 0
															: 1);
												}
												insertedCount_tAmazonAuroraOutput_12 += countSum_tAmazonAuroraOutput_12;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tAmazonAuroraOutput_12 = 0;
												for (int countEach_tAmazonAuroraOutput_12 : e
														.getUpdateCounts()) {
													countSum_tAmazonAuroraOutput_12 += (countEach_tAmazonAuroraOutput_12 < 0 ? 0
															: countEach_tAmazonAuroraOutput_12);
												}
												insertedCount_tAmazonAuroraOutput_12 += countSum_tAmazonAuroraOutput_12;
												System.err.println(e
														.getMessage());
											}

											batchSizeCounter_tAmazonAuroraOutput_12 = 0;
										}
										commitCounter_tAmazonAuroraOutput_12++;

										if (commitEvery_tAmazonAuroraOutput_12 <= commitCounter_tAmazonAuroraOutput_12) {

											try {
												int countSum_tAmazonAuroraOutput_12 = 0;
												for (int countEach_tAmazonAuroraOutput_12 : pstmt_tAmazonAuroraOutput_12
														.executeBatch()) {
													countSum_tAmazonAuroraOutput_12 += (countEach_tAmazonAuroraOutput_12 < 0 ? 0
															: 1);
												}
												insertedCount_tAmazonAuroraOutput_12 += countSum_tAmazonAuroraOutput_12;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tAmazonAuroraOutput_12 = 0;
												for (int countEach_tAmazonAuroraOutput_12 : e
														.getUpdateCounts()) {
													countSum_tAmazonAuroraOutput_12 += (countEach_tAmazonAuroraOutput_12 < 0 ? 0
															: countEach_tAmazonAuroraOutput_12);
												}
												insertedCount_tAmazonAuroraOutput_12 += countSum_tAmazonAuroraOutput_12;
												System.err.println(e
														.getMessage());

											}
											conn_tAmazonAuroraOutput_12
													.commit();
											commitCounter_tAmazonAuroraOutput_12 = 0;

										}

										tos_count_tAmazonAuroraOutput_12_out++;

										/**
										 * [tAmazonAuroraOutput_12_out main ]
										 * stop
										 */

									} // End of branch "row1_ErrorReject"

									// Start of branch "sort_portfolios"
									if (sort_portfolios != null) {

										/**
										 * [tSortRow_1_SortOut main ] start
										 */

										currentVirtualComponent = "tSortRow_1";

										currentComponent = "tSortRow_1_SortOut";

										Comparablesort_portfoliosStruct arrayRowtSortRow_1_SortOut = new Comparablesort_portfoliosStruct();

										arrayRowtSortRow_1_SortOut.OrionFirmId = sort_portfolios.OrionFirmId;
										arrayRowtSortRow_1_SortOut.PortfolioId = sort_portfolios.PortfolioId;
										arrayRowtSortRow_1_SortOut.PortfolioName = sort_portfolios.PortfolioName;
										arrayRowtSortRow_1_SortOut.sleeveContributionMethod = sort_portfolios.sleeveContributionMethod;
										arrayRowtSortRow_1_SortOut.sleeveStrategyName = sort_portfolios.sleeveStrategyName;
										arrayRowtSortRow_1_SortOut.sleeveDistributionMethod = sort_portfolios.sleeveDistributionMethod;
										arrayRowtSortRow_1_SortOut.registrationId = sort_portfolios.registrationId;
										list_tSortRow_1_SortOut
												.add(arrayRowtSortRow_1_SortOut);

										tos_count_tSortRow_1_SortOut++;

										/**
										 * [tSortRow_1_SortOut main ] stop
										 */

									} // End of branch "sort_portfolios"

									// Start of branch "noDataFound_joinReject3"
									if (noDataFound_joinReject3 != null) {

										/**
										 * [tAmazonAuroraOutput_13_in main ]
										 * start
										 */

										currentVirtualComponent = "tAmazonAuroraOutput_13";

										currentComponent = "tAmazonAuroraOutput_13_in";

										row_tAmazonAuroraOutput_13_in = noDataFound_joinReject3;

										tos_count_tAmazonAuroraOutput_13_in++;

										/**
										 * [tAmazonAuroraOutput_13_in main ]
										 * stop
										 */

										/**
										 * [tAmazonAuroraOutput_13_out main ]
										 * start
										 */

										currentVirtualComponent = "tAmazonAuroraOutput_13";

										currentComponent = "tAmazonAuroraOutput_13_out";

										whetherReject_tAmazonAuroraOutput_13 = false;
										if (row_tAmazonAuroraOutput_13_in.OrionFirmId == null) {
											pstmt_tAmazonAuroraOutput_13
													.setNull(
															1,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_13
													.setInt(1,
															row_tAmazonAuroraOutput_13_in.OrionFirmId);
										}

										if (row_tAmazonAuroraOutput_13_in.ExternalId == null) {
											pstmt_tAmazonAuroraOutput_13
													.setNull(
															2,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_13
													.setInt(2,
															row_tAmazonAuroraOutput_13_in.ExternalId);
										}

										if (row_tAmazonAuroraOutput_13_in.PortfolioId == null) {
											pstmt_tAmazonAuroraOutput_13
													.setNull(
															3,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_13
													.setString(
															3,
															row_tAmazonAuroraOutput_13_in.PortfolioId);
										}

										if (row_tAmazonAuroraOutput_13_in.PortfolioName == null) {
											pstmt_tAmazonAuroraOutput_13
													.setNull(
															4,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_13
													.setString(
															4,
															row_tAmazonAuroraOutput_13_in.PortfolioName);
										}

										if (row_tAmazonAuroraOutput_13_in.sleeveContributionMethod == null) {
											pstmt_tAmazonAuroraOutput_13
													.setNull(
															5,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_13
													.setString(
															5,
															row_tAmazonAuroraOutput_13_in.sleeveContributionMethod);
										}

										if (row_tAmazonAuroraOutput_13_in.sleeveStrategyName == null) {
											pstmt_tAmazonAuroraOutput_13
													.setNull(
															6,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_13
													.setString(
															6,
															row_tAmazonAuroraOutput_13_in.sleeveStrategyName);
										}

										if (row_tAmazonAuroraOutput_13_in.sleeveDistributionMethod == null) {
											pstmt_tAmazonAuroraOutput_13
													.setNull(
															7,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_13
													.setString(
															7,
															row_tAmazonAuroraOutput_13_in.sleeveDistributionMethod);
										}

										if (row_tAmazonAuroraOutput_13_in.registrationId == null) {
											pstmt_tAmazonAuroraOutput_13
													.setNull(
															8,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_13
													.setInt(8,
															row_tAmazonAuroraOutput_13_in.registrationId);
										}

										pstmt_tAmazonAuroraOutput_13.addBatch();
										nb_line_tAmazonAuroraOutput_13++;

										batchSizeCounter_tAmazonAuroraOutput_13++;
										if (batchSize_tAmazonAuroraOutput_13 <= batchSizeCounter_tAmazonAuroraOutput_13) {
											try {
												int countSum_tAmazonAuroraOutput_13 = 0;
												for (int countEach_tAmazonAuroraOutput_13 : pstmt_tAmazonAuroraOutput_13
														.executeBatch()) {
													countSum_tAmazonAuroraOutput_13 += (countEach_tAmazonAuroraOutput_13 < 0 ? 0
															: 1);
												}
												insertedCount_tAmazonAuroraOutput_13 += countSum_tAmazonAuroraOutput_13;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tAmazonAuroraOutput_13 = 0;
												for (int countEach_tAmazonAuroraOutput_13 : e
														.getUpdateCounts()) {
													countSum_tAmazonAuroraOutput_13 += (countEach_tAmazonAuroraOutput_13 < 0 ? 0
															: countEach_tAmazonAuroraOutput_13);
												}
												insertedCount_tAmazonAuroraOutput_13 += countSum_tAmazonAuroraOutput_13;
												System.err.println(e
														.getMessage());
											}

											batchSizeCounter_tAmazonAuroraOutput_13 = 0;
										}
										commitCounter_tAmazonAuroraOutput_13++;

										if (commitEvery_tAmazonAuroraOutput_13 <= commitCounter_tAmazonAuroraOutput_13) {

											try {
												int countSum_tAmazonAuroraOutput_13 = 0;
												for (int countEach_tAmazonAuroraOutput_13 : pstmt_tAmazonAuroraOutput_13
														.executeBatch()) {
													countSum_tAmazonAuroraOutput_13 += (countEach_tAmazonAuroraOutput_13 < 0 ? 0
															: 1);
												}
												insertedCount_tAmazonAuroraOutput_13 += countSum_tAmazonAuroraOutput_13;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tAmazonAuroraOutput_13 = 0;
												for (int countEach_tAmazonAuroraOutput_13 : e
														.getUpdateCounts()) {
													countSum_tAmazonAuroraOutput_13 += (countEach_tAmazonAuroraOutput_13 < 0 ? 0
															: countEach_tAmazonAuroraOutput_13);
												}
												insertedCount_tAmazonAuroraOutput_13 += countSum_tAmazonAuroraOutput_13;
												System.err.println(e
														.getMessage());

											}
											conn_tAmazonAuroraOutput_13
													.commit();
											commitCounter_tAmazonAuroraOutput_13 = 0;

										}

										tos_count_tAmazonAuroraOutput_13_out++;

										/**
										 * [tAmazonAuroraOutput_13_out main ]
										 * stop
										 */

									} // End of branch "noDataFound_joinReject3"

								} // close loop of lookup 'row7' // G_TM_M_043

							} // End of branch "mainout"

						} // End of branch "s"

						/**
						 * [tAmazonAuroraInput_17_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_17";

						currentComponent = "tAmazonAuroraInput_17_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_17_in != null) {
						rs_tAmazonAuroraInput_17_in.close();
					}
					stmt_tAmazonAuroraInput_17_in.close();
					if (conn_tAmazonAuroraInput_17_in != null
							&& !conn_tAmazonAuroraInput_17_in.isClosed()) {

						conn_tAmazonAuroraInput_17_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_17_NB_LINE",
						nb_line_tAmazonAuroraInput_17_in);

				ok_Hash.put("tAmazonAuroraInput_17_in", true);
				end_Hash.put("tAmazonAuroraInput_17_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_17_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_17_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_17";

				currentComponent = "tAmazonAuroraInput_17_out";

				ok_Hash.put("tAmazonAuroraInput_17_out", true);
				end_Hash.put("tAmazonAuroraInput_17_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_17_out end ] stop
				 */

				/**
				 * [tMap_12 end ] start
				 */

				currentComponent = "tMap_12";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row18 != null) {
					tHash_Lookup_row18.endGet();
				}
				globalMap.remove("tHash_Lookup_row18");

				// ###############################

				ok_Hash.put("tMap_12", true);
				end_Hash.put("tMap_12", System.currentTimeMillis());

				/**
				 * [tMap_12 end ] stop
				 */

				/**
				 * [tMap_13 end ] start
				 */

				currentComponent = "tMap_13";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row19 != null) {
					tHash_Lookup_row19.endGet();
				}
				globalMap.remove("tHash_Lookup_row19");

				// ###############################

				ok_Hash.put("tMap_13", true);
				end_Hash.put("tMap_13", System.currentTimeMillis());

				/**
				 * [tMap_13 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				if (context.firmids != null) {

					tWarn_1Process(globalMap);
				}

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				if (tHash_Lookup_new_account_lookup != null) {
					tHash_Lookup_new_account_lookup.endGet();
				}
				globalMap.remove("tHash_Lookup_new_account_lookup");

				if (tHash_Lookup_new_portfolio_lookup != null) {
					tHash_Lookup_new_portfolio_lookup.endGet();
				}
				globalMap.remove("tHash_Lookup_new_portfolio_lookup");

				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_12_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_12";

				currentComponent = "tAmazonAuroraOutput_12_in";

				ok_Hash.put("tAmazonAuroraOutput_12_in", true);
				end_Hash.put("tAmazonAuroraOutput_12_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_12_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_12_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_12";

				currentComponent = "tAmazonAuroraOutput_12_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_12 != 0) {
						int countSum_tAmazonAuroraOutput_12 = 0;

						for (int countEach_tAmazonAuroraOutput_12 : pstmt_tAmazonAuroraOutput_12
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_12 += (countEach_tAmazonAuroraOutput_12 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_12 += countSum_tAmazonAuroraOutput_12;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_12 = 0;
					for (int countEach_tAmazonAuroraOutput_12 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_12 += (countEach_tAmazonAuroraOutput_12 < 0 ? 0
								: countEach_tAmazonAuroraOutput_12);
					}

					insertedCount_tAmazonAuroraOutput_12 += countSum_tAmazonAuroraOutput_12;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_12 = 0;

				if (pstmt_tAmazonAuroraOutput_12 != null) {

					pstmt_tAmazonAuroraOutput_12.close();

				}

				if (commitCounter_tAmazonAuroraOutput_12 > 0) {

					conn_tAmazonAuroraOutput_12.commit();

				}

				conn_tAmazonAuroraOutput_12.close();

				resourceMap.put("finish_tAmazonAuroraOutput_12", true);

				nb_line_deleted_tAmazonAuroraOutput_12 = nb_line_deleted_tAmazonAuroraOutput_12
						+ deletedCount_tAmazonAuroraOutput_12;
				nb_line_update_tAmazonAuroraOutput_12 = nb_line_update_tAmazonAuroraOutput_12
						+ updatedCount_tAmazonAuroraOutput_12;
				nb_line_inserted_tAmazonAuroraOutput_12 = nb_line_inserted_tAmazonAuroraOutput_12
						+ insertedCount_tAmazonAuroraOutput_12;
				nb_line_rejected_tAmazonAuroraOutput_12 = nb_line_rejected_tAmazonAuroraOutput_12
						+ rejectedCount_tAmazonAuroraOutput_12;

				globalMap.put("tAmazonAuroraOutput_12_NB_LINE",
						nb_line_tAmazonAuroraOutput_12);
				globalMap.put("tAmazonAuroraOutput_12_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_12);
				globalMap.put("tAmazonAuroraOutput_12_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_12);
				globalMap.put("tAmazonAuroraOutput_12_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_12);
				globalMap.put("tAmazonAuroraOutput_12_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_12);

				ok_Hash.put("tAmazonAuroraOutput_12_out", true);
				end_Hash.put("tAmazonAuroraOutput_12_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_12_out end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				sort_portfoliosStruct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut
						.toArray(new Comparablesort_portfoliosStruct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_2_out", false);
				start_Hash.put("tAmazonAuroraOutput_2_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				int tos_count_tAmazonAuroraOutput_2_out = 0;

				int nb_line_tAmazonAuroraOutput_2 = 0;
				int nb_line_update_tAmazonAuroraOutput_2 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_2 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_2 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_2 = 0;

				int deletedCount_tAmazonAuroraOutput_2 = 0;
				int updatedCount_tAmazonAuroraOutput_2 = 0;
				int insertedCount_tAmazonAuroraOutput_2 = 0;

				int rejectedCount_tAmazonAuroraOutput_2 = 0;

				String tableName_tAmazonAuroraOutput_2 = "portfolio";
				boolean whetherReject_tAmazonAuroraOutput_2 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_2 = calendar_tAmazonAuroraOutput_2
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_2 = calendar_tAmazonAuroraOutput_2
						.getTime().getTime();
				long date_tAmazonAuroraOutput_2;

				java.sql.Connection conn_tAmazonAuroraOutput_2 = null;
				String dbProperties_tAmazonAuroraOutput_2 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_2 = null;
				if (dbProperties_tAmazonAuroraOutput_2 == null
						|| dbProperties_tAmazonAuroraOutput_2.trim().length() == 0) {
					url_tAmazonAuroraOutput_2 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_2 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_2;
				}
				String driverClass_tAmazonAuroraOutput_2 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_2 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_2 = context.password;

				String dbPwd_tAmazonAuroraOutput_2 = decryptedPassword_tAmazonAuroraOutput_2;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_2);

				conn_tAmazonAuroraOutput_2 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_2,
								dbUser_tAmazonAuroraOutput_2,
								dbPwd_tAmazonAuroraOutput_2);

				resourceMap.put("conn_tAmazonAuroraOutput_2",
						conn_tAmazonAuroraOutput_2);
				conn_tAmazonAuroraOutput_2.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_2 = 10000;
				int commitCounter_tAmazonAuroraOutput_2 = 0;

				int count_tAmazonAuroraOutput_2 = 0;

				String insert_tAmazonAuroraOutput_2 = "INSERT INTO `"
						+ "portfolio"
						+ "` (`id`,`name`,`modelId`,`tags`,`isDisabled`,`disabledReason`,`isSleevePortfolio`,`sleeveContributionMethod`,`sleeveStrategyName`,`sleeveDistributionMethod`,`registrationId`,`IsDeleted`,`createdDate`,`createdBy`,`editedDate`,`editedBy`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_2 = 1000;
				int batchSizeCounter_tAmazonAuroraOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_2 = conn_tAmazonAuroraOutput_2
						.prepareStatement(insert_tAmazonAuroraOutput_2);

				/**
				 * [tAmazonAuroraOutput_2_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_2_in", false);
				start_Hash.put("tAmazonAuroraOutput_2_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				int tos_count_tAmazonAuroraOutput_2_in = 0;

				/**
				 * [tAmazonAuroraOutput_2_in begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				portfolio_outputStruct portfolio_output_tmp = new portfolio_outputStruct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String PortfolioId;
					String PortfolioName;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.PortfolioId == null) ? 0
											: this.PortfolioId.hashCode());

							result = prime
									* result
									+ ((this.PortfolioName == null) ? 0
											: this.PortfolioName.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.PortfolioId == null) {
							if (other.PortfolioId != null)
								return false;

						} else if (!this.PortfolioId.equals(other.PortfolioId))

							return false;

						if (this.PortfolioName == null) {
							if (other.PortfolioName != null)
								return false;

						} else if (!this.PortfolioName
								.equals(other.PortfolioName))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				sort_portfoliosStruct[] array_tSortRow_1_SortIn = (sort_portfoliosStruct[]) globalMap
						.get("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				sort_portfoliosStruct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					unique_portfolios.OrionFirmId = current_tSortRow_1_SortIn.OrionFirmId;
					unique_portfolios.PortfolioId = current_tSortRow_1_SortIn.PortfolioId;
					unique_portfolios.PortfolioName = current_tSortRow_1_SortIn.PortfolioName;
					unique_portfolios.sleeveContributionMethod = current_tSortRow_1_SortIn.sleeveContributionMethod;
					unique_portfolios.sleeveStrategyName = current_tSortRow_1_SortIn.sleeveStrategyName;
					unique_portfolios.sleeveDistributionMethod = current_tSortRow_1_SortIn.sleeveDistributionMethod;
					unique_portfolios.registrationId = current_tSortRow_1_SortIn.registrationId;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tUniqRow_1 main ] start
					 */

					currentComponent = "tUniqRow_1";

					row8 = null;
					if (unique_portfolios.PortfolioId == null) {
						finder_tUniqRow_1.PortfolioId = null;
					} else {
						finder_tUniqRow_1.PortfolioId = unique_portfolios.PortfolioId
								.toLowerCase();
					}
					if (unique_portfolios.PortfolioName == null) {
						finder_tUniqRow_1.PortfolioName = null;
					} else {
						finder_tUniqRow_1.PortfolioName = unique_portfolios.PortfolioName
								.toLowerCase();
					}
					finder_tUniqRow_1.hashCodeDirty = true;
					if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
						KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

						if (unique_portfolios.PortfolioId == null) {
							new_tUniqRow_1.PortfolioId = null;
						} else {
							new_tUniqRow_1.PortfolioId = unique_portfolios.PortfolioId
									.toLowerCase();
						}
						if (unique_portfolios.PortfolioName == null) {
							new_tUniqRow_1.PortfolioName = null;
						} else {
							new_tUniqRow_1.PortfolioName = unique_portfolios.PortfolioName
									.toLowerCase();
						}

						keystUniqRow_1.add(new_tUniqRow_1);
						if (row8 == null) {

							row8 = new row8Struct();
						}
						row8.OrionFirmId = unique_portfolios.OrionFirmId;
						row8.PortfolioId = unique_portfolios.PortfolioId;
						row8.PortfolioName = unique_portfolios.PortfolioName;
						row8.sleeveContributionMethod = unique_portfolios.sleeveContributionMethod;
						row8.sleeveStrategyName = unique_portfolios.sleeveStrategyName;
						row8.sleeveDistributionMethod = unique_portfolios.sleeveDistributionMethod;
						row8.registrationId = unique_portfolios.registrationId;
						nb_uniques_tUniqRow_1++;
					} else {
						nb_duplicates_tUniqRow_1++;
					}

					tos_count_tUniqRow_1++;

					/**
					 * [tUniqRow_1 main ] stop
					 */
					// Start of branch "row8"
					if (row8 != null) {

						/**
						 * [tMap_7 main ] start
						 */

						currentComponent = "tMap_7";

						boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_7 = false;
						boolean mainRowRejected_tMap_7 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
							// ###############################
							// # Output tables

							portfolio_output = null;

							// # Output table : 'portfolio_output'
							portfolio_output_tmp.id = 0;
							portfolio_output_tmp.name = row8.PortfolioName;
							portfolio_output_tmp.modelId = null;
							portfolio_output_tmp.tags = null;
							portfolio_output_tmp.isDisabled = false;
							portfolio_output_tmp.disabledReason = null;
							portfolio_output_tmp.isSleevePortfolio = false;
							portfolio_output_tmp.sleeveContributionMethod = row8.sleeveContributionMethod;
							portfolio_output_tmp.sleeveStrategyName = row8.sleeveStrategyName;
							portfolio_output_tmp.sleeveDistributionMethod = row8.sleeveDistributionMethod;
							portfolio_output_tmp.registrationId = row8.registrationId;
							portfolio_output_tmp.IsDeleted = false;
							portfolio_output_tmp.createdDate = TalendDate
									.getCurrentDate();
							portfolio_output_tmp.createdBy = 1;
							portfolio_output_tmp.editedDate = TalendDate
									.getCurrentDate();
							portfolio_output_tmp.editedBy = 1;
							portfolio_output = portfolio_output_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_7 = false;

						tos_count_tMap_7++;

						/**
						 * [tMap_7 main ] stop
						 */
						// Start of branch "portfolio_output"
						if (portfolio_output != null) {

							/**
							 * [tAmazonAuroraOutput_2_in main ] start
							 */

							currentVirtualComponent = "tAmazonAuroraOutput_2";

							currentComponent = "tAmazonAuroraOutput_2_in";

							row_tAmazonAuroraOutput_2_in = portfolio_output;

							tos_count_tAmazonAuroraOutput_2_in++;

							/**
							 * [tAmazonAuroraOutput_2_in main ] stop
							 */

							/**
							 * [tAmazonAuroraOutput_2_out main ] start
							 */

							currentVirtualComponent = "tAmazonAuroraOutput_2";

							currentComponent = "tAmazonAuroraOutput_2_out";

							whetherReject_tAmazonAuroraOutput_2 = false;
							pstmt_tAmazonAuroraOutput_2.setInt(1,
									row_tAmazonAuroraOutput_2_in.id);

							if (row_tAmazonAuroraOutput_2_in.name == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonAuroraOutput_2.setString(2,
										row_tAmazonAuroraOutput_2_in.name);
							}

							if (row_tAmazonAuroraOutput_2_in.modelId == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(3,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonAuroraOutput_2.setInt(3,
										row_tAmazonAuroraOutput_2_in.modelId);
							}

							if (row_tAmazonAuroraOutput_2_in.tags == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonAuroraOutput_2.setString(4,
										row_tAmazonAuroraOutput_2_in.tags);
							}

							pstmt_tAmazonAuroraOutput_2.setBoolean(5,
									row_tAmazonAuroraOutput_2_in.isDisabled);

							if (row_tAmazonAuroraOutput_2_in.disabledReason == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setString(
												6,
												row_tAmazonAuroraOutput_2_in.disabledReason);
							}

							pstmt_tAmazonAuroraOutput_2
									.setBoolean(
											7,
											row_tAmazonAuroraOutput_2_in.isSleevePortfolio);

							if (row_tAmazonAuroraOutput_2_in.sleeveContributionMethod == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setString(
												8,
												row_tAmazonAuroraOutput_2_in.sleeveContributionMethod);
							}

							if (row_tAmazonAuroraOutput_2_in.sleeveStrategyName == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setString(
												9,
												row_tAmazonAuroraOutput_2_in.sleeveStrategyName);
							}

							if (row_tAmazonAuroraOutput_2_in.sleeveDistributionMethod == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setString(
												10,
												row_tAmazonAuroraOutput_2_in.sleeveDistributionMethod);
							}

							if (row_tAmazonAuroraOutput_2_in.registrationId == null) {
								pstmt_tAmazonAuroraOutput_2.setNull(11,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonAuroraOutput_2
										.setInt(11,
												row_tAmazonAuroraOutput_2_in.registrationId);
							}

							pstmt_tAmazonAuroraOutput_2.setBoolean(12,
									row_tAmazonAuroraOutput_2_in.IsDeleted);

							if (row_tAmazonAuroraOutput_2_in.createdDate != null) {
								date_tAmazonAuroraOutput_2 = row_tAmazonAuroraOutput_2_in.createdDate
										.getTime();
								if (date_tAmazonAuroraOutput_2 < year1_tAmazonAuroraOutput_2
										|| date_tAmazonAuroraOutput_2 >= year10000_tAmazonAuroraOutput_2) {
									pstmt_tAmazonAuroraOutput_2.setString(13,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tAmazonAuroraOutput_2
											.setTimestamp(
													13,
													new java.sql.Timestamp(
															date_tAmazonAuroraOutput_2));
								}
							} else {
								pstmt_tAmazonAuroraOutput_2.setNull(13,
										java.sql.Types.DATE);
							}

							pstmt_tAmazonAuroraOutput_2.setInt(14,
									row_tAmazonAuroraOutput_2_in.createdBy);

							if (row_tAmazonAuroraOutput_2_in.editedDate != null) {
								date_tAmazonAuroraOutput_2 = row_tAmazonAuroraOutput_2_in.editedDate
										.getTime();
								if (date_tAmazonAuroraOutput_2 < year1_tAmazonAuroraOutput_2
										|| date_tAmazonAuroraOutput_2 >= year10000_tAmazonAuroraOutput_2) {
									pstmt_tAmazonAuroraOutput_2.setString(15,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tAmazonAuroraOutput_2
											.setTimestamp(
													15,
													new java.sql.Timestamp(
															date_tAmazonAuroraOutput_2));
								}
							} else {
								pstmt_tAmazonAuroraOutput_2.setNull(15,
										java.sql.Types.DATE);
							}

							pstmt_tAmazonAuroraOutput_2.setInt(16,
									row_tAmazonAuroraOutput_2_in.editedBy);

							pstmt_tAmazonAuroraOutput_2.addBatch();
							nb_line_tAmazonAuroraOutput_2++;

							batchSizeCounter_tAmazonAuroraOutput_2++;
							if (batchSize_tAmazonAuroraOutput_2 <= batchSizeCounter_tAmazonAuroraOutput_2) {
								try {
									int countSum_tAmazonAuroraOutput_2 = 0;
									for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
											.executeBatch()) {
										countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
												: 1);
									}
									insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tAmazonAuroraOutput_2 = 0;
									for (int countEach_tAmazonAuroraOutput_2 : e
											.getUpdateCounts()) {
										countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
												: countEach_tAmazonAuroraOutput_2);
									}
									insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tAmazonAuroraOutput_2 = 0;
							}
							commitCounter_tAmazonAuroraOutput_2++;

							if (commitEvery_tAmazonAuroraOutput_2 <= commitCounter_tAmazonAuroraOutput_2) {

								try {
									int countSum_tAmazonAuroraOutput_2 = 0;
									for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
											.executeBatch()) {
										countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
												: 1);
									}
									insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tAmazonAuroraOutput_2 = 0;
									for (int countEach_tAmazonAuroraOutput_2 : e
											.getUpdateCounts()) {
										countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
												: countEach_tAmazonAuroraOutput_2);
									}
									insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
									System.err.println(e.getMessage());

								}
								conn_tAmazonAuroraOutput_2.commit();
								commitCounter_tAmazonAuroraOutput_2 = 0;

							}

							tos_count_tAmazonAuroraOutput_2_out++;

							/**
							 * [tAmazonAuroraOutput_2_out main ] stop
							 */

						} // End of branch "portfolio_output"

					} // End of branch "row8"

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE",
						nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES",
						nb_duplicates_tUniqRow_1);

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				ok_Hash.put("tAmazonAuroraOutput_2_in", true);
				end_Hash.put("tAmazonAuroraOutput_2_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_2_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_2 != 0) {
						int countSum_tAmazonAuroraOutput_2 = 0;

						for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_2 = 0;
					for (int countEach_tAmazonAuroraOutput_2 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
								: countEach_tAmazonAuroraOutput_2);
					}

					insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_2 = 0;

				if (pstmt_tAmazonAuroraOutput_2 != null) {

					pstmt_tAmazonAuroraOutput_2.close();

				}

				if (commitCounter_tAmazonAuroraOutput_2 > 0) {

					conn_tAmazonAuroraOutput_2.commit();

				}

				conn_tAmazonAuroraOutput_2.close();

				resourceMap.put("finish_tAmazonAuroraOutput_2", true);

				nb_line_deleted_tAmazonAuroraOutput_2 = nb_line_deleted_tAmazonAuroraOutput_2
						+ deletedCount_tAmazonAuroraOutput_2;
				nb_line_update_tAmazonAuroraOutput_2 = nb_line_update_tAmazonAuroraOutput_2
						+ updatedCount_tAmazonAuroraOutput_2;
				nb_line_inserted_tAmazonAuroraOutput_2 = nb_line_inserted_tAmazonAuroraOutput_2
						+ insertedCount_tAmazonAuroraOutput_2;
				nb_line_rejected_tAmazonAuroraOutput_2 = nb_line_rejected_tAmazonAuroraOutput_2
						+ rejectedCount_tAmazonAuroraOutput_2;

				globalMap.put("tAmazonAuroraOutput_2_NB_LINE",
						nb_line_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_2);

				ok_Hash.put("tAmazonAuroraOutput_2_out", true);
				end_Hash.put("tAmazonAuroraOutput_2_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_2_out end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_13_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_13";

				currentComponent = "tAmazonAuroraOutput_13_in";

				ok_Hash.put("tAmazonAuroraOutput_13_in", true);
				end_Hash.put("tAmazonAuroraOutput_13_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_13_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_13_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_13";

				currentComponent = "tAmazonAuroraOutput_13_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_13 != 0) {
						int countSum_tAmazonAuroraOutput_13 = 0;

						for (int countEach_tAmazonAuroraOutput_13 : pstmt_tAmazonAuroraOutput_13
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_13 += (countEach_tAmazonAuroraOutput_13 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_13 += countSum_tAmazonAuroraOutput_13;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_13 = 0;
					for (int countEach_tAmazonAuroraOutput_13 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_13 += (countEach_tAmazonAuroraOutput_13 < 0 ? 0
								: countEach_tAmazonAuroraOutput_13);
					}

					insertedCount_tAmazonAuroraOutput_13 += countSum_tAmazonAuroraOutput_13;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_13 = 0;

				if (pstmt_tAmazonAuroraOutput_13 != null) {

					pstmt_tAmazonAuroraOutput_13.close();

				}

				if (commitCounter_tAmazonAuroraOutput_13 > 0) {

					conn_tAmazonAuroraOutput_13.commit();

				}

				conn_tAmazonAuroraOutput_13.close();

				resourceMap.put("finish_tAmazonAuroraOutput_13", true);

				nb_line_deleted_tAmazonAuroraOutput_13 = nb_line_deleted_tAmazonAuroraOutput_13
						+ deletedCount_tAmazonAuroraOutput_13;
				nb_line_update_tAmazonAuroraOutput_13 = nb_line_update_tAmazonAuroraOutput_13
						+ updatedCount_tAmazonAuroraOutput_13;
				nb_line_inserted_tAmazonAuroraOutput_13 = nb_line_inserted_tAmazonAuroraOutput_13
						+ insertedCount_tAmazonAuroraOutput_13;
				nb_line_rejected_tAmazonAuroraOutput_13 = nb_line_rejected_tAmazonAuroraOutput_13
						+ rejectedCount_tAmazonAuroraOutput_13;

				globalMap.put("tAmazonAuroraOutput_13_NB_LINE",
						nb_line_tAmazonAuroraOutput_13);
				globalMap.put("tAmazonAuroraOutput_13_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_13);
				globalMap.put("tAmazonAuroraOutput_13_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_13);
				globalMap.put("tAmazonAuroraOutput_13_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_13);
				globalMap.put("tAmazonAuroraOutput_13_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_13);

				ok_Hash.put("tAmazonAuroraOutput_13_out", true);
				end_Hash.put("tAmazonAuroraOutput_13_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_13_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_new_account_lookup");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_new_portfolio_lookup");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row7");

			// free memory for "tMap_13"
			globalMap.remove("tHash_Lookup_row19");

			// free memory for "tMap_12"
			globalMap.remove("tHash_Lookup_row18");

			try {

				/**
				 * [tAmazonAuroraInput_17_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_17";

				currentComponent = "tAmazonAuroraInput_17_in";

				/**
				 * [tAmazonAuroraInput_17_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_17_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_17";

				currentComponent = "tAmazonAuroraInput_17_out";

				/**
				 * [tAmazonAuroraInput_17_out finally ] stop
				 */

				/**
				 * [tMap_12 finally ] start
				 */

				currentComponent = "tMap_12";

				/**
				 * [tMap_12 finally ] stop
				 */

				/**
				 * [tMap_13 finally ] start
				 */

				currentComponent = "tMap_13";

				/**
				 * [tMap_13 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_12_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_12";

				currentComponent = "tAmazonAuroraOutput_12_in";

				/**
				 * [tAmazonAuroraOutput_12_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_12_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_12";

				currentComponent = "tAmazonAuroraOutput_12_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_12") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_12") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_12"))
									.close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_12) {
							String errorMessage_tAmazonAuroraOutput_12 = "failed to close the connection in tAmazonAuroraOutput_12 :"
									+ sqlEx_tAmazonAuroraOutput_12.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_12);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_12_out finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				/**
				 * [tAmazonAuroraOutput_2_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_2") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_2) {
							String errorMessage_tAmazonAuroraOutput_2 = "failed to close the connection in tAmazonAuroraOutput_2 :"
									+ sqlEx_tAmazonAuroraOutput_2.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_2);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_2_out finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_13_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_13";

				currentComponent = "tAmazonAuroraOutput_13_in";

				/**
				 * [tAmazonAuroraOutput_13_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_13_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_13";

				currentComponent = "tAmazonAuroraOutput_13_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_13") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_13") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_13"))
									.close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_13) {
							String errorMessage_tAmazonAuroraOutput_13 = "failed to close the connection in tAmazonAuroraOutput_13 :"
									+ sqlEx_tAmazonAuroraOutput_13.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_13);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_13_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_17_in_SUBPROCESS_STATE", 1);
	}

	public static class row_tAmazonAuroraOutput_9_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_9_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountName;

		public String getAccountName() {
			return this.AccountName;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public Integer HouseholdId;

		public Integer getHouseholdId() {
			return this.HouseholdId;
		}

		public String HouseholdName;

		public String getHouseholdName() {
			return this.HouseholdName;
		}

		public String AccountType;

		public String getAccountType() {
			return this.AccountType;
		}

		public Byte Taxable;

		public Byte getTaxable() {
			return this.Taxable;
		}

		public Float AccountYTDRealizedSTGL;

		public Float getAccountYTDRealizedSTGL() {
			return this.AccountYTDRealizedSTGL;
		}

		public Float AccountYTDRealizedLTGL;

		public Float getAccountYTDRealizedLTGL() {
			return this.AccountYTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String SweepSymbol;

		public String getSweepSymbol() {
			return this.SweepSymbol;
		}

		public String Custodian;

		public String getCustodian() {
			return this.Custodian;
		}

		public String CustodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.CustodialAccountNumber;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		public Integer AdvisorExternalId;

		public Integer getAdvisorExternalId() {
			return this.AdvisorExternalId;
		}

		public String SleeveType;

		public String getSleeveType() {
			return this.SleeveType;
		}

		public Float SleeveTarget;

		public Float getSleeveTarget() {
			return this.SleeveTarget;
		}

		public Float SleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.SleeveContributionPercent;
		}

		public Float SleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.SleeveDistributionPercent;
		}

		public Float SleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.SleeveToleranceLower;
		}

		public Float SleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.SleeveToleranceUpper;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public String SystematicAmount;

		public String getSystematicAmount() {
			return this.SystematicAmount;
		}

		public java.util.Date SystematicDate;

		public java.util.Date getSystematicDate() {
			return this.SystematicDate;
		}

		public String HashedSSN;

		public String getHashedSSN() {
			return this.HashedSSN;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					this.AccountName = readString(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.HouseholdId = readInteger(dis);

					this.HouseholdName = readString(dis);

					this.AccountType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taxable = null;
					} else {
						this.Taxable = dis.readByte();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedSTGL = null;
					} else {
						this.AccountYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedLTGL = null;
					} else {
						this.AccountYTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.SweepSymbol = readString(dis);

					this.Custodian = readString(dis);

					this.CustodialAccountNumber = readString(dis);

					this.AdvisorName = readString(dis);

					this.AdvisorExternalId = readInteger(dis);

					this.SleeveType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SleeveTarget = null;
					} else {
						this.SleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveContributionPercent = null;
					} else {
						this.SleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveDistributionPercent = null;
					} else {
						this.SleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceLower = null;
					} else {
						this.SleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceUpper = null;
					} else {
						this.SleeveToleranceUpper = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					this.SystematicAmount = readString(dis);

					this.SystematicDate = readDate(dis);

					this.HashedSSN = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountName, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// Integer

				writeInteger(this.HouseholdId, dos);

				// String

				writeString(this.HouseholdName, dos);

				// String

				writeString(this.AccountType, dos);

				// Byte

				if (this.Taxable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeByte(this.Taxable);
				}

				// Float

				if (this.AccountYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedSTGL);
				}

				// Float

				if (this.AccountYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.SweepSymbol, dos);

				// String

				writeString(this.Custodian, dos);

				// String

				writeString(this.CustodialAccountNumber, dos);

				// String

				writeString(this.AdvisorName, dos);

				// Integer

				writeInteger(this.AdvisorExternalId, dos);

				// String

				writeString(this.SleeveType, dos);

				// Float

				if (this.SleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveTarget);
				}

				// Float

				if (this.SleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveContributionPercent);
				}

				// Float

				if (this.SleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveDistributionPercent);
				}

				// Float

				if (this.SleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceLower);
				}

				// Float

				if (this.SleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceUpper);
				}

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// String

				writeString(this.SystematicAmount, dos);

				// java.util.Date

				writeDate(this.SystematicDate, dos);

				// String

				writeString(this.HashedSSN, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountName=" + AccountName);
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",HouseholdId=" + String.valueOf(HouseholdId));
			sb.append(",HouseholdName=" + HouseholdName);
			sb.append(",AccountType=" + AccountType);
			sb.append(",Taxable=" + String.valueOf(Taxable));
			sb.append(",AccountYTDRealizedSTGL="
					+ String.valueOf(AccountYTDRealizedSTGL));
			sb.append(",AccountYTDRealizedLTGL="
					+ String.valueOf(AccountYTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",SweepSymbol=" + SweepSymbol);
			sb.append(",Custodian=" + Custodian);
			sb.append(",CustodialAccountNumber=" + CustodialAccountNumber);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append(",AdvisorExternalId=" + String.valueOf(AdvisorExternalId));
			sb.append(",SleeveType=" + SleeveType);
			sb.append(",SleeveTarget=" + String.valueOf(SleeveTarget));
			sb.append(",SleeveContributionPercent="
					+ String.valueOf(SleeveContributionPercent));
			sb.append(",SleeveDistributionPercent="
					+ String.valueOf(SleeveDistributionPercent));
			sb.append(",SleeveToleranceLower="
					+ String.valueOf(SleeveToleranceLower));
			sb.append(",SleeveToleranceUpper="
					+ String.valueOf(SleeveToleranceUpper));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",SystematicAmount=" + SystematicAmount);
			sb.append(",SystematicDate=" + String.valueOf(SystematicDate));
			sb.append(",HashedSSN=" + HashedSSN);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_9_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraOutput_4_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_4_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public Integer orionConnectExternalId;

		public Integer getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public Integer orionConnectFirmID;

		public Integer getOrionConnectFirmID() {
			return this.orionConnectFirmID;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer portfolioId;

		public Integer getPortfolioId() {
			return this.portfolioId;
		}

		public Integer householdId;

		public Integer getHouseholdId() {
			return this.householdId;
		}

		public Float YTDRealizedSTGL;

		public Float getYTDRealizedSTGL() {
			return this.YTDRealizedSTGL;
		}

		public Float YTDRealizedLTGL;

		public Float getYTDRealizedLTGL() {
			return this.YTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String sweepSymbol;

		public String getSweepSymbol() {
			return this.sweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public String custodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.custodialAccountNumber;
		}

		public String sleeveType;

		public String getSleeveType() {
			return this.sleeveType;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public String householdName;

		public String getHouseholdName() {
			return this.householdName;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public Integer sweepSecurityId;

		public Integer getSweepSecurityId() {
			return this.sweepSecurityId;
		}

		public String systematicAmount;

		public String getSystematicAmount() {
			return this.systematicAmount;
		}

		public java.util.Date systematicDate;

		public java.util.Date getSystematicDate() {
			return this.systematicDate;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public Float sleeveTarget;

		public Float getSleeveTarget() {
			return this.sleeveTarget;
		}

		public Float sleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.sleeveContributionPercent;
		}

		public Float sleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.sleeveDistributionPercent;
		}

		public Float sleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.sleeveToleranceLower;
		}

		public Float sleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.sleeveToleranceUpper;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public Boolean isDisabled;

		public Boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public String hashedSsn;

		public String getHashedSsn() {
			return this.hashedSsn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectExternalId == null) ? 0
								: this.orionConnectExternalId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_tAmazonAuroraOutput_4_inStruct other = (row_tAmazonAuroraOutput_4_inStruct) obj;

			if (this.orionConnectExternalId == null) {
				if (other.orionConnectExternalId != null)
					return false;

			} else if (!this.orionConnectExternalId
					.equals(other.orionConnectExternalId))

				return false;

			return true;
		}

		public void copyDataTo(row_tAmazonAuroraOutput_4_inStruct other) {

			other.id = this.id;
			other.orionConnectExternalId = this.orionConnectExternalId;
			other.orionConnectFirmID = this.orionConnectFirmID;
			other.orionEclipseFirmId = this.orionEclipseFirmId;
			other.accountId = this.accountId;
			other.accountNumber = this.accountNumber;
			other.name = this.name;
			other.portfolioId = this.portfolioId;
			other.householdId = this.householdId;
			other.YTDRealizedSTGL = this.YTDRealizedSTGL;
			other.YTDRealizedLTGL = this.YTDRealizedLTGL;
			other.SSN = this.SSN;
			other.sweepSymbol = this.sweepSymbol;
			other.custodianId = this.custodianId;
			other.custodialAccountNumber = this.custodialAccountNumber;
			other.sleeveType = this.sleeveType;
			other.createdDate = this.createdDate;
			other.householdName = this.householdName;
			other.accountTypeId = this.accountTypeId;
			other.createdBy = this.createdBy;
			other.editedDate = this.editedDate;
			other.editedBy = this.editedBy;
			other.isDeleted = this.isDeleted;
			other.advisorId = this.advisorId;
			other.sweepSecurityId = this.sweepSecurityId;
			other.systematicAmount = this.systematicAmount;
			other.systematicDate = this.systematicDate;
			other.SMA = this.SMA;
			other.SMATradeable = this.SMATradeable;
			other.BillingAccount = this.BillingAccount;
			other.sleeveTarget = this.sleeveTarget;
			other.sleeveContributionPercent = this.sleeveContributionPercent;
			other.sleeveDistributionPercent = this.sleeveDistributionPercent;
			other.sleeveToleranceLower = this.sleeveToleranceLower;
			other.sleeveToleranceUpper = this.sleeveToleranceUpper;
			other.modelId = this.modelId;
			other.isDisabled = this.isDisabled;
			other.disabledReason = this.disabledReason;
			other.hashedSsn = this.hashedSsn;

		}

		public void copyKeysDataTo(row_tAmazonAuroraOutput_4_inStruct other) {

			other.orionConnectExternalId = this.orionConnectExternalId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.orionConnectExternalId = readInteger(dis);

					this.orionConnectFirmID = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

					this.accountId = readString(dis);

					this.accountNumber = readString(dis);

					this.name = readString(dis);

					this.portfolioId = readInteger(dis);

					this.householdId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedSTGL = null;
					} else {
						this.YTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedLTGL = null;
					} else {
						this.YTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.sweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.custodialAccountNumber = readString(dis);

					this.sleeveType = readString(dis);

					this.createdDate = readDate(dis);

					this.householdName = readString(dis);

					this.accountTypeId = readInteger(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.advisorId = readInteger(dis);

					this.sweepSecurityId = readInteger(dis);

					this.systematicAmount = readString(dis);

					this.systematicDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sleeveTarget = null;
					} else {
						this.sleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveContributionPercent = null;
					} else {
						this.sleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveDistributionPercent = null;
					} else {
						this.sleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceLower = null;
					} else {
						this.sleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceUpper = null;
					} else {
						this.sleeveToleranceUpper = dis.readFloat();
					}

					this.modelId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDisabled = null;
					} else {
						this.isDisabled = dis.readBoolean();
					}

					this.disabledReason = readString(dis);

					this.hashedSsn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// Integer

				writeInteger(this.orionConnectExternalId, dos);

				// Integer

				writeInteger(this.orionConnectFirmID, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.portfolioId, dos);

				// Integer

				writeInteger(this.householdId, dos);

				// Float

				if (this.YTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedSTGL);
				}

				// Float

				if (this.YTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.sweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// String

				writeString(this.custodialAccountNumber, dos);

				// String

				writeString(this.sleeveType, dos);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// String

				writeString(this.householdName, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// Integer

				writeInteger(this.advisorId, dos);

				// Integer

				writeInteger(this.sweepSecurityId, dos);

				// String

				writeString(this.systematicAmount, dos);

				// java.util.Date

				writeDate(this.systematicDate, dos);

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// Float

				if (this.sleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveTarget);
				}

				// Float

				if (this.sleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveContributionPercent);
				}

				// Float

				if (this.sleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveDistributionPercent);
				}

				// Float

				if (this.sleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceLower);
				}

				// Float

				if (this.sleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceUpper);
				}

				// Integer

				writeInteger(this.modelId, dos);

				// Boolean

				if (this.isDisabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDisabled);
				}

				// String

				writeString(this.disabledReason, dos);

				// String

				writeString(this.hashedSsn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",orionConnectFirmID="
					+ String.valueOf(orionConnectFirmID));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",name=" + name);
			sb.append(",portfolioId=" + String.valueOf(portfolioId));
			sb.append(",householdId=" + String.valueOf(householdId));
			sb.append(",YTDRealizedSTGL=" + String.valueOf(YTDRealizedSTGL));
			sb.append(",YTDRealizedLTGL=" + String.valueOf(YTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",sweepSymbol=" + sweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",custodialAccountNumber=" + custodialAccountNumber);
			sb.append(",sleeveType=" + sleeveType);
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",householdName=" + householdName);
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",sweepSecurityId=" + String.valueOf(sweepSecurityId));
			sb.append(",systematicAmount=" + systematicAmount);
			sb.append(",systematicDate=" + String.valueOf(systematicDate));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",sleeveTarget=" + String.valueOf(sleeveTarget));
			sb.append(",sleeveContributionPercent="
					+ String.valueOf(sleeveContributionPercent));
			sb.append(",sleeveDistributionPercent="
					+ String.valueOf(sleeveDistributionPercent));
			sb.append(",sleeveToleranceLower="
					+ String.valueOf(sleeveToleranceLower));
			sb.append(",sleeveToleranceUpper="
					+ String.valueOf(sleeveToleranceUpper));
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",hashedSsn=" + hashedSsn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_4_inStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectExternalId,
					other.orionConnectExternalId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class update_old_accountsStruct implements
			routines.system.IPersistableRow<update_old_accountsStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public Integer orionConnectExternalId;

		public Integer getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public Integer orionConnectFirmID;

		public Integer getOrionConnectFirmID() {
			return this.orionConnectFirmID;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer portfolioId;

		public Integer getPortfolioId() {
			return this.portfolioId;
		}

		public Integer householdId;

		public Integer getHouseholdId() {
			return this.householdId;
		}

		public Float YTDRealizedSTGL;

		public Float getYTDRealizedSTGL() {
			return this.YTDRealizedSTGL;
		}

		public Float YTDRealizedLTGL;

		public Float getYTDRealizedLTGL() {
			return this.YTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String sweepSymbol;

		public String getSweepSymbol() {
			return this.sweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public String custodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.custodialAccountNumber;
		}

		public String sleeveType;

		public String getSleeveType() {
			return this.sleeveType;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public String householdName;

		public String getHouseholdName() {
			return this.householdName;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public Integer sweepSecurityId;

		public Integer getSweepSecurityId() {
			return this.sweepSecurityId;
		}

		public String systematicAmount;

		public String getSystematicAmount() {
			return this.systematicAmount;
		}

		public java.util.Date systematicDate;

		public java.util.Date getSystematicDate() {
			return this.systematicDate;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public Float sleeveTarget;

		public Float getSleeveTarget() {
			return this.sleeveTarget;
		}

		public Float sleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.sleeveContributionPercent;
		}

		public Float sleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.sleeveDistributionPercent;
		}

		public Float sleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.sleeveToleranceLower;
		}

		public Float sleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.sleeveToleranceUpper;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public Boolean isDisabled;

		public Boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public String hashedSsn;

		public String getHashedSsn() {
			return this.hashedSsn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectExternalId == null) ? 0
								: this.orionConnectExternalId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final update_old_accountsStruct other = (update_old_accountsStruct) obj;

			if (this.orionConnectExternalId == null) {
				if (other.orionConnectExternalId != null)
					return false;

			} else if (!this.orionConnectExternalId
					.equals(other.orionConnectExternalId))

				return false;

			return true;
		}

		public void copyDataTo(update_old_accountsStruct other) {

			other.id = this.id;
			other.orionConnectExternalId = this.orionConnectExternalId;
			other.orionConnectFirmID = this.orionConnectFirmID;
			other.orionEclipseFirmId = this.orionEclipseFirmId;
			other.accountId = this.accountId;
			other.accountNumber = this.accountNumber;
			other.name = this.name;
			other.portfolioId = this.portfolioId;
			other.householdId = this.householdId;
			other.YTDRealizedSTGL = this.YTDRealizedSTGL;
			other.YTDRealizedLTGL = this.YTDRealizedLTGL;
			other.SSN = this.SSN;
			other.sweepSymbol = this.sweepSymbol;
			other.custodianId = this.custodianId;
			other.custodialAccountNumber = this.custodialAccountNumber;
			other.sleeveType = this.sleeveType;
			other.createdDate = this.createdDate;
			other.householdName = this.householdName;
			other.accountTypeId = this.accountTypeId;
			other.createdBy = this.createdBy;
			other.editedDate = this.editedDate;
			other.editedBy = this.editedBy;
			other.isDeleted = this.isDeleted;
			other.advisorId = this.advisorId;
			other.sweepSecurityId = this.sweepSecurityId;
			other.systematicAmount = this.systematicAmount;
			other.systematicDate = this.systematicDate;
			other.SMA = this.SMA;
			other.SMATradeable = this.SMATradeable;
			other.BillingAccount = this.BillingAccount;
			other.sleeveTarget = this.sleeveTarget;
			other.sleeveContributionPercent = this.sleeveContributionPercent;
			other.sleeveDistributionPercent = this.sleeveDistributionPercent;
			other.sleeveToleranceLower = this.sleeveToleranceLower;
			other.sleeveToleranceUpper = this.sleeveToleranceUpper;
			other.modelId = this.modelId;
			other.isDisabled = this.isDisabled;
			other.disabledReason = this.disabledReason;
			other.hashedSsn = this.hashedSsn;

		}

		public void copyKeysDataTo(update_old_accountsStruct other) {

			other.orionConnectExternalId = this.orionConnectExternalId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.orionConnectExternalId = readInteger(dis);

					this.orionConnectFirmID = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

					this.accountId = readString(dis);

					this.accountNumber = readString(dis);

					this.name = readString(dis);

					this.portfolioId = readInteger(dis);

					this.householdId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedSTGL = null;
					} else {
						this.YTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedLTGL = null;
					} else {
						this.YTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.sweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.custodialAccountNumber = readString(dis);

					this.sleeveType = readString(dis);

					this.createdDate = readDate(dis);

					this.householdName = readString(dis);

					this.accountTypeId = readInteger(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.advisorId = readInteger(dis);

					this.sweepSecurityId = readInteger(dis);

					this.systematicAmount = readString(dis);

					this.systematicDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sleeveTarget = null;
					} else {
						this.sleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveContributionPercent = null;
					} else {
						this.sleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveDistributionPercent = null;
					} else {
						this.sleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceLower = null;
					} else {
						this.sleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceUpper = null;
					} else {
						this.sleeveToleranceUpper = dis.readFloat();
					}

					this.modelId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDisabled = null;
					} else {
						this.isDisabled = dis.readBoolean();
					}

					this.disabledReason = readString(dis);

					this.hashedSsn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// Integer

				writeInteger(this.orionConnectExternalId, dos);

				// Integer

				writeInteger(this.orionConnectFirmID, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.portfolioId, dos);

				// Integer

				writeInteger(this.householdId, dos);

				// Float

				if (this.YTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedSTGL);
				}

				// Float

				if (this.YTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.sweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// String

				writeString(this.custodialAccountNumber, dos);

				// String

				writeString(this.sleeveType, dos);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// String

				writeString(this.householdName, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// Integer

				writeInteger(this.advisorId, dos);

				// Integer

				writeInteger(this.sweepSecurityId, dos);

				// String

				writeString(this.systematicAmount, dos);

				// java.util.Date

				writeDate(this.systematicDate, dos);

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// Float

				if (this.sleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveTarget);
				}

				// Float

				if (this.sleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveContributionPercent);
				}

				// Float

				if (this.sleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveDistributionPercent);
				}

				// Float

				if (this.sleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceLower);
				}

				// Float

				if (this.sleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceUpper);
				}

				// Integer

				writeInteger(this.modelId, dos);

				// Boolean

				if (this.isDisabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDisabled);
				}

				// String

				writeString(this.disabledReason, dos);

				// String

				writeString(this.hashedSsn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",orionConnectFirmID="
					+ String.valueOf(orionConnectFirmID));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",name=" + name);
			sb.append(",portfolioId=" + String.valueOf(portfolioId));
			sb.append(",householdId=" + String.valueOf(householdId));
			sb.append(",YTDRealizedSTGL=" + String.valueOf(YTDRealizedSTGL));
			sb.append(",YTDRealizedLTGL=" + String.valueOf(YTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",sweepSymbol=" + sweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",custodialAccountNumber=" + custodialAccountNumber);
			sb.append(",sleeveType=" + sleeveType);
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",householdName=" + householdName);
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",sweepSecurityId=" + String.valueOf(sweepSecurityId));
			sb.append(",systematicAmount=" + systematicAmount);
			sb.append(",systematicDate=" + String.valueOf(systematicDate));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",sleeveTarget=" + String.valueOf(sleeveTarget));
			sb.append(",sleeveContributionPercent="
					+ String.valueOf(sleeveContributionPercent));
			sb.append(",sleeveDistributionPercent="
					+ String.valueOf(sleeveDistributionPercent));
			sb.append(",sleeveToleranceLower="
					+ String.valueOf(sleeveToleranceLower));
			sb.append(",sleeveToleranceUpper="
					+ String.valueOf(sleeveToleranceUpper));
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",hashedSsn=" + hashedSsn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(update_old_accountsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectExternalId,
					other.orionConnectExternalId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraOutput_8_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_8_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public Integer orionConnectExternalId;

		public Integer getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public Integer orionConnectFirmID;

		public Integer getOrionConnectFirmID() {
			return this.orionConnectFirmID;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer portfolioId;

		public Integer getPortfolioId() {
			return this.portfolioId;
		}

		public Integer householdId;

		public Integer getHouseholdId() {
			return this.householdId;
		}

		public Float YTDRealizedSTGL;

		public Float getYTDRealizedSTGL() {
			return this.YTDRealizedSTGL;
		}

		public Float YTDRealizedLTGL;

		public Float getYTDRealizedLTGL() {
			return this.YTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String sweepSymbol;

		public String getSweepSymbol() {
			return this.sweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public String custodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.custodialAccountNumber;
		}

		public String sleeveType;

		public String getSleeveType() {
			return this.sleeveType;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public String householdName;

		public String getHouseholdName() {
			return this.householdName;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public Integer sweepSecurityId;

		public Integer getSweepSecurityId() {
			return this.sweepSecurityId;
		}

		public String systematicAmount;

		public String getSystematicAmount() {
			return this.systematicAmount;
		}

		public java.util.Date systematicDate;

		public java.util.Date getSystematicDate() {
			return this.systematicDate;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public Float sleeveTarget;

		public Float getSleeveTarget() {
			return this.sleeveTarget;
		}

		public Float sleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.sleeveContributionPercent;
		}

		public Float sleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.sleeveDistributionPercent;
		}

		public Float sleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.sleeveToleranceLower;
		}

		public Float sleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.sleeveToleranceUpper;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public Boolean isDisabled;

		public Boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public String hashedSsn;

		public String getHashedSsn() {
			return this.hashedSsn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectExternalId == null) ? 0
								: this.orionConnectExternalId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_tAmazonAuroraOutput_8_inStruct other = (row_tAmazonAuroraOutput_8_inStruct) obj;

			if (this.orionConnectExternalId == null) {
				if (other.orionConnectExternalId != null)
					return false;

			} else if (!this.orionConnectExternalId
					.equals(other.orionConnectExternalId))

				return false;

			return true;
		}

		public void copyDataTo(row_tAmazonAuroraOutput_8_inStruct other) {

			other.id = this.id;
			other.orionConnectExternalId = this.orionConnectExternalId;
			other.orionConnectFirmID = this.orionConnectFirmID;
			other.orionEclipseFirmId = this.orionEclipseFirmId;
			other.accountId = this.accountId;
			other.accountNumber = this.accountNumber;
			other.name = this.name;
			other.portfolioId = this.portfolioId;
			other.householdId = this.householdId;
			other.YTDRealizedSTGL = this.YTDRealizedSTGL;
			other.YTDRealizedLTGL = this.YTDRealizedLTGL;
			other.SSN = this.SSN;
			other.sweepSymbol = this.sweepSymbol;
			other.custodianId = this.custodianId;
			other.custodialAccountNumber = this.custodialAccountNumber;
			other.sleeveType = this.sleeveType;
			other.createdDate = this.createdDate;
			other.householdName = this.householdName;
			other.accountTypeId = this.accountTypeId;
			other.createdBy = this.createdBy;
			other.editedDate = this.editedDate;
			other.editedBy = this.editedBy;
			other.isDeleted = this.isDeleted;
			other.advisorId = this.advisorId;
			other.sweepSecurityId = this.sweepSecurityId;
			other.systematicAmount = this.systematicAmount;
			other.systematicDate = this.systematicDate;
			other.SMA = this.SMA;
			other.SMATradeable = this.SMATradeable;
			other.BillingAccount = this.BillingAccount;
			other.sleeveTarget = this.sleeveTarget;
			other.sleeveContributionPercent = this.sleeveContributionPercent;
			other.sleeveDistributionPercent = this.sleeveDistributionPercent;
			other.sleeveToleranceLower = this.sleeveToleranceLower;
			other.sleeveToleranceUpper = this.sleeveToleranceUpper;
			other.modelId = this.modelId;
			other.isDisabled = this.isDisabled;
			other.disabledReason = this.disabledReason;
			other.hashedSsn = this.hashedSsn;

		}

		public void copyKeysDataTo(row_tAmazonAuroraOutput_8_inStruct other) {

			other.orionConnectExternalId = this.orionConnectExternalId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.orionConnectExternalId = readInteger(dis);

					this.orionConnectFirmID = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

					this.accountId = readString(dis);

					this.accountNumber = readString(dis);

					this.name = readString(dis);

					this.portfolioId = readInteger(dis);

					this.householdId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedSTGL = null;
					} else {
						this.YTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedLTGL = null;
					} else {
						this.YTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.sweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.custodialAccountNumber = readString(dis);

					this.sleeveType = readString(dis);

					this.createdDate = readDate(dis);

					this.householdName = readString(dis);

					this.accountTypeId = readInteger(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.advisorId = readInteger(dis);

					this.sweepSecurityId = readInteger(dis);

					this.systematicAmount = readString(dis);

					this.systematicDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sleeveTarget = null;
					} else {
						this.sleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveContributionPercent = null;
					} else {
						this.sleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveDistributionPercent = null;
					} else {
						this.sleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceLower = null;
					} else {
						this.sleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceUpper = null;
					} else {
						this.sleeveToleranceUpper = dis.readFloat();
					}

					this.modelId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDisabled = null;
					} else {
						this.isDisabled = dis.readBoolean();
					}

					this.disabledReason = readString(dis);

					this.hashedSsn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// Integer

				writeInteger(this.orionConnectExternalId, dos);

				// Integer

				writeInteger(this.orionConnectFirmID, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.portfolioId, dos);

				// Integer

				writeInteger(this.householdId, dos);

				// Float

				if (this.YTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedSTGL);
				}

				// Float

				if (this.YTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.sweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// String

				writeString(this.custodialAccountNumber, dos);

				// String

				writeString(this.sleeveType, dos);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// String

				writeString(this.householdName, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// Integer

				writeInteger(this.advisorId, dos);

				// Integer

				writeInteger(this.sweepSecurityId, dos);

				// String

				writeString(this.systematicAmount, dos);

				// java.util.Date

				writeDate(this.systematicDate, dos);

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// Float

				if (this.sleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveTarget);
				}

				// Float

				if (this.sleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveContributionPercent);
				}

				// Float

				if (this.sleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveDistributionPercent);
				}

				// Float

				if (this.sleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceLower);
				}

				// Float

				if (this.sleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceUpper);
				}

				// Integer

				writeInteger(this.modelId, dos);

				// Boolean

				if (this.isDisabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDisabled);
				}

				// String

				writeString(this.disabledReason, dos);

				// String

				writeString(this.hashedSsn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",orionConnectFirmID="
					+ String.valueOf(orionConnectFirmID));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",name=" + name);
			sb.append(",portfolioId=" + String.valueOf(portfolioId));
			sb.append(",householdId=" + String.valueOf(householdId));
			sb.append(",YTDRealizedSTGL=" + String.valueOf(YTDRealizedSTGL));
			sb.append(",YTDRealizedLTGL=" + String.valueOf(YTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",sweepSymbol=" + sweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",custodialAccountNumber=" + custodialAccountNumber);
			sb.append(",sleeveType=" + sleeveType);
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",householdName=" + householdName);
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",sweepSecurityId=" + String.valueOf(sweepSecurityId));
			sb.append(",systematicAmount=" + systematicAmount);
			sb.append(",systematicDate=" + String.valueOf(systematicDate));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",sleeveTarget=" + String.valueOf(sleeveTarget));
			sb.append(",sleeveContributionPercent="
					+ String.valueOf(sleeveContributionPercent));
			sb.append(",sleeveDistributionPercent="
					+ String.valueOf(sleeveDistributionPercent));
			sb.append(",sleeveToleranceLower="
					+ String.valueOf(sleeveToleranceLower));
			sb.append(",sleeveToleranceUpper="
					+ String.valueOf(sleeveToleranceUpper));
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",hashedSsn=" + hashedSsn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_8_inStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectExternalId,
					other.orionConnectExternalId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class none_portfolio_account_creationStruct
			implements
			routines.system.IPersistableRow<none_portfolio_account_creationStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public Integer orionConnectExternalId;

		public Integer getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public Integer orionConnectFirmID;

		public Integer getOrionConnectFirmID() {
			return this.orionConnectFirmID;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer portfolioId;

		public Integer getPortfolioId() {
			return this.portfolioId;
		}

		public Integer householdId;

		public Integer getHouseholdId() {
			return this.householdId;
		}

		public Float YTDRealizedSTGL;

		public Float getYTDRealizedSTGL() {
			return this.YTDRealizedSTGL;
		}

		public Float YTDRealizedLTGL;

		public Float getYTDRealizedLTGL() {
			return this.YTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String sweepSymbol;

		public String getSweepSymbol() {
			return this.sweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public String custodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.custodialAccountNumber;
		}

		public String sleeveType;

		public String getSleeveType() {
			return this.sleeveType;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public String householdName;

		public String getHouseholdName() {
			return this.householdName;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public Integer sweepSecurityId;

		public Integer getSweepSecurityId() {
			return this.sweepSecurityId;
		}

		public String systematicAmount;

		public String getSystematicAmount() {
			return this.systematicAmount;
		}

		public java.util.Date systematicDate;

		public java.util.Date getSystematicDate() {
			return this.systematicDate;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public Float sleeveTarget;

		public Float getSleeveTarget() {
			return this.sleeveTarget;
		}

		public Float sleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.sleeveContributionPercent;
		}

		public Float sleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.sleeveDistributionPercent;
		}

		public Float sleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.sleeveToleranceLower;
		}

		public Float sleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.sleeveToleranceUpper;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public Boolean isDisabled;

		public Boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public String hashedSsn;

		public String getHashedSsn() {
			return this.hashedSsn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectExternalId == null) ? 0
								: this.orionConnectExternalId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final none_portfolio_account_creationStruct other = (none_portfolio_account_creationStruct) obj;

			if (this.orionConnectExternalId == null) {
				if (other.orionConnectExternalId != null)
					return false;

			} else if (!this.orionConnectExternalId
					.equals(other.orionConnectExternalId))

				return false;

			return true;
		}

		public void copyDataTo(none_portfolio_account_creationStruct other) {

			other.id = this.id;
			other.orionConnectExternalId = this.orionConnectExternalId;
			other.orionConnectFirmID = this.orionConnectFirmID;
			other.orionEclipseFirmId = this.orionEclipseFirmId;
			other.accountId = this.accountId;
			other.accountNumber = this.accountNumber;
			other.name = this.name;
			other.portfolioId = this.portfolioId;
			other.householdId = this.householdId;
			other.YTDRealizedSTGL = this.YTDRealizedSTGL;
			other.YTDRealizedLTGL = this.YTDRealizedLTGL;
			other.SSN = this.SSN;
			other.sweepSymbol = this.sweepSymbol;
			other.custodianId = this.custodianId;
			other.custodialAccountNumber = this.custodialAccountNumber;
			other.sleeveType = this.sleeveType;
			other.createdDate = this.createdDate;
			other.householdName = this.householdName;
			other.accountTypeId = this.accountTypeId;
			other.createdBy = this.createdBy;
			other.editedDate = this.editedDate;
			other.editedBy = this.editedBy;
			other.isDeleted = this.isDeleted;
			other.advisorId = this.advisorId;
			other.sweepSecurityId = this.sweepSecurityId;
			other.systematicAmount = this.systematicAmount;
			other.systematicDate = this.systematicDate;
			other.SMA = this.SMA;
			other.SMATradeable = this.SMATradeable;
			other.BillingAccount = this.BillingAccount;
			other.sleeveTarget = this.sleeveTarget;
			other.sleeveContributionPercent = this.sleeveContributionPercent;
			other.sleeveDistributionPercent = this.sleeveDistributionPercent;
			other.sleeveToleranceLower = this.sleeveToleranceLower;
			other.sleeveToleranceUpper = this.sleeveToleranceUpper;
			other.modelId = this.modelId;
			other.isDisabled = this.isDisabled;
			other.disabledReason = this.disabledReason;
			other.hashedSsn = this.hashedSsn;

		}

		public void copyKeysDataTo(none_portfolio_account_creationStruct other) {

			other.orionConnectExternalId = this.orionConnectExternalId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.orionConnectExternalId = readInteger(dis);

					this.orionConnectFirmID = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

					this.accountId = readString(dis);

					this.accountNumber = readString(dis);

					this.name = readString(dis);

					this.portfolioId = readInteger(dis);

					this.householdId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedSTGL = null;
					} else {
						this.YTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedLTGL = null;
					} else {
						this.YTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.sweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.custodialAccountNumber = readString(dis);

					this.sleeveType = readString(dis);

					this.createdDate = readDate(dis);

					this.householdName = readString(dis);

					this.accountTypeId = readInteger(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.advisorId = readInteger(dis);

					this.sweepSecurityId = readInteger(dis);

					this.systematicAmount = readString(dis);

					this.systematicDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sleeveTarget = null;
					} else {
						this.sleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveContributionPercent = null;
					} else {
						this.sleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveDistributionPercent = null;
					} else {
						this.sleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceLower = null;
					} else {
						this.sleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceUpper = null;
					} else {
						this.sleeveToleranceUpper = dis.readFloat();
					}

					this.modelId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDisabled = null;
					} else {
						this.isDisabled = dis.readBoolean();
					}

					this.disabledReason = readString(dis);

					this.hashedSsn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// Integer

				writeInteger(this.orionConnectExternalId, dos);

				// Integer

				writeInteger(this.orionConnectFirmID, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.portfolioId, dos);

				// Integer

				writeInteger(this.householdId, dos);

				// Float

				if (this.YTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedSTGL);
				}

				// Float

				if (this.YTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.sweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// String

				writeString(this.custodialAccountNumber, dos);

				// String

				writeString(this.sleeveType, dos);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// String

				writeString(this.householdName, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// Integer

				writeInteger(this.advisorId, dos);

				// Integer

				writeInteger(this.sweepSecurityId, dos);

				// String

				writeString(this.systematicAmount, dos);

				// java.util.Date

				writeDate(this.systematicDate, dos);

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// Float

				if (this.sleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveTarget);
				}

				// Float

				if (this.sleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveContributionPercent);
				}

				// Float

				if (this.sleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveDistributionPercent);
				}

				// Float

				if (this.sleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceLower);
				}

				// Float

				if (this.sleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceUpper);
				}

				// Integer

				writeInteger(this.modelId, dos);

				// Boolean

				if (this.isDisabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDisabled);
				}

				// String

				writeString(this.disabledReason, dos);

				// String

				writeString(this.hashedSsn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",orionConnectFirmID="
					+ String.valueOf(orionConnectFirmID));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",name=" + name);
			sb.append(",portfolioId=" + String.valueOf(portfolioId));
			sb.append(",householdId=" + String.valueOf(householdId));
			sb.append(",YTDRealizedSTGL=" + String.valueOf(YTDRealizedSTGL));
			sb.append(",YTDRealizedLTGL=" + String.valueOf(YTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",sweepSymbol=" + sweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",custodialAccountNumber=" + custodialAccountNumber);
			sb.append(",sleeveType=" + sleeveType);
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",householdName=" + householdName);
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",sweepSecurityId=" + String.valueOf(sweepSecurityId));
			sb.append(",systematicAmount=" + systematicAmount);
			sb.append(",systematicDate=" + String.valueOf(systematicDate));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",sleeveTarget=" + String.valueOf(sleeveTarget));
			sb.append(",sleeveContributionPercent="
					+ String.valueOf(sleeveContributionPercent));
			sb.append(",sleeveDistributionPercent="
					+ String.valueOf(sleeveDistributionPercent));
			sb.append(",sleeveToleranceLower="
					+ String.valueOf(sleeveToleranceLower));
			sb.append(",sleeveToleranceUpper="
					+ String.valueOf(sleeveToleranceUpper));
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",hashedSsn=" + hashedSsn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(none_portfolio_account_creationStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectExternalId,
					other.orionConnectExternalId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraOutput_3_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_3_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public Integer orionConnectExternalId;

		public Integer getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public Integer orionConnectFirmID;

		public Integer getOrionConnectFirmID() {
			return this.orionConnectFirmID;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer portfolioId;

		public Integer getPortfolioId() {
			return this.portfolioId;
		}

		public Integer householdId;

		public Integer getHouseholdId() {
			return this.householdId;
		}

		public Float YTDRealizedSTGL;

		public Float getYTDRealizedSTGL() {
			return this.YTDRealizedSTGL;
		}

		public Float YTDRealizedLTGL;

		public Float getYTDRealizedLTGL() {
			return this.YTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String sweepSymbol;

		public String getSweepSymbol() {
			return this.sweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public String custodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.custodialAccountNumber;
		}

		public String sleeveType;

		public String getSleeveType() {
			return this.sleeveType;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public String householdName;

		public String getHouseholdName() {
			return this.householdName;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public Integer sweepSecurityId;

		public Integer getSweepSecurityId() {
			return this.sweepSecurityId;
		}

		public String systematicAmount;

		public String getSystematicAmount() {
			return this.systematicAmount;
		}

		public java.util.Date systematicDate;

		public java.util.Date getSystematicDate() {
			return this.systematicDate;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public Float sleeveTarget;

		public Float getSleeveTarget() {
			return this.sleeveTarget;
		}

		public Float sleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.sleeveContributionPercent;
		}

		public Float sleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.sleeveDistributionPercent;
		}

		public Float sleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.sleeveToleranceLower;
		}

		public Float sleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.sleeveToleranceUpper;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public Boolean isDisabled;

		public Boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public String hashedSsn;

		public String getHashedSsn() {
			return this.hashedSsn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectExternalId == null) ? 0
								: this.orionConnectExternalId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_tAmazonAuroraOutput_3_inStruct other = (row_tAmazonAuroraOutput_3_inStruct) obj;

			if (this.orionConnectExternalId == null) {
				if (other.orionConnectExternalId != null)
					return false;

			} else if (!this.orionConnectExternalId
					.equals(other.orionConnectExternalId))

				return false;

			return true;
		}

		public void copyDataTo(row_tAmazonAuroraOutput_3_inStruct other) {

			other.id = this.id;
			other.orionConnectExternalId = this.orionConnectExternalId;
			other.orionConnectFirmID = this.orionConnectFirmID;
			other.orionEclipseFirmId = this.orionEclipseFirmId;
			other.accountId = this.accountId;
			other.accountNumber = this.accountNumber;
			other.name = this.name;
			other.portfolioId = this.portfolioId;
			other.householdId = this.householdId;
			other.YTDRealizedSTGL = this.YTDRealizedSTGL;
			other.YTDRealizedLTGL = this.YTDRealizedLTGL;
			other.SSN = this.SSN;
			other.sweepSymbol = this.sweepSymbol;
			other.custodianId = this.custodianId;
			other.custodialAccountNumber = this.custodialAccountNumber;
			other.sleeveType = this.sleeveType;
			other.createdDate = this.createdDate;
			other.householdName = this.householdName;
			other.accountTypeId = this.accountTypeId;
			other.createdBy = this.createdBy;
			other.editedDate = this.editedDate;
			other.editedBy = this.editedBy;
			other.isDeleted = this.isDeleted;
			other.advisorId = this.advisorId;
			other.sweepSecurityId = this.sweepSecurityId;
			other.systematicAmount = this.systematicAmount;
			other.systematicDate = this.systematicDate;
			other.SMA = this.SMA;
			other.SMATradeable = this.SMATradeable;
			other.BillingAccount = this.BillingAccount;
			other.sleeveTarget = this.sleeveTarget;
			other.sleeveContributionPercent = this.sleeveContributionPercent;
			other.sleeveDistributionPercent = this.sleeveDistributionPercent;
			other.sleeveToleranceLower = this.sleeveToleranceLower;
			other.sleeveToleranceUpper = this.sleeveToleranceUpper;
			other.modelId = this.modelId;
			other.isDisabled = this.isDisabled;
			other.disabledReason = this.disabledReason;
			other.hashedSsn = this.hashedSsn;

		}

		public void copyKeysDataTo(row_tAmazonAuroraOutput_3_inStruct other) {

			other.orionConnectExternalId = this.orionConnectExternalId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.orionConnectExternalId = readInteger(dis);

					this.orionConnectFirmID = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

					this.accountId = readString(dis);

					this.accountNumber = readString(dis);

					this.name = readString(dis);

					this.portfolioId = readInteger(dis);

					this.householdId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedSTGL = null;
					} else {
						this.YTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedLTGL = null;
					} else {
						this.YTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.sweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.custodialAccountNumber = readString(dis);

					this.sleeveType = readString(dis);

					this.createdDate = readDate(dis);

					this.householdName = readString(dis);

					this.accountTypeId = readInteger(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.advisorId = readInteger(dis);

					this.sweepSecurityId = readInteger(dis);

					this.systematicAmount = readString(dis);

					this.systematicDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sleeveTarget = null;
					} else {
						this.sleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveContributionPercent = null;
					} else {
						this.sleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveDistributionPercent = null;
					} else {
						this.sleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceLower = null;
					} else {
						this.sleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceUpper = null;
					} else {
						this.sleeveToleranceUpper = dis.readFloat();
					}

					this.modelId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDisabled = null;
					} else {
						this.isDisabled = dis.readBoolean();
					}

					this.disabledReason = readString(dis);

					this.hashedSsn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// Integer

				writeInteger(this.orionConnectExternalId, dos);

				// Integer

				writeInteger(this.orionConnectFirmID, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.portfolioId, dos);

				// Integer

				writeInteger(this.householdId, dos);

				// Float

				if (this.YTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedSTGL);
				}

				// Float

				if (this.YTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.sweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// String

				writeString(this.custodialAccountNumber, dos);

				// String

				writeString(this.sleeveType, dos);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// String

				writeString(this.householdName, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// Integer

				writeInteger(this.advisorId, dos);

				// Integer

				writeInteger(this.sweepSecurityId, dos);

				// String

				writeString(this.systematicAmount, dos);

				// java.util.Date

				writeDate(this.systematicDate, dos);

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// Float

				if (this.sleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveTarget);
				}

				// Float

				if (this.sleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveContributionPercent);
				}

				// Float

				if (this.sleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveDistributionPercent);
				}

				// Float

				if (this.sleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceLower);
				}

				// Float

				if (this.sleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceUpper);
				}

				// Integer

				writeInteger(this.modelId, dos);

				// Boolean

				if (this.isDisabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDisabled);
				}

				// String

				writeString(this.disabledReason, dos);

				// String

				writeString(this.hashedSsn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",orionConnectFirmID="
					+ String.valueOf(orionConnectFirmID));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",name=" + name);
			sb.append(",portfolioId=" + String.valueOf(portfolioId));
			sb.append(",householdId=" + String.valueOf(householdId));
			sb.append(",YTDRealizedSTGL=" + String.valueOf(YTDRealizedSTGL));
			sb.append(",YTDRealizedLTGL=" + String.valueOf(YTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",sweepSymbol=" + sweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",custodialAccountNumber=" + custodialAccountNumber);
			sb.append(",sleeveType=" + sleeveType);
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",householdName=" + householdName);
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",sweepSecurityId=" + String.valueOf(sweepSecurityId));
			sb.append(",systematicAmount=" + systematicAmount);
			sb.append(",systematicDate=" + String.valueOf(systematicDate));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",sleeveTarget=" + String.valueOf(sleeveTarget));
			sb.append(",sleeveContributionPercent="
					+ String.valueOf(sleeveContributionPercent));
			sb.append(",sleeveDistributionPercent="
					+ String.valueOf(sleeveDistributionPercent));
			sb.append(",sleeveToleranceLower="
					+ String.valueOf(sleeveToleranceLower));
			sb.append(",sleeveToleranceUpper="
					+ String.valueOf(sleeveToleranceUpper));
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",hashedSsn=" + hashedSsn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_3_inStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectExternalId,
					other.orionConnectExternalId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraOutput_1_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_1_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public String tags;

		public String getTags() {
			return this.tags;
		}

		public Boolean isDisabled;

		public Boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public Boolean isSleevePortfolio;

		public Boolean getIsSleevePortfolio() {
			return this.isSleevePortfolio;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		public Boolean IsDeleted;

		public Boolean getIsDeleted() {
			return this.IsDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_tAmazonAuroraOutput_1_inStruct other = (row_tAmazonAuroraOutput_1_inStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row_tAmazonAuroraOutput_1_inStruct other) {

			other.id = this.id;
			other.name = this.name;
			other.modelId = this.modelId;
			other.tags = this.tags;
			other.isDisabled = this.isDisabled;
			other.disabledReason = this.disabledReason;
			other.isSleevePortfolio = this.isSleevePortfolio;
			other.sleeveContributionMethod = this.sleeveContributionMethod;
			other.sleeveStrategyName = this.sleeveStrategyName;
			other.sleeveDistributionMethod = this.sleeveDistributionMethod;
			other.registrationId = this.registrationId;
			other.IsDeleted = this.IsDeleted;
			other.createdDate = this.createdDate;
			other.createdBy = this.createdBy;
			other.editedDate = this.editedDate;
			other.editedBy = this.editedBy;

		}

		public void copyKeysDataTo(row_tAmazonAuroraOutput_1_inStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.name = readString(dis);

					this.modelId = readInteger(dis);

					this.tags = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDisabled = null;
					} else {
						this.isDisabled = dis.readBoolean();
					}

					this.disabledReason = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isSleevePortfolio = null;
					} else {
						this.isSleevePortfolio = dis.readBoolean();
					}

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IsDeleted = null;
					} else {
						this.IsDeleted = dis.readBoolean();
					}

					this.createdDate = readDate(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.modelId, dos);

				// String

				writeString(this.tags, dos);

				// Boolean

				if (this.isDisabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDisabled);
				}

				// String

				writeString(this.disabledReason, dos);

				// Boolean

				if (this.isSleevePortfolio == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isSleevePortfolio);
				}

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

				// Boolean

				if (this.IsDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IsDeleted);
				}

				// java.util.Date

				writeDate(this.createdDate, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",tags=" + tags);
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",isSleevePortfolio=" + String.valueOf(isSleevePortfolio));
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append(",IsDeleted=" + String.valueOf(IsDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_1_inStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class new_account_portfolio_creationStruct
			implements
			routines.system.IPersistableRow<new_account_portfolio_creationStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public String tags;

		public String getTags() {
			return this.tags;
		}

		public Boolean isDisabled;

		public Boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public Boolean isSleevePortfolio;

		public Boolean getIsSleevePortfolio() {
			return this.isSleevePortfolio;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		public Boolean IsDeleted;

		public Boolean getIsDeleted() {
			return this.IsDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final new_account_portfolio_creationStruct other = (new_account_portfolio_creationStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(new_account_portfolio_creationStruct other) {

			other.id = this.id;
			other.name = this.name;
			other.modelId = this.modelId;
			other.tags = this.tags;
			other.isDisabled = this.isDisabled;
			other.disabledReason = this.disabledReason;
			other.isSleevePortfolio = this.isSleevePortfolio;
			other.sleeveContributionMethod = this.sleeveContributionMethod;
			other.sleeveStrategyName = this.sleeveStrategyName;
			other.sleeveDistributionMethod = this.sleeveDistributionMethod;
			other.registrationId = this.registrationId;
			other.IsDeleted = this.IsDeleted;
			other.createdDate = this.createdDate;
			other.createdBy = this.createdBy;
			other.editedDate = this.editedDate;
			other.editedBy = this.editedBy;

		}

		public void copyKeysDataTo(new_account_portfolio_creationStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.name = readString(dis);

					this.modelId = readInteger(dis);

					this.tags = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDisabled = null;
					} else {
						this.isDisabled = dis.readBoolean();
					}

					this.disabledReason = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isSleevePortfolio = null;
					} else {
						this.isSleevePortfolio = dis.readBoolean();
					}

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IsDeleted = null;
					} else {
						this.IsDeleted = dis.readBoolean();
					}

					this.createdDate = readDate(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.modelId, dos);

				// String

				writeString(this.tags, dos);

				// Boolean

				if (this.isDisabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDisabled);
				}

				// String

				writeString(this.disabledReason, dos);

				// Boolean

				if (this.isSleevePortfolio == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isSleevePortfolio);
				}

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

				// Boolean

				if (this.IsDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IsDeleted);
				}

				// java.util.Date

				writeDate(this.createdDate, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",tags=" + tags);
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",isSleevePortfolio=" + String.valueOf(isSleevePortfolio));
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append(",IsDeleted=" + String.valueOf(IsDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(new_account_portfolio_creationStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class new_account_outputStruct implements
			routines.system.IPersistableRow<new_account_outputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public Integer orionConnectExternalId;

		public Integer getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public Integer orionConnectFirmID;

		public Integer getOrionConnectFirmID() {
			return this.orionConnectFirmID;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer portfolioId;

		public Integer getPortfolioId() {
			return this.portfolioId;
		}

		public Integer householdId;

		public Integer getHouseholdId() {
			return this.householdId;
		}

		public Float YTDRealizedSTGL;

		public Float getYTDRealizedSTGL() {
			return this.YTDRealizedSTGL;
		}

		public Float YTDRealizedLTGL;

		public Float getYTDRealizedLTGL() {
			return this.YTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String sweepSymbol;

		public String getSweepSymbol() {
			return this.sweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public String custodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.custodialAccountNumber;
		}

		public String sleeveType;

		public String getSleeveType() {
			return this.sleeveType;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public String householdName;

		public String getHouseholdName() {
			return this.householdName;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public Integer sweepSecurityId;

		public Integer getSweepSecurityId() {
			return this.sweepSecurityId;
		}

		public String systematicAmount;

		public String getSystematicAmount() {
			return this.systematicAmount;
		}

		public java.util.Date systematicDate;

		public java.util.Date getSystematicDate() {
			return this.systematicDate;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public Float sleeveTarget;

		public Float getSleeveTarget() {
			return this.sleeveTarget;
		}

		public Float sleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.sleeveContributionPercent;
		}

		public Float sleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.sleeveDistributionPercent;
		}

		public Float sleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.sleeveToleranceLower;
		}

		public Float sleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.sleeveToleranceUpper;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public Boolean isDisabled;

		public Boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public String hashedSsn;

		public String getHashedSsn() {
			return this.hashedSsn;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectExternalId == null) ? 0
								: this.orionConnectExternalId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final new_account_outputStruct other = (new_account_outputStruct) obj;

			if (this.orionConnectExternalId == null) {
				if (other.orionConnectExternalId != null)
					return false;

			} else if (!this.orionConnectExternalId
					.equals(other.orionConnectExternalId))

				return false;

			return true;
		}

		public void copyDataTo(new_account_outputStruct other) {

			other.id = this.id;
			other.orionConnectExternalId = this.orionConnectExternalId;
			other.orionConnectFirmID = this.orionConnectFirmID;
			other.orionEclipseFirmId = this.orionEclipseFirmId;
			other.accountId = this.accountId;
			other.accountNumber = this.accountNumber;
			other.name = this.name;
			other.portfolioId = this.portfolioId;
			other.householdId = this.householdId;
			other.YTDRealizedSTGL = this.YTDRealizedSTGL;
			other.YTDRealizedLTGL = this.YTDRealizedLTGL;
			other.SSN = this.SSN;
			other.sweepSymbol = this.sweepSymbol;
			other.custodianId = this.custodianId;
			other.custodialAccountNumber = this.custodialAccountNumber;
			other.sleeveType = this.sleeveType;
			other.createdDate = this.createdDate;
			other.householdName = this.householdName;
			other.accountTypeId = this.accountTypeId;
			other.createdBy = this.createdBy;
			other.editedDate = this.editedDate;
			other.editedBy = this.editedBy;
			other.isDeleted = this.isDeleted;
			other.advisorId = this.advisorId;
			other.sweepSecurityId = this.sweepSecurityId;
			other.systematicAmount = this.systematicAmount;
			other.systematicDate = this.systematicDate;
			other.SMA = this.SMA;
			other.SMATradeable = this.SMATradeable;
			other.BillingAccount = this.BillingAccount;
			other.sleeveTarget = this.sleeveTarget;
			other.sleeveContributionPercent = this.sleeveContributionPercent;
			other.sleeveDistributionPercent = this.sleeveDistributionPercent;
			other.sleeveToleranceLower = this.sleeveToleranceLower;
			other.sleeveToleranceUpper = this.sleeveToleranceUpper;
			other.modelId = this.modelId;
			other.isDisabled = this.isDisabled;
			other.disabledReason = this.disabledReason;
			other.hashedSsn = this.hashedSsn;

		}

		public void copyKeysDataTo(new_account_outputStruct other) {

			other.orionConnectExternalId = this.orionConnectExternalId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.orionConnectExternalId = readInteger(dis);

					this.orionConnectFirmID = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

					this.accountId = readString(dis);

					this.accountNumber = readString(dis);

					this.name = readString(dis);

					this.portfolioId = readInteger(dis);

					this.householdId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedSTGL = null;
					} else {
						this.YTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedLTGL = null;
					} else {
						this.YTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.sweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.custodialAccountNumber = readString(dis);

					this.sleeveType = readString(dis);

					this.createdDate = readDate(dis);

					this.householdName = readString(dis);

					this.accountTypeId = readInteger(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.advisorId = readInteger(dis);

					this.sweepSecurityId = readInteger(dis);

					this.systematicAmount = readString(dis);

					this.systematicDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sleeveTarget = null;
					} else {
						this.sleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveContributionPercent = null;
					} else {
						this.sleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveDistributionPercent = null;
					} else {
						this.sleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceLower = null;
					} else {
						this.sleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceUpper = null;
					} else {
						this.sleeveToleranceUpper = dis.readFloat();
					}

					this.modelId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDisabled = null;
					} else {
						this.isDisabled = dis.readBoolean();
					}

					this.disabledReason = readString(dis);

					this.hashedSsn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// Integer

				writeInteger(this.orionConnectExternalId, dos);

				// Integer

				writeInteger(this.orionConnectFirmID, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.portfolioId, dos);

				// Integer

				writeInteger(this.householdId, dos);

				// Float

				if (this.YTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedSTGL);
				}

				// Float

				if (this.YTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.sweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// String

				writeString(this.custodialAccountNumber, dos);

				// String

				writeString(this.sleeveType, dos);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// String

				writeString(this.householdName, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// Integer

				writeInteger(this.advisorId, dos);

				// Integer

				writeInteger(this.sweepSecurityId, dos);

				// String

				writeString(this.systematicAmount, dos);

				// java.util.Date

				writeDate(this.systematicDate, dos);

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// Float

				if (this.sleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveTarget);
				}

				// Float

				if (this.sleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveContributionPercent);
				}

				// Float

				if (this.sleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveDistributionPercent);
				}

				// Float

				if (this.sleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceLower);
				}

				// Float

				if (this.sleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceUpper);
				}

				// Integer

				writeInteger(this.modelId, dos);

				// Boolean

				if (this.isDisabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDisabled);
				}

				// String

				writeString(this.disabledReason, dos);

				// String

				writeString(this.hashedSsn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",orionConnectFirmID="
					+ String.valueOf(orionConnectFirmID));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",name=" + name);
			sb.append(",portfolioId=" + String.valueOf(portfolioId));
			sb.append(",householdId=" + String.valueOf(householdId));
			sb.append(",YTDRealizedSTGL=" + String.valueOf(YTDRealizedSTGL));
			sb.append(",YTDRealizedLTGL=" + String.valueOf(YTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",sweepSymbol=" + sweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",custodialAccountNumber=" + custodialAccountNumber);
			sb.append(",sleeveType=" + sleeveType);
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",householdName=" + householdName);
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",sweepSecurityId=" + String.valueOf(sweepSecurityId));
			sb.append(",systematicAmount=" + systematicAmount);
			sb.append(",systematicDate=" + String.valueOf(systematicDate));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",sleeveTarget=" + String.valueOf(sleeveTarget));
			sb.append(",sleeveContributionPercent="
					+ String.valueOf(sleeveContributionPercent));
			sb.append(",sleeveDistributionPercent="
					+ String.valueOf(sleeveDistributionPercent));
			sb.append(",sleeveToleranceLower="
					+ String.valueOf(sleeveToleranceLower));
			sb.append(",sleeveToleranceUpper="
					+ String.valueOf(sleeveToleranceUpper));
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",hashedSsn=" + hashedSsn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(new_account_outputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectExternalId,
					other.orionConnectExternalId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraOutput_11_inStruct
			implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_11_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountName;

		public String getAccountName() {
			return this.AccountName;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public Integer HouseholdId;

		public Integer getHouseholdId() {
			return this.HouseholdId;
		}

		public String HouseholdName;

		public String getHouseholdName() {
			return this.HouseholdName;
		}

		public String AccountType;

		public String getAccountType() {
			return this.AccountType;
		}

		public Byte Taxable;

		public Byte getTaxable() {
			return this.Taxable;
		}

		public Float AccountYTDRealizedSTGL;

		public Float getAccountYTDRealizedSTGL() {
			return this.AccountYTDRealizedSTGL;
		}

		public Float AccountYTDRealizedLTGL;

		public Float getAccountYTDRealizedLTGL() {
			return this.AccountYTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String SweepSymbol;

		public String getSweepSymbol() {
			return this.SweepSymbol;
		}

		public String Custodian;

		public String getCustodian() {
			return this.Custodian;
		}

		public String CustodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.CustodialAccountNumber;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		public Integer AdvisorExternalId;

		public Integer getAdvisorExternalId() {
			return this.AdvisorExternalId;
		}

		public String SleeveType;

		public String getSleeveType() {
			return this.SleeveType;
		}

		public Float SleeveTarget;

		public Float getSleeveTarget() {
			return this.SleeveTarget;
		}

		public Float SleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.SleeveContributionPercent;
		}

		public Float SleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.SleeveDistributionPercent;
		}

		public Float SleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.SleeveToleranceLower;
		}

		public Float SleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.SleeveToleranceUpper;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public String SystematicAmount;

		public String getSystematicAmount() {
			return this.SystematicAmount;
		}

		public java.util.Date SystematicDate;

		public java.util.Date getSystematicDate() {
			return this.SystematicDate;
		}

		public String hashedSsn;

		public String getHashedSsn() {
			return this.hashedSsn;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					this.AccountName = readString(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.HouseholdId = readInteger(dis);

					this.HouseholdName = readString(dis);

					this.AccountType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taxable = null;
					} else {
						this.Taxable = dis.readByte();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedSTGL = null;
					} else {
						this.AccountYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedLTGL = null;
					} else {
						this.AccountYTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.SweepSymbol = readString(dis);

					this.Custodian = readString(dis);

					this.CustodialAccountNumber = readString(dis);

					this.AdvisorName = readString(dis);

					this.AdvisorExternalId = readInteger(dis);

					this.SleeveType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SleeveTarget = null;
					} else {
						this.SleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveContributionPercent = null;
					} else {
						this.SleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveDistributionPercent = null;
					} else {
						this.SleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceLower = null;
					} else {
						this.SleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceUpper = null;
					} else {
						this.SleeveToleranceUpper = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					this.SystematicAmount = readString(dis);

					this.SystematicDate = readDate(dis);

					this.hashedSsn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountName, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// Integer

				writeInteger(this.HouseholdId, dos);

				// String

				writeString(this.HouseholdName, dos);

				// String

				writeString(this.AccountType, dos);

				// Byte

				if (this.Taxable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeByte(this.Taxable);
				}

				// Float

				if (this.AccountYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedSTGL);
				}

				// Float

				if (this.AccountYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.SweepSymbol, dos);

				// String

				writeString(this.Custodian, dos);

				// String

				writeString(this.CustodialAccountNumber, dos);

				// String

				writeString(this.AdvisorName, dos);

				// Integer

				writeInteger(this.AdvisorExternalId, dos);

				// String

				writeString(this.SleeveType, dos);

				// Float

				if (this.SleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveTarget);
				}

				// Float

				if (this.SleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveContributionPercent);
				}

				// Float

				if (this.SleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveDistributionPercent);
				}

				// Float

				if (this.SleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceLower);
				}

				// Float

				if (this.SleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceUpper);
				}

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// String

				writeString(this.SystematicAmount, dos);

				// java.util.Date

				writeDate(this.SystematicDate, dos);

				// String

				writeString(this.hashedSsn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountName=" + AccountName);
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",HouseholdId=" + String.valueOf(HouseholdId));
			sb.append(",HouseholdName=" + HouseholdName);
			sb.append(",AccountType=" + AccountType);
			sb.append(",Taxable=" + String.valueOf(Taxable));
			sb.append(",AccountYTDRealizedSTGL="
					+ String.valueOf(AccountYTDRealizedSTGL));
			sb.append(",AccountYTDRealizedLTGL="
					+ String.valueOf(AccountYTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",SweepSymbol=" + SweepSymbol);
			sb.append(",Custodian=" + Custodian);
			sb.append(",CustodialAccountNumber=" + CustodialAccountNumber);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append(",AdvisorExternalId=" + String.valueOf(AdvisorExternalId));
			sb.append(",SleeveType=" + SleeveType);
			sb.append(",SleeveTarget=" + String.valueOf(SleeveTarget));
			sb.append(",SleeveContributionPercent="
					+ String.valueOf(SleeveContributionPercent));
			sb.append(",SleeveDistributionPercent="
					+ String.valueOf(SleeveDistributionPercent));
			sb.append(",SleeveToleranceLower="
					+ String.valueOf(SleeveToleranceLower));
			sb.append(",SleeveToleranceUpper="
					+ String.valueOf(SleeveToleranceUpper));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",SystematicAmount=" + SystematicAmount);
			sb.append(",SystematicDate=" + String.valueOf(SystematicDate));
			sb.append(",hashedSsn=" + hashedSsn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_11_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraOutput_5_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_5_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public Integer orionConnectExternalId;

		public Integer getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public Integer orionConnectFirmID;

		public Integer getOrionConnectFirmID() {
			return this.orionConnectFirmID;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer portfolioId;

		public Integer getPortfolioId() {
			return this.portfolioId;
		}

		public Integer householdId;

		public Integer getHouseholdId() {
			return this.householdId;
		}

		public Float YTDRealizedSTGL;

		public Float getYTDRealizedSTGL() {
			return this.YTDRealizedSTGL;
		}

		public Float YTDRealizedLTGL;

		public Float getYTDRealizedLTGL() {
			return this.YTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String sweepSymbol;

		public String getSweepSymbol() {
			return this.sweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public String custodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.custodialAccountNumber;
		}

		public String sleeveType;

		public String getSleeveType() {
			return this.sleeveType;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public String householdName;

		public String getHouseholdName() {
			return this.householdName;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public Integer sweepSecurityId;

		public Integer getSweepSecurityId() {
			return this.sweepSecurityId;
		}

		public String systematicAmount;

		public String getSystematicAmount() {
			return this.systematicAmount;
		}

		public java.util.Date systematicDate;

		public java.util.Date getSystematicDate() {
			return this.systematicDate;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public Float sleeveTarget;

		public Float getSleeveTarget() {
			return this.sleeveTarget;
		}

		public Float sleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.sleeveContributionPercent;
		}

		public Float sleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.sleeveDistributionPercent;
		}

		public Float sleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.sleeveToleranceLower;
		}

		public Float sleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.sleeveToleranceUpper;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public Boolean isDisabled;

		public Boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public String hashedSsn;

		public String getHashedSsn() {
			return this.hashedSsn;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.orionConnectExternalId = readInteger(dis);

					this.orionConnectFirmID = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

					this.accountId = readString(dis);

					this.accountNumber = readString(dis);

					this.name = readString(dis);

					this.portfolioId = readInteger(dis);

					this.householdId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedSTGL = null;
					} else {
						this.YTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedLTGL = null;
					} else {
						this.YTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.sweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.custodialAccountNumber = readString(dis);

					this.sleeveType = readString(dis);

					this.createdDate = readDate(dis);

					this.householdName = readString(dis);

					this.accountTypeId = readInteger(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.advisorId = readInteger(dis);

					this.sweepSecurityId = readInteger(dis);

					this.systematicAmount = readString(dis);

					this.systematicDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sleeveTarget = null;
					} else {
						this.sleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveContributionPercent = null;
					} else {
						this.sleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveDistributionPercent = null;
					} else {
						this.sleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceLower = null;
					} else {
						this.sleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceUpper = null;
					} else {
						this.sleeveToleranceUpper = dis.readFloat();
					}

					this.modelId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDisabled = null;
					} else {
						this.isDisabled = dis.readBoolean();
					}

					this.disabledReason = readString(dis);

					this.hashedSsn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// Integer

				writeInteger(this.orionConnectExternalId, dos);

				// Integer

				writeInteger(this.orionConnectFirmID, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.portfolioId, dos);

				// Integer

				writeInteger(this.householdId, dos);

				// Float

				if (this.YTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedSTGL);
				}

				// Float

				if (this.YTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.sweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// String

				writeString(this.custodialAccountNumber, dos);

				// String

				writeString(this.sleeveType, dos);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// String

				writeString(this.householdName, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// Integer

				writeInteger(this.advisorId, dos);

				// Integer

				writeInteger(this.sweepSecurityId, dos);

				// String

				writeString(this.systematicAmount, dos);

				// java.util.Date

				writeDate(this.systematicDate, dos);

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// Float

				if (this.sleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveTarget);
				}

				// Float

				if (this.sleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveContributionPercent);
				}

				// Float

				if (this.sleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveDistributionPercent);
				}

				// Float

				if (this.sleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceLower);
				}

				// Float

				if (this.sleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceUpper);
				}

				// Integer

				writeInteger(this.modelId, dos);

				// Boolean

				if (this.isDisabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDisabled);
				}

				// String

				writeString(this.disabledReason, dos);

				// String

				writeString(this.hashedSsn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",orionConnectFirmID="
					+ String.valueOf(orionConnectFirmID));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",name=" + name);
			sb.append(",portfolioId=" + String.valueOf(portfolioId));
			sb.append(",householdId=" + String.valueOf(householdId));
			sb.append(",YTDRealizedSTGL=" + String.valueOf(YTDRealizedSTGL));
			sb.append(",YTDRealizedLTGL=" + String.valueOf(YTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",sweepSymbol=" + sweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",custodialAccountNumber=" + custodialAccountNumber);
			sb.append(",sleeveType=" + sleeveType);
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",householdName=" + householdName);
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",sweepSecurityId=" + String.valueOf(sweepSecurityId));
			sb.append(",systematicAmount=" + systematicAmount);
			sb.append(",systematicDate=" + String.valueOf(systematicDate));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",sleeveTarget=" + String.valueOf(sleeveTarget));
			sb.append(",sleeveContributionPercent="
					+ String.valueOf(sleeveContributionPercent));
			sb.append(",sleeveDistributionPercent="
					+ String.valueOf(sleeveDistributionPercent));
			sb.append(",sleeveToleranceLower="
					+ String.valueOf(sleeveToleranceLower));
			sb.append(",sleeveToleranceUpper="
					+ String.valueOf(sleeveToleranceUpper));
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",hashedSsn=" + hashedSsn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_5_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class new_household_accountsStruct implements
			routines.system.IPersistableRow<new_household_accountsStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public Integer orionConnectExternalId;

		public Integer getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public Integer orionConnectFirmID;

		public Integer getOrionConnectFirmID() {
			return this.orionConnectFirmID;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer portfolioId;

		public Integer getPortfolioId() {
			return this.portfolioId;
		}

		public Integer householdId;

		public Integer getHouseholdId() {
			return this.householdId;
		}

		public Float YTDRealizedSTGL;

		public Float getYTDRealizedSTGL() {
			return this.YTDRealizedSTGL;
		}

		public Float YTDRealizedLTGL;

		public Float getYTDRealizedLTGL() {
			return this.YTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String sweepSymbol;

		public String getSweepSymbol() {
			return this.sweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public String custodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.custodialAccountNumber;
		}

		public String sleeveType;

		public String getSleeveType() {
			return this.sleeveType;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public String householdName;

		public String getHouseholdName() {
			return this.householdName;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public Integer sweepSecurityId;

		public Integer getSweepSecurityId() {
			return this.sweepSecurityId;
		}

		public String systematicAmount;

		public String getSystematicAmount() {
			return this.systematicAmount;
		}

		public java.util.Date systematicDate;

		public java.util.Date getSystematicDate() {
			return this.systematicDate;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public Float sleeveTarget;

		public Float getSleeveTarget() {
			return this.sleeveTarget;
		}

		public Float sleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.sleeveContributionPercent;
		}

		public Float sleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.sleeveDistributionPercent;
		}

		public Float sleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.sleeveToleranceLower;
		}

		public Float sleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.sleeveToleranceUpper;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public Boolean isDisabled;

		public Boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public String hashedSsn;

		public String getHashedSsn() {
			return this.hashedSsn;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.orionConnectExternalId = readInteger(dis);

					this.orionConnectFirmID = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

					this.accountId = readString(dis);

					this.accountNumber = readString(dis);

					this.name = readString(dis);

					this.portfolioId = readInteger(dis);

					this.householdId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedSTGL = null;
					} else {
						this.YTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedLTGL = null;
					} else {
						this.YTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.sweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.custodialAccountNumber = readString(dis);

					this.sleeveType = readString(dis);

					this.createdDate = readDate(dis);

					this.householdName = readString(dis);

					this.accountTypeId = readInteger(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.advisorId = readInteger(dis);

					this.sweepSecurityId = readInteger(dis);

					this.systematicAmount = readString(dis);

					this.systematicDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sleeveTarget = null;
					} else {
						this.sleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveContributionPercent = null;
					} else {
						this.sleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveDistributionPercent = null;
					} else {
						this.sleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceLower = null;
					} else {
						this.sleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceUpper = null;
					} else {
						this.sleeveToleranceUpper = dis.readFloat();
					}

					this.modelId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDisabled = null;
					} else {
						this.isDisabled = dis.readBoolean();
					}

					this.disabledReason = readString(dis);

					this.hashedSsn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// Integer

				writeInteger(this.orionConnectExternalId, dos);

				// Integer

				writeInteger(this.orionConnectFirmID, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.portfolioId, dos);

				// Integer

				writeInteger(this.householdId, dos);

				// Float

				if (this.YTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedSTGL);
				}

				// Float

				if (this.YTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.sweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// String

				writeString(this.custodialAccountNumber, dos);

				// String

				writeString(this.sleeveType, dos);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// String

				writeString(this.householdName, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// Integer

				writeInteger(this.advisorId, dos);

				// Integer

				writeInteger(this.sweepSecurityId, dos);

				// String

				writeString(this.systematicAmount, dos);

				// java.util.Date

				writeDate(this.systematicDate, dos);

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// Float

				if (this.sleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveTarget);
				}

				// Float

				if (this.sleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveContributionPercent);
				}

				// Float

				if (this.sleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveDistributionPercent);
				}

				// Float

				if (this.sleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceLower);
				}

				// Float

				if (this.sleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceUpper);
				}

				// Integer

				writeInteger(this.modelId, dos);

				// Boolean

				if (this.isDisabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDisabled);
				}

				// String

				writeString(this.disabledReason, dos);

				// String

				writeString(this.hashedSsn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",orionConnectFirmID="
					+ String.valueOf(orionConnectFirmID));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",name=" + name);
			sb.append(",portfolioId=" + String.valueOf(portfolioId));
			sb.append(",householdId=" + String.valueOf(householdId));
			sb.append(",YTDRealizedSTGL=" + String.valueOf(YTDRealizedSTGL));
			sb.append(",YTDRealizedLTGL=" + String.valueOf(YTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",sweepSymbol=" + sweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",custodialAccountNumber=" + custodialAccountNumber);
			sb.append(",sleeveType=" + sleeveType);
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",householdName=" + householdName);
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",sweepSecurityId=" + String.valueOf(sweepSecurityId));
			sb.append(",systematicAmount=" + systematicAmount);
			sb.append(",systematicDate=" + String.valueOf(systematicDate));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",sleeveTarget=" + String.valueOf(sleeveTarget));
			sb.append(",sleeveContributionPercent="
					+ String.valueOf(sleeveContributionPercent));
			sb.append(",sleeveDistributionPercent="
					+ String.valueOf(sleeveDistributionPercent));
			sb.append(",sleeveToleranceLower="
					+ String.valueOf(sleeveToleranceLower));
			sb.append(",sleeveToleranceUpper="
					+ String.valueOf(sleeveToleranceUpper));
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",hashedSsn=" + hashedSsn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(new_household_accountsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class NoDataFound_joinReject2Struct implements
			routines.system.IPersistableRow<NoDataFound_joinReject2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountName;

		public String getAccountName() {
			return this.AccountName;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public Integer HouseholdId;

		public Integer getHouseholdId() {
			return this.HouseholdId;
		}

		public String HouseholdName;

		public String getHouseholdName() {
			return this.HouseholdName;
		}

		public String AccountType;

		public String getAccountType() {
			return this.AccountType;
		}

		public Byte Taxable;

		public Byte getTaxable() {
			return this.Taxable;
		}

		public Float AccountYTDRealizedSTGL;

		public Float getAccountYTDRealizedSTGL() {
			return this.AccountYTDRealizedSTGL;
		}

		public Float AccountYTDRealizedLTGL;

		public Float getAccountYTDRealizedLTGL() {
			return this.AccountYTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String SweepSymbol;

		public String getSweepSymbol() {
			return this.SweepSymbol;
		}

		public String Custodian;

		public String getCustodian() {
			return this.Custodian;
		}

		public String CustodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.CustodialAccountNumber;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		public Integer AdvisorExternalId;

		public Integer getAdvisorExternalId() {
			return this.AdvisorExternalId;
		}

		public String SleeveType;

		public String getSleeveType() {
			return this.SleeveType;
		}

		public Float SleeveTarget;

		public Float getSleeveTarget() {
			return this.SleeveTarget;
		}

		public Float SleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.SleeveContributionPercent;
		}

		public Float SleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.SleeveDistributionPercent;
		}

		public Float SleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.SleeveToleranceLower;
		}

		public Float SleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.SleeveToleranceUpper;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public String SystematicAmount;

		public String getSystematicAmount() {
			return this.SystematicAmount;
		}

		public java.util.Date SystematicDate;

		public java.util.Date getSystematicDate() {
			return this.SystematicDate;
		}

		public String hashedSsn;

		public String getHashedSsn() {
			return this.hashedSsn;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					this.AccountName = readString(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.HouseholdId = readInteger(dis);

					this.HouseholdName = readString(dis);

					this.AccountType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taxable = null;
					} else {
						this.Taxable = dis.readByte();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedSTGL = null;
					} else {
						this.AccountYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedLTGL = null;
					} else {
						this.AccountYTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.SweepSymbol = readString(dis);

					this.Custodian = readString(dis);

					this.CustodialAccountNumber = readString(dis);

					this.AdvisorName = readString(dis);

					this.AdvisorExternalId = readInteger(dis);

					this.SleeveType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SleeveTarget = null;
					} else {
						this.SleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveContributionPercent = null;
					} else {
						this.SleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveDistributionPercent = null;
					} else {
						this.SleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceLower = null;
					} else {
						this.SleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceUpper = null;
					} else {
						this.SleeveToleranceUpper = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					this.SystematicAmount = readString(dis);

					this.SystematicDate = readDate(dis);

					this.hashedSsn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountName, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// Integer

				writeInteger(this.HouseholdId, dos);

				// String

				writeString(this.HouseholdName, dos);

				// String

				writeString(this.AccountType, dos);

				// Byte

				if (this.Taxable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeByte(this.Taxable);
				}

				// Float

				if (this.AccountYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedSTGL);
				}

				// Float

				if (this.AccountYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.SweepSymbol, dos);

				// String

				writeString(this.Custodian, dos);

				// String

				writeString(this.CustodialAccountNumber, dos);

				// String

				writeString(this.AdvisorName, dos);

				// Integer

				writeInteger(this.AdvisorExternalId, dos);

				// String

				writeString(this.SleeveType, dos);

				// Float

				if (this.SleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveTarget);
				}

				// Float

				if (this.SleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveContributionPercent);
				}

				// Float

				if (this.SleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveDistributionPercent);
				}

				// Float

				if (this.SleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceLower);
				}

				// Float

				if (this.SleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceUpper);
				}

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// String

				writeString(this.SystematicAmount, dos);

				// java.util.Date

				writeDate(this.SystematicDate, dos);

				// String

				writeString(this.hashedSsn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountName=" + AccountName);
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",HouseholdId=" + String.valueOf(HouseholdId));
			sb.append(",HouseholdName=" + HouseholdName);
			sb.append(",AccountType=" + AccountType);
			sb.append(",Taxable=" + String.valueOf(Taxable));
			sb.append(",AccountYTDRealizedSTGL="
					+ String.valueOf(AccountYTDRealizedSTGL));
			sb.append(",AccountYTDRealizedLTGL="
					+ String.valueOf(AccountYTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",SweepSymbol=" + SweepSymbol);
			sb.append(",Custodian=" + Custodian);
			sb.append(",CustodialAccountNumber=" + CustodialAccountNumber);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append(",AdvisorExternalId=" + String.valueOf(AdvisorExternalId));
			sb.append(",SleeveType=" + SleeveType);
			sb.append(",SleeveTarget=" + String.valueOf(SleeveTarget));
			sb.append(",SleeveContributionPercent="
					+ String.valueOf(SleeveContributionPercent));
			sb.append(",SleeveDistributionPercent="
					+ String.valueOf(SleeveDistributionPercent));
			sb.append(",SleeveToleranceLower="
					+ String.valueOf(SleeveToleranceLower));
			sb.append(",SleeveToleranceUpper="
					+ String.valueOf(SleeveToleranceUpper));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",SystematicAmount=" + SystematicAmount);
			sb.append(",SystematicDate=" + String.valueOf(SystematicDate));
			sb.append(",hashedSsn=" + hashedSsn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(NoDataFound_joinReject2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class household_portfolio_idStruct implements
			routines.system.IPersistableRow<household_portfolio_idStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public int orionConnectExternalId;

		public int getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public Integer orionConnectFirmID;

		public Integer getOrionConnectFirmID() {
			return this.orionConnectFirmID;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String portfolioId;

		public String getPortfolioId() {
			return this.portfolioId;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Float YTDRealizedSTGL;

		public Float getYTDRealizedSTGL() {
			return this.YTDRealizedSTGL;
		}

		public Float YTDRealizedLTGL;

		public Float getYTDRealizedLTGL() {
			return this.YTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String sweepSymbol;

		public String getSweepSymbol() {
			return this.sweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public String custodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.custodialAccountNumber;
		}

		public String sleeveType;

		public String getSleeveType() {
			return this.sleeveType;
		}

		public String householdName;

		public String getHouseholdName() {
			return this.householdName;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public Integer sweepSecurityId;

		public Integer getSweepSecurityId() {
			return this.sweepSecurityId;
		}

		public String systematicAmount;

		public String getSystematicAmount() {
			return this.systematicAmount;
		}

		public java.util.Date systematicDate;

		public java.util.Date getSystematicDate() {
			return this.systematicDate;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public Float sleeveTarget;

		public Float getSleeveTarget() {
			return this.sleeveTarget;
		}

		public Float sleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.sleeveContributionPercent;
		}

		public Float sleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.sleeveDistributionPercent;
		}

		public Float sleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.sleeveToleranceLower;
		}

		public Float sleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.sleeveToleranceUpper;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public Boolean isDisabled;

		public Boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public String inputPortfolioName;

		public String getInputPortfolioName() {
			return this.inputPortfolioName;
		}

		public String HashedSSN;

		public String getHashedSSN() {
			return this.HashedSSN;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectExternalId = dis.readInt();

					this.orionConnectFirmID = readInteger(dis);

					this.accountId = readString(dis);

					this.accountNumber = readString(dis);

					this.name = readString(dis);

					this.portfolioId = readString(dis);

					this.accountTypeId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedSTGL = null;
					} else {
						this.YTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedLTGL = null;
					} else {
						this.YTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.sweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.custodialAccountNumber = readString(dis);

					this.sleeveType = readString(dis);

					this.householdName = readString(dis);

					this.createdDate = readDate(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.advisorId = readInteger(dis);

					this.sweepSecurityId = readInteger(dis);

					this.systematicAmount = readString(dis);

					this.systematicDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sleeveTarget = null;
					} else {
						this.sleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveContributionPercent = null;
					} else {
						this.sleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveDistributionPercent = null;
					} else {
						this.sleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceLower = null;
					} else {
						this.sleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceUpper = null;
					} else {
						this.sleeveToleranceUpper = dis.readFloat();
					}

					this.modelId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDisabled = null;
					} else {
						this.isDisabled = dis.readBoolean();
					}

					this.disabledReason = readString(dis);

					this.inputPortfolioName = readString(dis);

					this.HashedSSN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.orionConnectExternalId);

				// Integer

				writeInteger(this.orionConnectFirmID, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.portfolioId, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Float

				if (this.YTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedSTGL);
				}

				// Float

				if (this.YTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.sweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// String

				writeString(this.custodialAccountNumber, dos);

				// String

				writeString(this.sleeveType, dos);

				// String

				writeString(this.householdName, dos);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// Integer

				writeInteger(this.advisorId, dos);

				// Integer

				writeInteger(this.sweepSecurityId, dos);

				// String

				writeString(this.systematicAmount, dos);

				// java.util.Date

				writeDate(this.systematicDate, dos);

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// Float

				if (this.sleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveTarget);
				}

				// Float

				if (this.sleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveContributionPercent);
				}

				// Float

				if (this.sleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveDistributionPercent);
				}

				// Float

				if (this.sleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceLower);
				}

				// Float

				if (this.sleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceUpper);
				}

				// Integer

				writeInteger(this.modelId, dos);

				// Boolean

				if (this.isDisabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDisabled);
				}

				// String

				writeString(this.disabledReason, dos);

				// String

				writeString(this.inputPortfolioName, dos);

				// String

				writeString(this.HashedSSN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",orionConnectFirmID="
					+ String.valueOf(orionConnectFirmID));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",name=" + name);
			sb.append(",portfolioId=" + portfolioId);
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",YTDRealizedSTGL=" + String.valueOf(YTDRealizedSTGL));
			sb.append(",YTDRealizedLTGL=" + String.valueOf(YTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",sweepSymbol=" + sweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",custodialAccountNumber=" + custodialAccountNumber);
			sb.append(",sleeveType=" + sleeveType);
			sb.append(",householdName=" + householdName);
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",sweepSecurityId=" + String.valueOf(sweepSecurityId));
			sb.append(",systematicAmount=" + systematicAmount);
			sb.append(",systematicDate=" + String.valueOf(systematicDate));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",sleeveTarget=" + String.valueOf(sleeveTarget));
			sb.append(",sleeveContributionPercent="
					+ String.valueOf(sleeveContributionPercent));
			sb.append(",sleeveDistributionPercent="
					+ String.valueOf(sleeveDistributionPercent));
			sb.append(",sleeveToleranceLower="
					+ String.valueOf(sleeveToleranceLower));
			sb.append(",sleeveToleranceUpper="
					+ String.valueOf(sleeveToleranceUpper));
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",inputPortfolioName=" + inputPortfolioName);
			sb.append(",HashedSSN=" + HashedSSN);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(household_portfolio_idStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class account_portfolio_idStruct implements
			routines.system.IPersistableRow<account_portfolio_idStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public int orionConnectExternalId;

		public int getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public Integer orionConnectFirmID;

		public Integer getOrionConnectFirmID() {
			return this.orionConnectFirmID;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String portfolioId;

		public String getPortfolioId() {
			return this.portfolioId;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Float YTDRealizedSTGL;

		public Float getYTDRealizedSTGL() {
			return this.YTDRealizedSTGL;
		}

		public Float YTDRealizedLTGL;

		public Float getYTDRealizedLTGL() {
			return this.YTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String sweepSymbol;

		public String getSweepSymbol() {
			return this.sweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public String custodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.custodialAccountNumber;
		}

		public String sleeveType;

		public String getSleeveType() {
			return this.sleeveType;
		}

		public String householdName;

		public String getHouseholdName() {
			return this.householdName;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public Integer sweepSecurityId;

		public Integer getSweepSecurityId() {
			return this.sweepSecurityId;
		}

		public String systematicAmount;

		public String getSystematicAmount() {
			return this.systematicAmount;
		}

		public java.util.Date systematicDate;

		public java.util.Date getSystematicDate() {
			return this.systematicDate;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public Float sleeveTarget;

		public Float getSleeveTarget() {
			return this.sleeveTarget;
		}

		public Float sleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.sleeveContributionPercent;
		}

		public Float sleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.sleeveDistributionPercent;
		}

		public Float sleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.sleeveToleranceLower;
		}

		public Float sleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.sleeveToleranceUpper;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public Boolean isDisabled;

		public Boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public String inputPortfolioName;

		public String getInputPortfolioName() {
			return this.inputPortfolioName;
		}

		public String HashedSSN;

		public String getHashedSSN() {
			return this.HashedSSN;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectExternalId = dis.readInt();

					this.orionConnectFirmID = readInteger(dis);

					this.accountId = readString(dis);

					this.accountNumber = readString(dis);

					this.name = readString(dis);

					this.portfolioId = readString(dis);

					this.accountTypeId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedSTGL = null;
					} else {
						this.YTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedLTGL = null;
					} else {
						this.YTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.sweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.custodialAccountNumber = readString(dis);

					this.sleeveType = readString(dis);

					this.householdName = readString(dis);

					this.createdDate = readDate(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.advisorId = readInteger(dis);

					this.sweepSecurityId = readInteger(dis);

					this.systematicAmount = readString(dis);

					this.systematicDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sleeveTarget = null;
					} else {
						this.sleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveContributionPercent = null;
					} else {
						this.sleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveDistributionPercent = null;
					} else {
						this.sleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceLower = null;
					} else {
						this.sleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceUpper = null;
					} else {
						this.sleeveToleranceUpper = dis.readFloat();
					}

					this.modelId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDisabled = null;
					} else {
						this.isDisabled = dis.readBoolean();
					}

					this.disabledReason = readString(dis);

					this.inputPortfolioName = readString(dis);

					this.HashedSSN = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.orionConnectExternalId);

				// Integer

				writeInteger(this.orionConnectFirmID, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.portfolioId, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Float

				if (this.YTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedSTGL);
				}

				// Float

				if (this.YTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.sweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// String

				writeString(this.custodialAccountNumber, dos);

				// String

				writeString(this.sleeveType, dos);

				// String

				writeString(this.householdName, dos);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// Integer

				writeInteger(this.advisorId, dos);

				// Integer

				writeInteger(this.sweepSecurityId, dos);

				// String

				writeString(this.systematicAmount, dos);

				// java.util.Date

				writeDate(this.systematicDate, dos);

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// Float

				if (this.sleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveTarget);
				}

				// Float

				if (this.sleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveContributionPercent);
				}

				// Float

				if (this.sleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveDistributionPercent);
				}

				// Float

				if (this.sleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceLower);
				}

				// Float

				if (this.sleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceUpper);
				}

				// Integer

				writeInteger(this.modelId, dos);

				// Boolean

				if (this.isDisabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDisabled);
				}

				// String

				writeString(this.disabledReason, dos);

				// String

				writeString(this.inputPortfolioName, dos);

				// String

				writeString(this.HashedSSN, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",orionConnectFirmID="
					+ String.valueOf(orionConnectFirmID));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",name=" + name);
			sb.append(",portfolioId=" + portfolioId);
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",YTDRealizedSTGL=" + String.valueOf(YTDRealizedSTGL));
			sb.append(",YTDRealizedLTGL=" + String.valueOf(YTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",sweepSymbol=" + sweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",custodialAccountNumber=" + custodialAccountNumber);
			sb.append(",sleeveType=" + sleeveType);
			sb.append(",householdName=" + householdName);
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",sweepSecurityId=" + String.valueOf(sweepSecurityId));
			sb.append(",systematicAmount=" + systematicAmount);
			sb.append(",systematicDate=" + String.valueOf(systematicDate));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",sleeveTarget=" + String.valueOf(sleeveTarget));
			sb.append(",sleeveContributionPercent="
					+ String.valueOf(sleeveContributionPercent));
			sb.append(",sleeveDistributionPercent="
					+ String.valueOf(sleeveDistributionPercent));
			sb.append(",sleeveToleranceLower="
					+ String.valueOf(sleeveToleranceLower));
			sb.append(",sleeveToleranceUpper="
					+ String.valueOf(sleeveToleranceUpper));
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",inputPortfolioName=" + inputPortfolioName);
			sb.append(",HashedSSN=" + HashedSSN);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(account_portfolio_idStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class none_portfolio_idStruct implements
			routines.system.IPersistableRow<none_portfolio_idStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public int orionConnectExternalId;

		public int getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public Integer orionConnectFirmID;

		public Integer getOrionConnectFirmID() {
			return this.orionConnectFirmID;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer portfolioId;

		public Integer getPortfolioId() {
			return this.portfolioId;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Float YTDRealizedSTGL;

		public Float getYTDRealizedSTGL() {
			return this.YTDRealizedSTGL;
		}

		public Float YTDRealizedLTGL;

		public Float getYTDRealizedLTGL() {
			return this.YTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String sweepSymbol;

		public String getSweepSymbol() {
			return this.sweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public String custodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.custodialAccountNumber;
		}

		public String sleeveType;

		public String getSleeveType() {
			return this.sleeveType;
		}

		public String householdName;

		public String getHouseholdName() {
			return this.householdName;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public Integer createdBy;

		public Integer getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public Integer editedBy;

		public Integer getEditedBy() {
			return this.editedBy;
		}

		public Boolean isDeleted;

		public Boolean getIsDeleted() {
			return this.isDeleted;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public Integer sweepSecurityId;

		public Integer getSweepSecurityId() {
			return this.sweepSecurityId;
		}

		public String systematicAmount;

		public String getSystematicAmount() {
			return this.systematicAmount;
		}

		public java.util.Date systematicDate;

		public java.util.Date getSystematicDate() {
			return this.systematicDate;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public Float sleeveTarget;

		public Float getSleeveTarget() {
			return this.sleeveTarget;
		}

		public Float sleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.sleeveContributionPercent;
		}

		public Float sleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.sleeveDistributionPercent;
		}

		public Float sleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.sleeveToleranceLower;
		}

		public Float sleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.sleeveToleranceUpper;
		}

		public Integer modelId;

		public Integer getModelId() {
			return this.modelId;
		}

		public Boolean isDisabled;

		public Boolean getIsDisabled() {
			return this.isDisabled;
		}

		public String disabledReason;

		public String getDisabledReason() {
			return this.disabledReason;
		}

		public String HashedSSN;

		public String getHashedSSN() {
			return this.HashedSSN;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectExternalId = dis.readInt();

					this.orionConnectFirmID = readInteger(dis);

					this.accountId = readString(dis);

					this.accountNumber = readString(dis);

					this.name = readString(dis);

					this.portfolioId = readInteger(dis);

					this.accountTypeId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedSTGL = null;
					} else {
						this.YTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.YTDRealizedLTGL = null;
					} else {
						this.YTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.sweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.custodialAccountNumber = readString(dis);

					this.sleeveType = readString(dis);

					this.householdName = readString(dis);

					this.createdDate = readDate(dis);

					this.createdBy = readInteger(dis);

					this.editedDate = readDate(dis);

					this.editedBy = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDeleted = null;
					} else {
						this.isDeleted = dis.readBoolean();
					}

					this.advisorId = readInteger(dis);

					this.sweepSecurityId = readInteger(dis);

					this.systematicAmount = readString(dis);

					this.systematicDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sleeveTarget = null;
					} else {
						this.sleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveContributionPercent = null;
					} else {
						this.sleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveDistributionPercent = null;
					} else {
						this.sleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceLower = null;
					} else {
						this.sleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sleeveToleranceUpper = null;
					} else {
						this.sleeveToleranceUpper = dis.readFloat();
					}

					this.modelId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.isDisabled = null;
					} else {
						this.isDisabled = dis.readBoolean();
					}

					this.disabledReason = readString(dis);

					this.HashedSSN = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.orionConnectExternalId);

				// Integer

				writeInteger(this.orionConnectFirmID, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.portfolioId, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Float

				if (this.YTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedSTGL);
				}

				// Float

				if (this.YTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.YTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.sweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// String

				writeString(this.custodialAccountNumber, dos);

				// String

				writeString(this.sleeveType, dos);

				// String

				writeString(this.householdName, dos);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// Integer

				writeInteger(this.createdBy, dos);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// Integer

				writeInteger(this.editedBy, dos);

				// Boolean

				if (this.isDeleted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDeleted);
				}

				// Integer

				writeInteger(this.advisorId, dos);

				// Integer

				writeInteger(this.sweepSecurityId, dos);

				// String

				writeString(this.systematicAmount, dos);

				// java.util.Date

				writeDate(this.systematicDate, dos);

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// Float

				if (this.sleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveTarget);
				}

				// Float

				if (this.sleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveContributionPercent);
				}

				// Float

				if (this.sleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveDistributionPercent);
				}

				// Float

				if (this.sleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceLower);
				}

				// Float

				if (this.sleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.sleeveToleranceUpper);
				}

				// Integer

				writeInteger(this.modelId, dos);

				// Boolean

				if (this.isDisabled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.isDisabled);
				}

				// String

				writeString(this.disabledReason, dos);

				// String

				writeString(this.HashedSSN, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",orionConnectFirmID="
					+ String.valueOf(orionConnectFirmID));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",name=" + name);
			sb.append(",portfolioId=" + String.valueOf(portfolioId));
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",YTDRealizedSTGL=" + String.valueOf(YTDRealizedSTGL));
			sb.append(",YTDRealizedLTGL=" + String.valueOf(YTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",sweepSymbol=" + sweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",custodialAccountNumber=" + custodialAccountNumber);
			sb.append(",sleeveType=" + sleeveType);
			sb.append(",householdName=" + householdName);
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",sweepSecurityId=" + String.valueOf(sweepSecurityId));
			sb.append(",systematicAmount=" + systematicAmount);
			sb.append(",systematicDate=" + String.valueOf(systematicDate));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",sleeveTarget=" + String.valueOf(sleeveTarget));
			sb.append(",sleeveContributionPercent="
					+ String.valueOf(sleeveContributionPercent));
			sb.append(",sleeveDistributionPercent="
					+ String.valueOf(sleeveDistributionPercent));
			sb.append(",sleeveToleranceLower="
					+ String.valueOf(sleeveToleranceLower));
			sb.append(",sleeveToleranceUpper="
					+ String.valueOf(sleeveToleranceUpper));
			sb.append(",modelId=" + String.valueOf(modelId));
			sb.append(",isDisabled=" + String.valueOf(isDisabled));
			sb.append(",disabledReason=" + disabledReason);
			sb.append(",HashedSSN=" + HashedSSN);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(none_portfolio_idStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountName;

		public String getAccountName() {
			return this.AccountName;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public Integer HouseholdId;

		public Integer getHouseholdId() {
			return this.HouseholdId;
		}

		public String HouseholdName;

		public String getHouseholdName() {
			return this.HouseholdName;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Float AccountYTDRealizedSTGL;

		public Float getAccountYTDRealizedSTGL() {
			return this.AccountYTDRealizedSTGL;
		}

		public Float AccountYTDRealizedLTGL;

		public Float getAccountYTDRealizedLTGL() {
			return this.AccountYTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String SweepSymbol;

		public String getSweepSymbol() {
			return this.SweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public String SleeveType;

		public String getSleeveType() {
			return this.SleeveType;
		}

		public Float SleeveTarget;

		public Float getSleeveTarget() {
			return this.SleeveTarget;
		}

		public Float SleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.SleeveContributionPercent;
		}

		public Float SleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.SleeveDistributionPercent;
		}

		public Float SleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.SleeveToleranceLower;
		}

		public Float SleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.SleeveToleranceUpper;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public String SystematicAmount;

		public String getSystematicAmount() {
			return this.SystematicAmount;
		}

		public java.util.Date SystematicDate;

		public java.util.Date getSystematicDate() {
			return this.SystematicDate;
		}

		public String existingAccountNumber;

		public String getExistingAccountNumber() {
			return this.existingAccountNumber;
		}

		public Integer existingAccountPortfolioId;

		public Integer getExistingAccountPortfolioId() {
			return this.existingAccountPortfolioId;
		}

		public String preferenceOption;

		public String getPreferenceOption() {
			return this.preferenceOption;
		}

		public String HashedSSN;

		public String getHashedSSN() {
			return this.HashedSSN;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					this.AccountName = readString(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.HouseholdId = readInteger(dis);

					this.HouseholdName = readString(dis);

					this.accountTypeId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedSTGL = null;
					} else {
						this.AccountYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedLTGL = null;
					} else {
						this.AccountYTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.SweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.advisorId = readInteger(dis);

					this.SleeveType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SleeveTarget = null;
					} else {
						this.SleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveContributionPercent = null;
					} else {
						this.SleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveDistributionPercent = null;
					} else {
						this.SleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceLower = null;
					} else {
						this.SleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceUpper = null;
					} else {
						this.SleeveToleranceUpper = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					this.SystematicAmount = readString(dis);

					this.SystematicDate = readDate(dis);

					this.existingAccountNumber = readString(dis);

					this.existingAccountPortfolioId = readInteger(dis);

					this.preferenceOption = readString(dis);

					this.HashedSSN = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountName, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// Integer

				writeInteger(this.HouseholdId, dos);

				// String

				writeString(this.HouseholdName, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Float

				if (this.AccountYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedSTGL);
				}

				// Float

				if (this.AccountYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.SweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// Integer

				writeInteger(this.advisorId, dos);

				// String

				writeString(this.SleeveType, dos);

				// Float

				if (this.SleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveTarget);
				}

				// Float

				if (this.SleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveContributionPercent);
				}

				// Float

				if (this.SleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveDistributionPercent);
				}

				// Float

				if (this.SleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceLower);
				}

				// Float

				if (this.SleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceUpper);
				}

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// String

				writeString(this.SystematicAmount, dos);

				// java.util.Date

				writeDate(this.SystematicDate, dos);

				// String

				writeString(this.existingAccountNumber, dos);

				// Integer

				writeInteger(this.existingAccountPortfolioId, dos);

				// String

				writeString(this.preferenceOption, dos);

				// String

				writeString(this.HashedSSN, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountName=" + AccountName);
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",HouseholdId=" + String.valueOf(HouseholdId));
			sb.append(",HouseholdName=" + HouseholdName);
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",AccountYTDRealizedSTGL="
					+ String.valueOf(AccountYTDRealizedSTGL));
			sb.append(",AccountYTDRealizedLTGL="
					+ String.valueOf(AccountYTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",SweepSymbol=" + SweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",SleeveType=" + SleeveType);
			sb.append(",SleeveTarget=" + String.valueOf(SleeveTarget));
			sb.append(",SleeveContributionPercent="
					+ String.valueOf(SleeveContributionPercent));
			sb.append(",SleeveDistributionPercent="
					+ String.valueOf(SleeveDistributionPercent));
			sb.append(",SleeveToleranceLower="
					+ String.valueOf(SleeveToleranceLower));
			sb.append(",SleeveToleranceUpper="
					+ String.valueOf(SleeveToleranceUpper));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",SystematicAmount=" + SystematicAmount);
			sb.append(",SystematicDate=" + String.valueOf(SystematicDate));
			sb.append(",existingAccountNumber=" + existingAccountNumber);
			sb.append(",existingAccountPortfolioId="
					+ String.valueOf(existingAccountPortfolioId));
			sb.append(",preferenceOption=" + preferenceOption);
			sb.append(",HashedSSN=" + HashedSSN);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountName;

		public String getAccountName() {
			return this.AccountName;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public Integer HouseholdId;

		public Integer getHouseholdId() {
			return this.HouseholdId;
		}

		public String HouseholdName;

		public String getHouseholdName() {
			return this.HouseholdName;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Float AccountYTDRealizedSTGL;

		public Float getAccountYTDRealizedSTGL() {
			return this.AccountYTDRealizedSTGL;
		}

		public Float AccountYTDRealizedLTGL;

		public Float getAccountYTDRealizedLTGL() {
			return this.AccountYTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String SweepSymbol;

		public String getSweepSymbol() {
			return this.SweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public String SleeveType;

		public String getSleeveType() {
			return this.SleeveType;
		}

		public Float SleeveTarget;

		public Float getSleeveTarget() {
			return this.SleeveTarget;
		}

		public Float SleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.SleeveContributionPercent;
		}

		public Float SleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.SleeveDistributionPercent;
		}

		public Float SleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.SleeveToleranceLower;
		}

		public Float SleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.SleeveToleranceUpper;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public String SystematicAmount;

		public String getSystematicAmount() {
			return this.SystematicAmount;
		}

		public java.util.Date SystematicDate;

		public java.util.Date getSystematicDate() {
			return this.SystematicDate;
		}

		public String existingAccountNumber;

		public String getExistingAccountNumber() {
			return this.existingAccountNumber;
		}

		public Integer existingAccountPortfolioId;

		public Integer getExistingAccountPortfolioId() {
			return this.existingAccountPortfolioId;
		}

		public String preferenceOption;

		public String getPreferenceOption() {
			return this.preferenceOption;
		}

		public String HashedSSN;

		public String getHashedSSN() {
			return this.HashedSSN;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					this.AccountName = readString(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.HouseholdId = readInteger(dis);

					this.HouseholdName = readString(dis);

					this.accountTypeId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedSTGL = null;
					} else {
						this.AccountYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedLTGL = null;
					} else {
						this.AccountYTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.SweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.advisorId = readInteger(dis);

					this.SleeveType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SleeveTarget = null;
					} else {
						this.SleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveContributionPercent = null;
					} else {
						this.SleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveDistributionPercent = null;
					} else {
						this.SleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceLower = null;
					} else {
						this.SleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceUpper = null;
					} else {
						this.SleeveToleranceUpper = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					this.SystematicAmount = readString(dis);

					this.SystematicDate = readDate(dis);

					this.existingAccountNumber = readString(dis);

					this.existingAccountPortfolioId = readInteger(dis);

					this.preferenceOption = readString(dis);

					this.HashedSSN = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountName, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// Integer

				writeInteger(this.HouseholdId, dos);

				// String

				writeString(this.HouseholdName, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Float

				if (this.AccountYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedSTGL);
				}

				// Float

				if (this.AccountYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.SweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// Integer

				writeInteger(this.advisorId, dos);

				// String

				writeString(this.SleeveType, dos);

				// Float

				if (this.SleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveTarget);
				}

				// Float

				if (this.SleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveContributionPercent);
				}

				// Float

				if (this.SleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveDistributionPercent);
				}

				// Float

				if (this.SleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceLower);
				}

				// Float

				if (this.SleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceUpper);
				}

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// String

				writeString(this.SystematicAmount, dos);

				// java.util.Date

				writeDate(this.SystematicDate, dos);

				// String

				writeString(this.existingAccountNumber, dos);

				// Integer

				writeInteger(this.existingAccountPortfolioId, dos);

				// String

				writeString(this.preferenceOption, dos);

				// String

				writeString(this.HashedSSN, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountName=" + AccountName);
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",HouseholdId=" + String.valueOf(HouseholdId));
			sb.append(",HouseholdName=" + HouseholdName);
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",AccountYTDRealizedSTGL="
					+ String.valueOf(AccountYTDRealizedSTGL));
			sb.append(",AccountYTDRealizedLTGL="
					+ String.valueOf(AccountYTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",SweepSymbol=" + SweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",SleeveType=" + SleeveType);
			sb.append(",SleeveTarget=" + String.valueOf(SleeveTarget));
			sb.append(",SleeveContributionPercent="
					+ String.valueOf(SleeveContributionPercent));
			sb.append(",SleeveDistributionPercent="
					+ String.valueOf(SleeveDistributionPercent));
			sb.append(",SleeveToleranceLower="
					+ String.valueOf(SleeveToleranceLower));
			sb.append(",SleeveToleranceUpper="
					+ String.valueOf(SleeveToleranceUpper));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",SystematicAmount=" + SystematicAmount);
			sb.append(",SystematicDate=" + String.valueOf(SystematicDate));
			sb.append(",existingAccountNumber=" + existingAccountNumber);
			sb.append(",existingAccountPortfolioId="
					+ String.valueOf(existingAccountPortfolioId));
			sb.append(",preferenceOption=" + preferenceOption);
			sb.append(",HashedSSN=" + HashedSSN);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class account_filterStruct implements
			routines.system.IPersistableRow<account_filterStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountName;

		public String getAccountName() {
			return this.AccountName;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public Integer HouseholdId;

		public Integer getHouseholdId() {
			return this.HouseholdId;
		}

		public String HouseholdName;

		public String getHouseholdName() {
			return this.HouseholdName;
		}

		public Integer accountTypeId;

		public Integer getAccountTypeId() {
			return this.accountTypeId;
		}

		public Float AccountYTDRealizedSTGL;

		public Float getAccountYTDRealizedSTGL() {
			return this.AccountYTDRealizedSTGL;
		}

		public Float AccountYTDRealizedLTGL;

		public Float getAccountYTDRealizedLTGL() {
			return this.AccountYTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String SweepSymbol;

		public String getSweepSymbol() {
			return this.SweepSymbol;
		}

		public Integer custodianId;

		public Integer getCustodianId() {
			return this.custodianId;
		}

		public Integer advisorId;

		public Integer getAdvisorId() {
			return this.advisorId;
		}

		public String SleeveType;

		public String getSleeveType() {
			return this.SleeveType;
		}

		public Float SleeveTarget;

		public Float getSleeveTarget() {
			return this.SleeveTarget;
		}

		public Float SleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.SleeveContributionPercent;
		}

		public Float SleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.SleeveDistributionPercent;
		}

		public Float SleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.SleeveToleranceLower;
		}

		public Float SleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.SleeveToleranceUpper;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public String SystematicAmount;

		public String getSystematicAmount() {
			return this.SystematicAmount;
		}

		public java.util.Date SystematicDate;

		public java.util.Date getSystematicDate() {
			return this.SystematicDate;
		}

		public String existingAccountNumber;

		public String getExistingAccountNumber() {
			return this.existingAccountNumber;
		}

		public Integer existingAccountPortfolioId;

		public Integer getExistingAccountPortfolioId() {
			return this.existingAccountPortfolioId;
		}

		public String preferenceOption;

		public String getPreferenceOption() {
			return this.preferenceOption;
		}

		public String HashedSSN;

		public String getHashedSSN() {
			return this.HashedSSN;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					this.AccountName = readString(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.HouseholdId = readInteger(dis);

					this.HouseholdName = readString(dis);

					this.accountTypeId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedSTGL = null;
					} else {
						this.AccountYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedLTGL = null;
					} else {
						this.AccountYTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.SweepSymbol = readString(dis);

					this.custodianId = readInteger(dis);

					this.advisorId = readInteger(dis);

					this.SleeveType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SleeveTarget = null;
					} else {
						this.SleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveContributionPercent = null;
					} else {
						this.SleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveDistributionPercent = null;
					} else {
						this.SleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceLower = null;
					} else {
						this.SleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceUpper = null;
					} else {
						this.SleeveToleranceUpper = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					this.SystematicAmount = readString(dis);

					this.SystematicDate = readDate(dis);

					this.existingAccountNumber = readString(dis);

					this.existingAccountPortfolioId = readInteger(dis);

					this.preferenceOption = readString(dis);

					this.HashedSSN = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountName, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// Integer

				writeInteger(this.HouseholdId, dos);

				// String

				writeString(this.HouseholdName, dos);

				// Integer

				writeInteger(this.accountTypeId, dos);

				// Float

				if (this.AccountYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedSTGL);
				}

				// Float

				if (this.AccountYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.SweepSymbol, dos);

				// Integer

				writeInteger(this.custodianId, dos);

				// Integer

				writeInteger(this.advisorId, dos);

				// String

				writeString(this.SleeveType, dos);

				// Float

				if (this.SleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveTarget);
				}

				// Float

				if (this.SleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveContributionPercent);
				}

				// Float

				if (this.SleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveDistributionPercent);
				}

				// Float

				if (this.SleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceLower);
				}

				// Float

				if (this.SleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceUpper);
				}

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// String

				writeString(this.SystematicAmount, dos);

				// java.util.Date

				writeDate(this.SystematicDate, dos);

				// String

				writeString(this.existingAccountNumber, dos);

				// Integer

				writeInteger(this.existingAccountPortfolioId, dos);

				// String

				writeString(this.preferenceOption, dos);

				// String

				writeString(this.HashedSSN, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountName=" + AccountName);
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",HouseholdId=" + String.valueOf(HouseholdId));
			sb.append(",HouseholdName=" + HouseholdName);
			sb.append(",accountTypeId=" + String.valueOf(accountTypeId));
			sb.append(",AccountYTDRealizedSTGL="
					+ String.valueOf(AccountYTDRealizedSTGL));
			sb.append(",AccountYTDRealizedLTGL="
					+ String.valueOf(AccountYTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",SweepSymbol=" + SweepSymbol);
			sb.append(",custodianId=" + String.valueOf(custodianId));
			sb.append(",advisorId=" + String.valueOf(advisorId));
			sb.append(",SleeveType=" + SleeveType);
			sb.append(",SleeveTarget=" + String.valueOf(SleeveTarget));
			sb.append(",SleeveContributionPercent="
					+ String.valueOf(SleeveContributionPercent));
			sb.append(",SleeveDistributionPercent="
					+ String.valueOf(SleeveDistributionPercent));
			sb.append(",SleeveToleranceLower="
					+ String.valueOf(SleeveToleranceLower));
			sb.append(",SleeveToleranceUpper="
					+ String.valueOf(SleeveToleranceUpper));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",SystematicAmount=" + SystematicAmount);
			sb.append(",SystematicDate=" + String.valueOf(SystematicDate));
			sb.append(",existingAccountNumber=" + existingAccountNumber);
			sb.append(",existingAccountPortfolioId="
					+ String.valueOf(existingAccountPortfolioId));
			sb.append(",preferenceOption=" + preferenceOption);
			sb.append(",HashedSSN=" + HashedSSN);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(account_filterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class noDataFount_joinRejectStruct implements
			routines.system.IPersistableRow<noDataFount_joinRejectStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountName;

		public String getAccountName() {
			return this.AccountName;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public Integer HouseholdId;

		public Integer getHouseholdId() {
			return this.HouseholdId;
		}

		public String HouseholdName;

		public String getHouseholdName() {
			return this.HouseholdName;
		}

		public String AccountType;

		public String getAccountType() {
			return this.AccountType;
		}

		public Byte Taxable;

		public Byte getTaxable() {
			return this.Taxable;
		}

		public Float AccountYTDRealizedSTGL;

		public Float getAccountYTDRealizedSTGL() {
			return this.AccountYTDRealizedSTGL;
		}

		public Float AccountYTDRealizedLTGL;

		public Float getAccountYTDRealizedLTGL() {
			return this.AccountYTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String SweepSymbol;

		public String getSweepSymbol() {
			return this.SweepSymbol;
		}

		public String Custodian;

		public String getCustodian() {
			return this.Custodian;
		}

		public String CustodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.CustodialAccountNumber;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		public Integer AdvisorExternalId;

		public Integer getAdvisorExternalId() {
			return this.AdvisorExternalId;
		}

		public String SleeveType;

		public String getSleeveType() {
			return this.SleeveType;
		}

		public Float SleeveTarget;

		public Float getSleeveTarget() {
			return this.SleeveTarget;
		}

		public Float SleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.SleeveContributionPercent;
		}

		public Float SleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.SleeveDistributionPercent;
		}

		public Float SleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.SleeveToleranceLower;
		}

		public Float SleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.SleeveToleranceUpper;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public String SystematicAmount;

		public String getSystematicAmount() {
			return this.SystematicAmount;
		}

		public java.util.Date SystematicDate;

		public java.util.Date getSystematicDate() {
			return this.SystematicDate;
		}

		public String HashedSSN;

		public String getHashedSSN() {
			return this.HashedSSN;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					this.AccountName = readString(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.HouseholdId = readInteger(dis);

					this.HouseholdName = readString(dis);

					this.AccountType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taxable = null;
					} else {
						this.Taxable = dis.readByte();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedSTGL = null;
					} else {
						this.AccountYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedLTGL = null;
					} else {
						this.AccountYTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.SweepSymbol = readString(dis);

					this.Custodian = readString(dis);

					this.CustodialAccountNumber = readString(dis);

					this.AdvisorName = readString(dis);

					this.AdvisorExternalId = readInteger(dis);

					this.SleeveType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SleeveTarget = null;
					} else {
						this.SleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveContributionPercent = null;
					} else {
						this.SleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveDistributionPercent = null;
					} else {
						this.SleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceLower = null;
					} else {
						this.SleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceUpper = null;
					} else {
						this.SleeveToleranceUpper = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					this.SystematicAmount = readString(dis);

					this.SystematicDate = readDate(dis);

					this.HashedSSN = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountName, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// Integer

				writeInteger(this.HouseholdId, dos);

				// String

				writeString(this.HouseholdName, dos);

				// String

				writeString(this.AccountType, dos);

				// Byte

				if (this.Taxable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeByte(this.Taxable);
				}

				// Float

				if (this.AccountYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedSTGL);
				}

				// Float

				if (this.AccountYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.SweepSymbol, dos);

				// String

				writeString(this.Custodian, dos);

				// String

				writeString(this.CustodialAccountNumber, dos);

				// String

				writeString(this.AdvisorName, dos);

				// Integer

				writeInteger(this.AdvisorExternalId, dos);

				// String

				writeString(this.SleeveType, dos);

				// Float

				if (this.SleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveTarget);
				}

				// Float

				if (this.SleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveContributionPercent);
				}

				// Float

				if (this.SleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveDistributionPercent);
				}

				// Float

				if (this.SleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceLower);
				}

				// Float

				if (this.SleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceUpper);
				}

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// String

				writeString(this.SystematicAmount, dos);

				// java.util.Date

				writeDate(this.SystematicDate, dos);

				// String

				writeString(this.HashedSSN, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountName=" + AccountName);
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",HouseholdId=" + String.valueOf(HouseholdId));
			sb.append(",HouseholdName=" + HouseholdName);
			sb.append(",AccountType=" + AccountType);
			sb.append(",Taxable=" + String.valueOf(Taxable));
			sb.append(",AccountYTDRealizedSTGL="
					+ String.valueOf(AccountYTDRealizedSTGL));
			sb.append(",AccountYTDRealizedLTGL="
					+ String.valueOf(AccountYTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",SweepSymbol=" + SweepSymbol);
			sb.append(",Custodian=" + Custodian);
			sb.append(",CustodialAccountNumber=" + CustodialAccountNumber);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append(",AdvisorExternalId=" + String.valueOf(AdvisorExternalId));
			sb.append(",SleeveType=" + SleeveType);
			sb.append(",SleeveTarget=" + String.valueOf(SleeveTarget));
			sb.append(",SleeveContributionPercent="
					+ String.valueOf(SleeveContributionPercent));
			sb.append(",SleeveDistributionPercent="
					+ String.valueOf(SleeveDistributionPercent));
			sb.append(",SleeveToleranceLower="
					+ String.valueOf(SleeveToleranceLower));
			sb.append(",SleeveToleranceUpper="
					+ String.valueOf(SleeveToleranceUpper));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",SystematicAmount=" + SystematicAmount);
			sb.append(",SystematicDate=" + String.valueOf(SystematicDate));
			sb.append(",HashedSSN=" + HashedSSN);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(noDataFount_joinRejectStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfout1Struct implements
			routines.system.IPersistableRow<copyOfout1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfmainoutStruct implements
			routines.system.IPersistableRow<copyOfmainoutStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmainoutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfsStruct implements
			routines.system.IPersistableRow<copyOfsStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_19_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_19_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_19_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_19Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_19Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_19_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_19_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tAmazonAuroraInput_3_inProcess(globalMap);
				tAmazonAuroraInput_16_inProcess(globalMap);
				tAmazonAuroraInput_15_inProcess(globalMap);
				tAmazonAuroraInput_13_inProcess(globalMap);
				tAmazonAuroraInput_2_inProcess(globalMap);
				tAmazonAuroraInput_14_inProcess(globalMap);
				tAmazonAuroraInput_8_inProcess(globalMap);
				tAmazonAuroraInput_7_inProcess(globalMap);
				tAmazonAuroraInput_6_inProcess(globalMap);
				tAmazonAuroraInput_5_inProcess(globalMap);
				tAmazonAuroraInput_4_inProcess(globalMap);
				tJavaRow_6Process(globalMap);
				tAmazonAuroraInput_20_inProcess(globalMap);

				row_tAmazonAuroraInput_19_inStruct row_tAmazonAuroraInput_19_in = new row_tAmazonAuroraInput_19_inStruct();
				row_tAmazonAuroraInput_19_inStruct row20 = row_tAmazonAuroraInput_19_in;
				copyOfsStruct copyOfs = new copyOfsStruct();
				copyOfout1Struct copyOfout1 = new copyOfout1Struct();
				copyOfmainoutStruct copyOfmainout = new copyOfmainoutStruct();
				account_filterStruct account_filter = new account_filterStruct();
				row2Struct row2 = new row2Struct();
				household_portfolio_idStruct household_portfolio_id = new household_portfolio_idStruct();
				new_household_accountsStruct new_household_accounts = new new_household_accountsStruct();
				new_household_accountsStruct row_tAmazonAuroraOutput_5_in = new_household_accounts;
				NoDataFound_joinReject2Struct NoDataFound_joinReject2 = new NoDataFound_joinReject2Struct();
				NoDataFound_joinReject2Struct row_tAmazonAuroraOutput_11_in = NoDataFound_joinReject2;
				account_portfolio_idStruct account_portfolio_id = new account_portfolio_idStruct();
				new_account_portfolio_creationStruct new_account_portfolio_creation = new new_account_portfolio_creationStruct();
				new_account_portfolio_creationStruct row_tAmazonAuroraOutput_1_in = new_account_portfolio_creation;
				new_account_outputStruct new_account_output = new new_account_outputStruct();
				new_account_outputStruct row_tAmazonAuroraOutput_3_in = new_account_output;
				none_portfolio_idStruct none_portfolio_id = new none_portfolio_idStruct();
				none_portfolio_account_creationStruct none_portfolio_account_creation = new none_portfolio_account_creationStruct();
				none_portfolio_account_creationStruct row_tAmazonAuroraOutput_8_in = none_portfolio_account_creation;
				row5Struct row5 = new row5Struct();
				update_old_accountsStruct update_old_accounts = new update_old_accountsStruct();
				update_old_accountsStruct row_tAmazonAuroraOutput_4_in = update_old_accounts;
				noDataFount_joinRejectStruct noDataFount_joinReject = new noDataFount_joinRejectStruct();
				noDataFount_joinRejectStruct row_tAmazonAuroraOutput_9_in = noDataFount_joinReject;

				/**
				 * [tJavaRow_7 begin ] start
				 */

				ok_Hash.put("tJavaRow_7", false);
				start_Hash.put("tJavaRow_7", System.currentTimeMillis());

				currentComponent = "tJavaRow_7";

				int tos_count_tJavaRow_7 = 0;

				int nb_line_tJavaRow_7 = 0;

				/**
				 * [tJavaRow_7 begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_5_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_5_out", false);
				start_Hash.put("tAmazonAuroraOutput_5_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_5";

				currentComponent = "tAmazonAuroraOutput_5_out";

				int tos_count_tAmazonAuroraOutput_5_out = 0;

				int nb_line_tAmazonAuroraOutput_5 = 0;
				int nb_line_update_tAmazonAuroraOutput_5 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_5 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_5 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_5 = 0;

				int deletedCount_tAmazonAuroraOutput_5 = 0;
				int updatedCount_tAmazonAuroraOutput_5 = 0;
				int insertedCount_tAmazonAuroraOutput_5 = 0;

				int rejectedCount_tAmazonAuroraOutput_5 = 0;

				String tableName_tAmazonAuroraOutput_5 = "account";
				boolean whetherReject_tAmazonAuroraOutput_5 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_5 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_5 = calendar_tAmazonAuroraOutput_5
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_5 = calendar_tAmazonAuroraOutput_5
						.getTime().getTime();
				long date_tAmazonAuroraOutput_5;

				java.sql.Connection conn_tAmazonAuroraOutput_5 = null;
				String dbProperties_tAmazonAuroraOutput_5 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_5 = null;
				if (dbProperties_tAmazonAuroraOutput_5 == null
						|| dbProperties_tAmazonAuroraOutput_5.trim().length() == 0) {
					url_tAmazonAuroraOutput_5 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_5 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_5
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_5 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_5 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_5;
				}
				String driverClass_tAmazonAuroraOutput_5 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_5 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_5 = context.password;

				String dbPwd_tAmazonAuroraOutput_5 = decryptedPassword_tAmazonAuroraOutput_5;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_5);

				conn_tAmazonAuroraOutput_5 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_5,
								dbUser_tAmazonAuroraOutput_5,
								dbPwd_tAmazonAuroraOutput_5);

				resourceMap.put("conn_tAmazonAuroraOutput_5",
						conn_tAmazonAuroraOutput_5);
				conn_tAmazonAuroraOutput_5.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_5 = 10000;
				int commitCounter_tAmazonAuroraOutput_5 = 0;

				int count_tAmazonAuroraOutput_5 = 0;

				String insert_tAmazonAuroraOutput_5 = "INSERT INTO `"
						+ "account"
						+ "` (`id`,`orionConnectExternalId`,`orionConnectFirmID`,`orionEclipseFirmId`,`accountId`,`accountNumber`,`name`,`portfolioId`,`householdId`,`YTDRealizedSTGL`,`YTDRealizedLTGL`,`SSN`,`sweepSymbol`,`custodianId`,`custodialAccountNumber`,`sleeveType`,`createdDate`,`householdName`,`accountTypeId`,`createdBy`,`editedDate`,`editedBy`,`isDeleted`,`advisorId`,`sweepSecurityId`,`systematicAmount`,`systematicDate`,`SMA`,`SMATradeable`,`BillingAccount`,`sleeveTarget`,`sleeveContributionPercent`,`sleeveDistributionPercent`,`sleeveToleranceLower`,`sleeveToleranceUpper`,`modelId`,`isDisabled`,`disabledReason`,`hashedSsn`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_5 = 1000;
				int batchSizeCounter_tAmazonAuroraOutput_5 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_5 = conn_tAmazonAuroraOutput_5
						.prepareStatement(insert_tAmazonAuroraOutput_5);

				/**
				 * [tAmazonAuroraOutput_5_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_5_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_5_in", false);
				start_Hash.put("tAmazonAuroraOutput_5_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_5";

				currentComponent = "tAmazonAuroraOutput_5_in";

				int tos_count_tAmazonAuroraOutput_5_in = 0;

				/**
				 * [tAmazonAuroraOutput_5_in begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_11_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_11_out", false);
				start_Hash.put("tAmazonAuroraOutput_11_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_11";

				currentComponent = "tAmazonAuroraOutput_11_out";

				int tos_count_tAmazonAuroraOutput_11_out = 0;

				int nb_line_tAmazonAuroraOutput_11 = 0;
				int nb_line_update_tAmazonAuroraOutput_11 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_11 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_11 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_11 = 0;

				int deletedCount_tAmazonAuroraOutput_11 = 0;
				int updatedCount_tAmazonAuroraOutput_11 = 0;
				int insertedCount_tAmazonAuroraOutput_11 = 0;

				int rejectedCount_tAmazonAuroraOutput_11 = 0;

				String tableName_tAmazonAuroraOutput_11 = "noDataFound_Account";
				boolean whetherReject_tAmazonAuroraOutput_11 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_11 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_11.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_11 = calendar_tAmazonAuroraOutput_11
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_11.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_11 = calendar_tAmazonAuroraOutput_11
						.getTime().getTime();
				long date_tAmazonAuroraOutput_11;

				java.sql.Connection conn_tAmazonAuroraOutput_11 = null;
				String dbProperties_tAmazonAuroraOutput_11 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_11 = null;
				if (dbProperties_tAmazonAuroraOutput_11 == null
						|| dbProperties_tAmazonAuroraOutput_11.trim().length() == 0) {
					url_tAmazonAuroraOutput_11 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_11 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_11
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_11 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_11 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_11;
				}
				String driverClass_tAmazonAuroraOutput_11 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_11 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_11 = context.password;

				String dbPwd_tAmazonAuroraOutput_11 = decryptedPassword_tAmazonAuroraOutput_11;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_11);

				conn_tAmazonAuroraOutput_11 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_11,
								dbUser_tAmazonAuroraOutput_11,
								dbPwd_tAmazonAuroraOutput_11);

				resourceMap.put("conn_tAmazonAuroraOutput_11",
						conn_tAmazonAuroraOutput_11);
				conn_tAmazonAuroraOutput_11.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_11 = 10000;
				int commitCounter_tAmazonAuroraOutput_11 = 0;

				int count_tAmazonAuroraOutput_11 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonAuroraOutput_11 = conn_tAmazonAuroraOutput_11
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonAuroraOutput_11 = dbMetaData_tAmazonAuroraOutput_11
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonAuroraOutput_11 = false;
				while (rsTable_tAmazonAuroraOutput_11.next()) {
					String table_tAmazonAuroraOutput_11 = rsTable_tAmazonAuroraOutput_11
							.getString("TABLE_NAME");
					if (table_tAmazonAuroraOutput_11
							.equalsIgnoreCase("noDataFound_Account")) {
						whetherExist_tAmazonAuroraOutput_11 = true;
						break;
					}
				}
				rsTable_tAmazonAuroraOutput_11.close();
				if (!whetherExist_tAmazonAuroraOutput_11) {
					java.sql.Statement stmtCreate_tAmazonAuroraOutput_11 = conn_tAmazonAuroraOutput_11
							.createStatement();
					stmtCreate_tAmazonAuroraOutput_11
							.execute("CREATE TABLE `"
									+ tableName_tAmazonAuroraOutput_11
									+ "`(`OrionFirmId` INT(10)  ,`ExternalId` INT(10)  ,`AccountId` VARCHAR(50)  ,`AccountNumber` VARCHAR(50)  ,`AccountName` VARCHAR(255)  ,`PortfolioId` VARCHAR(50)  ,`PortfolioName` VARCHAR(50)  ,`HouseholdId` INT(10)  ,`HouseholdName` VARCHAR(50)  ,`AccountType` VARCHAR(20)  ,`Taxable` TINYINT(3)  ,`AccountYTDRealizedSTGL` FLOAT(10,2)  ,`AccountYTDRealizedLTGL` FLOAT(10,2)  ,`SSN` VARCHAR(255)  ,`SweepSymbol` VARCHAR(255)  ,`Custodian` VARCHAR(255)  ,`CustodialAccountNumber` VARCHAR(255)  ,`AdvisorName` VARCHAR(255)  ,`AdvisorExternalId` INT(10)  ,`SleeveType` VARCHAR(50)  ,`SleeveTarget` FLOAT(12,0)  ,`SleeveContributionPercent` FLOAT(12,0)  ,`SleeveDistributionPercent` FLOAT(12,0)  ,`SleeveToleranceLower` FLOAT(12,0)  ,`SleeveToleranceUpper` FLOAT(12,0)  ,`SMA` BIT(1)  ,`SMATradeable` VARCHAR(255)  ,`BillingAccount` VARCHAR(255)  ,`SystematicAmount` VARCHAR(255)  ,`SystematicDate` DATETIME ,`hashedSsn` VARCHAR(255)  )");
					stmtCreate_tAmazonAuroraOutput_11.close();
				}

				String insert_tAmazonAuroraOutput_11 = "INSERT INTO `"
						+ "noDataFound_Account"
						+ "` (`OrionFirmId`,`ExternalId`,`AccountId`,`AccountNumber`,`AccountName`,`PortfolioId`,`PortfolioName`,`HouseholdId`,`HouseholdName`,`AccountType`,`Taxable`,`AccountYTDRealizedSTGL`,`AccountYTDRealizedLTGL`,`SSN`,`SweepSymbol`,`Custodian`,`CustodialAccountNumber`,`AdvisorName`,`AdvisorExternalId`,`SleeveType`,`SleeveTarget`,`SleeveContributionPercent`,`SleeveDistributionPercent`,`SleeveToleranceLower`,`SleeveToleranceUpper`,`SMA`,`SMATradeable`,`BillingAccount`,`SystematicAmount`,`SystematicDate`,`hashedSsn`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_11 = 1000;
				int batchSizeCounter_tAmazonAuroraOutput_11 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_11 = conn_tAmazonAuroraOutput_11
						.prepareStatement(insert_tAmazonAuroraOutput_11);

				/**
				 * [tAmazonAuroraOutput_11_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_11_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_11_in", false);
				start_Hash.put("tAmazonAuroraOutput_11_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_11";

				currentComponent = "tAmazonAuroraOutput_11_in";

				int tos_count_tAmazonAuroraOutput_11_in = 0;

				/**
				 * [tAmazonAuroraOutput_11_in begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<household_portfolioId_lookupStruct> tHash_Lookup_household_portfolioId_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<household_portfolioId_lookupStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<household_portfolioId_lookupStruct>) globalMap
						.get("tHash_Lookup_household_portfolioId_lookup"));

				household_portfolioId_lookupStruct household_portfolioId_lookupHashKey = new household_portfolioId_lookupStruct();
				household_portfolioId_lookupStruct household_portfolioId_lookupDefault = new household_portfolioId_lookupStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) globalMap
						.get("tHash_Lookup_row13"));

				row13Struct row13HashKey = new row13Struct();
				row13Struct row13Default = new row13Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				new_household_accountsStruct new_household_accounts_tmp = new new_household_accountsStruct();
				NoDataFound_joinReject2Struct NoDataFound_joinReject2_tmp = new NoDataFound_joinReject2Struct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_1_out", false);
				start_Hash.put("tAmazonAuroraOutput_1_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_out";

				int tos_count_tAmazonAuroraOutput_1_out = 0;

				int nb_line_tAmazonAuroraOutput_1 = 0;
				int nb_line_update_tAmazonAuroraOutput_1 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_1 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_1 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_1 = 0;

				int deletedCount_tAmazonAuroraOutput_1 = 0;
				int updatedCount_tAmazonAuroraOutput_1 = 0;
				int insertedCount_tAmazonAuroraOutput_1 = 0;

				int rejectedCount_tAmazonAuroraOutput_1 = 0;

				String tableName_tAmazonAuroraOutput_1 = "portfolio";
				boolean whetherReject_tAmazonAuroraOutput_1 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_1 = calendar_tAmazonAuroraOutput_1
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_1 = calendar_tAmazonAuroraOutput_1
						.getTime().getTime();
				long date_tAmazonAuroraOutput_1;

				java.sql.Connection conn_tAmazonAuroraOutput_1 = null;
				String dbProperties_tAmazonAuroraOutput_1 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_1 = null;
				if (dbProperties_tAmazonAuroraOutput_1 == null
						|| dbProperties_tAmazonAuroraOutput_1.trim().length() == 0) {
					url_tAmazonAuroraOutput_1 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_1 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_1;
				}
				String driverClass_tAmazonAuroraOutput_1 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_1 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_1 = context.password;

				String dbPwd_tAmazonAuroraOutput_1 = decryptedPassword_tAmazonAuroraOutput_1;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_1);

				conn_tAmazonAuroraOutput_1 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_1,
								dbUser_tAmazonAuroraOutput_1,
								dbPwd_tAmazonAuroraOutput_1);

				resourceMap.put("conn_tAmazonAuroraOutput_1",
						conn_tAmazonAuroraOutput_1);
				conn_tAmazonAuroraOutput_1.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_1 = 10000;
				int commitCounter_tAmazonAuroraOutput_1 = 0;

				int count_tAmazonAuroraOutput_1 = 0;

				String insert_tAmazonAuroraOutput_1 = "INSERT INTO `"
						+ "portfolio"
						+ "` (`id`,`name`,`modelId`,`tags`,`isDisabled`,`disabledReason`,`isSleevePortfolio`,`sleeveContributionMethod`,`sleeveStrategyName`,`sleeveDistributionMethod`,`registrationId`,`IsDeleted`,`createdDate`,`createdBy`,`editedDate`,`editedBy`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_1 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_1 = conn_tAmazonAuroraOutput_1
						.prepareStatement(insert_tAmazonAuroraOutput_1);

				/**
				 * [tAmazonAuroraOutput_1_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_1_in", false);
				start_Hash.put("tAmazonAuroraOutput_1_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_in";

				int tos_count_tAmazonAuroraOutput_1_in = 0;

				/**
				 * [tAmazonAuroraOutput_1_in begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_3_out", false);
				start_Hash.put("tAmazonAuroraOutput_3_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_out";

				int tos_count_tAmazonAuroraOutput_3_out = 0;

				int nb_line_tAmazonAuroraOutput_3 = 0;
				int nb_line_update_tAmazonAuroraOutput_3 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_3 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_3 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_3 = 0;

				int deletedCount_tAmazonAuroraOutput_3 = 0;
				int updatedCount_tAmazonAuroraOutput_3 = 0;
				int insertedCount_tAmazonAuroraOutput_3 = 0;

				int rejectedCount_tAmazonAuroraOutput_3 = 0;

				String tableName_tAmazonAuroraOutput_3 = "account";
				boolean whetherReject_tAmazonAuroraOutput_3 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_3 = calendar_tAmazonAuroraOutput_3
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_3 = calendar_tAmazonAuroraOutput_3
						.getTime().getTime();
				long date_tAmazonAuroraOutput_3;

				java.sql.Connection conn_tAmazonAuroraOutput_3 = null;
				String dbProperties_tAmazonAuroraOutput_3 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_3 = null;
				if (dbProperties_tAmazonAuroraOutput_3 == null
						|| dbProperties_tAmazonAuroraOutput_3.trim().length() == 0) {
					url_tAmazonAuroraOutput_3 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_3 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_3;
				}
				String driverClass_tAmazonAuroraOutput_3 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_3 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_3 = context.password;

				String dbPwd_tAmazonAuroraOutput_3 = decryptedPassword_tAmazonAuroraOutput_3;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_3);

				conn_tAmazonAuroraOutput_3 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_3,
								dbUser_tAmazonAuroraOutput_3,
								dbPwd_tAmazonAuroraOutput_3);

				resourceMap.put("conn_tAmazonAuroraOutput_3",
						conn_tAmazonAuroraOutput_3);
				conn_tAmazonAuroraOutput_3.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_3 = 10000;
				int commitCounter_tAmazonAuroraOutput_3 = 0;

				int count_tAmazonAuroraOutput_3 = 0;

				String insert_tAmazonAuroraOutput_3 = "INSERT INTO `"
						+ "account"
						+ "` (`id`,`orionConnectExternalId`,`orionConnectFirmID`,`orionEclipseFirmId`,`accountId`,`accountNumber`,`name`,`portfolioId`,`householdId`,`YTDRealizedSTGL`,`YTDRealizedLTGL`,`SSN`,`sweepSymbol`,`custodianId`,`custodialAccountNumber`,`sleeveType`,`createdDate`,`householdName`,`accountTypeId`,`createdBy`,`editedDate`,`editedBy`,`isDeleted`,`advisorId`,`sweepSecurityId`,`systematicAmount`,`systematicDate`,`SMA`,`SMATradeable`,`BillingAccount`,`sleeveTarget`,`sleeveContributionPercent`,`sleeveDistributionPercent`,`sleeveToleranceLower`,`sleeveToleranceUpper`,`modelId`,`isDisabled`,`disabledReason`,`hashedSsn`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_3 = 1000;
				int batchSizeCounter_tAmazonAuroraOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_3 = conn_tAmazonAuroraOutput_3
						.prepareStatement(insert_tAmazonAuroraOutput_3);

				/**
				 * [tAmazonAuroraOutput_3_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_3_in", false);
				start_Hash.put("tAmazonAuroraOutput_3_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_in";

				int tos_count_tAmazonAuroraOutput_3_in = 0;

				/**
				 * [tAmazonAuroraOutput_3_in begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				tHash_Lookup_row6.initGet();

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
						.get("tHash_Lookup_row14"));

				row14Struct row14HashKey = new row14Struct();
				row14Struct row14Default = new row14Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
					int var1;
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				new_account_portfolio_creationStruct new_account_portfolio_creation_tmp = new new_account_portfolio_creationStruct();
				new_account_outputStruct new_account_output_tmp = new new_account_outputStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_8_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_8_out", false);
				start_Hash.put("tAmazonAuroraOutput_8_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_8";

				currentComponent = "tAmazonAuroraOutput_8_out";

				int tos_count_tAmazonAuroraOutput_8_out = 0;

				int nb_line_tAmazonAuroraOutput_8 = 0;
				int nb_line_update_tAmazonAuroraOutput_8 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_8 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_8 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_8 = 0;

				int deletedCount_tAmazonAuroraOutput_8 = 0;
				int updatedCount_tAmazonAuroraOutput_8 = 0;
				int insertedCount_tAmazonAuroraOutput_8 = 0;

				int rejectedCount_tAmazonAuroraOutput_8 = 0;

				String tableName_tAmazonAuroraOutput_8 = "account";
				boolean whetherReject_tAmazonAuroraOutput_8 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_8 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_8.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_8 = calendar_tAmazonAuroraOutput_8
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_8.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_8 = calendar_tAmazonAuroraOutput_8
						.getTime().getTime();
				long date_tAmazonAuroraOutput_8;

				java.sql.Connection conn_tAmazonAuroraOutput_8 = null;
				String dbProperties_tAmazonAuroraOutput_8 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_8 = null;
				if (dbProperties_tAmazonAuroraOutput_8 == null
						|| dbProperties_tAmazonAuroraOutput_8.trim().length() == 0) {
					url_tAmazonAuroraOutput_8 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_8 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_8
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_8 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_8 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_8;
				}
				String driverClass_tAmazonAuroraOutput_8 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_8 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_8 = context.password;

				String dbPwd_tAmazonAuroraOutput_8 = decryptedPassword_tAmazonAuroraOutput_8;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_8);

				conn_tAmazonAuroraOutput_8 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_8,
								dbUser_tAmazonAuroraOutput_8,
								dbPwd_tAmazonAuroraOutput_8);

				resourceMap.put("conn_tAmazonAuroraOutput_8",
						conn_tAmazonAuroraOutput_8);
				conn_tAmazonAuroraOutput_8.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_8 = 10000;
				int commitCounter_tAmazonAuroraOutput_8 = 0;

				int count_tAmazonAuroraOutput_8 = 0;

				String insert_tAmazonAuroraOutput_8 = "INSERT INTO `"
						+ "account"
						+ "` (`id`,`orionConnectExternalId`,`orionConnectFirmID`,`orionEclipseFirmId`,`accountId`,`accountNumber`,`name`,`portfolioId`,`householdId`,`YTDRealizedSTGL`,`YTDRealizedLTGL`,`SSN`,`sweepSymbol`,`custodianId`,`custodialAccountNumber`,`sleeveType`,`createdDate`,`householdName`,`accountTypeId`,`createdBy`,`editedDate`,`editedBy`,`isDeleted`,`advisorId`,`sweepSecurityId`,`systematicAmount`,`systematicDate`,`SMA`,`SMATradeable`,`BillingAccount`,`sleeveTarget`,`sleeveContributionPercent`,`sleeveDistributionPercent`,`sleeveToleranceLower`,`sleeveToleranceUpper`,`modelId`,`isDisabled`,`disabledReason`,`hashedSsn`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_8 = 1000;
				int batchSizeCounter_tAmazonAuroraOutput_8 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_8 = conn_tAmazonAuroraOutput_8
						.prepareStatement(insert_tAmazonAuroraOutput_8);

				/**
				 * [tAmazonAuroraOutput_8_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_8_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_8_in", false);
				start_Hash.put("tAmazonAuroraOutput_8_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_8";

				currentComponent = "tAmazonAuroraOutput_8_in";

				int tos_count_tAmazonAuroraOutput_8_in = 0;

				/**
				 * [tAmazonAuroraOutput_8_in begin ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());

				currentComponent = "tMap_11";

				int tos_count_tMap_11 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) globalMap
						.get("tHash_Lookup_row15"));

				row15Struct row15HashKey = new row15Struct();
				row15Struct row15Default = new row15Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				none_portfolio_account_creationStruct none_portfolio_account_creation_tmp = new none_portfolio_account_creationStruct();
				// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				int tos_count_tMap_8 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				household_portfolio_idStruct household_portfolio_id_tmp = new household_portfolio_idStruct();
				account_portfolio_idStruct account_portfolio_id_tmp = new account_portfolio_idStruct();
				none_portfolio_idStruct none_portfolio_id_tmp = new none_portfolio_idStruct();
				// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_4_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_4_out", false);
				start_Hash.put("tAmazonAuroraOutput_4_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_4";

				currentComponent = "tAmazonAuroraOutput_4_out";

				int tos_count_tAmazonAuroraOutput_4_out = 0;

				int updateKeyCount_tAmazonAuroraOutput_4 = 1;
				if (updateKeyCount_tAmazonAuroraOutput_4 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tAmazonAuroraOutput_4 = 0;
				int nb_line_update_tAmazonAuroraOutput_4 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_4 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_4 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_4 = 0;

				int deletedCount_tAmazonAuroraOutput_4 = 0;
				int updatedCount_tAmazonAuroraOutput_4 = 0;
				int insertedCount_tAmazonAuroraOutput_4 = 0;

				int rejectedCount_tAmazonAuroraOutput_4 = 0;

				String tableName_tAmazonAuroraOutput_4 = "account";
				boolean whetherReject_tAmazonAuroraOutput_4 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_4 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_4 = calendar_tAmazonAuroraOutput_4
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_4 = calendar_tAmazonAuroraOutput_4
						.getTime().getTime();
				long date_tAmazonAuroraOutput_4;

				java.sql.Connection conn_tAmazonAuroraOutput_4 = null;
				String dbProperties_tAmazonAuroraOutput_4 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_4 = null;
				if (dbProperties_tAmazonAuroraOutput_4 == null
						|| dbProperties_tAmazonAuroraOutput_4.trim().length() == 0) {
					url_tAmazonAuroraOutput_4 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_4 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_4
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_4 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_4 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_4;
				}
				String driverClass_tAmazonAuroraOutput_4 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_4 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_4 = context.password;

				String dbPwd_tAmazonAuroraOutput_4 = decryptedPassword_tAmazonAuroraOutput_4;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_4);

				conn_tAmazonAuroraOutput_4 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_4,
								dbUser_tAmazonAuroraOutput_4,
								dbPwd_tAmazonAuroraOutput_4);

				resourceMap.put("conn_tAmazonAuroraOutput_4",
						conn_tAmazonAuroraOutput_4);
				conn_tAmazonAuroraOutput_4.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_4 = 10000;
				int commitCounter_tAmazonAuroraOutput_4 = 0;
				int batchSize_tAmazonAuroraOutput_4 = 10000;
				int batchSizeCounter_tAmazonAuroraOutput_4 = 0;

				int count_tAmazonAuroraOutput_4 = 0;

				String update_tAmazonAuroraOutput_4 = "UPDATE `"
						+ "account"
						+ "` SET `id` = ?,`orionConnectFirmID` = ?,`orionEclipseFirmId` = ?,`accountId` = ?,`accountNumber` = ?,`name` = ?,`portfolioId` = ?,`householdId` = ?,`YTDRealizedSTGL` = ?,`YTDRealizedLTGL` = ?,`SSN` = ?,`sweepSymbol` = ?,`custodianId` = ?,`custodialAccountNumber` = ?,`sleeveType` = ?,`createdDate` = ?,`householdName` = ?,`accountTypeId` = ?,`createdBy` = ?,`editedDate` = ?,`editedBy` = ?,`isDeleted` = ?,`advisorId` = ?,`sweepSecurityId` = ?,`systematicAmount` = ?,`systematicDate` = ?,`SMA` = ?,`SMATradeable` = ?,`BillingAccount` = ?,`sleeveTarget` = ?,`sleeveContributionPercent` = ?,`sleeveDistributionPercent` = ?,`sleeveToleranceLower` = ?,`sleeveToleranceUpper` = ?,`modelId` = ?,`isDisabled` = ?,`disabledReason` = ?,`hashedSsn` = ? WHERE `orionConnectExternalId` = ?";

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_4 = conn_tAmazonAuroraOutput_4
						.prepareStatement(update_tAmazonAuroraOutput_4);

				/**
				 * [tAmazonAuroraOutput_4_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_4_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_4_in", false);
				start_Hash.put("tAmazonAuroraOutput_4_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_4";

				currentComponent = "tAmazonAuroraOutput_4_in";

				int tos_count_tAmazonAuroraOutput_4_in = 0;

				/**
				 * [tAmazonAuroraOutput_4_in begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) globalMap
						.get("tHash_Lookup_row16"));

				row16Struct row16HashKey = new row16Struct();
				row16Struct row16Default = new row16Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				update_old_accountsStruct update_old_accounts_tmp = new update_old_accountsStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_9_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_9_out", false);
				start_Hash.put("tAmazonAuroraOutput_9_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_9";

				currentComponent = "tAmazonAuroraOutput_9_out";

				int tos_count_tAmazonAuroraOutput_9_out = 0;

				int nb_line_tAmazonAuroraOutput_9 = 0;
				int nb_line_update_tAmazonAuroraOutput_9 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_9 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_9 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_9 = 0;

				int deletedCount_tAmazonAuroraOutput_9 = 0;
				int updatedCount_tAmazonAuroraOutput_9 = 0;
				int insertedCount_tAmazonAuroraOutput_9 = 0;

				int rejectedCount_tAmazonAuroraOutput_9 = 0;

				String tableName_tAmazonAuroraOutput_9 = "noDataFound_Account";
				boolean whetherReject_tAmazonAuroraOutput_9 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_9 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_9.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_9 = calendar_tAmazonAuroraOutput_9
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_9.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_9 = calendar_tAmazonAuroraOutput_9
						.getTime().getTime();
				long date_tAmazonAuroraOutput_9;

				java.sql.Connection conn_tAmazonAuroraOutput_9 = null;
				String dbProperties_tAmazonAuroraOutput_9 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_9 = null;
				if (dbProperties_tAmazonAuroraOutput_9 == null
						|| dbProperties_tAmazonAuroraOutput_9.trim().length() == 0) {
					url_tAmazonAuroraOutput_9 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_9 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_9
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_9 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_9 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonAuroraOutput_9;
				}
				String driverClass_tAmazonAuroraOutput_9 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_9 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_9 = context.password;

				String dbPwd_tAmazonAuroraOutput_9 = decryptedPassword_tAmazonAuroraOutput_9;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_9);

				conn_tAmazonAuroraOutput_9 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_9,
								dbUser_tAmazonAuroraOutput_9,
								dbPwd_tAmazonAuroraOutput_9);

				resourceMap.put("conn_tAmazonAuroraOutput_9",
						conn_tAmazonAuroraOutput_9);
				conn_tAmazonAuroraOutput_9.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_9 = 10000;
				int commitCounter_tAmazonAuroraOutput_9 = 0;

				int count_tAmazonAuroraOutput_9 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonAuroraOutput_9 = conn_tAmazonAuroraOutput_9
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonAuroraOutput_9 = dbMetaData_tAmazonAuroraOutput_9
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonAuroraOutput_9 = false;
				while (rsTable_tAmazonAuroraOutput_9.next()) {
					String table_tAmazonAuroraOutput_9 = rsTable_tAmazonAuroraOutput_9
							.getString("TABLE_NAME");
					if (table_tAmazonAuroraOutput_9
							.equalsIgnoreCase("noDataFound_Account")) {
						whetherExist_tAmazonAuroraOutput_9 = true;
						break;
					}
				}
				rsTable_tAmazonAuroraOutput_9.close();
				if (!whetherExist_tAmazonAuroraOutput_9) {
					java.sql.Statement stmtCreate_tAmazonAuroraOutput_9 = conn_tAmazonAuroraOutput_9
							.createStatement();
					stmtCreate_tAmazonAuroraOutput_9
							.execute("CREATE TABLE `"
									+ tableName_tAmazonAuroraOutput_9
									+ "`(`OrionFirmId` INT(10)  ,`ExternalId` INT(10)  ,`AccountId` VARCHAR(50)  ,`AccountNumber` VARCHAR(50)  ,`AccountName` VARCHAR(255)  ,`PortfolioId` VARCHAR(50)  ,`PortfolioName` VARCHAR(50)  ,`HouseholdId` INT(10)  ,`HouseholdName` VARCHAR(50)  ,`AccountType` VARCHAR(20)  ,`Taxable` INT(3)  ,`AccountYTDRealizedSTGL` FLOAT(10,2)  ,`AccountYTDRealizedLTGL` FLOAT(10,2)  ,`SSN` VARCHAR(255)  ,`SweepSymbol` VARCHAR(255)  ,`Custodian` VARCHAR(255)  ,`CustodialAccountNumber` VARCHAR(255)  ,`AdvisorName` VARCHAR(255)  ,`AdvisorExternalId` INT(10)  ,`SleeveType` VARCHAR(50)  ,`SleeveTarget` FLOAT(12,0)  ,`SleeveContributionPercent` FLOAT(12,0)  ,`SleeveDistributionPercent` FLOAT(12,0)  ,`SleeveToleranceLower` FLOAT(12,0)  ,`SleeveToleranceUpper` FLOAT(12,0)  ,`SMA` BIT(1)  ,`SMATradeable` VARCHAR(255)  ,`BillingAccount` VARCHAR(255)  ,`SystematicAmount` VARCHAR(255)  ,`SystematicDate` DATETIME ,`HashedSSN` VARCHAR(255)  ,`sleeveContributionMethod` VARCHAR(255)  ,`sleeveStrategyName` VARCHAR(255)  ,`sleeveDistributionMethod` VARCHAR(255)  ,`registrationId` INT(0)  )");
					stmtCreate_tAmazonAuroraOutput_9.close();
				}

				String insert_tAmazonAuroraOutput_9 = "INSERT INTO `"
						+ "noDataFound_Account"
						+ "` (`OrionFirmId`,`ExternalId`,`AccountId`,`AccountNumber`,`AccountName`,`PortfolioId`,`PortfolioName`,`HouseholdId`,`HouseholdName`,`AccountType`,`Taxable`,`AccountYTDRealizedSTGL`,`AccountYTDRealizedLTGL`,`SSN`,`SweepSymbol`,`Custodian`,`CustodialAccountNumber`,`AdvisorName`,`AdvisorExternalId`,`SleeveType`,`SleeveTarget`,`SleeveContributionPercent`,`SleeveDistributionPercent`,`SleeveToleranceLower`,`SleeveToleranceUpper`,`SMA`,`SMATradeable`,`BillingAccount`,`SystematicAmount`,`SystematicDate`,`HashedSSN`,`sleeveContributionMethod`,`sleeveStrategyName`,`sleeveDistributionMethod`,`registrationId`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_9 = 1000;
				int batchSizeCounter_tAmazonAuroraOutput_9 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_9 = conn_tAmazonAuroraOutput_9
						.prepareStatement(insert_tAmazonAuroraOutput_9);

				/**
				 * [tAmazonAuroraOutput_9_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_9_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_9_in", false);
				start_Hash.put("tAmazonAuroraOutput_9_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_9";

				currentComponent = "tAmazonAuroraOutput_9_in";

				int tos_count_tAmazonAuroraOutput_9_in = 0;

				/**
				 * [tAmazonAuroraOutput_9_in begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) globalMap
						.get("tHash_Lookup_row1"));

				row1Struct row1HashKey = new row1Struct();
				row1Struct row1Default = new row1Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<custodian_lookupStruct> tHash_Lookup_custodian_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<custodian_lookupStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<custodian_lookupStruct>) globalMap
						.get("tHash_Lookup_custodian_lookup"));

				custodian_lookupStruct custodian_lookupHashKey = new custodian_lookupStruct();
				custodian_lookupStruct custodian_lookupDefault = new custodian_lookupStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<advisor_lookupStruct> tHash_Lookup_advisor_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<advisor_lookupStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<advisor_lookupStruct>) globalMap
						.get("tHash_Lookup_advisor_lookup"));

				advisor_lookupStruct advisor_lookupHashKey = new advisor_lookupStruct();
				advisor_lookupStruct advisor_lookupDefault = new advisor_lookupStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<account_type_lookupStruct> tHash_Lookup_account_type_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<account_type_lookupStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<account_type_lookupStruct>) globalMap
						.get("tHash_Lookup_account_type_lookup"));

				account_type_lookupStruct account_type_lookupHashKey = new account_type_lookupStruct();
				account_type_lookupStruct account_type_lookupDefault = new account_type_lookupStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<account_lookupStruct> tHash_Lookup_account_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<account_lookupStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<account_lookupStruct>) globalMap
						.get("tHash_Lookup_account_lookup"));

				account_lookupStruct account_lookupHashKey = new account_lookupStruct();
				account_lookupStruct account_lookupDefault = new account_lookupStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				account_filterStruct account_filter_tmp = new account_filterStruct();
				noDataFount_joinRejectStruct noDataFount_joinReject_tmp = new noDataFount_joinRejectStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMap_15 begin ] start
				 */

				ok_Hash.put("tMap_15", false);
				start_Hash.put("tMap_15", System.currentTimeMillis());

				currentComponent = "tMap_15";

				int tos_count_tMap_15 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) globalMap
						.get("tHash_Lookup_row22"));

				row22Struct row22HashKey = new row22Struct();
				row22Struct row22Default = new row22Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_15__Struct {
				}
				Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
				copyOfmainoutStruct copyOfmainout_tmp = new copyOfmainoutStruct();
				// ###############################

				/**
				 * [tMap_15 begin ] stop
				 */

				/**
				 * [tMap_14 begin ] start
				 */

				ok_Hash.put("tMap_14", false);
				start_Hash.put("tMap_14", System.currentTimeMillis());

				currentComponent = "tMap_14";

				int tos_count_tMap_14 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) globalMap
						.get("tHash_Lookup_row21"));

				row21Struct row21HashKey = new row21Struct();
				row21Struct row21Default = new row21Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_14__Struct {
				}
				Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfsStruct copyOfs_tmp = new copyOfsStruct();
				// ###############################

				/**
				 * [tMap_14 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_19_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_19_out", false);
				start_Hash.put("tAmazonAuroraInput_19_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_19";

				currentComponent = "tAmazonAuroraInput_19_out";

				int tos_count_tAmazonAuroraInput_19_out = 0;

				/**
				 * [tAmazonAuroraInput_19_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_19_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_19_in", false);
				start_Hash.put("tAmazonAuroraInput_19_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_19";

				currentComponent = "tAmazonAuroraInput_19_in";

				int tos_count_tAmazonAuroraInput_19_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_19_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_19_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_19_in = calendar_tAmazonAuroraInput_19_in
						.getTime();
				int nb_line_tAmazonAuroraInput_19_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_19_in = null;
				String driverClass_tAmazonAuroraInput_19_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_19_in);
				String dbUser_tAmazonAuroraInput_19_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_19_in = context.password;

				String dbPwd_tAmazonAuroraInput_19_in = decryptedPassword_tAmazonAuroraInput_19_in;

				String url_tAmazonAuroraInput_19_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_19_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_19_in,
								dbUser_tAmazonAuroraInput_19_in,
								dbPwd_tAmazonAuroraInput_19_in);

				java.sql.Statement stmt_tAmazonAuroraInput_19_in = conn_tAmazonAuroraInput_19_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_19_in = "select distinct OrionFirmId from account_"
						+ context.firmId
						+ "_"
						+ context.date
						+ " where SleeveType ='None'";

				globalMap.put("tAmazonAuroraInput_19_QUERY",
						dbquery_tAmazonAuroraInput_19_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_19_in = null;
				try {
					rs_tAmazonAuroraInput_19_in = stmt_tAmazonAuroraInput_19_in
							.executeQuery(dbquery_tAmazonAuroraInput_19_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_19_in = rs_tAmazonAuroraInput_19_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_19_in = rsmd_tAmazonAuroraInput_19_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_19_in = null;

					while (rs_tAmazonAuroraInput_19_in.next()) {
						nb_line_tAmazonAuroraInput_19_in++;

						if (colQtyInRs_tAmazonAuroraInput_19_in < 1) {
							row_tAmazonAuroraInput_19_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_19_in.getObject(1) != null) {
								row_tAmazonAuroraInput_19_in.OrionFirmId = rs_tAmazonAuroraInput_19_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_19_in.OrionFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_19_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_19_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_19";

						currentComponent = "tAmazonAuroraInput_19_in";

						tos_count_tAmazonAuroraInput_19_in++;

						/**
						 * [tAmazonAuroraInput_19_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_19_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_19";

						currentComponent = "tAmazonAuroraInput_19_out";

						row20 = row_tAmazonAuroraInput_19_in;

						tos_count_tAmazonAuroraInput_19_out++;

						/**
						 * [tAmazonAuroraInput_19_out main ] stop
						 */

						/**
						 * [tMap_14 main ] start
						 */

						currentComponent = "tMap_14";

						boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_14 = false;
						boolean mainRowRejected_tMap_14 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row21"
						// /////////////////////////////////////////////

						boolean forceLooprow21 = false;

						row21Struct row21ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_14) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_14 = false;

							row21HashKey.orionConnectFirmId = row20.OrionFirmId;

							row21HashKey.hashCodeDirty = true;

							tHash_Lookup_row21.lookup(row21HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row21 != null
								&& tHash_Lookup_row21.getCount(row21HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row21' and it contains more one result from keys :  row21.orionConnectFirmId = '"
							// + row21HashKey.orionConnectFirmId + "'");
						} // G 071

						row21Struct row21 = null;

						row21Struct fromLookup_row21 = null;
						row21 = row21Default;

						if (tHash_Lookup_row21 != null
								&& tHash_Lookup_row21.hasNext()) { // G 099

							fromLookup_row21 = tHash_Lookup_row21.next();

						} // G 099

						if (fromLookup_row21 != null) {
							row21 = fromLookup_row21;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
							// ###############################
							// # Output tables

							copyOfs = null;

							// # Output table : 'copyOfs'
							copyOfs_tmp.OrionFirmId = row20.OrionFirmId;
							copyOfs_tmp.orionEclipseFirmName = row21.orionEclipseFirmName;
							copyOfs = copyOfs_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_14 = false;

						tos_count_tMap_14++;

						/**
						 * [tMap_14 main ] stop
						 */
						// Start of branch "copyOfs"
						if (copyOfs != null) {

							/**
							 * [tMap_15 main ] start
							 */

							currentComponent = "tMap_15";

							boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_15 = false;
							boolean mainRowRejected_tMap_15 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row22"
							// /////////////////////////////////////////////

							boolean forceLooprow22 = false;

							row22Struct row22ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_15) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_15 = false;

								row22HashKey.firm = copyOfs.orionEclipseFirmName;

								row22HashKey.hashCodeDirty = true;

								tHash_Lookup_row22.lookup(row22HashKey);

								if (!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_15 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row22 != null
									&& tHash_Lookup_row22
											.getCount(row22HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row22' and it contains more one result from keys :  row22.firm = '"
								// + row22HashKey.firm + "'");
							} // G 071

							row22Struct row22 = null;

							row22Struct fromLookup_row22 = null;
							row22 = row22Default;

							if (tHash_Lookup_row22 != null
									&& tHash_Lookup_row22.hasNext()) { // G 099

								fromLookup_row22 = tHash_Lookup_row22.next();

							} // G 099

							if (fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
								// ###############################
								// # Output tables

								copyOfmainout = null;
								copyOfout1 = null;

								if (!rejectedInnerJoin_tMap_15) {

									// # Output table : 'copyOfmainout'
									copyOfmainout_tmp.firm = copyOfs.OrionFirmId;
									copyOfmainout = copyOfmainout_tmp;
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'copyOfout1'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_15) {
									copyOfout1_tmp.firm = copyOfs.OrionFirmId;
									copyOfout1 = copyOfout1_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_15 = false;

							tos_count_tMap_15++;

							/**
							 * [tMap_15 main ] stop
							 */
							// Start of branch "copyOfout1"
							if (copyOfout1 != null) {

								/**
								 * [tJavaRow_7 main ] start
								 */

								currentComponent = "tJavaRow_7";

								context.firmids = copyOfout1.firm;

								nb_line_tJavaRow_7++;

								tos_count_tJavaRow_7++;

								/**
								 * [tJavaRow_7 main ] stop
								 */

							} // End of branch "copyOfout1"

							// Start of branch "copyOfmainout"
							if (copyOfmainout != null) {
								row5 = null;

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row1"
								// /////////////////////////////////////////////

								boolean forceLooprow1 = false;

								row1Struct row1ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									row1HashKey.OrionFirmId = copyOfmainout.firm;

									row1HashKey.hashCodeDirty = true;

									tHash_Lookup_row1.lookup(row1HashKey);

									if (!tHash_Lookup_row1.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_2 = true;

										forceLooprow1 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow1 = true;
								} // G 21

								row1Struct row1 = null;

								while ((tHash_Lookup_row1 != null && tHash_Lookup_row1
										.hasNext()) || forceLooprow1) { // G_TM_M_043

									// CALL close loop of lookup 'row1'

									row1Struct fromLookup_row1 = null;
									row1 = row1Default;

									if (!forceLooprow1) { // G 46

										fromLookup_row1 = tHash_Lookup_row1
												.next();

										if (fromLookup_row1 != null) {
											row1 = fromLookup_row1;
										}

									} // G 46

									forceLooprow1 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "custodian_lookup"
									// /////////////////////////////////////////////

									boolean forceLoopcustodian_lookup = false;

									custodian_lookupStruct custodian_lookupObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_2 = false;

										custodian_lookupHashKey.name = row1.Custodian;

										custodian_lookupHashKey.hashCodeDirty = true;

										tHash_Lookup_custodian_lookup
												.lookup(custodian_lookupHashKey);

									} // G_TM_M_020

									if (tHash_Lookup_custodian_lookup != null
											&& tHash_Lookup_custodian_lookup
													.getCount(custodian_lookupHashKey) > 1) { // G
																								// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'custodian_lookup' and it contains more one result from keys :  custodian_lookup.name = '"
										// + custodian_lookupHashKey.name +
										// "'");
									} // G 071

									custodian_lookupStruct custodian_lookup = null;

									custodian_lookupStruct fromLookup_custodian_lookup = null;
									custodian_lookup = custodian_lookupDefault;

									if (tHash_Lookup_custodian_lookup != null
											&& tHash_Lookup_custodian_lookup
													.hasNext()) { // G 099

										fromLookup_custodian_lookup = tHash_Lookup_custodian_lookup
												.next();

									} // G 099

									if (fromLookup_custodian_lookup != null) {
										custodian_lookup = fromLookup_custodian_lookup;
									}

									// /////////////////////////////////////////////
									// Starting Lookup Table "advisor_lookup"
									// /////////////////////////////////////////////

									boolean forceLoopadvisor_lookup = false;

									advisor_lookupStruct advisor_lookupObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_2 = false;

										advisor_lookupHashKey.name = row1.AdvisorName;

										advisor_lookupHashKey.hashCodeDirty = true;

										tHash_Lookup_advisor_lookup
												.lookup(advisor_lookupHashKey);

									} // G_TM_M_020

									if (tHash_Lookup_advisor_lookup != null
											&& tHash_Lookup_advisor_lookup
													.getCount(advisor_lookupHashKey) > 1) { // G
																							// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'advisor_lookup' and it contains more one result from keys :  advisor_lookup.name = '"
										// + advisor_lookupHashKey.name + "'");
									} // G 071

									advisor_lookupStruct advisor_lookup = null;

									advisor_lookupStruct fromLookup_advisor_lookup = null;
									advisor_lookup = advisor_lookupDefault;

									if (tHash_Lookup_advisor_lookup != null
											&& tHash_Lookup_advisor_lookup
													.hasNext()) { // G 099

										fromLookup_advisor_lookup = tHash_Lookup_advisor_lookup
												.next();

									} // G 099

									if (fromLookup_advisor_lookup != null) {
										advisor_lookup = fromLookup_advisor_lookup;
									}

									// /////////////////////////////////////////////
									// Starting Lookup Table
									// "account_type_lookup"
									// /////////////////////////////////////////////

									boolean forceLoopaccount_type_lookup = false;

									account_type_lookupStruct account_type_lookupObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_2 = false;

										account_type_lookupHashKey.name = row1.AccountType;

										account_type_lookupHashKey.hashCodeDirty = true;

										tHash_Lookup_account_type_lookup
												.lookup(account_type_lookupHashKey);

									} // G_TM_M_020

									if (tHash_Lookup_account_type_lookup != null
											&& tHash_Lookup_account_type_lookup
													.getCount(account_type_lookupHashKey) > 1) { // G
																									// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'account_type_lookup' and it contains more one result from keys :  account_type_lookup.name = '"
										// + account_type_lookupHashKey.name +
										// "'");
									} // G 071

									account_type_lookupStruct account_type_lookup = null;

									account_type_lookupStruct fromLookup_account_type_lookup = null;
									account_type_lookup = account_type_lookupDefault;

									if (tHash_Lookup_account_type_lookup != null
											&& tHash_Lookup_account_type_lookup
													.hasNext()) { // G 099

										fromLookup_account_type_lookup = tHash_Lookup_account_type_lookup
												.next();

									} // G 099

									if (fromLookup_account_type_lookup != null) {
										account_type_lookup = fromLookup_account_type_lookup;
									}

									// /////////////////////////////////////////////
									// Starting Lookup Table "account_lookup"
									// /////////////////////////////////////////////

									boolean forceLoopaccount_lookup = false;

									account_lookupStruct account_lookupObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_2 = false;

										account_lookupHashKey.orionConnectExternalId = row1.ExternalId;

										account_lookupHashKey.hashCodeDirty = true;

										tHash_Lookup_account_lookup
												.lookup(account_lookupHashKey);

									} // G_TM_M_020

									if (tHash_Lookup_account_lookup != null
											&& tHash_Lookup_account_lookup
													.getCount(account_lookupHashKey) > 1) { // G
																							// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'account_lookup' and it contains more one result from keys :  account_lookup.orionConnectExternalId = '"
										// +
										// account_lookupHashKey.orionConnectExternalId
										// + "'");
									} // G 071

									account_lookupStruct account_lookup = null;

									account_lookupStruct fromLookup_account_lookup = null;
									account_lookup = account_lookupDefault;

									if (tHash_Lookup_account_lookup != null
											&& tHash_Lookup_account_lookup
													.hasNext()) { // G 099

										fromLookup_account_lookup = tHash_Lookup_account_lookup
												.next();

									} // G 099

									if (fromLookup_account_lookup != null) {
										account_lookup = fromLookup_account_lookup;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
										// ###############################
										// # Output tables

										account_filter = null;
										noDataFount_joinReject = null;

										if (!rejectedInnerJoin_tMap_2) {

											// # Output table : 'account_filter'
											account_filter_tmp.OrionFirmId = row1.OrionFirmId;
											account_filter_tmp.ExternalId = row1.ExternalId;
											account_filter_tmp.AccountId = row1.AccountId;
											account_filter_tmp.AccountNumber = row1.AccountNumber;
											account_filter_tmp.AccountName = row1.AccountName;
											account_filter_tmp.PortfolioId = row1.PortfolioId;
											account_filter_tmp.PortfolioName = row1.PortfolioName;
											account_filter_tmp.HouseholdId = row1.HouseholdId;
											account_filter_tmp.HouseholdName = row1.HouseholdName;
											account_filter_tmp.accountTypeId = account_type_lookup.id;
											account_filter_tmp.AccountYTDRealizedSTGL = row1.AccountYTDRealizedSTGL;
											account_filter_tmp.AccountYTDRealizedLTGL = row1.AccountYTDRealizedLTGL;
											account_filter_tmp.SSN = row1.SSN;
											account_filter_tmp.SweepSymbol = row1.SweepSymbol;
											account_filter_tmp.custodianId = custodian_lookup.id;
											account_filter_tmp.advisorId = advisor_lookup.id;
											account_filter_tmp.SleeveType = row1.SleeveType;
											account_filter_tmp.SleeveTarget = row1.SleeveTarget;
											account_filter_tmp.SleeveContributionPercent = row1.SleeveContributionPercent;
											account_filter_tmp.SleeveDistributionPercent = row1.SleeveDistributionPercent;
											account_filter_tmp.SleeveToleranceLower = row1.SleeveToleranceLower;
											account_filter_tmp.SleeveToleranceUpper = row1.SleeveToleranceUpper;
											account_filter_tmp.SMA = row1.SMA;
											account_filter_tmp.SMATradeable = row1.SMATradeable;
											account_filter_tmp.BillingAccount = row1.BillingAccount;
											account_filter_tmp.SystematicAmount = row1.SystematicAmount;
											account_filter_tmp.SystematicDate = row1.SystematicDate;
											account_filter_tmp.existingAccountNumber = account_lookup.accountNumber;
											account_filter_tmp.existingAccountPortfolioId = account_lookup.portfolioId;
											account_filter_tmp.preferenceOption = context.preferenceOption;
											account_filter_tmp.HashedSSN = row1.HashedSSN;
											account_filter_tmp.sleeveContributionMethod = row1.sleeveContributionMethod;
											account_filter_tmp.sleeveStrategyName = row1.sleeveStrategyName;
											account_filter_tmp.sleeveDistributionMethod = row1.sleeveDistributionMethod;
											account_filter_tmp.registrationId = row1.registrationId;
											account_filter = account_filter_tmp;
										} // closing inner join bracket (1)
											// ###### START REJECTS #####

										// # Output reject table :
										// 'noDataFount_joinReject'
										// # Filter conditions
										if (rejectedInnerJoin_tMap_2) {
											noDataFount_joinReject_tmp.OrionFirmId = row1.OrionFirmId;
											noDataFount_joinReject_tmp.ExternalId = row1.ExternalId;
											noDataFount_joinReject_tmp.AccountId = row1.AccountId;
											noDataFount_joinReject_tmp.AccountNumber = row1.AccountNumber;
											noDataFount_joinReject_tmp.AccountName = row1.AccountName;
											noDataFount_joinReject_tmp.PortfolioId = row1.PortfolioId;
											noDataFount_joinReject_tmp.PortfolioName = row1.PortfolioName;
											noDataFount_joinReject_tmp.HouseholdId = row1.HouseholdId;
											noDataFount_joinReject_tmp.HouseholdName = row1.HouseholdName;
											noDataFount_joinReject_tmp.AccountType = row1.AccountType;
											noDataFount_joinReject_tmp.Taxable = row1.Taxable;
											noDataFount_joinReject_tmp.AccountYTDRealizedSTGL = row1.AccountYTDRealizedSTGL;
											noDataFount_joinReject_tmp.AccountYTDRealizedLTGL = row1.AccountYTDRealizedLTGL;
											noDataFount_joinReject_tmp.SSN = row1.SSN;
											noDataFount_joinReject_tmp.SweepSymbol = row1.SweepSymbol;
											noDataFount_joinReject_tmp.Custodian = row1.Custodian;
											noDataFount_joinReject_tmp.CustodialAccountNumber = row1.CustodialAccountNumber;
											noDataFount_joinReject_tmp.AdvisorName = row1.AdvisorName;
											noDataFount_joinReject_tmp.AdvisorExternalId = row1.AdvisorExternalId;
											noDataFount_joinReject_tmp.SleeveType = row1.SleeveType;
											noDataFount_joinReject_tmp.SleeveTarget = row1.SleeveTarget;
											noDataFount_joinReject_tmp.SleeveContributionPercent = row1.SleeveContributionPercent;
											noDataFount_joinReject_tmp.SleeveDistributionPercent = row1.SleeveDistributionPercent;
											noDataFount_joinReject_tmp.SleeveToleranceLower = row1.SleeveToleranceLower;
											noDataFount_joinReject_tmp.SleeveToleranceUpper = row1.SleeveToleranceUpper;
											noDataFount_joinReject_tmp.SMA = row1.SMA;
											noDataFount_joinReject_tmp.SMATradeable = row1.SMATradeable;
											noDataFount_joinReject_tmp.BillingAccount = row1.BillingAccount;
											noDataFount_joinReject_tmp.SystematicAmount = row1.SystematicAmount;
											noDataFount_joinReject_tmp.SystematicDate = row1.SystematicDate;
											noDataFount_joinReject_tmp.HashedSSN = row1.HashedSSN;
											noDataFount_joinReject_tmp.sleeveContributionMethod = row1.sleeveContributionMethod;
											noDataFount_joinReject_tmp.sleeveStrategyName = row1.sleeveStrategyName;
											noDataFount_joinReject_tmp.sleeveDistributionMethod = row1.sleeveDistributionMethod;
											noDataFount_joinReject_tmp.registrationId = row1.registrationId;
											noDataFount_joinReject = noDataFount_joinReject_tmp;
										} // closing filter/reject
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_2 = false;

									tos_count_tMap_2++;

									/**
									 * [tMap_2 main ] stop
									 */
									// Start of branch "account_filter"
									if (account_filter != null) {
										row5 = null;

										/**
										 * [tFilterRow_1 main ] start
										 */

										currentComponent = "tFilterRow_1";

										row5 = null;
										row2 = null;
										Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
												"&&");
										ope_tFilterRow_1
												.matches(
														(account_filter.existingAccountNumber == null),
														"existingAccountNumber==null failed");

										if (ope_tFilterRow_1.getMatchFlag()) {
											if (row2 == null) {
												row2 = new row2Struct();
											}
											row2.OrionFirmId = account_filter.OrionFirmId;
											row2.ExternalId = account_filter.ExternalId;
											row2.AccountId = account_filter.AccountId;
											row2.AccountNumber = account_filter.AccountNumber;
											row2.AccountName = account_filter.AccountName;
											row2.PortfolioId = account_filter.PortfolioId;
											row2.PortfolioName = account_filter.PortfolioName;
											row2.HouseholdId = account_filter.HouseholdId;
											row2.HouseholdName = account_filter.HouseholdName;
											row2.accountTypeId = account_filter.accountTypeId;
											row2.AccountYTDRealizedSTGL = account_filter.AccountYTDRealizedSTGL;
											row2.AccountYTDRealizedLTGL = account_filter.AccountYTDRealizedLTGL;
											row2.SSN = account_filter.SSN;
											row2.SweepSymbol = account_filter.SweepSymbol;
											row2.custodianId = account_filter.custodianId;
											row2.advisorId = account_filter.advisorId;
											row2.SleeveType = account_filter.SleeveType;
											row2.SleeveTarget = account_filter.SleeveTarget;
											row2.SleeveContributionPercent = account_filter.SleeveContributionPercent;
											row2.SleeveDistributionPercent = account_filter.SleeveDistributionPercent;
											row2.SleeveToleranceLower = account_filter.SleeveToleranceLower;
											row2.SleeveToleranceUpper = account_filter.SleeveToleranceUpper;
											row2.SMA = account_filter.SMA;
											row2.SMATradeable = account_filter.SMATradeable;
											row2.BillingAccount = account_filter.BillingAccount;
											row2.SystematicAmount = account_filter.SystematicAmount;
											row2.SystematicDate = account_filter.SystematicDate;
											row2.existingAccountNumber = account_filter.existingAccountNumber;
											row2.existingAccountPortfolioId = account_filter.existingAccountPortfolioId;
											row2.preferenceOption = account_filter.preferenceOption;
											row2.HashedSSN = account_filter.HashedSSN;
											row2.sleeveContributionMethod = account_filter.sleeveContributionMethod;
											row2.sleeveStrategyName = account_filter.sleeveStrategyName;
											row2.sleeveDistributionMethod = account_filter.sleeveDistributionMethod;
											row2.registrationId = account_filter.registrationId;
											nb_line_ok_tFilterRow_1++;
										} else {
											if (row5 == null) {
												row5 = new row5Struct();
											}
											row5.OrionFirmId = account_filter.OrionFirmId;
											row5.ExternalId = account_filter.ExternalId;
											row5.AccountId = account_filter.AccountId;
											row5.AccountNumber = account_filter.AccountNumber;
											row5.AccountName = account_filter.AccountName;
											row5.PortfolioId = account_filter.PortfolioId;
											row5.PortfolioName = account_filter.PortfolioName;
											row5.HouseholdId = account_filter.HouseholdId;
											row5.HouseholdName = account_filter.HouseholdName;
											row5.accountTypeId = account_filter.accountTypeId;
											row5.AccountYTDRealizedSTGL = account_filter.AccountYTDRealizedSTGL;
											row5.AccountYTDRealizedLTGL = account_filter.AccountYTDRealizedLTGL;
											row5.SSN = account_filter.SSN;
											row5.SweepSymbol = account_filter.SweepSymbol;
											row5.custodianId = account_filter.custodianId;
											row5.advisorId = account_filter.advisorId;
											row5.SleeveType = account_filter.SleeveType;
											row5.SleeveTarget = account_filter.SleeveTarget;
											row5.SleeveContributionPercent = account_filter.SleeveContributionPercent;
											row5.SleeveDistributionPercent = account_filter.SleeveDistributionPercent;
											row5.SleeveToleranceLower = account_filter.SleeveToleranceLower;
											row5.SleeveToleranceUpper = account_filter.SleeveToleranceUpper;
											row5.SMA = account_filter.SMA;
											row5.SMATradeable = account_filter.SMATradeable;
											row5.BillingAccount = account_filter.BillingAccount;
											row5.SystematicAmount = account_filter.SystematicAmount;
											row5.SystematicDate = account_filter.SystematicDate;
											row5.existingAccountNumber = account_filter.existingAccountNumber;
											row5.existingAccountPortfolioId = account_filter.existingAccountPortfolioId;
											row5.preferenceOption = account_filter.preferenceOption;
											row5.HashedSSN = account_filter.HashedSSN;
											row5.sleeveContributionMethod = account_filter.sleeveContributionMethod;
											row5.sleeveStrategyName = account_filter.sleeveStrategyName;
											row5.sleeveDistributionMethod = account_filter.sleeveDistributionMethod;
											row5.registrationId = account_filter.registrationId;
											row5.errorMessage = ope_tFilterRow_1
													.getErrorMsg();
											nb_line_reject_tFilterRow_1++;
										}

										nb_line_tFilterRow_1++;

										tos_count_tFilterRow_1++;

										/**
										 * [tFilterRow_1 main ] stop
										 */
										// Start of branch "row2"
										if (row2 != null) {

											/**
											 * [tMap_8 main ] start
											 */

											currentComponent = "tMap_8";

											boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_8 = false;
											boolean mainRowRejected_tMap_8 = false;

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
												// ###############################
												// # Output tables

												household_portfolio_id = null;
												account_portfolio_id = null;
												none_portfolio_id = null;

												// # Output table :
												// 'household_portfolio_id'
												// # Filter conditions
												if (

												row2.preferenceOption
														.equals("Household")

												) {
													household_portfolio_id_tmp.orionConnectExternalId = row2.ExternalId;
													household_portfolio_id_tmp.orionConnectFirmID = row2.OrionFirmId;
													household_portfolio_id_tmp.accountId = row2.AccountId;
													household_portfolio_id_tmp.accountNumber = row2.AccountNumber;
													household_portfolio_id_tmp.name = row2.AccountName;
													household_portfolio_id_tmp.portfolioId = row2.PortfolioId;
													household_portfolio_id_tmp.accountTypeId = row2.accountTypeId;
													household_portfolio_id_tmp.YTDRealizedSTGL = row2.AccountYTDRealizedSTGL;
													household_portfolio_id_tmp.YTDRealizedLTGL = row2.AccountYTDRealizedLTGL;
													household_portfolio_id_tmp.SSN = row2.SSN;
													household_portfolio_id_tmp.sweepSymbol = row2.SweepSymbol;
													household_portfolio_id_tmp.custodianId = row2.custodianId;
													household_portfolio_id_tmp.custodialAccountNumber = null;
													household_portfolio_id_tmp.sleeveType = row2.SleeveType;
													household_portfolio_id_tmp.householdName = row2.HouseholdName;
													household_portfolio_id_tmp.createdDate = TalendDate
															.getCurrentDate();
													household_portfolio_id_tmp.createdBy = 1;
													household_portfolio_id_tmp.editedDate = null;
													household_portfolio_id_tmp.editedBy = 1;
													household_portfolio_id_tmp.isDeleted = null;
													household_portfolio_id_tmp.advisorId = row2.advisorId;
													household_portfolio_id_tmp.sweepSecurityId = null;
													household_portfolio_id_tmp.systematicAmount = row2.SystematicAmount;
													household_portfolio_id_tmp.systematicDate = row2.SystematicDate;
													household_portfolio_id_tmp.SMA = row2.SMA;
													household_portfolio_id_tmp.SMATradeable = row2.SMATradeable;
													household_portfolio_id_tmp.BillingAccount = row2.BillingAccount;
													household_portfolio_id_tmp.sleeveTarget = row2.SleeveTarget;
													household_portfolio_id_tmp.sleeveContributionPercent = row2.SleeveContributionPercent;
													household_portfolio_id_tmp.sleeveDistributionPercent = row2.SleeveDistributionPercent;
													household_portfolio_id_tmp.sleeveToleranceLower = row2.SleeveToleranceLower;
													household_portfolio_id_tmp.sleeveToleranceUpper = row2.SleeveToleranceUpper;
													household_portfolio_id_tmp.modelId = null;
													household_portfolio_id_tmp.isDisabled = null;
													household_portfolio_id_tmp.disabledReason = null;
													household_portfolio_id_tmp.inputPortfolioName = row2.PortfolioName;
													household_portfolio_id_tmp.HashedSSN = row2.HashedSSN;
													household_portfolio_id = household_portfolio_id_tmp;
												} // closing filter/reject

												// # Output table :
												// 'account_portfolio_id'
												// # Filter conditions
												if (

												row2.preferenceOption
														.equals("Account")

												) {
													account_portfolio_id_tmp.orionConnectExternalId = row2.ExternalId;
													account_portfolio_id_tmp.orionConnectFirmID = row2.OrionFirmId;
													account_portfolio_id_tmp.accountId = row2.AccountId;
													account_portfolio_id_tmp.accountNumber = row2.AccountNumber;
													account_portfolio_id_tmp.name = row2.AccountName;
													account_portfolio_id_tmp.portfolioId = row2.PortfolioId;
													account_portfolio_id_tmp.accountTypeId = row2.accountTypeId;
													account_portfolio_id_tmp.YTDRealizedSTGL = row2.AccountYTDRealizedSTGL;
													account_portfolio_id_tmp.YTDRealizedLTGL = row2.AccountYTDRealizedLTGL;
													account_portfolio_id_tmp.SSN = row2.SSN;
													account_portfolio_id_tmp.sweepSymbol = row2.SweepSymbol;
													account_portfolio_id_tmp.custodianId = row2.custodianId;
													account_portfolio_id_tmp.custodialAccountNumber = null;
													account_portfolio_id_tmp.sleeveType = row2.SleeveType;
													account_portfolio_id_tmp.householdName = row2.HouseholdName;
													account_portfolio_id_tmp.createdDate = TalendDate
															.getCurrentDate();
													account_portfolio_id_tmp.createdBy = 1;
													account_portfolio_id_tmp.editedDate = null;
													account_portfolio_id_tmp.editedBy = 1;
													account_portfolio_id_tmp.isDeleted = null;
													account_portfolio_id_tmp.advisorId = row2.advisorId;
													account_portfolio_id_tmp.sweepSecurityId = null;
													account_portfolio_id_tmp.systematicAmount = row2.SystematicAmount;
													account_portfolio_id_tmp.systematicDate = row2.SystematicDate;
													account_portfolio_id_tmp.SMA = row2.SMA;
													account_portfolio_id_tmp.SMATradeable = row2.SMATradeable;
													account_portfolio_id_tmp.BillingAccount = row2.BillingAccount;
													account_portfolio_id_tmp.sleeveTarget = row2.SleeveTarget;
													account_portfolio_id_tmp.sleeveContributionPercent = row2.SleeveContributionPercent;
													account_portfolio_id_tmp.sleeveDistributionPercent = row2.SleeveDistributionPercent;
													account_portfolio_id_tmp.sleeveToleranceLower = row2.SleeveToleranceLower;
													account_portfolio_id_tmp.sleeveToleranceUpper = row2.SleeveToleranceUpper;
													account_portfolio_id_tmp.modelId = null;
													account_portfolio_id_tmp.isDisabled = null;
													account_portfolio_id_tmp.disabledReason = null;
													account_portfolio_id_tmp.inputPortfolioName = row2.PortfolioName;
													account_portfolio_id_tmp.HashedSSN = row2.HashedSSN;
													account_portfolio_id_tmp.sleeveContributionMethod = row2.sleeveContributionMethod;
													account_portfolio_id_tmp.sleeveStrategyName = row2.sleeveStrategyName;
													account_portfolio_id_tmp.sleeveDistributionMethod = row2.sleeveDistributionMethod;
													account_portfolio_id_tmp.registrationId = row2.registrationId;
													account_portfolio_id = account_portfolio_id_tmp;
												} // closing filter/reject

												// # Output table :
												// 'none_portfolio_id'
												// # Filter conditions
												if (

												row2.preferenceOption
														.equals("None")

												) {
													none_portfolio_id_tmp.orionConnectExternalId = row2.ExternalId;
													none_portfolio_id_tmp.orionConnectFirmID = row2.OrionFirmId;
													none_portfolio_id_tmp.accountId = row2.AccountId;
													none_portfolio_id_tmp.accountNumber = row2.AccountNumber;
													none_portfolio_id_tmp.name = row2.AccountName;
													none_portfolio_id_tmp.portfolioId = null;
													none_portfolio_id_tmp.accountTypeId = row2.accountTypeId;
													none_portfolio_id_tmp.YTDRealizedSTGL = row2.AccountYTDRealizedSTGL;
													none_portfolio_id_tmp.YTDRealizedLTGL = row2.AccountYTDRealizedLTGL;
													none_portfolio_id_tmp.SSN = row2.SSN;
													none_portfolio_id_tmp.sweepSymbol = row2.SweepSymbol;
													none_portfolio_id_tmp.custodianId = row2.custodianId;
													none_portfolio_id_tmp.custodialAccountNumber = null;
													none_portfolio_id_tmp.sleeveType = row2.SleeveType;
													none_portfolio_id_tmp.householdName = row2.HouseholdName;
													none_portfolio_id_tmp.createdDate = TalendDate
															.getCurrentDate();
													none_portfolio_id_tmp.createdBy = 1;
													none_portfolio_id_tmp.editedDate = null;
													none_portfolio_id_tmp.editedBy = 1;
													none_portfolio_id_tmp.isDeleted = null;
													none_portfolio_id_tmp.advisorId = row2.advisorId;
													none_portfolio_id_tmp.sweepSecurityId = null;
													none_portfolio_id_tmp.systematicAmount = row2.SystematicAmount;
													none_portfolio_id_tmp.systematicDate = row2.SystematicDate;
													none_portfolio_id_tmp.SMA = row2.SMA;
													none_portfolio_id_tmp.SMATradeable = row2.SMATradeable;
													none_portfolio_id_tmp.BillingAccount = row2.BillingAccount;
													none_portfolio_id_tmp.sleeveTarget = row2.SleeveTarget;
													none_portfolio_id_tmp.sleeveContributionPercent = row2.SleeveContributionPercent;
													none_portfolio_id_tmp.sleeveDistributionPercent = row2.SleeveDistributionPercent;
													none_portfolio_id_tmp.sleeveToleranceLower = row2.SleeveToleranceLower;
													none_portfolio_id_tmp.sleeveToleranceUpper = row2.SleeveToleranceUpper;
													none_portfolio_id_tmp.modelId = null;
													none_portfolio_id_tmp.isDisabled = null;
													none_portfolio_id_tmp.disabledReason = null;
													none_portfolio_id_tmp.HashedSSN = row2.HashedSSN;
													none_portfolio_id = none_portfolio_id_tmp;
												} // closing filter/reject
													// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_8 = false;

											tos_count_tMap_8++;

											/**
											 * [tMap_8 main ] stop
											 */
											// Start of branch
											// "household_portfolio_id"
											if (household_portfolio_id != null) {

												/**
												 * [tMap_3 main ] start
												 */

												currentComponent = "tMap_3";

												boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

												// ###############################
												// # Input tables (lookups)
												boolean rejectedInnerJoin_tMap_3 = false;
												boolean mainRowRejected_tMap_3 = false;

												// /////////////////////////////////////////////
												// Starting Lookup Table
												// "household_portfolioId_lookup"
												// /////////////////////////////////////////////

												boolean forceLoophousehold_portfolioId_lookup = false;

												household_portfolioId_lookupStruct household_portfolioId_lookupObjectFromLookup = null;

												if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

													hasCasePrimitiveKeyWithNull_tMap_3 = false;

													household_portfolioId_lookupHashKey.name = household_portfolio_id.inputPortfolioName;

													household_portfolioId_lookupHashKey.hashCodeDirty = true;

													tHash_Lookup_household_portfolioId_lookup
															.lookup(household_portfolioId_lookupHashKey);

												} // G_TM_M_020

												if (tHash_Lookup_household_portfolioId_lookup != null
														&& tHash_Lookup_household_portfolioId_lookup
																.getCount(household_portfolioId_lookupHashKey) > 1) { // G
																														// 071

													// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'household_portfolioId_lookup' and it contains more one result from keys :  household_portfolioId_lookup.name = '"
													// +
													// household_portfolioId_lookupHashKey.name
													// + "'");
												} // G 071

												household_portfolioId_lookupStruct household_portfolioId_lookup = null;

												household_portfolioId_lookupStruct fromLookup_household_portfolioId_lookup = null;
												household_portfolioId_lookup = household_portfolioId_lookupDefault;

												if (tHash_Lookup_household_portfolioId_lookup != null
														&& tHash_Lookup_household_portfolioId_lookup
																.hasNext()) { // G
																				// 099

													fromLookup_household_portfolioId_lookup = tHash_Lookup_household_portfolioId_lookup
															.next();

												} // G 099

												if (fromLookup_household_portfolioId_lookup != null) {
													household_portfolioId_lookup = fromLookup_household_portfolioId_lookup;
												}

												// /////////////////////////////////////////////
												// Starting Lookup Table "row13"
												// /////////////////////////////////////////////

												boolean forceLooprow13 = false;

												row13Struct row13ObjectFromLookup = null;

												if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

													hasCasePrimitiveKeyWithNull_tMap_3 = false;

													row13HashKey.orionConnectFirmId = household_portfolio_id.orionConnectFirmID;

													row13HashKey.hashCodeDirty = true;

													tHash_Lookup_row13
															.lookup(row13HashKey);

												} // G_TM_M_020

												if (tHash_Lookup_row13 != null
														&& tHash_Lookup_row13
																.getCount(row13HashKey) > 1) { // G
																								// 071

													// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.orionConnectFirmId = '"
													// +
													// row13HashKey.orionConnectFirmId
													// + "'");
												} // G 071

												row13Struct row13 = null;

												row13Struct fromLookup_row13 = null;
												row13 = row13Default;

												if (tHash_Lookup_row13 != null
														&& tHash_Lookup_row13
																.hasNext()) { // G
																				// 099

													fromLookup_row13 = tHash_Lookup_row13
															.next();

												} // G 099

												if (fromLookup_row13 != null) {
													row13 = fromLookup_row13;
												}

												// ###############################
												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
													// ###############################
													// # Output tables

													new_household_accounts = null;
													NoDataFound_joinReject2 = null;

													// # Output table :
													// 'new_household_accounts'
													new_household_accounts_tmp.id = null;
													new_household_accounts_tmp.orionConnectExternalId = household_portfolio_id.orionConnectExternalId;
													new_household_accounts_tmp.orionConnectFirmID = household_portfolio_id.orionConnectFirmID;
													new_household_accounts_tmp.orionEclipseFirmId = row13.orionEclipseFirmId;
													new_household_accounts_tmp.accountId = household_portfolio_id.accountId;
													new_household_accounts_tmp.accountNumber = household_portfolio_id.accountNumber;
													new_household_accounts_tmp.name = household_portfolio_id.name;
													new_household_accounts_tmp.portfolioId = household_portfolioId_lookup.id;
													new_household_accounts_tmp.householdId = null;
													new_household_accounts_tmp.YTDRealizedSTGL = household_portfolio_id.YTDRealizedSTGL;
													new_household_accounts_tmp.YTDRealizedLTGL = household_portfolio_id.YTDRealizedLTGL;
													new_household_accounts_tmp.SSN = household_portfolio_id.SSN;
													new_household_accounts_tmp.sweepSymbol = household_portfolio_id.sweepSymbol;
													new_household_accounts_tmp.custodianId = household_portfolio_id.custodianId;
													new_household_accounts_tmp.custodialAccountNumber = household_portfolio_id.custodialAccountNumber;
													new_household_accounts_tmp.sleeveType = household_portfolio_id.sleeveType;
													new_household_accounts_tmp.createdDate = household_portfolio_id.createdDate;
													new_household_accounts_tmp.householdName = household_portfolio_id.householdName;
													new_household_accounts_tmp.accountTypeId = household_portfolio_id.accountTypeId;
													new_household_accounts_tmp.createdBy = household_portfolio_id.createdBy;
													new_household_accounts_tmp.editedDate = household_portfolio_id.editedDate;
													new_household_accounts_tmp.editedBy = household_portfolio_id.editedBy;
													new_household_accounts_tmp.isDeleted = household_portfolio_id.isDeleted;
													new_household_accounts_tmp.advisorId = household_portfolio_id.advisorId;
													new_household_accounts_tmp.sweepSecurityId = household_portfolio_id.sweepSecurityId;
													new_household_accounts_tmp.systematicAmount = household_portfolio_id.systematicAmount;
													new_household_accounts_tmp.systematicDate = household_portfolio_id.systematicDate;
													new_household_accounts_tmp.SMA = household_portfolio_id.SMA;
													new_household_accounts_tmp.SMATradeable = household_portfolio_id.SMATradeable;
													new_household_accounts_tmp.BillingAccount = household_portfolio_id.BillingAccount;
													new_household_accounts_tmp.sleeveTarget = household_portfolio_id.sleeveTarget;
													new_household_accounts_tmp.sleeveContributionPercent = household_portfolio_id.sleeveContributionPercent;
													new_household_accounts_tmp.sleeveDistributionPercent = household_portfolio_id.sleeveDistributionPercent;
													new_household_accounts_tmp.sleeveToleranceLower = household_portfolio_id.sleeveToleranceLower;
													new_household_accounts_tmp.sleeveToleranceUpper = household_portfolio_id.sleeveToleranceUpper;
													new_household_accounts_tmp.modelId = household_portfolio_id.modelId;
													new_household_accounts_tmp.isDisabled = household_portfolio_id.isDisabled;
													new_household_accounts_tmp.disabledReason = household_portfolio_id.disabledReason;
													new_household_accounts_tmp.hashedSsn = household_portfolio_id.HashedSSN;
													new_household_accounts = new_household_accounts_tmp;
													// ###### START REJECTS
													// #####
													// ###############################

												} // end of Var scope

												rejectedInnerJoin_tMap_3 = false;

												tos_count_tMap_3++;

												/**
												 * [tMap_3 main ] stop
												 */
												// Start of branch
												// "new_household_accounts"
												if (new_household_accounts != null) {

													/**
													 * [tAmazonAuroraOutput_5_in
													 * main ] start
													 */

													currentVirtualComponent = "tAmazonAuroraOutput_5";

													currentComponent = "tAmazonAuroraOutput_5_in";

													row_tAmazonAuroraOutput_5_in = new_household_accounts;

													tos_count_tAmazonAuroraOutput_5_in++;

													/**
													 * [tAmazonAuroraOutput_5_in
													 * main ] stop
													 */

													/**
													 * [
													 * tAmazonAuroraOutput_5_out
													 * main ] start
													 */

													currentVirtualComponent = "tAmazonAuroraOutput_5";

													currentComponent = "tAmazonAuroraOutput_5_out";

													whetherReject_tAmazonAuroraOutput_5 = false;
													if (row_tAmazonAuroraOutput_5_in.id == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		1,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setInt(1,
																		row_tAmazonAuroraOutput_5_in.id);
													}

													if (row_tAmazonAuroraOutput_5_in.orionConnectExternalId == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		2,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setInt(2,
																		row_tAmazonAuroraOutput_5_in.orionConnectExternalId);
													}

													if (row_tAmazonAuroraOutput_5_in.orionConnectFirmID == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		3,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setInt(3,
																		row_tAmazonAuroraOutput_5_in.orionConnectFirmID);
													}

													if (row_tAmazonAuroraOutput_5_in.orionEclipseFirmId == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		4,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setInt(4,
																		row_tAmazonAuroraOutput_5_in.orionEclipseFirmId);
													}

													if (row_tAmazonAuroraOutput_5_in.accountId == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		5,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setString(
																		5,
																		row_tAmazonAuroraOutput_5_in.accountId);
													}

													if (row_tAmazonAuroraOutput_5_in.accountNumber == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		6,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setString(
																		6,
																		row_tAmazonAuroraOutput_5_in.accountNumber);
													}

													if (row_tAmazonAuroraOutput_5_in.name == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		7,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setString(
																		7,
																		row_tAmazonAuroraOutput_5_in.name);
													}

													if (row_tAmazonAuroraOutput_5_in.portfolioId == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		8,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setInt(8,
																		row_tAmazonAuroraOutput_5_in.portfolioId);
													}

													if (row_tAmazonAuroraOutput_5_in.householdId == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		9,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setInt(9,
																		row_tAmazonAuroraOutput_5_in.householdId);
													}

													if (row_tAmazonAuroraOutput_5_in.YTDRealizedSTGL == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		10,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setFloat(
																		10,
																		row_tAmazonAuroraOutput_5_in.YTDRealizedSTGL);
													}

													if (row_tAmazonAuroraOutput_5_in.YTDRealizedLTGL == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		11,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setFloat(
																		11,
																		row_tAmazonAuroraOutput_5_in.YTDRealizedLTGL);
													}

													if (row_tAmazonAuroraOutput_5_in.SSN == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		12,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setString(
																		12,
																		row_tAmazonAuroraOutput_5_in.SSN);
													}

													if (row_tAmazonAuroraOutput_5_in.sweepSymbol == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		13,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setString(
																		13,
																		row_tAmazonAuroraOutput_5_in.sweepSymbol);
													}

													if (row_tAmazonAuroraOutput_5_in.custodianId == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		14,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setInt(14,
																		row_tAmazonAuroraOutput_5_in.custodianId);
													}

													if (row_tAmazonAuroraOutput_5_in.custodialAccountNumber == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		15,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setString(
																		15,
																		row_tAmazonAuroraOutput_5_in.custodialAccountNumber);
													}

													if (row_tAmazonAuroraOutput_5_in.sleeveType == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		16,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setString(
																		16,
																		row_tAmazonAuroraOutput_5_in.sleeveType);
													}

													if (row_tAmazonAuroraOutput_5_in.createdDate != null) {
														date_tAmazonAuroraOutput_5 = row_tAmazonAuroraOutput_5_in.createdDate
																.getTime();
														if (date_tAmazonAuroraOutput_5 < year1_tAmazonAuroraOutput_5
																|| date_tAmazonAuroraOutput_5 >= year10000_tAmazonAuroraOutput_5) {
															pstmt_tAmazonAuroraOutput_5
																	.setString(
																			17,
																			"0000-00-00 00:00:00");
														} else {
															pstmt_tAmazonAuroraOutput_5
																	.setTimestamp(
																			17,
																			new java.sql.Timestamp(
																					date_tAmazonAuroraOutput_5));
														}
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		17,
																		java.sql.Types.DATE);
													}

													if (row_tAmazonAuroraOutput_5_in.householdName == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		18,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setString(
																		18,
																		row_tAmazonAuroraOutput_5_in.householdName);
													}

													if (row_tAmazonAuroraOutput_5_in.accountTypeId == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		19,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setInt(19,
																		row_tAmazonAuroraOutput_5_in.accountTypeId);
													}

													if (row_tAmazonAuroraOutput_5_in.createdBy == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		20,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setInt(20,
																		row_tAmazonAuroraOutput_5_in.createdBy);
													}

													if (row_tAmazonAuroraOutput_5_in.editedDate != null) {
														date_tAmazonAuroraOutput_5 = row_tAmazonAuroraOutput_5_in.editedDate
																.getTime();
														if (date_tAmazonAuroraOutput_5 < year1_tAmazonAuroraOutput_5
																|| date_tAmazonAuroraOutput_5 >= year10000_tAmazonAuroraOutput_5) {
															pstmt_tAmazonAuroraOutput_5
																	.setString(
																			21,
																			"0000-00-00 00:00:00");
														} else {
															pstmt_tAmazonAuroraOutput_5
																	.setTimestamp(
																			21,
																			new java.sql.Timestamp(
																					date_tAmazonAuroraOutput_5));
														}
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		21,
																		java.sql.Types.DATE);
													}

													if (row_tAmazonAuroraOutput_5_in.editedBy == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		22,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setInt(22,
																		row_tAmazonAuroraOutput_5_in.editedBy);
													}

													if (row_tAmazonAuroraOutput_5_in.isDeleted == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		23,
																		java.sql.Types.BOOLEAN);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setBoolean(
																		23,
																		row_tAmazonAuroraOutput_5_in.isDeleted);
													}

													if (row_tAmazonAuroraOutput_5_in.advisorId == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		24,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setInt(24,
																		row_tAmazonAuroraOutput_5_in.advisorId);
													}

													if (row_tAmazonAuroraOutput_5_in.sweepSecurityId == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		25,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setInt(25,
																		row_tAmazonAuroraOutput_5_in.sweepSecurityId);
													}

													if (row_tAmazonAuroraOutput_5_in.systematicAmount == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		26,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setString(
																		26,
																		row_tAmazonAuroraOutput_5_in.systematicAmount);
													}

													if (row_tAmazonAuroraOutput_5_in.systematicDate != null) {
														date_tAmazonAuroraOutput_5 = row_tAmazonAuroraOutput_5_in.systematicDate
																.getTime();
														if (date_tAmazonAuroraOutput_5 < year1_tAmazonAuroraOutput_5
																|| date_tAmazonAuroraOutput_5 >= year10000_tAmazonAuroraOutput_5) {
															pstmt_tAmazonAuroraOutput_5
																	.setString(
																			27,
																			"0000-00-00 00:00:00");
														} else {
															pstmt_tAmazonAuroraOutput_5
																	.setTimestamp(
																			27,
																			new java.sql.Timestamp(
																					date_tAmazonAuroraOutput_5));
														}
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		27,
																		java.sql.Types.DATE);
													}

													if (row_tAmazonAuroraOutput_5_in.SMA == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		28,
																		java.sql.Types.BOOLEAN);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setBoolean(
																		28,
																		row_tAmazonAuroraOutput_5_in.SMA);
													}

													if (row_tAmazonAuroraOutput_5_in.SMATradeable == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		29,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setString(
																		29,
																		row_tAmazonAuroraOutput_5_in.SMATradeable);
													}

													if (row_tAmazonAuroraOutput_5_in.BillingAccount == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		30,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setString(
																		30,
																		row_tAmazonAuroraOutput_5_in.BillingAccount);
													}

													if (row_tAmazonAuroraOutput_5_in.sleeveTarget == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		31,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setFloat(
																		31,
																		row_tAmazonAuroraOutput_5_in.sleeveTarget);
													}

													if (row_tAmazonAuroraOutput_5_in.sleeveContributionPercent == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		32,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setFloat(
																		32,
																		row_tAmazonAuroraOutput_5_in.sleeveContributionPercent);
													}

													if (row_tAmazonAuroraOutput_5_in.sleeveDistributionPercent == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		33,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setFloat(
																		33,
																		row_tAmazonAuroraOutput_5_in.sleeveDistributionPercent);
													}

													if (row_tAmazonAuroraOutput_5_in.sleeveToleranceLower == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		34,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setFloat(
																		34,
																		row_tAmazonAuroraOutput_5_in.sleeveToleranceLower);
													}

													if (row_tAmazonAuroraOutput_5_in.sleeveToleranceUpper == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		35,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setFloat(
																		35,
																		row_tAmazonAuroraOutput_5_in.sleeveToleranceUpper);
													}

													if (row_tAmazonAuroraOutput_5_in.modelId == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		36,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setInt(36,
																		row_tAmazonAuroraOutput_5_in.modelId);
													}

													if (row_tAmazonAuroraOutput_5_in.isDisabled == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		37,
																		java.sql.Types.BOOLEAN);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setBoolean(
																		37,
																		row_tAmazonAuroraOutput_5_in.isDisabled);
													}

													if (row_tAmazonAuroraOutput_5_in.disabledReason == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		38,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setString(
																		38,
																		row_tAmazonAuroraOutput_5_in.disabledReason);
													}

													if (row_tAmazonAuroraOutput_5_in.hashedSsn == null) {
														pstmt_tAmazonAuroraOutput_5
																.setNull(
																		39,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_5
																.setString(
																		39,
																		row_tAmazonAuroraOutput_5_in.hashedSsn);
													}

													pstmt_tAmazonAuroraOutput_5
															.addBatch();
													nb_line_tAmazonAuroraOutput_5++;

													batchSizeCounter_tAmazonAuroraOutput_5++;
													if (batchSize_tAmazonAuroraOutput_5 <= batchSizeCounter_tAmazonAuroraOutput_5) {
														try {
															int countSum_tAmazonAuroraOutput_5 = 0;
															for (int countEach_tAmazonAuroraOutput_5 : pstmt_tAmazonAuroraOutput_5
																	.executeBatch()) {
																countSum_tAmazonAuroraOutput_5 += (countEach_tAmazonAuroraOutput_5 < 0 ? 0
																		: 1);
															}
															insertedCount_tAmazonAuroraOutput_5 += countSum_tAmazonAuroraOutput_5;
														} catch (java.sql.BatchUpdateException e) {
															int countSum_tAmazonAuroraOutput_5 = 0;
															for (int countEach_tAmazonAuroraOutput_5 : e
																	.getUpdateCounts()) {
																countSum_tAmazonAuroraOutput_5 += (countEach_tAmazonAuroraOutput_5 < 0 ? 0
																		: countEach_tAmazonAuroraOutput_5);
															}
															insertedCount_tAmazonAuroraOutput_5 += countSum_tAmazonAuroraOutput_5;
															System.err
																	.println(e
																			.getMessage());
														}

														batchSizeCounter_tAmazonAuroraOutput_5 = 0;
													}
													commitCounter_tAmazonAuroraOutput_5++;

													if (commitEvery_tAmazonAuroraOutput_5 <= commitCounter_tAmazonAuroraOutput_5) {

														try {
															int countSum_tAmazonAuroraOutput_5 = 0;
															for (int countEach_tAmazonAuroraOutput_5 : pstmt_tAmazonAuroraOutput_5
																	.executeBatch()) {
																countSum_tAmazonAuroraOutput_5 += (countEach_tAmazonAuroraOutput_5 < 0 ? 0
																		: 1);
															}
															insertedCount_tAmazonAuroraOutput_5 += countSum_tAmazonAuroraOutput_5;
														} catch (java.sql.BatchUpdateException e) {
															int countSum_tAmazonAuroraOutput_5 = 0;
															for (int countEach_tAmazonAuroraOutput_5 : e
																	.getUpdateCounts()) {
																countSum_tAmazonAuroraOutput_5 += (countEach_tAmazonAuroraOutput_5 < 0 ? 0
																		: countEach_tAmazonAuroraOutput_5);
															}
															insertedCount_tAmazonAuroraOutput_5 += countSum_tAmazonAuroraOutput_5;
															System.err
																	.println(e
																			.getMessage());

														}
														conn_tAmazonAuroraOutput_5
																.commit();
														commitCounter_tAmazonAuroraOutput_5 = 0;

													}

													tos_count_tAmazonAuroraOutput_5_out++;

													/**
													 * [
													 * tAmazonAuroraOutput_5_out
													 * main ] stop
													 */

												} // End of branch
													// "new_household_accounts"

												// Start of branch
												// "NoDataFound_joinReject2"
												if (NoDataFound_joinReject2 != null) {

													/**
													 * [
													 * tAmazonAuroraOutput_11_in
													 * main ] start
													 */

													currentVirtualComponent = "tAmazonAuroraOutput_11";

													currentComponent = "tAmazonAuroraOutput_11_in";

													row_tAmazonAuroraOutput_11_in = NoDataFound_joinReject2;

													tos_count_tAmazonAuroraOutput_11_in++;

													/**
													 * [
													 * tAmazonAuroraOutput_11_in
													 * main ] stop
													 */

													/**
													 * [
													 * tAmazonAuroraOutput_11_out
													 * main ] start
													 */

													currentVirtualComponent = "tAmazonAuroraOutput_11";

													currentComponent = "tAmazonAuroraOutput_11_out";

													whetherReject_tAmazonAuroraOutput_11 = false;
													if (row_tAmazonAuroraOutput_11_in.OrionFirmId == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		1,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setInt(1,
																		row_tAmazonAuroraOutput_11_in.OrionFirmId);
													}

													if (row_tAmazonAuroraOutput_11_in.ExternalId == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		2,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setInt(2,
																		row_tAmazonAuroraOutput_11_in.ExternalId);
													}

													if (row_tAmazonAuroraOutput_11_in.AccountId == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		3,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		3,
																		row_tAmazonAuroraOutput_11_in.AccountId);
													}

													if (row_tAmazonAuroraOutput_11_in.AccountNumber == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		4,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		4,
																		row_tAmazonAuroraOutput_11_in.AccountNumber);
													}

													if (row_tAmazonAuroraOutput_11_in.AccountName == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		5,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		5,
																		row_tAmazonAuroraOutput_11_in.AccountName);
													}

													if (row_tAmazonAuroraOutput_11_in.PortfolioId == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		6,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		6,
																		row_tAmazonAuroraOutput_11_in.PortfolioId);
													}

													if (row_tAmazonAuroraOutput_11_in.PortfolioName == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		7,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		7,
																		row_tAmazonAuroraOutput_11_in.PortfolioName);
													}

													if (row_tAmazonAuroraOutput_11_in.HouseholdId == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		8,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setInt(8,
																		row_tAmazonAuroraOutput_11_in.HouseholdId);
													}

													if (row_tAmazonAuroraOutput_11_in.HouseholdName == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		9,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		9,
																		row_tAmazonAuroraOutput_11_in.HouseholdName);
													}

													if (row_tAmazonAuroraOutput_11_in.AccountType == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		10,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		10,
																		row_tAmazonAuroraOutput_11_in.AccountType);
													}

													if (row_tAmazonAuroraOutput_11_in.Taxable == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		11,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setByte(
																		11,
																		row_tAmazonAuroraOutput_11_in.Taxable);
													}

													if (row_tAmazonAuroraOutput_11_in.AccountYTDRealizedSTGL == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		12,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setFloat(
																		12,
																		row_tAmazonAuroraOutput_11_in.AccountYTDRealizedSTGL);
													}

													if (row_tAmazonAuroraOutput_11_in.AccountYTDRealizedLTGL == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		13,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setFloat(
																		13,
																		row_tAmazonAuroraOutput_11_in.AccountYTDRealizedLTGL);
													}

													if (row_tAmazonAuroraOutput_11_in.SSN == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		14,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		14,
																		row_tAmazonAuroraOutput_11_in.SSN);
													}

													if (row_tAmazonAuroraOutput_11_in.SweepSymbol == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		15,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		15,
																		row_tAmazonAuroraOutput_11_in.SweepSymbol);
													}

													if (row_tAmazonAuroraOutput_11_in.Custodian == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		16,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		16,
																		row_tAmazonAuroraOutput_11_in.Custodian);
													}

													if (row_tAmazonAuroraOutput_11_in.CustodialAccountNumber == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		17,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		17,
																		row_tAmazonAuroraOutput_11_in.CustodialAccountNumber);
													}

													if (row_tAmazonAuroraOutput_11_in.AdvisorName == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		18,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		18,
																		row_tAmazonAuroraOutput_11_in.AdvisorName);
													}

													if (row_tAmazonAuroraOutput_11_in.AdvisorExternalId == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		19,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setInt(19,
																		row_tAmazonAuroraOutput_11_in.AdvisorExternalId);
													}

													if (row_tAmazonAuroraOutput_11_in.SleeveType == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		20,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		20,
																		row_tAmazonAuroraOutput_11_in.SleeveType);
													}

													if (row_tAmazonAuroraOutput_11_in.SleeveTarget == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		21,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setFloat(
																		21,
																		row_tAmazonAuroraOutput_11_in.SleeveTarget);
													}

													if (row_tAmazonAuroraOutput_11_in.SleeveContributionPercent == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		22,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setFloat(
																		22,
																		row_tAmazonAuroraOutput_11_in.SleeveContributionPercent);
													}

													if (row_tAmazonAuroraOutput_11_in.SleeveDistributionPercent == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		23,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setFloat(
																		23,
																		row_tAmazonAuroraOutput_11_in.SleeveDistributionPercent);
													}

													if (row_tAmazonAuroraOutput_11_in.SleeveToleranceLower == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		24,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setFloat(
																		24,
																		row_tAmazonAuroraOutput_11_in.SleeveToleranceLower);
													}

													if (row_tAmazonAuroraOutput_11_in.SleeveToleranceUpper == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		25,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setFloat(
																		25,
																		row_tAmazonAuroraOutput_11_in.SleeveToleranceUpper);
													}

													if (row_tAmazonAuroraOutput_11_in.SMA == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		26,
																		java.sql.Types.BOOLEAN);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setBoolean(
																		26,
																		row_tAmazonAuroraOutput_11_in.SMA);
													}

													if (row_tAmazonAuroraOutput_11_in.SMATradeable == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		27,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		27,
																		row_tAmazonAuroraOutput_11_in.SMATradeable);
													}

													if (row_tAmazonAuroraOutput_11_in.BillingAccount == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		28,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		28,
																		row_tAmazonAuroraOutput_11_in.BillingAccount);
													}

													if (row_tAmazonAuroraOutput_11_in.SystematicAmount == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		29,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		29,
																		row_tAmazonAuroraOutput_11_in.SystematicAmount);
													}

													if (row_tAmazonAuroraOutput_11_in.SystematicDate != null) {
														date_tAmazonAuroraOutput_11 = row_tAmazonAuroraOutput_11_in.SystematicDate
																.getTime();
														if (date_tAmazonAuroraOutput_11 < year1_tAmazonAuroraOutput_11
																|| date_tAmazonAuroraOutput_11 >= year10000_tAmazonAuroraOutput_11) {
															pstmt_tAmazonAuroraOutput_11
																	.setString(
																			30,
																			"0000-00-00 00:00:00");
														} else {
															pstmt_tAmazonAuroraOutput_11
																	.setTimestamp(
																			30,
																			new java.sql.Timestamp(
																					date_tAmazonAuroraOutput_11));
														}
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		30,
																		java.sql.Types.DATE);
													}

													if (row_tAmazonAuroraOutput_11_in.hashedSsn == null) {
														pstmt_tAmazonAuroraOutput_11
																.setNull(
																		31,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_11
																.setString(
																		31,
																		row_tAmazonAuroraOutput_11_in.hashedSsn);
													}

													pstmt_tAmazonAuroraOutput_11
															.addBatch();
													nb_line_tAmazonAuroraOutput_11++;

													batchSizeCounter_tAmazonAuroraOutput_11++;
													if (batchSize_tAmazonAuroraOutput_11 <= batchSizeCounter_tAmazonAuroraOutput_11) {
														try {
															int countSum_tAmazonAuroraOutput_11 = 0;
															for (int countEach_tAmazonAuroraOutput_11 : pstmt_tAmazonAuroraOutput_11
																	.executeBatch()) {
																countSum_tAmazonAuroraOutput_11 += (countEach_tAmazonAuroraOutput_11 < 0 ? 0
																		: 1);
															}
															insertedCount_tAmazonAuroraOutput_11 += countSum_tAmazonAuroraOutput_11;
														} catch (java.sql.BatchUpdateException e) {
															int countSum_tAmazonAuroraOutput_11 = 0;
															for (int countEach_tAmazonAuroraOutput_11 : e
																	.getUpdateCounts()) {
																countSum_tAmazonAuroraOutput_11 += (countEach_tAmazonAuroraOutput_11 < 0 ? 0
																		: countEach_tAmazonAuroraOutput_11);
															}
															insertedCount_tAmazonAuroraOutput_11 += countSum_tAmazonAuroraOutput_11;
															System.err
																	.println(e
																			.getMessage());
														}

														batchSizeCounter_tAmazonAuroraOutput_11 = 0;
													}
													commitCounter_tAmazonAuroraOutput_11++;

													if (commitEvery_tAmazonAuroraOutput_11 <= commitCounter_tAmazonAuroraOutput_11) {

														try {
															int countSum_tAmazonAuroraOutput_11 = 0;
															for (int countEach_tAmazonAuroraOutput_11 : pstmt_tAmazonAuroraOutput_11
																	.executeBatch()) {
																countSum_tAmazonAuroraOutput_11 += (countEach_tAmazonAuroraOutput_11 < 0 ? 0
																		: 1);
															}
															insertedCount_tAmazonAuroraOutput_11 += countSum_tAmazonAuroraOutput_11;
														} catch (java.sql.BatchUpdateException e) {
															int countSum_tAmazonAuroraOutput_11 = 0;
															for (int countEach_tAmazonAuroraOutput_11 : e
																	.getUpdateCounts()) {
																countSum_tAmazonAuroraOutput_11 += (countEach_tAmazonAuroraOutput_11 < 0 ? 0
																		: countEach_tAmazonAuroraOutput_11);
															}
															insertedCount_tAmazonAuroraOutput_11 += countSum_tAmazonAuroraOutput_11;
															System.err
																	.println(e
																			.getMessage());

														}
														conn_tAmazonAuroraOutput_11
																.commit();
														commitCounter_tAmazonAuroraOutput_11 = 0;

													}

													tos_count_tAmazonAuroraOutput_11_out++;

													/**
													 * [
													 * tAmazonAuroraOutput_11_out
													 * main ] stop
													 */

												} // End of branch
													// "NoDataFound_joinReject2"

											} // End of branch
												// "household_portfolio_id"

											// Start of branch
											// "account_portfolio_id"
											if (account_portfolio_id != null) {

												/**
												 * [tMap_4 main ] start
												 */

												currentComponent = "tMap_4";

												boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

												// ###############################
												// # Input tables (lookups)
												boolean rejectedInnerJoin_tMap_4 = false;
												boolean mainRowRejected_tMap_4 = false;

												// /////////////////////////////////////////////
												// Starting Lookup Table "row6"
												// /////////////////////////////////////////////

												boolean forceLooprow6 = false;

												row6Struct row6ObjectFromLookup = null;

												if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

													tHash_Lookup_row6
															.lookup(row6HashKey);

													if (!tHash_Lookup_row6
															.hasNext()) { // G_TM_M_090

														forceLooprow6 = true;

													} // G_TM_M_090

												} // G_TM_M_020

												else { // G 20 - G 21
													forceLooprow6 = true;
												} // G 21

												row6Struct row6 = null;

												while ((tHash_Lookup_row6 != null && tHash_Lookup_row6
														.hasNext())
														|| forceLooprow6) { // G_TM_M_043

													// CALL close loop of lookup
													// 'row6'

													row6Struct fromLookup_row6 = null;
													row6 = row6Default;

													if (!forceLooprow6) { // G
																			// 46

														fromLookup_row6 = tHash_Lookup_row6
																.next();

														if (fromLookup_row6 != null) {
															row6 = fromLookup_row6;
														}

													} // G 46

													forceLooprow6 = false;

													// /////////////////////////////////////////////
													// Starting Lookup Table
													// "row14"
													// /////////////////////////////////////////////

													boolean forceLooprow14 = false;

													row14Struct row14ObjectFromLookup = null;

													if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

														hasCasePrimitiveKeyWithNull_tMap_4 = false;

														row14HashKey.orionConnectFirmId = account_portfolio_id.orionConnectFirmID;

														row14HashKey.hashCodeDirty = true;

														tHash_Lookup_row14
																.lookup(row14HashKey);

													} // G_TM_M_020

													if (tHash_Lookup_row14 != null
															&& tHash_Lookup_row14
																	.getCount(row14HashKey) > 1) { // G
																									// 071

														// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row14' and it contains more one result from keys :  row14.orionConnectFirmId = '"
														// +
														// row14HashKey.orionConnectFirmId
														// + "'");
													} // G 071

													row14Struct row14 = null;

													row14Struct fromLookup_row14 = null;
													row14 = row14Default;

													if (tHash_Lookup_row14 != null
															&& tHash_Lookup_row14
																	.hasNext()) { // G
																					// 099

														fromLookup_row14 = tHash_Lookup_row14
																.next();

													} // G 099

													if (fromLookup_row14 != null) {
														row14 = fromLookup_row14;
													}

													// ###############################
													{ // start of Var scope

														// ###############################
														// # Vars tables

														Var__tMap_4__Struct Var = Var__tMap_4;
														Var.var1 = Numeric
																.sequence(
																		"s1",
																		row6.AUTO_INCREMENT + 1,
																		1);// ###############################
														// ###############################
														// # Output tables

														new_account_portfolio_creation = null;
														new_account_output = null;

														// # Output table :
														// 'new_account_portfolio_creation'
														new_account_portfolio_creation_tmp.id = Var.var1;
														new_account_portfolio_creation_tmp.name = account_portfolio_id.inputPortfolioName;
														new_account_portfolio_creation_tmp.modelId = null;
														new_account_portfolio_creation_tmp.tags = null;
														new_account_portfolio_creation_tmp.isDisabled = null;
														new_account_portfolio_creation_tmp.disabledReason = null;
														new_account_portfolio_creation_tmp.isSleevePortfolio = null;
														new_account_portfolio_creation_tmp.sleeveContributionMethod = account_portfolio_id.sleeveContributionMethod;
														new_account_portfolio_creation_tmp.sleeveStrategyName = account_portfolio_id.sleeveStrategyName;
														new_account_portfolio_creation_tmp.sleeveDistributionMethod = account_portfolio_id.sleeveDistributionMethod;
														new_account_portfolio_creation_tmp.registrationId = account_portfolio_id.registrationId;
														new_account_portfolio_creation_tmp.IsDeleted = null;
														new_account_portfolio_creation_tmp.createdDate = TalendDate
																.getCurrentDate();
														new_account_portfolio_creation_tmp.createdBy = 1;
														new_account_portfolio_creation_tmp.editedDate = TalendDate
																.getCurrentDate();
														new_account_portfolio_creation_tmp.editedBy = 1;
														new_account_portfolio_creation = new_account_portfolio_creation_tmp;

														// # Output table :
														// 'new_account_output'
														new_account_output_tmp.id = null;
														new_account_output_tmp.orionConnectExternalId = account_portfolio_id.orionConnectExternalId;
														new_account_output_tmp.orionConnectFirmID = account_portfolio_id.orionConnectFirmID;
														new_account_output_tmp.orionEclipseFirmId = row14.orionEclipseFirmId;
														new_account_output_tmp.accountId = account_portfolio_id.accountId;
														new_account_output_tmp.accountNumber = account_portfolio_id.accountNumber;
														new_account_output_tmp.name = account_portfolio_id.name;
														new_account_output_tmp.portfolioId = Var.var1;
														new_account_output_tmp.householdId = null;
														new_account_output_tmp.YTDRealizedSTGL = account_portfolio_id.YTDRealizedSTGL;
														new_account_output_tmp.YTDRealizedLTGL = account_portfolio_id.YTDRealizedLTGL;
														new_account_output_tmp.SSN = account_portfolio_id.SSN;
														new_account_output_tmp.sweepSymbol = account_portfolio_id.sweepSymbol;
														new_account_output_tmp.custodianId = account_portfolio_id.custodianId;
														new_account_output_tmp.custodialAccountNumber = account_portfolio_id.custodialAccountNumber;
														new_account_output_tmp.sleeveType = account_portfolio_id.sleeveType;
														new_account_output_tmp.createdDate = account_portfolio_id.createdDate;
														new_account_output_tmp.householdName = account_portfolio_id.householdName;
														new_account_output_tmp.accountTypeId = account_portfolio_id.accountTypeId;
														new_account_output_tmp.createdBy = account_portfolio_id.createdBy;
														new_account_output_tmp.editedDate = account_portfolio_id.editedDate;
														new_account_output_tmp.editedBy = account_portfolio_id.editedBy;
														new_account_output_tmp.isDeleted = account_portfolio_id.isDeleted;
														new_account_output_tmp.advisorId = account_portfolio_id.advisorId;
														new_account_output_tmp.sweepSecurityId = account_portfolio_id.sweepSecurityId;
														new_account_output_tmp.systematicAmount = account_portfolio_id.systematicAmount;
														new_account_output_tmp.systematicDate = account_portfolio_id.systematicDate;
														new_account_output_tmp.SMA = account_portfolio_id.SMA;
														new_account_output_tmp.SMATradeable = account_portfolio_id.SMATradeable;
														new_account_output_tmp.BillingAccount = account_portfolio_id.BillingAccount;
														new_account_output_tmp.sleeveTarget = account_portfolio_id.sleeveTarget;
														new_account_output_tmp.sleeveContributionPercent = account_portfolio_id.sleeveContributionPercent;
														new_account_output_tmp.sleeveDistributionPercent = account_portfolio_id.sleeveDistributionPercent;
														new_account_output_tmp.sleeveToleranceLower = account_portfolio_id.sleeveToleranceLower;
														new_account_output_tmp.sleeveToleranceUpper = account_portfolio_id.sleeveToleranceUpper;
														new_account_output_tmp.modelId = account_portfolio_id.modelId;
														new_account_output_tmp.isDisabled = account_portfolio_id.isDisabled;
														new_account_output_tmp.disabledReason = account_portfolio_id.disabledReason;
														new_account_output_tmp.hashedSsn = account_portfolio_id.HashedSSN;
														new_account_output = new_account_output_tmp;
														// ###############################

													} // end of Var scope

													rejectedInnerJoin_tMap_4 = false;

													tos_count_tMap_4++;

													/**
													 * [tMap_4 main ] stop
													 */
													// Start of branch
													// "new_account_portfolio_creation"
													if (new_account_portfolio_creation != null) {

														/**
														 * [
														 * tAmazonAuroraOutput_1_in
														 * main ] start
														 */

														currentVirtualComponent = "tAmazonAuroraOutput_1";

														currentComponent = "tAmazonAuroraOutput_1_in";

														row_tAmazonAuroraOutput_1_in = new_account_portfolio_creation;

														tos_count_tAmazonAuroraOutput_1_in++;

														/**
														 * [
														 * tAmazonAuroraOutput_1_in
														 * main ] stop
														 */

														/**
														 * [
														 * tAmazonAuroraOutput_1_out
														 * main ] start
														 */

														currentVirtualComponent = "tAmazonAuroraOutput_1";

														currentComponent = "tAmazonAuroraOutput_1_out";

														whetherReject_tAmazonAuroraOutput_1 = false;
														pstmt_tAmazonAuroraOutput_1
																.setInt(1,
																		row_tAmazonAuroraOutput_1_in.id);

														if (row_tAmazonAuroraOutput_1_in.name == null) {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			2,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setString(
																			2,
																			row_tAmazonAuroraOutput_1_in.name);
														}

														if (row_tAmazonAuroraOutput_1_in.modelId == null) {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			3,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setInt(3,
																			row_tAmazonAuroraOutput_1_in.modelId);
														}

														if (row_tAmazonAuroraOutput_1_in.tags == null) {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			4,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setString(
																			4,
																			row_tAmazonAuroraOutput_1_in.tags);
														}

														if (row_tAmazonAuroraOutput_1_in.isDisabled == null) {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			5,
																			java.sql.Types.BOOLEAN);
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setBoolean(
																			5,
																			row_tAmazonAuroraOutput_1_in.isDisabled);
														}

														if (row_tAmazonAuroraOutput_1_in.disabledReason == null) {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			6,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setString(
																			6,
																			row_tAmazonAuroraOutput_1_in.disabledReason);
														}

														if (row_tAmazonAuroraOutput_1_in.isSleevePortfolio == null) {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			7,
																			java.sql.Types.BOOLEAN);
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setBoolean(
																			7,
																			row_tAmazonAuroraOutput_1_in.isSleevePortfolio);
														}

														if (row_tAmazonAuroraOutput_1_in.sleeveContributionMethod == null) {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			8,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setString(
																			8,
																			row_tAmazonAuroraOutput_1_in.sleeveContributionMethod);
														}

														if (row_tAmazonAuroraOutput_1_in.sleeveStrategyName == null) {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			9,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setString(
																			9,
																			row_tAmazonAuroraOutput_1_in.sleeveStrategyName);
														}

														if (row_tAmazonAuroraOutput_1_in.sleeveDistributionMethod == null) {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			10,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setString(
																			10,
																			row_tAmazonAuroraOutput_1_in.sleeveDistributionMethod);
														}

														if (row_tAmazonAuroraOutput_1_in.registrationId == null) {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			11,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setInt(11,
																			row_tAmazonAuroraOutput_1_in.registrationId);
														}

														if (row_tAmazonAuroraOutput_1_in.IsDeleted == null) {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			12,
																			java.sql.Types.BOOLEAN);
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setBoolean(
																			12,
																			row_tAmazonAuroraOutput_1_in.IsDeleted);
														}

														if (row_tAmazonAuroraOutput_1_in.createdDate != null) {
															date_tAmazonAuroraOutput_1 = row_tAmazonAuroraOutput_1_in.createdDate
																	.getTime();
															if (date_tAmazonAuroraOutput_1 < year1_tAmazonAuroraOutput_1
																	|| date_tAmazonAuroraOutput_1 >= year10000_tAmazonAuroraOutput_1) {
																pstmt_tAmazonAuroraOutput_1
																		.setString(
																				13,
																				"0000-00-00 00:00:00");
															} else {
																pstmt_tAmazonAuroraOutput_1
																		.setTimestamp(
																				13,
																				new java.sql.Timestamp(
																						date_tAmazonAuroraOutput_1));
															}
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			13,
																			java.sql.Types.DATE);
														}

														if (row_tAmazonAuroraOutput_1_in.createdBy == null) {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			14,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setInt(14,
																			row_tAmazonAuroraOutput_1_in.createdBy);
														}

														if (row_tAmazonAuroraOutput_1_in.editedDate != null) {
															date_tAmazonAuroraOutput_1 = row_tAmazonAuroraOutput_1_in.editedDate
																	.getTime();
															if (date_tAmazonAuroraOutput_1 < year1_tAmazonAuroraOutput_1
																	|| date_tAmazonAuroraOutput_1 >= year10000_tAmazonAuroraOutput_1) {
																pstmt_tAmazonAuroraOutput_1
																		.setString(
																				15,
																				"0000-00-00 00:00:00");
															} else {
																pstmt_tAmazonAuroraOutput_1
																		.setTimestamp(
																				15,
																				new java.sql.Timestamp(
																						date_tAmazonAuroraOutput_1));
															}
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			15,
																			java.sql.Types.DATE);
														}

														if (row_tAmazonAuroraOutput_1_in.editedBy == null) {
															pstmt_tAmazonAuroraOutput_1
																	.setNull(
																			16,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_1
																	.setInt(16,
																			row_tAmazonAuroraOutput_1_in.editedBy);
														}

														pstmt_tAmazonAuroraOutput_1
																.addBatch();
														nb_line_tAmazonAuroraOutput_1++;

														batchSizeCounter_tAmazonAuroraOutput_1++;
														if (batchSize_tAmazonAuroraOutput_1 <= batchSizeCounter_tAmazonAuroraOutput_1) {
															try {
																int countSum_tAmazonAuroraOutput_1 = 0;
																for (int countEach_tAmazonAuroraOutput_1 : pstmt_tAmazonAuroraOutput_1
																		.executeBatch()) {
																	countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
																			: 1);
																}
																insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
															} catch (java.sql.BatchUpdateException e) {
																int countSum_tAmazonAuroraOutput_1 = 0;
																for (int countEach_tAmazonAuroraOutput_1 : e
																		.getUpdateCounts()) {
																	countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
																			: countEach_tAmazonAuroraOutput_1);
																}
																insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
																System.err
																		.println(e
																				.getMessage());
															}

															batchSizeCounter_tAmazonAuroraOutput_1 = 0;
														}
														commitCounter_tAmazonAuroraOutput_1++;

														if (commitEvery_tAmazonAuroraOutput_1 <= commitCounter_tAmazonAuroraOutput_1) {

															try {
																int countSum_tAmazonAuroraOutput_1 = 0;
																for (int countEach_tAmazonAuroraOutput_1 : pstmt_tAmazonAuroraOutput_1
																		.executeBatch()) {
																	countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
																			: 1);
																}
																insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
															} catch (java.sql.BatchUpdateException e) {
																int countSum_tAmazonAuroraOutput_1 = 0;
																for (int countEach_tAmazonAuroraOutput_1 : e
																		.getUpdateCounts()) {
																	countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
																			: countEach_tAmazonAuroraOutput_1);
																}
																insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
																System.err
																		.println(e
																				.getMessage());

															}
															conn_tAmazonAuroraOutput_1
																	.commit();
															commitCounter_tAmazonAuroraOutput_1 = 0;

														}

														tos_count_tAmazonAuroraOutput_1_out++;

														/**
														 * [
														 * tAmazonAuroraOutput_1_out
														 * main ] stop
														 */

													} // End of branch
														// "new_account_portfolio_creation"

													// Start of branch
													// "new_account_output"
													if (new_account_output != null) {

														/**
														 * [
														 * tAmazonAuroraOutput_3_in
														 * main ] start
														 */

														currentVirtualComponent = "tAmazonAuroraOutput_3";

														currentComponent = "tAmazonAuroraOutput_3_in";

														row_tAmazonAuroraOutput_3_in = new_account_output;

														tos_count_tAmazonAuroraOutput_3_in++;

														/**
														 * [
														 * tAmazonAuroraOutput_3_in
														 * main ] stop
														 */

														/**
														 * [
														 * tAmazonAuroraOutput_3_out
														 * main ] start
														 */

														currentVirtualComponent = "tAmazonAuroraOutput_3";

														currentComponent = "tAmazonAuroraOutput_3_out";

														whetherReject_tAmazonAuroraOutput_3 = false;
														if (row_tAmazonAuroraOutput_3_in.id == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			1,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setInt(1,
																			row_tAmazonAuroraOutput_3_in.id);
														}

														if (row_tAmazonAuroraOutput_3_in.orionConnectExternalId == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			2,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setInt(2,
																			row_tAmazonAuroraOutput_3_in.orionConnectExternalId);
														}

														if (row_tAmazonAuroraOutput_3_in.orionConnectFirmID == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			3,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setInt(3,
																			row_tAmazonAuroraOutput_3_in.orionConnectFirmID);
														}

														if (row_tAmazonAuroraOutput_3_in.orionEclipseFirmId == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			4,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setInt(4,
																			row_tAmazonAuroraOutput_3_in.orionEclipseFirmId);
														}

														if (row_tAmazonAuroraOutput_3_in.accountId == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			5,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setString(
																			5,
																			row_tAmazonAuroraOutput_3_in.accountId);
														}

														if (row_tAmazonAuroraOutput_3_in.accountNumber == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			6,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setString(
																			6,
																			row_tAmazonAuroraOutput_3_in.accountNumber);
														}

														if (row_tAmazonAuroraOutput_3_in.name == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			7,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setString(
																			7,
																			row_tAmazonAuroraOutput_3_in.name);
														}

														if (row_tAmazonAuroraOutput_3_in.portfolioId == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			8,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setInt(8,
																			row_tAmazonAuroraOutput_3_in.portfolioId);
														}

														if (row_tAmazonAuroraOutput_3_in.householdId == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			9,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setInt(9,
																			row_tAmazonAuroraOutput_3_in.householdId);
														}

														if (row_tAmazonAuroraOutput_3_in.YTDRealizedSTGL == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			10,
																			java.sql.Types.FLOAT);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setFloat(
																			10,
																			row_tAmazonAuroraOutput_3_in.YTDRealizedSTGL);
														}

														if (row_tAmazonAuroraOutput_3_in.YTDRealizedLTGL == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			11,
																			java.sql.Types.FLOAT);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setFloat(
																			11,
																			row_tAmazonAuroraOutput_3_in.YTDRealizedLTGL);
														}

														if (row_tAmazonAuroraOutput_3_in.SSN == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			12,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setString(
																			12,
																			row_tAmazonAuroraOutput_3_in.SSN);
														}

														if (row_tAmazonAuroraOutput_3_in.sweepSymbol == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			13,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setString(
																			13,
																			row_tAmazonAuroraOutput_3_in.sweepSymbol);
														}

														if (row_tAmazonAuroraOutput_3_in.custodianId == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			14,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setInt(14,
																			row_tAmazonAuroraOutput_3_in.custodianId);
														}

														if (row_tAmazonAuroraOutput_3_in.custodialAccountNumber == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			15,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setString(
																			15,
																			row_tAmazonAuroraOutput_3_in.custodialAccountNumber);
														}

														if (row_tAmazonAuroraOutput_3_in.sleeveType == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			16,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setString(
																			16,
																			row_tAmazonAuroraOutput_3_in.sleeveType);
														}

														if (row_tAmazonAuroraOutput_3_in.createdDate != null) {
															date_tAmazonAuroraOutput_3 = row_tAmazonAuroraOutput_3_in.createdDate
																	.getTime();
															if (date_tAmazonAuroraOutput_3 < year1_tAmazonAuroraOutput_3
																	|| date_tAmazonAuroraOutput_3 >= year10000_tAmazonAuroraOutput_3) {
																pstmt_tAmazonAuroraOutput_3
																		.setString(
																				17,
																				"0000-00-00 00:00:00");
															} else {
																pstmt_tAmazonAuroraOutput_3
																		.setTimestamp(
																				17,
																				new java.sql.Timestamp(
																						date_tAmazonAuroraOutput_3));
															}
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			17,
																			java.sql.Types.DATE);
														}

														if (row_tAmazonAuroraOutput_3_in.householdName == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			18,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setString(
																			18,
																			row_tAmazonAuroraOutput_3_in.householdName);
														}

														if (row_tAmazonAuroraOutput_3_in.accountTypeId == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			19,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setInt(19,
																			row_tAmazonAuroraOutput_3_in.accountTypeId);
														}

														if (row_tAmazonAuroraOutput_3_in.createdBy == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			20,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setInt(20,
																			row_tAmazonAuroraOutput_3_in.createdBy);
														}

														if (row_tAmazonAuroraOutput_3_in.editedDate != null) {
															date_tAmazonAuroraOutput_3 = row_tAmazonAuroraOutput_3_in.editedDate
																	.getTime();
															if (date_tAmazonAuroraOutput_3 < year1_tAmazonAuroraOutput_3
																	|| date_tAmazonAuroraOutput_3 >= year10000_tAmazonAuroraOutput_3) {
																pstmt_tAmazonAuroraOutput_3
																		.setString(
																				21,
																				"0000-00-00 00:00:00");
															} else {
																pstmt_tAmazonAuroraOutput_3
																		.setTimestamp(
																				21,
																				new java.sql.Timestamp(
																						date_tAmazonAuroraOutput_3));
															}
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			21,
																			java.sql.Types.DATE);
														}

														if (row_tAmazonAuroraOutput_3_in.editedBy == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			22,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setInt(22,
																			row_tAmazonAuroraOutput_3_in.editedBy);
														}

														if (row_tAmazonAuroraOutput_3_in.isDeleted == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			23,
																			java.sql.Types.BOOLEAN);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setBoolean(
																			23,
																			row_tAmazonAuroraOutput_3_in.isDeleted);
														}

														if (row_tAmazonAuroraOutput_3_in.advisorId == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			24,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setInt(24,
																			row_tAmazonAuroraOutput_3_in.advisorId);
														}

														if (row_tAmazonAuroraOutput_3_in.sweepSecurityId == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			25,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setInt(25,
																			row_tAmazonAuroraOutput_3_in.sweepSecurityId);
														}

														if (row_tAmazonAuroraOutput_3_in.systematicAmount == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			26,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setString(
																			26,
																			row_tAmazonAuroraOutput_3_in.systematicAmount);
														}

														if (row_tAmazonAuroraOutput_3_in.systematicDate != null) {
															date_tAmazonAuroraOutput_3 = row_tAmazonAuroraOutput_3_in.systematicDate
																	.getTime();
															if (date_tAmazonAuroraOutput_3 < year1_tAmazonAuroraOutput_3
																	|| date_tAmazonAuroraOutput_3 >= year10000_tAmazonAuroraOutput_3) {
																pstmt_tAmazonAuroraOutput_3
																		.setString(
																				27,
																				"0000-00-00 00:00:00");
															} else {
																pstmt_tAmazonAuroraOutput_3
																		.setTimestamp(
																				27,
																				new java.sql.Timestamp(
																						date_tAmazonAuroraOutput_3));
															}
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			27,
																			java.sql.Types.DATE);
														}

														if (row_tAmazonAuroraOutput_3_in.SMA == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			28,
																			java.sql.Types.BOOLEAN);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setBoolean(
																			28,
																			row_tAmazonAuroraOutput_3_in.SMA);
														}

														if (row_tAmazonAuroraOutput_3_in.SMATradeable == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			29,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setString(
																			29,
																			row_tAmazonAuroraOutput_3_in.SMATradeable);
														}

														if (row_tAmazonAuroraOutput_3_in.BillingAccount == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			30,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setString(
																			30,
																			row_tAmazonAuroraOutput_3_in.BillingAccount);
														}

														if (row_tAmazonAuroraOutput_3_in.sleeveTarget == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			31,
																			java.sql.Types.FLOAT);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setFloat(
																			31,
																			row_tAmazonAuroraOutput_3_in.sleeveTarget);
														}

														if (row_tAmazonAuroraOutput_3_in.sleeveContributionPercent == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			32,
																			java.sql.Types.FLOAT);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setFloat(
																			32,
																			row_tAmazonAuroraOutput_3_in.sleeveContributionPercent);
														}

														if (row_tAmazonAuroraOutput_3_in.sleeveDistributionPercent == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			33,
																			java.sql.Types.FLOAT);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setFloat(
																			33,
																			row_tAmazonAuroraOutput_3_in.sleeveDistributionPercent);
														}

														if (row_tAmazonAuroraOutput_3_in.sleeveToleranceLower == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			34,
																			java.sql.Types.FLOAT);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setFloat(
																			34,
																			row_tAmazonAuroraOutput_3_in.sleeveToleranceLower);
														}

														if (row_tAmazonAuroraOutput_3_in.sleeveToleranceUpper == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			35,
																			java.sql.Types.FLOAT);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setFloat(
																			35,
																			row_tAmazonAuroraOutput_3_in.sleeveToleranceUpper);
														}

														if (row_tAmazonAuroraOutput_3_in.modelId == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			36,
																			java.sql.Types.INTEGER);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setInt(36,
																			row_tAmazonAuroraOutput_3_in.modelId);
														}

														if (row_tAmazonAuroraOutput_3_in.isDisabled == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			37,
																			java.sql.Types.BOOLEAN);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setBoolean(
																			37,
																			row_tAmazonAuroraOutput_3_in.isDisabled);
														}

														if (row_tAmazonAuroraOutput_3_in.disabledReason == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			38,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setString(
																			38,
																			row_tAmazonAuroraOutput_3_in.disabledReason);
														}

														if (row_tAmazonAuroraOutput_3_in.hashedSsn == null) {
															pstmt_tAmazonAuroraOutput_3
																	.setNull(
																			39,
																			java.sql.Types.VARCHAR);
														} else {
															pstmt_tAmazonAuroraOutput_3
																	.setString(
																			39,
																			row_tAmazonAuroraOutput_3_in.hashedSsn);
														}

														pstmt_tAmazonAuroraOutput_3
																.addBatch();
														nb_line_tAmazonAuroraOutput_3++;

														batchSizeCounter_tAmazonAuroraOutput_3++;
														if (batchSize_tAmazonAuroraOutput_3 <= batchSizeCounter_tAmazonAuroraOutput_3) {
															try {
																int countSum_tAmazonAuroraOutput_3 = 0;
																for (int countEach_tAmazonAuroraOutput_3 : pstmt_tAmazonAuroraOutput_3
																		.executeBatch()) {
																	countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
																			: 1);
																}
																insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;
															} catch (java.sql.BatchUpdateException e) {
																int countSum_tAmazonAuroraOutput_3 = 0;
																for (int countEach_tAmazonAuroraOutput_3 : e
																		.getUpdateCounts()) {
																	countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
																			: countEach_tAmazonAuroraOutput_3);
																}
																insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;
																System.err
																		.println(e
																				.getMessage());
															}

															batchSizeCounter_tAmazonAuroraOutput_3 = 0;
														}
														commitCounter_tAmazonAuroraOutput_3++;

														if (commitEvery_tAmazonAuroraOutput_3 <= commitCounter_tAmazonAuroraOutput_3) {

															try {
																int countSum_tAmazonAuroraOutput_3 = 0;
																for (int countEach_tAmazonAuroraOutput_3 : pstmt_tAmazonAuroraOutput_3
																		.executeBatch()) {
																	countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
																			: 1);
																}
																insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;
															} catch (java.sql.BatchUpdateException e) {
																int countSum_tAmazonAuroraOutput_3 = 0;
																for (int countEach_tAmazonAuroraOutput_3 : e
																		.getUpdateCounts()) {
																	countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
																			: countEach_tAmazonAuroraOutput_3);
																}
																insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;
																System.err
																		.println(e
																				.getMessage());

															}
															conn_tAmazonAuroraOutput_3
																	.commit();
															commitCounter_tAmazonAuroraOutput_3 = 0;

														}

														tos_count_tAmazonAuroraOutput_3_out++;

														/**
														 * [
														 * tAmazonAuroraOutput_3_out
														 * main ] stop
														 */

													} // End of branch
														// "new_account_output"

												} // close loop of lookup 'row6'
													// // G_TM_M_043

											} // End of branch
												// "account_portfolio_id"

											// Start of branch
											// "none_portfolio_id"
											if (none_portfolio_id != null) {

												/**
												 * [tMap_11 main ] start
												 */

												currentComponent = "tMap_11";

												boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

												// ###############################
												// # Input tables (lookups)
												boolean rejectedInnerJoin_tMap_11 = false;
												boolean mainRowRejected_tMap_11 = false;

												// /////////////////////////////////////////////
												// Starting Lookup Table "row15"
												// /////////////////////////////////////////////

												boolean forceLooprow15 = false;

												row15Struct row15ObjectFromLookup = null;

												if (!rejectedInnerJoin_tMap_11) { // G_TM_M_020

													hasCasePrimitiveKeyWithNull_tMap_11 = false;

													row15HashKey.orionConnectFirmId = none_portfolio_id.orionConnectFirmID;

													row15HashKey.hashCodeDirty = true;

													tHash_Lookup_row15
															.lookup(row15HashKey);

												} // G_TM_M_020

												if (tHash_Lookup_row15 != null
														&& tHash_Lookup_row15
																.getCount(row15HashKey) > 1) { // G
																								// 071

													// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.orionConnectFirmId = '"
													// +
													// row15HashKey.orionConnectFirmId
													// + "'");
												} // G 071

												row15Struct row15 = null;

												row15Struct fromLookup_row15 = null;
												row15 = row15Default;

												if (tHash_Lookup_row15 != null
														&& tHash_Lookup_row15
																.hasNext()) { // G
																				// 099

													fromLookup_row15 = tHash_Lookup_row15
															.next();

												} // G 099

												if (fromLookup_row15 != null) {
													row15 = fromLookup_row15;
												}

												// ###############################
												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
													// ###############################
													// # Output tables

													none_portfolio_account_creation = null;

													// # Output table :
													// 'none_portfolio_account_creation'
													none_portfolio_account_creation_tmp.id = null;
													none_portfolio_account_creation_tmp.orionConnectExternalId = none_portfolio_id.orionConnectExternalId;
													none_portfolio_account_creation_tmp.orionConnectFirmID = none_portfolio_id.orionConnectFirmID;
													none_portfolio_account_creation_tmp.orionEclipseFirmId = row15.orionEclipseFirmId;
													none_portfolio_account_creation_tmp.accountId = none_portfolio_id.accountId;
													none_portfolio_account_creation_tmp.accountNumber = none_portfolio_id.accountNumber;
													none_portfolio_account_creation_tmp.name = none_portfolio_id.name;
													none_portfolio_account_creation_tmp.portfolioId = none_portfolio_id.portfolioId;
													none_portfolio_account_creation_tmp.householdId = null;
													none_portfolio_account_creation_tmp.YTDRealizedSTGL = none_portfolio_id.YTDRealizedSTGL;
													none_portfolio_account_creation_tmp.YTDRealizedLTGL = none_portfolio_id.YTDRealizedLTGL;
													none_portfolio_account_creation_tmp.SSN = none_portfolio_id.SSN;
													none_portfolio_account_creation_tmp.sweepSymbol = none_portfolio_id.sweepSymbol;
													none_portfolio_account_creation_tmp.custodianId = none_portfolio_id.custodianId;
													none_portfolio_account_creation_tmp.custodialAccountNumber = none_portfolio_id.custodialAccountNumber;
													none_portfolio_account_creation_tmp.sleeveType = none_portfolio_id.sleeveType;
													none_portfolio_account_creation_tmp.createdDate = none_portfolio_id.createdDate;
													none_portfolio_account_creation_tmp.householdName = none_portfolio_id.householdName;
													none_portfolio_account_creation_tmp.accountTypeId = none_portfolio_id.accountTypeId;
													none_portfolio_account_creation_tmp.createdBy = none_portfolio_id.createdBy;
													none_portfolio_account_creation_tmp.editedDate = none_portfolio_id.editedDate;
													none_portfolio_account_creation_tmp.editedBy = none_portfolio_id.editedBy;
													none_portfolio_account_creation_tmp.isDeleted = none_portfolio_id.isDeleted;
													none_portfolio_account_creation_tmp.advisorId = none_portfolio_id.advisorId;
													none_portfolio_account_creation_tmp.sweepSecurityId = none_portfolio_id.sweepSecurityId;
													none_portfolio_account_creation_tmp.systematicAmount = none_portfolio_id.systematicAmount;
													none_portfolio_account_creation_tmp.systematicDate = none_portfolio_id.systematicDate;
													none_portfolio_account_creation_tmp.SMA = none_portfolio_id.SMA;
													none_portfolio_account_creation_tmp.SMATradeable = none_portfolio_id.SMATradeable;
													none_portfolio_account_creation_tmp.BillingAccount = none_portfolio_id.BillingAccount;
													none_portfolio_account_creation_tmp.sleeveTarget = none_portfolio_id.sleeveTarget;
													none_portfolio_account_creation_tmp.sleeveContributionPercent = none_portfolio_id.sleeveContributionPercent;
													none_portfolio_account_creation_tmp.sleeveDistributionPercent = none_portfolio_id.sleeveDistributionPercent;
													none_portfolio_account_creation_tmp.sleeveToleranceLower = none_portfolio_id.sleeveToleranceLower;
													none_portfolio_account_creation_tmp.sleeveToleranceUpper = none_portfolio_id.sleeveToleranceUpper;
													none_portfolio_account_creation_tmp.modelId = none_portfolio_id.modelId;
													none_portfolio_account_creation_tmp.isDisabled = none_portfolio_id.isDisabled;
													none_portfolio_account_creation_tmp.disabledReason = none_portfolio_id.disabledReason;
													none_portfolio_account_creation_tmp.hashedSsn = none_portfolio_id.HashedSSN;
													none_portfolio_account_creation = none_portfolio_account_creation_tmp;
													// ###############################

												} // end of Var scope

												rejectedInnerJoin_tMap_11 = false;

												tos_count_tMap_11++;

												/**
												 * [tMap_11 main ] stop
												 */
												// Start of branch
												// "none_portfolio_account_creation"
												if (none_portfolio_account_creation != null) {

													/**
													 * [tAmazonAuroraOutput_8_in
													 * main ] start
													 */

													currentVirtualComponent = "tAmazonAuroraOutput_8";

													currentComponent = "tAmazonAuroraOutput_8_in";

													row_tAmazonAuroraOutput_8_in = none_portfolio_account_creation;

													tos_count_tAmazonAuroraOutput_8_in++;

													/**
													 * [tAmazonAuroraOutput_8_in
													 * main ] stop
													 */

													/**
													 * [
													 * tAmazonAuroraOutput_8_out
													 * main ] start
													 */

													currentVirtualComponent = "tAmazonAuroraOutput_8";

													currentComponent = "tAmazonAuroraOutput_8_out";

													whetherReject_tAmazonAuroraOutput_8 = false;
													if (row_tAmazonAuroraOutput_8_in.id == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		1,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setInt(1,
																		row_tAmazonAuroraOutput_8_in.id);
													}

													if (row_tAmazonAuroraOutput_8_in.orionConnectExternalId == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		2,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setInt(2,
																		row_tAmazonAuroraOutput_8_in.orionConnectExternalId);
													}

													if (row_tAmazonAuroraOutput_8_in.orionConnectFirmID == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		3,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setInt(3,
																		row_tAmazonAuroraOutput_8_in.orionConnectFirmID);
													}

													if (row_tAmazonAuroraOutput_8_in.orionEclipseFirmId == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		4,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setInt(4,
																		row_tAmazonAuroraOutput_8_in.orionEclipseFirmId);
													}

													if (row_tAmazonAuroraOutput_8_in.accountId == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		5,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setString(
																		5,
																		row_tAmazonAuroraOutput_8_in.accountId);
													}

													if (row_tAmazonAuroraOutput_8_in.accountNumber == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		6,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setString(
																		6,
																		row_tAmazonAuroraOutput_8_in.accountNumber);
													}

													if (row_tAmazonAuroraOutput_8_in.name == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		7,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setString(
																		7,
																		row_tAmazonAuroraOutput_8_in.name);
													}

													if (row_tAmazonAuroraOutput_8_in.portfolioId == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		8,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setInt(8,
																		row_tAmazonAuroraOutput_8_in.portfolioId);
													}

													if (row_tAmazonAuroraOutput_8_in.householdId == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		9,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setInt(9,
																		row_tAmazonAuroraOutput_8_in.householdId);
													}

													if (row_tAmazonAuroraOutput_8_in.YTDRealizedSTGL == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		10,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setFloat(
																		10,
																		row_tAmazonAuroraOutput_8_in.YTDRealizedSTGL);
													}

													if (row_tAmazonAuroraOutput_8_in.YTDRealizedLTGL == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		11,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setFloat(
																		11,
																		row_tAmazonAuroraOutput_8_in.YTDRealizedLTGL);
													}

													if (row_tAmazonAuroraOutput_8_in.SSN == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		12,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setString(
																		12,
																		row_tAmazonAuroraOutput_8_in.SSN);
													}

													if (row_tAmazonAuroraOutput_8_in.sweepSymbol == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		13,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setString(
																		13,
																		row_tAmazonAuroraOutput_8_in.sweepSymbol);
													}

													if (row_tAmazonAuroraOutput_8_in.custodianId == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		14,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setInt(14,
																		row_tAmazonAuroraOutput_8_in.custodianId);
													}

													if (row_tAmazonAuroraOutput_8_in.custodialAccountNumber == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		15,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setString(
																		15,
																		row_tAmazonAuroraOutput_8_in.custodialAccountNumber);
													}

													if (row_tAmazonAuroraOutput_8_in.sleeveType == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		16,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setString(
																		16,
																		row_tAmazonAuroraOutput_8_in.sleeveType);
													}

													if (row_tAmazonAuroraOutput_8_in.createdDate != null) {
														date_tAmazonAuroraOutput_8 = row_tAmazonAuroraOutput_8_in.createdDate
																.getTime();
														if (date_tAmazonAuroraOutput_8 < year1_tAmazonAuroraOutput_8
																|| date_tAmazonAuroraOutput_8 >= year10000_tAmazonAuroraOutput_8) {
															pstmt_tAmazonAuroraOutput_8
																	.setString(
																			17,
																			"0000-00-00 00:00:00");
														} else {
															pstmt_tAmazonAuroraOutput_8
																	.setTimestamp(
																			17,
																			new java.sql.Timestamp(
																					date_tAmazonAuroraOutput_8));
														}
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		17,
																		java.sql.Types.DATE);
													}

													if (row_tAmazonAuroraOutput_8_in.householdName == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		18,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setString(
																		18,
																		row_tAmazonAuroraOutput_8_in.householdName);
													}

													if (row_tAmazonAuroraOutput_8_in.accountTypeId == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		19,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setInt(19,
																		row_tAmazonAuroraOutput_8_in.accountTypeId);
													}

													if (row_tAmazonAuroraOutput_8_in.createdBy == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		20,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setInt(20,
																		row_tAmazonAuroraOutput_8_in.createdBy);
													}

													if (row_tAmazonAuroraOutput_8_in.editedDate != null) {
														date_tAmazonAuroraOutput_8 = row_tAmazonAuroraOutput_8_in.editedDate
																.getTime();
														if (date_tAmazonAuroraOutput_8 < year1_tAmazonAuroraOutput_8
																|| date_tAmazonAuroraOutput_8 >= year10000_tAmazonAuroraOutput_8) {
															pstmt_tAmazonAuroraOutput_8
																	.setString(
																			21,
																			"0000-00-00 00:00:00");
														} else {
															pstmt_tAmazonAuroraOutput_8
																	.setTimestamp(
																			21,
																			new java.sql.Timestamp(
																					date_tAmazonAuroraOutput_8));
														}
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		21,
																		java.sql.Types.DATE);
													}

													if (row_tAmazonAuroraOutput_8_in.editedBy == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		22,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setInt(22,
																		row_tAmazonAuroraOutput_8_in.editedBy);
													}

													if (row_tAmazonAuroraOutput_8_in.isDeleted == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		23,
																		java.sql.Types.BOOLEAN);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setBoolean(
																		23,
																		row_tAmazonAuroraOutput_8_in.isDeleted);
													}

													if (row_tAmazonAuroraOutput_8_in.advisorId == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		24,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setInt(24,
																		row_tAmazonAuroraOutput_8_in.advisorId);
													}

													if (row_tAmazonAuroraOutput_8_in.sweepSecurityId == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		25,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setInt(25,
																		row_tAmazonAuroraOutput_8_in.sweepSecurityId);
													}

													if (row_tAmazonAuroraOutput_8_in.systematicAmount == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		26,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setString(
																		26,
																		row_tAmazonAuroraOutput_8_in.systematicAmount);
													}

													if (row_tAmazonAuroraOutput_8_in.systematicDate != null) {
														date_tAmazonAuroraOutput_8 = row_tAmazonAuroraOutput_8_in.systematicDate
																.getTime();
														if (date_tAmazonAuroraOutput_8 < year1_tAmazonAuroraOutput_8
																|| date_tAmazonAuroraOutput_8 >= year10000_tAmazonAuroraOutput_8) {
															pstmt_tAmazonAuroraOutput_8
																	.setString(
																			27,
																			"0000-00-00 00:00:00");
														} else {
															pstmt_tAmazonAuroraOutput_8
																	.setTimestamp(
																			27,
																			new java.sql.Timestamp(
																					date_tAmazonAuroraOutput_8));
														}
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		27,
																		java.sql.Types.DATE);
													}

													if (row_tAmazonAuroraOutput_8_in.SMA == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		28,
																		java.sql.Types.BOOLEAN);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setBoolean(
																		28,
																		row_tAmazonAuroraOutput_8_in.SMA);
													}

													if (row_tAmazonAuroraOutput_8_in.SMATradeable == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		29,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setString(
																		29,
																		row_tAmazonAuroraOutput_8_in.SMATradeable);
													}

													if (row_tAmazonAuroraOutput_8_in.BillingAccount == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		30,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setString(
																		30,
																		row_tAmazonAuroraOutput_8_in.BillingAccount);
													}

													if (row_tAmazonAuroraOutput_8_in.sleeveTarget == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		31,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setFloat(
																		31,
																		row_tAmazonAuroraOutput_8_in.sleeveTarget);
													}

													if (row_tAmazonAuroraOutput_8_in.sleeveContributionPercent == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		32,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setFloat(
																		32,
																		row_tAmazonAuroraOutput_8_in.sleeveContributionPercent);
													}

													if (row_tAmazonAuroraOutput_8_in.sleeveDistributionPercent == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		33,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setFloat(
																		33,
																		row_tAmazonAuroraOutput_8_in.sleeveDistributionPercent);
													}

													if (row_tAmazonAuroraOutput_8_in.sleeveToleranceLower == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		34,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setFloat(
																		34,
																		row_tAmazonAuroraOutput_8_in.sleeveToleranceLower);
													}

													if (row_tAmazonAuroraOutput_8_in.sleeveToleranceUpper == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		35,
																		java.sql.Types.FLOAT);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setFloat(
																		35,
																		row_tAmazonAuroraOutput_8_in.sleeveToleranceUpper);
													}

													if (row_tAmazonAuroraOutput_8_in.modelId == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		36,
																		java.sql.Types.INTEGER);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setInt(36,
																		row_tAmazonAuroraOutput_8_in.modelId);
													}

													if (row_tAmazonAuroraOutput_8_in.isDisabled == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		37,
																		java.sql.Types.BOOLEAN);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setBoolean(
																		37,
																		row_tAmazonAuroraOutput_8_in.isDisabled);
													}

													if (row_tAmazonAuroraOutput_8_in.disabledReason == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		38,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setString(
																		38,
																		row_tAmazonAuroraOutput_8_in.disabledReason);
													}

													if (row_tAmazonAuroraOutput_8_in.hashedSsn == null) {
														pstmt_tAmazonAuroraOutput_8
																.setNull(
																		39,
																		java.sql.Types.VARCHAR);
													} else {
														pstmt_tAmazonAuroraOutput_8
																.setString(
																		39,
																		row_tAmazonAuroraOutput_8_in.hashedSsn);
													}

													pstmt_tAmazonAuroraOutput_8
															.addBatch();
													nb_line_tAmazonAuroraOutput_8++;

													batchSizeCounter_tAmazonAuroraOutput_8++;
													if (batchSize_tAmazonAuroraOutput_8 <= batchSizeCounter_tAmazonAuroraOutput_8) {
														try {
															int countSum_tAmazonAuroraOutput_8 = 0;
															for (int countEach_tAmazonAuroraOutput_8 : pstmt_tAmazonAuroraOutput_8
																	.executeBatch()) {
																countSum_tAmazonAuroraOutput_8 += (countEach_tAmazonAuroraOutput_8 < 0 ? 0
																		: 1);
															}
															insertedCount_tAmazonAuroraOutput_8 += countSum_tAmazonAuroraOutput_8;
														} catch (java.sql.BatchUpdateException e) {
															int countSum_tAmazonAuroraOutput_8 = 0;
															for (int countEach_tAmazonAuroraOutput_8 : e
																	.getUpdateCounts()) {
																countSum_tAmazonAuroraOutput_8 += (countEach_tAmazonAuroraOutput_8 < 0 ? 0
																		: countEach_tAmazonAuroraOutput_8);
															}
															insertedCount_tAmazonAuroraOutput_8 += countSum_tAmazonAuroraOutput_8;
															System.err
																	.println(e
																			.getMessage());
														}

														batchSizeCounter_tAmazonAuroraOutput_8 = 0;
													}
													commitCounter_tAmazonAuroraOutput_8++;

													if (commitEvery_tAmazonAuroraOutput_8 <= commitCounter_tAmazonAuroraOutput_8) {

														try {
															int countSum_tAmazonAuroraOutput_8 = 0;
															for (int countEach_tAmazonAuroraOutput_8 : pstmt_tAmazonAuroraOutput_8
																	.executeBatch()) {
																countSum_tAmazonAuroraOutput_8 += (countEach_tAmazonAuroraOutput_8 < 0 ? 0
																		: 1);
															}
															insertedCount_tAmazonAuroraOutput_8 += countSum_tAmazonAuroraOutput_8;
														} catch (java.sql.BatchUpdateException e) {
															int countSum_tAmazonAuroraOutput_8 = 0;
															for (int countEach_tAmazonAuroraOutput_8 : e
																	.getUpdateCounts()) {
																countSum_tAmazonAuroraOutput_8 += (countEach_tAmazonAuroraOutput_8 < 0 ? 0
																		: countEach_tAmazonAuroraOutput_8);
															}
															insertedCount_tAmazonAuroraOutput_8 += countSum_tAmazonAuroraOutput_8;
															System.err
																	.println(e
																			.getMessage());

														}
														conn_tAmazonAuroraOutput_8
																.commit();
														commitCounter_tAmazonAuroraOutput_8 = 0;

													}

													tos_count_tAmazonAuroraOutput_8_out++;

													/**
													 * [
													 * tAmazonAuroraOutput_8_out
													 * main ] stop
													 */

												} // End of branch
													// "none_portfolio_account_creation"

											} // End of branch
												// "none_portfolio_id"

										} // End of branch "row2"

										// Start of branch "row5"
										if (row5 != null) {

											/**
											 * [tMap_5 main ] start
											 */

											currentComponent = "tMap_5";

											boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_5 = false;
											boolean mainRowRejected_tMap_5 = false;

											// /////////////////////////////////////////////
											// Starting Lookup Table "row16"
											// /////////////////////////////////////////////

											boolean forceLooprow16 = false;

											row16Struct row16ObjectFromLookup = null;

											if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

												hasCasePrimitiveKeyWithNull_tMap_5 = false;

												row16HashKey.orionConnectFirmId = row5.OrionFirmId;

												row16HashKey.hashCodeDirty = true;

												tHash_Lookup_row16
														.lookup(row16HashKey);

											} // G_TM_M_020

											if (tHash_Lookup_row16 != null
													&& tHash_Lookup_row16
															.getCount(row16HashKey) > 1) { // G
																							// 071

												// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.orionConnectFirmId = '"
												// +
												// row16HashKey.orionConnectFirmId
												// + "'");
											} // G 071

											row16Struct row16 = null;

											row16Struct fromLookup_row16 = null;
											row16 = row16Default;

											if (tHash_Lookup_row16 != null
													&& tHash_Lookup_row16
															.hasNext()) { // G
																			// 099

												fromLookup_row16 = tHash_Lookup_row16
														.next();

											} // G 099

											if (fromLookup_row16 != null) {
												row16 = fromLookup_row16;
											}

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
												// ###############################
												// # Output tables

												update_old_accounts = null;

												// # Output table :
												// 'update_old_accounts'
												update_old_accounts_tmp.id = null;
												update_old_accounts_tmp.orionConnectExternalId = row5.ExternalId;
												update_old_accounts_tmp.orionConnectFirmID = row5.OrionFirmId;
												update_old_accounts_tmp.orionEclipseFirmId = row16.orionEclipseFirmId;
												update_old_accounts_tmp.accountId = row5.AccountId;
												update_old_accounts_tmp.accountNumber = row5.AccountNumber;
												update_old_accounts_tmp.name = row5.AccountName;
												update_old_accounts_tmp.portfolioId = row5.existingAccountPortfolioId;
												update_old_accounts_tmp.householdId = row5.HouseholdId;
												update_old_accounts_tmp.YTDRealizedSTGL = row5.AccountYTDRealizedSTGL;
												update_old_accounts_tmp.YTDRealizedLTGL = row5.AccountYTDRealizedLTGL;
												update_old_accounts_tmp.SSN = row5.SSN;
												update_old_accounts_tmp.sweepSymbol = row5.SweepSymbol;
												update_old_accounts_tmp.custodianId = row5.custodianId;
												update_old_accounts_tmp.custodialAccountNumber = null;
												update_old_accounts_tmp.sleeveType = row5.SleeveType;
												update_old_accounts_tmp.createdDate = TalendDate
														.getCurrentDate();
												update_old_accounts_tmp.householdName = row5.HouseholdName;
												update_old_accounts_tmp.accountTypeId = row5.accountTypeId;
												update_old_accounts_tmp.createdBy = 1;
												update_old_accounts_tmp.editedDate = null;
												update_old_accounts_tmp.editedBy = 1;
												update_old_accounts_tmp.isDeleted = null;
												update_old_accounts_tmp.advisorId = row5.advisorId;
												update_old_accounts_tmp.sweepSecurityId = null;
												update_old_accounts_tmp.systematicAmount = row5.SystematicAmount;
												update_old_accounts_tmp.systematicDate = row5.SystematicDate;
												update_old_accounts_tmp.SMA = row5.SMA;
												update_old_accounts_tmp.SMATradeable = row5.SMATradeable;
												update_old_accounts_tmp.BillingAccount = row5.BillingAccount;
												update_old_accounts_tmp.sleeveTarget = row5.SleeveTarget;
												update_old_accounts_tmp.sleeveContributionPercent = row5.SleeveContributionPercent;
												update_old_accounts_tmp.sleeveDistributionPercent = row5.SleeveDistributionPercent;
												update_old_accounts_tmp.sleeveToleranceLower = row5.SleeveToleranceLower;
												update_old_accounts_tmp.sleeveToleranceUpper = row5.SleeveToleranceUpper;
												update_old_accounts_tmp.modelId = null;
												update_old_accounts_tmp.isDisabled = null;
												update_old_accounts_tmp.disabledReason = null;
												update_old_accounts_tmp.hashedSsn = row5.HashedSSN;
												update_old_accounts = update_old_accounts_tmp;
												// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_5 = false;

											tos_count_tMap_5++;

											/**
											 * [tMap_5 main ] stop
											 */
											// Start of branch
											// "update_old_accounts"
											if (update_old_accounts != null) {

												/**
												 * [tAmazonAuroraOutput_4_in
												 * main ] start
												 */

												currentVirtualComponent = "tAmazonAuroraOutput_4";

												currentComponent = "tAmazonAuroraOutput_4_in";

												row_tAmazonAuroraOutput_4_in = update_old_accounts;

												tos_count_tAmazonAuroraOutput_4_in++;

												/**
												 * [tAmazonAuroraOutput_4_in
												 * main ] stop
												 */

												/**
												 * [tAmazonAuroraOutput_4_out
												 * main ] start
												 */

												currentVirtualComponent = "tAmazonAuroraOutput_4";

												currentComponent = "tAmazonAuroraOutput_4_out";

												whetherReject_tAmazonAuroraOutput_4 = false;
												if (row_tAmazonAuroraOutput_4_in.id == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	1,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setInt(1,
																	row_tAmazonAuroraOutput_4_in.id);
												}

												if (row_tAmazonAuroraOutput_4_in.orionConnectFirmID == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	2,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setInt(2,
																	row_tAmazonAuroraOutput_4_in.orionConnectFirmID);
												}

												if (row_tAmazonAuroraOutput_4_in.orionEclipseFirmId == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	3,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setInt(3,
																	row_tAmazonAuroraOutput_4_in.orionEclipseFirmId);
												}

												if (row_tAmazonAuroraOutput_4_in.accountId == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	4,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setString(
																	4,
																	row_tAmazonAuroraOutput_4_in.accountId);
												}

												if (row_tAmazonAuroraOutput_4_in.accountNumber == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	5,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setString(
																	5,
																	row_tAmazonAuroraOutput_4_in.accountNumber);
												}

												if (row_tAmazonAuroraOutput_4_in.name == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	6,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setString(
																	6,
																	row_tAmazonAuroraOutput_4_in.name);
												}

												if (row_tAmazonAuroraOutput_4_in.portfolioId == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	7,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setInt(7,
																	row_tAmazonAuroraOutput_4_in.portfolioId);
												}

												if (row_tAmazonAuroraOutput_4_in.householdId == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	8,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setInt(8,
																	row_tAmazonAuroraOutput_4_in.householdId);
												}

												if (row_tAmazonAuroraOutput_4_in.YTDRealizedSTGL == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	9,
																	java.sql.Types.FLOAT);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setFloat(
																	9,
																	row_tAmazonAuroraOutput_4_in.YTDRealizedSTGL);
												}

												if (row_tAmazonAuroraOutput_4_in.YTDRealizedLTGL == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	10,
																	java.sql.Types.FLOAT);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setFloat(
																	10,
																	row_tAmazonAuroraOutput_4_in.YTDRealizedLTGL);
												}

												if (row_tAmazonAuroraOutput_4_in.SSN == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	11,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setString(
																	11,
																	row_tAmazonAuroraOutput_4_in.SSN);
												}

												if (row_tAmazonAuroraOutput_4_in.sweepSymbol == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	12,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setString(
																	12,
																	row_tAmazonAuroraOutput_4_in.sweepSymbol);
												}

												if (row_tAmazonAuroraOutput_4_in.custodianId == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	13,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setInt(13,
																	row_tAmazonAuroraOutput_4_in.custodianId);
												}

												if (row_tAmazonAuroraOutput_4_in.custodialAccountNumber == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	14,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setString(
																	14,
																	row_tAmazonAuroraOutput_4_in.custodialAccountNumber);
												}

												if (row_tAmazonAuroraOutput_4_in.sleeveType == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	15,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setString(
																	15,
																	row_tAmazonAuroraOutput_4_in.sleeveType);
												}

												if (row_tAmazonAuroraOutput_4_in.createdDate != null) {
													date_tAmazonAuroraOutput_4 = row_tAmazonAuroraOutput_4_in.createdDate
															.getTime();
													if (date_tAmazonAuroraOutput_4 < year1_tAmazonAuroraOutput_4
															|| date_tAmazonAuroraOutput_4 >= year10000_tAmazonAuroraOutput_4) {
														pstmt_tAmazonAuroraOutput_4
																.setString(16,
																		"0000-00-00 00:00:00");
													} else {
														pstmt_tAmazonAuroraOutput_4
																.setTimestamp(
																		16,
																		new java.sql.Timestamp(
																				date_tAmazonAuroraOutput_4));
													}
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	16,
																	java.sql.Types.DATE);
												}

												if (row_tAmazonAuroraOutput_4_in.householdName == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	17,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setString(
																	17,
																	row_tAmazonAuroraOutput_4_in.householdName);
												}

												if (row_tAmazonAuroraOutput_4_in.accountTypeId == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	18,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setInt(18,
																	row_tAmazonAuroraOutput_4_in.accountTypeId);
												}

												if (row_tAmazonAuroraOutput_4_in.createdBy == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	19,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setInt(19,
																	row_tAmazonAuroraOutput_4_in.createdBy);
												}

												if (row_tAmazonAuroraOutput_4_in.editedDate != null) {
													date_tAmazonAuroraOutput_4 = row_tAmazonAuroraOutput_4_in.editedDate
															.getTime();
													if (date_tAmazonAuroraOutput_4 < year1_tAmazonAuroraOutput_4
															|| date_tAmazonAuroraOutput_4 >= year10000_tAmazonAuroraOutput_4) {
														pstmt_tAmazonAuroraOutput_4
																.setString(20,
																		"0000-00-00 00:00:00");
													} else {
														pstmt_tAmazonAuroraOutput_4
																.setTimestamp(
																		20,
																		new java.sql.Timestamp(
																				date_tAmazonAuroraOutput_4));
													}
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	20,
																	java.sql.Types.DATE);
												}

												if (row_tAmazonAuroraOutput_4_in.editedBy == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	21,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setInt(21,
																	row_tAmazonAuroraOutput_4_in.editedBy);
												}

												if (row_tAmazonAuroraOutput_4_in.isDeleted == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	22,
																	java.sql.Types.BOOLEAN);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setBoolean(
																	22,
																	row_tAmazonAuroraOutput_4_in.isDeleted);
												}

												if (row_tAmazonAuroraOutput_4_in.advisorId == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	23,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setInt(23,
																	row_tAmazonAuroraOutput_4_in.advisorId);
												}

												if (row_tAmazonAuroraOutput_4_in.sweepSecurityId == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	24,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setInt(24,
																	row_tAmazonAuroraOutput_4_in.sweepSecurityId);
												}

												if (row_tAmazonAuroraOutput_4_in.systematicAmount == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	25,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setString(
																	25,
																	row_tAmazonAuroraOutput_4_in.systematicAmount);
												}

												if (row_tAmazonAuroraOutput_4_in.systematicDate != null) {
													date_tAmazonAuroraOutput_4 = row_tAmazonAuroraOutput_4_in.systematicDate
															.getTime();
													if (date_tAmazonAuroraOutput_4 < year1_tAmazonAuroraOutput_4
															|| date_tAmazonAuroraOutput_4 >= year10000_tAmazonAuroraOutput_4) {
														pstmt_tAmazonAuroraOutput_4
																.setString(26,
																		"0000-00-00 00:00:00");
													} else {
														pstmt_tAmazonAuroraOutput_4
																.setTimestamp(
																		26,
																		new java.sql.Timestamp(
																				date_tAmazonAuroraOutput_4));
													}
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	26,
																	java.sql.Types.DATE);
												}

												if (row_tAmazonAuroraOutput_4_in.SMA == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	27,
																	java.sql.Types.BOOLEAN);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setBoolean(
																	27,
																	row_tAmazonAuroraOutput_4_in.SMA);
												}

												if (row_tAmazonAuroraOutput_4_in.SMATradeable == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	28,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setString(
																	28,
																	row_tAmazonAuroraOutput_4_in.SMATradeable);
												}

												if (row_tAmazonAuroraOutput_4_in.BillingAccount == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	29,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setString(
																	29,
																	row_tAmazonAuroraOutput_4_in.BillingAccount);
												}

												if (row_tAmazonAuroraOutput_4_in.sleeveTarget == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	30,
																	java.sql.Types.FLOAT);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setFloat(
																	30,
																	row_tAmazonAuroraOutput_4_in.sleeveTarget);
												}

												if (row_tAmazonAuroraOutput_4_in.sleeveContributionPercent == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	31,
																	java.sql.Types.FLOAT);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setFloat(
																	31,
																	row_tAmazonAuroraOutput_4_in.sleeveContributionPercent);
												}

												if (row_tAmazonAuroraOutput_4_in.sleeveDistributionPercent == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	32,
																	java.sql.Types.FLOAT);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setFloat(
																	32,
																	row_tAmazonAuroraOutput_4_in.sleeveDistributionPercent);
												}

												if (row_tAmazonAuroraOutput_4_in.sleeveToleranceLower == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	33,
																	java.sql.Types.FLOAT);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setFloat(
																	33,
																	row_tAmazonAuroraOutput_4_in.sleeveToleranceLower);
												}

												if (row_tAmazonAuroraOutput_4_in.sleeveToleranceUpper == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	34,
																	java.sql.Types.FLOAT);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setFloat(
																	34,
																	row_tAmazonAuroraOutput_4_in.sleeveToleranceUpper);
												}

												if (row_tAmazonAuroraOutput_4_in.modelId == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	35,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setInt(35,
																	row_tAmazonAuroraOutput_4_in.modelId);
												}

												if (row_tAmazonAuroraOutput_4_in.isDisabled == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	36,
																	java.sql.Types.BOOLEAN);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setBoolean(
																	36,
																	row_tAmazonAuroraOutput_4_in.isDisabled);
												}

												if (row_tAmazonAuroraOutput_4_in.disabledReason == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	37,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setString(
																	37,
																	row_tAmazonAuroraOutput_4_in.disabledReason);
												}

												if (row_tAmazonAuroraOutput_4_in.hashedSsn == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	38,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setString(
																	38,
																	row_tAmazonAuroraOutput_4_in.hashedSsn);
												}

												if (row_tAmazonAuroraOutput_4_in.orionConnectExternalId == null) {
													pstmt_tAmazonAuroraOutput_4
															.setNull(
																	39 + count_tAmazonAuroraOutput_4,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tAmazonAuroraOutput_4
															.setInt(39 + count_tAmazonAuroraOutput_4,
																	row_tAmazonAuroraOutput_4_in.orionConnectExternalId);
												}

												pstmt_tAmazonAuroraOutput_4
														.addBatch();
												nb_line_tAmazonAuroraOutput_4++;

												batchSizeCounter_tAmazonAuroraOutput_4++;
												if (batchSize_tAmazonAuroraOutput_4 <= batchSizeCounter_tAmazonAuroraOutput_4) {
													try {
														int countSum_tAmazonAuroraOutput_4 = 0;
														for (int countEach_tAmazonAuroraOutput_4 : pstmt_tAmazonAuroraOutput_4
																.executeBatch()) {
															countSum_tAmazonAuroraOutput_4 += (countEach_tAmazonAuroraOutput_4 < 0 ? 0
																	: countEach_tAmazonAuroraOutput_4);
														}
														updatedCount_tAmazonAuroraOutput_4 += countSum_tAmazonAuroraOutput_4;
														batchSizeCounter_tAmazonAuroraOutput_4 = 0;
													} catch (java.sql.BatchUpdateException e) {
														int countSum_tAmazonAuroraOutput_4 = 0;
														for (int countEach_tAmazonAuroraOutput_4 : e
																.getUpdateCounts()) {
															countSum_tAmazonAuroraOutput_4 += (countEach_tAmazonAuroraOutput_4 < 0 ? 0
																	: countEach_tAmazonAuroraOutput_4);
														}
														updatedCount_tAmazonAuroraOutput_4 += countSum_tAmazonAuroraOutput_4;
														System.err.println(e
																.getMessage());
													}

												}
												commitCounter_tAmazonAuroraOutput_4++;

												if (commitEvery_tAmazonAuroraOutput_4 <= commitCounter_tAmazonAuroraOutput_4) {

													try {
														int countSum_tAmazonAuroraOutput_4 = 0;
														for (int countEach_tAmazonAuroraOutput_4 : pstmt_tAmazonAuroraOutput_4
																.executeBatch()) {
															countSum_tAmazonAuroraOutput_4 += (countEach_tAmazonAuroraOutput_4 < 0 ? 0
																	: countEach_tAmazonAuroraOutput_4);
														}
														updatedCount_tAmazonAuroraOutput_4 += countSum_tAmazonAuroraOutput_4;
													} catch (java.sql.BatchUpdateException e) {
														int countSum_tAmazonAuroraOutput_4 = 0;
														for (int countEach_tAmazonAuroraOutput_4 : e
																.getUpdateCounts()) {
															countSum_tAmazonAuroraOutput_4 += (countEach_tAmazonAuroraOutput_4 < 0 ? 0
																	: countEach_tAmazonAuroraOutput_4);
														}
														updatedCount_tAmazonAuroraOutput_4 += countSum_tAmazonAuroraOutput_4;
														System.err.println(e
																.getMessage());

													}
													conn_tAmazonAuroraOutput_4
															.commit();
													commitCounter_tAmazonAuroraOutput_4 = 0;

												}

												tos_count_tAmazonAuroraOutput_4_out++;

												/**
												 * [tAmazonAuroraOutput_4_out
												 * main ] stop
												 */

											} // End of branch
												// "update_old_accounts"

										} // End of branch "row5"

									} // End of branch "account_filter"

									// Start of branch "noDataFount_joinReject"
									if (noDataFount_joinReject != null) {

										/**
										 * [tAmazonAuroraOutput_9_in main ]
										 * start
										 */

										currentVirtualComponent = "tAmazonAuroraOutput_9";

										currentComponent = "tAmazonAuroraOutput_9_in";

										row_tAmazonAuroraOutput_9_in = noDataFount_joinReject;

										tos_count_tAmazonAuroraOutput_9_in++;

										/**
										 * [tAmazonAuroraOutput_9_in main ] stop
										 */

										/**
										 * [tAmazonAuroraOutput_9_out main ]
										 * start
										 */

										currentVirtualComponent = "tAmazonAuroraOutput_9";

										currentComponent = "tAmazonAuroraOutput_9_out";

										whetherReject_tAmazonAuroraOutput_9 = false;
										if (row_tAmazonAuroraOutput_9_in.OrionFirmId == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															1,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setInt(1,
															row_tAmazonAuroraOutput_9_in.OrionFirmId);
										}

										if (row_tAmazonAuroraOutput_9_in.ExternalId == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															2,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setInt(2,
															row_tAmazonAuroraOutput_9_in.ExternalId);
										}

										if (row_tAmazonAuroraOutput_9_in.AccountId == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															3,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															3,
															row_tAmazonAuroraOutput_9_in.AccountId);
										}

										if (row_tAmazonAuroraOutput_9_in.AccountNumber == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															4,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															4,
															row_tAmazonAuroraOutput_9_in.AccountNumber);
										}

										if (row_tAmazonAuroraOutput_9_in.AccountName == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															5,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															5,
															row_tAmazonAuroraOutput_9_in.AccountName);
										}

										if (row_tAmazonAuroraOutput_9_in.PortfolioId == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															6,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															6,
															row_tAmazonAuroraOutput_9_in.PortfolioId);
										}

										if (row_tAmazonAuroraOutput_9_in.PortfolioName == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															7,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															7,
															row_tAmazonAuroraOutput_9_in.PortfolioName);
										}

										if (row_tAmazonAuroraOutput_9_in.HouseholdId == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															8,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setInt(8,
															row_tAmazonAuroraOutput_9_in.HouseholdId);
										}

										if (row_tAmazonAuroraOutput_9_in.HouseholdName == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															9,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															9,
															row_tAmazonAuroraOutput_9_in.HouseholdName);
										}

										if (row_tAmazonAuroraOutput_9_in.AccountType == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															10,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															10,
															row_tAmazonAuroraOutput_9_in.AccountType);
										}

										if (row_tAmazonAuroraOutput_9_in.Taxable == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															11,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setByte(
															11,
															row_tAmazonAuroraOutput_9_in.Taxable);
										}

										if (row_tAmazonAuroraOutput_9_in.AccountYTDRealizedSTGL == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															12,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setFloat(
															12,
															row_tAmazonAuroraOutput_9_in.AccountYTDRealizedSTGL);
										}

										if (row_tAmazonAuroraOutput_9_in.AccountYTDRealizedLTGL == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															13,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setFloat(
															13,
															row_tAmazonAuroraOutput_9_in.AccountYTDRealizedLTGL);
										}

										if (row_tAmazonAuroraOutput_9_in.SSN == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															14,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															14,
															row_tAmazonAuroraOutput_9_in.SSN);
										}

										if (row_tAmazonAuroraOutput_9_in.SweepSymbol == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															15,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															15,
															row_tAmazonAuroraOutput_9_in.SweepSymbol);
										}

										if (row_tAmazonAuroraOutput_9_in.Custodian == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															16,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															16,
															row_tAmazonAuroraOutput_9_in.Custodian);
										}

										if (row_tAmazonAuroraOutput_9_in.CustodialAccountNumber == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															17,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															17,
															row_tAmazonAuroraOutput_9_in.CustodialAccountNumber);
										}

										if (row_tAmazonAuroraOutput_9_in.AdvisorName == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															18,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															18,
															row_tAmazonAuroraOutput_9_in.AdvisorName);
										}

										if (row_tAmazonAuroraOutput_9_in.AdvisorExternalId == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															19,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setInt(19,
															row_tAmazonAuroraOutput_9_in.AdvisorExternalId);
										}

										if (row_tAmazonAuroraOutput_9_in.SleeveType == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															20,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															20,
															row_tAmazonAuroraOutput_9_in.SleeveType);
										}

										if (row_tAmazonAuroraOutput_9_in.SleeveTarget == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															21,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setFloat(
															21,
															row_tAmazonAuroraOutput_9_in.SleeveTarget);
										}

										if (row_tAmazonAuroraOutput_9_in.SleeveContributionPercent == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															22,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setFloat(
															22,
															row_tAmazonAuroraOutput_9_in.SleeveContributionPercent);
										}

										if (row_tAmazonAuroraOutput_9_in.SleeveDistributionPercent == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															23,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setFloat(
															23,
															row_tAmazonAuroraOutput_9_in.SleeveDistributionPercent);
										}

										if (row_tAmazonAuroraOutput_9_in.SleeveToleranceLower == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															24,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setFloat(
															24,
															row_tAmazonAuroraOutput_9_in.SleeveToleranceLower);
										}

										if (row_tAmazonAuroraOutput_9_in.SleeveToleranceUpper == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															25,
															java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setFloat(
															25,
															row_tAmazonAuroraOutput_9_in.SleeveToleranceUpper);
										}

										if (row_tAmazonAuroraOutput_9_in.SMA == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															26,
															java.sql.Types.BOOLEAN);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setBoolean(
															26,
															row_tAmazonAuroraOutput_9_in.SMA);
										}

										if (row_tAmazonAuroraOutput_9_in.SMATradeable == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															27,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															27,
															row_tAmazonAuroraOutput_9_in.SMATradeable);
										}

										if (row_tAmazonAuroraOutput_9_in.BillingAccount == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															28,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															28,
															row_tAmazonAuroraOutput_9_in.BillingAccount);
										}

										if (row_tAmazonAuroraOutput_9_in.SystematicAmount == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															29,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															29,
															row_tAmazonAuroraOutput_9_in.SystematicAmount);
										}

										if (row_tAmazonAuroraOutput_9_in.SystematicDate != null) {
											date_tAmazonAuroraOutput_9 = row_tAmazonAuroraOutput_9_in.SystematicDate
													.getTime();
											if (date_tAmazonAuroraOutput_9 < year1_tAmazonAuroraOutput_9
													|| date_tAmazonAuroraOutput_9 >= year10000_tAmazonAuroraOutput_9) {
												pstmt_tAmazonAuroraOutput_9
														.setString(30,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonAuroraOutput_9
														.setTimestamp(
																30,
																new java.sql.Timestamp(
																		date_tAmazonAuroraOutput_9));
											}
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setNull(30,
															java.sql.Types.DATE);
										}

										if (row_tAmazonAuroraOutput_9_in.HashedSSN == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															31,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															31,
															row_tAmazonAuroraOutput_9_in.HashedSSN);
										}

										if (row_tAmazonAuroraOutput_9_in.sleeveContributionMethod == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															32,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															32,
															row_tAmazonAuroraOutput_9_in.sleeveContributionMethod);
										}

										if (row_tAmazonAuroraOutput_9_in.sleeveStrategyName == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															33,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															33,
															row_tAmazonAuroraOutput_9_in.sleeveStrategyName);
										}

										if (row_tAmazonAuroraOutput_9_in.sleeveDistributionMethod == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															34,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setString(
															34,
															row_tAmazonAuroraOutput_9_in.sleeveDistributionMethod);
										}

										if (row_tAmazonAuroraOutput_9_in.registrationId == null) {
											pstmt_tAmazonAuroraOutput_9
													.setNull(
															35,
															java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonAuroraOutput_9
													.setInt(35,
															row_tAmazonAuroraOutput_9_in.registrationId);
										}

										pstmt_tAmazonAuroraOutput_9.addBatch();
										nb_line_tAmazonAuroraOutput_9++;

										batchSizeCounter_tAmazonAuroraOutput_9++;
										if (batchSize_tAmazonAuroraOutput_9 <= batchSizeCounter_tAmazonAuroraOutput_9) {
											try {
												int countSum_tAmazonAuroraOutput_9 = 0;
												for (int countEach_tAmazonAuroraOutput_9 : pstmt_tAmazonAuroraOutput_9
														.executeBatch()) {
													countSum_tAmazonAuroraOutput_9 += (countEach_tAmazonAuroraOutput_9 < 0 ? 0
															: 1);
												}
												insertedCount_tAmazonAuroraOutput_9 += countSum_tAmazonAuroraOutput_9;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tAmazonAuroraOutput_9 = 0;
												for (int countEach_tAmazonAuroraOutput_9 : e
														.getUpdateCounts()) {
													countSum_tAmazonAuroraOutput_9 += (countEach_tAmazonAuroraOutput_9 < 0 ? 0
															: countEach_tAmazonAuroraOutput_9);
												}
												insertedCount_tAmazonAuroraOutput_9 += countSum_tAmazonAuroraOutput_9;
												System.err.println(e
														.getMessage());
											}

											batchSizeCounter_tAmazonAuroraOutput_9 = 0;
										}
										commitCounter_tAmazonAuroraOutput_9++;

										if (commitEvery_tAmazonAuroraOutput_9 <= commitCounter_tAmazonAuroraOutput_9) {

											try {
												int countSum_tAmazonAuroraOutput_9 = 0;
												for (int countEach_tAmazonAuroraOutput_9 : pstmt_tAmazonAuroraOutput_9
														.executeBatch()) {
													countSum_tAmazonAuroraOutput_9 += (countEach_tAmazonAuroraOutput_9 < 0 ? 0
															: 1);
												}
												insertedCount_tAmazonAuroraOutput_9 += countSum_tAmazonAuroraOutput_9;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tAmazonAuroraOutput_9 = 0;
												for (int countEach_tAmazonAuroraOutput_9 : e
														.getUpdateCounts()) {
													countSum_tAmazonAuroraOutput_9 += (countEach_tAmazonAuroraOutput_9 < 0 ? 0
															: countEach_tAmazonAuroraOutput_9);
												}
												insertedCount_tAmazonAuroraOutput_9 += countSum_tAmazonAuroraOutput_9;
												System.err.println(e
														.getMessage());

											}
											conn_tAmazonAuroraOutput_9.commit();
											commitCounter_tAmazonAuroraOutput_9 = 0;

										}

										tos_count_tAmazonAuroraOutput_9_out++;

										/**
										 * [tAmazonAuroraOutput_9_out main ]
										 * stop
										 */

									} // End of branch "noDataFount_joinReject"

								} // close loop of lookup 'row1' // G_TM_M_043

							} // End of branch "copyOfmainout"

						} // End of branch "copyOfs"

						/**
						 * [tAmazonAuroraInput_19_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_19";

						currentComponent = "tAmazonAuroraInput_19_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_19_in != null) {
						rs_tAmazonAuroraInput_19_in.close();
					}
					stmt_tAmazonAuroraInput_19_in.close();
					if (conn_tAmazonAuroraInput_19_in != null
							&& !conn_tAmazonAuroraInput_19_in.isClosed()) {

						conn_tAmazonAuroraInput_19_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_19_NB_LINE",
						nb_line_tAmazonAuroraInput_19_in);

				ok_Hash.put("tAmazonAuroraInput_19_in", true);
				end_Hash.put("tAmazonAuroraInput_19_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_19_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_19_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_19";

				currentComponent = "tAmazonAuroraInput_19_out";

				ok_Hash.put("tAmazonAuroraInput_19_out", true);
				end_Hash.put("tAmazonAuroraInput_19_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_19_out end ] stop
				 */

				/**
				 * [tMap_14 end ] start
				 */

				currentComponent = "tMap_14";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row21 != null) {
					tHash_Lookup_row21.endGet();
				}
				globalMap.remove("tHash_Lookup_row21");

				// ###############################

				ok_Hash.put("tMap_14", true);
				end_Hash.put("tMap_14", System.currentTimeMillis());

				/**
				 * [tMap_14 end ] stop
				 */

				/**
				 * [tMap_15 end ] start
				 */

				currentComponent = "tMap_15";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row22 != null) {
					tHash_Lookup_row22.endGet();
				}
				globalMap.remove("tHash_Lookup_row22");

				// ###############################

				ok_Hash.put("tMap_15", true);
				end_Hash.put("tMap_15", System.currentTimeMillis());

				/**
				 * [tMap_15 end ] stop
				 */

				/**
				 * [tJavaRow_7 end ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

				ok_Hash.put("tJavaRow_7", true);
				end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				if (context.firmids != null) {

					tWarn_2Process(globalMap);
				}

				/**
				 * [tJavaRow_7 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row1 != null) {
					tHash_Lookup_row1.endGet();
				}
				globalMap.remove("tHash_Lookup_row1");

				if (tHash_Lookup_custodian_lookup != null) {
					tHash_Lookup_custodian_lookup.endGet();
				}
				globalMap.remove("tHash_Lookup_custodian_lookup");

				if (tHash_Lookup_advisor_lookup != null) {
					tHash_Lookup_advisor_lookup.endGet();
				}
				globalMap.remove("tHash_Lookup_advisor_lookup");

				if (tHash_Lookup_account_type_lookup != null) {
					tHash_Lookup_account_type_lookup.endGet();
				}
				globalMap.remove("tHash_Lookup_account_type_lookup");

				if (tHash_Lookup_account_lookup != null) {
					tHash_Lookup_account_lookup.endGet();
				}
				globalMap.remove("tHash_Lookup_account_lookup");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_household_portfolioId_lookup != null) {
					tHash_Lookup_household_portfolioId_lookup.endGet();
				}
				globalMap.remove("tHash_Lookup_household_portfolioId_lookup");

				if (tHash_Lookup_row13 != null) {
					tHash_Lookup_row13.endGet();
				}
				globalMap.remove("tHash_Lookup_row13");

				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_5_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_5";

				currentComponent = "tAmazonAuroraOutput_5_in";

				ok_Hash.put("tAmazonAuroraOutput_5_in", true);
				end_Hash.put("tAmazonAuroraOutput_5_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_5_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_5_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_5";

				currentComponent = "tAmazonAuroraOutput_5_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_5 != 0) {
						int countSum_tAmazonAuroraOutput_5 = 0;

						for (int countEach_tAmazonAuroraOutput_5 : pstmt_tAmazonAuroraOutput_5
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_5 += (countEach_tAmazonAuroraOutput_5 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_5 += countSum_tAmazonAuroraOutput_5;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_5 = 0;
					for (int countEach_tAmazonAuroraOutput_5 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_5 += (countEach_tAmazonAuroraOutput_5 < 0 ? 0
								: countEach_tAmazonAuroraOutput_5);
					}

					insertedCount_tAmazonAuroraOutput_5 += countSum_tAmazonAuroraOutput_5;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_5 = 0;

				if (pstmt_tAmazonAuroraOutput_5 != null) {

					pstmt_tAmazonAuroraOutput_5.close();

				}

				if (commitCounter_tAmazonAuroraOutput_5 > 0) {

					conn_tAmazonAuroraOutput_5.commit();

				}

				conn_tAmazonAuroraOutput_5.close();

				resourceMap.put("finish_tAmazonAuroraOutput_5", true);

				nb_line_deleted_tAmazonAuroraOutput_5 = nb_line_deleted_tAmazonAuroraOutput_5
						+ deletedCount_tAmazonAuroraOutput_5;
				nb_line_update_tAmazonAuroraOutput_5 = nb_line_update_tAmazonAuroraOutput_5
						+ updatedCount_tAmazonAuroraOutput_5;
				nb_line_inserted_tAmazonAuroraOutput_5 = nb_line_inserted_tAmazonAuroraOutput_5
						+ insertedCount_tAmazonAuroraOutput_5;
				nb_line_rejected_tAmazonAuroraOutput_5 = nb_line_rejected_tAmazonAuroraOutput_5
						+ rejectedCount_tAmazonAuroraOutput_5;

				globalMap.put("tAmazonAuroraOutput_5_NB_LINE",
						nb_line_tAmazonAuroraOutput_5);
				globalMap.put("tAmazonAuroraOutput_5_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_5);
				globalMap.put("tAmazonAuroraOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_5);
				globalMap.put("tAmazonAuroraOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_5);
				globalMap.put("tAmazonAuroraOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_5);

				ok_Hash.put("tAmazonAuroraOutput_5_out", true);
				end_Hash.put("tAmazonAuroraOutput_5_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_5_out end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_11_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_11";

				currentComponent = "tAmazonAuroraOutput_11_in";

				ok_Hash.put("tAmazonAuroraOutput_11_in", true);
				end_Hash.put("tAmazonAuroraOutput_11_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_11_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_11_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_11";

				currentComponent = "tAmazonAuroraOutput_11_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_11 != 0) {
						int countSum_tAmazonAuroraOutput_11 = 0;

						for (int countEach_tAmazonAuroraOutput_11 : pstmt_tAmazonAuroraOutput_11
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_11 += (countEach_tAmazonAuroraOutput_11 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_11 += countSum_tAmazonAuroraOutput_11;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_11 = 0;
					for (int countEach_tAmazonAuroraOutput_11 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_11 += (countEach_tAmazonAuroraOutput_11 < 0 ? 0
								: countEach_tAmazonAuroraOutput_11);
					}

					insertedCount_tAmazonAuroraOutput_11 += countSum_tAmazonAuroraOutput_11;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_11 = 0;

				if (pstmt_tAmazonAuroraOutput_11 != null) {

					pstmt_tAmazonAuroraOutput_11.close();

				}

				if (commitCounter_tAmazonAuroraOutput_11 > 0) {

					conn_tAmazonAuroraOutput_11.commit();

				}

				conn_tAmazonAuroraOutput_11.close();

				resourceMap.put("finish_tAmazonAuroraOutput_11", true);

				nb_line_deleted_tAmazonAuroraOutput_11 = nb_line_deleted_tAmazonAuroraOutput_11
						+ deletedCount_tAmazonAuroraOutput_11;
				nb_line_update_tAmazonAuroraOutput_11 = nb_line_update_tAmazonAuroraOutput_11
						+ updatedCount_tAmazonAuroraOutput_11;
				nb_line_inserted_tAmazonAuroraOutput_11 = nb_line_inserted_tAmazonAuroraOutput_11
						+ insertedCount_tAmazonAuroraOutput_11;
				nb_line_rejected_tAmazonAuroraOutput_11 = nb_line_rejected_tAmazonAuroraOutput_11
						+ rejectedCount_tAmazonAuroraOutput_11;

				globalMap.put("tAmazonAuroraOutput_11_NB_LINE",
						nb_line_tAmazonAuroraOutput_11);
				globalMap.put("tAmazonAuroraOutput_11_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_11);
				globalMap.put("tAmazonAuroraOutput_11_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_11);
				globalMap.put("tAmazonAuroraOutput_11_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_11);
				globalMap.put("tAmazonAuroraOutput_11_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_11);

				ok_Hash.put("tAmazonAuroraOutput_11_out", true);
				end_Hash.put("tAmazonAuroraOutput_11_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_11_out end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				if (tHash_Lookup_row14 != null) {
					tHash_Lookup_row14.endGet();
				}
				globalMap.remove("tHash_Lookup_row14");

				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_in";

				ok_Hash.put("tAmazonAuroraOutput_1_in", true);
				end_Hash.put("tAmazonAuroraOutput_1_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_1_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_1 != 0) {
						int countSum_tAmazonAuroraOutput_1 = 0;

						for (int countEach_tAmazonAuroraOutput_1 : pstmt_tAmazonAuroraOutput_1
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_1 = 0;
					for (int countEach_tAmazonAuroraOutput_1 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
								: countEach_tAmazonAuroraOutput_1);
					}

					insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_1 = 0;

				if (pstmt_tAmazonAuroraOutput_1 != null) {

					pstmt_tAmazonAuroraOutput_1.close();

				}

				if (commitCounter_tAmazonAuroraOutput_1 > 0) {

					conn_tAmazonAuroraOutput_1.commit();

				}

				conn_tAmazonAuroraOutput_1.close();

				resourceMap.put("finish_tAmazonAuroraOutput_1", true);

				nb_line_deleted_tAmazonAuroraOutput_1 = nb_line_deleted_tAmazonAuroraOutput_1
						+ deletedCount_tAmazonAuroraOutput_1;
				nb_line_update_tAmazonAuroraOutput_1 = nb_line_update_tAmazonAuroraOutput_1
						+ updatedCount_tAmazonAuroraOutput_1;
				nb_line_inserted_tAmazonAuroraOutput_1 = nb_line_inserted_tAmazonAuroraOutput_1
						+ insertedCount_tAmazonAuroraOutput_1;
				nb_line_rejected_tAmazonAuroraOutput_1 = nb_line_rejected_tAmazonAuroraOutput_1
						+ rejectedCount_tAmazonAuroraOutput_1;

				globalMap.put("tAmazonAuroraOutput_1_NB_LINE",
						nb_line_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_1);

				ok_Hash.put("tAmazonAuroraOutput_1_out", true);
				end_Hash.put("tAmazonAuroraOutput_1_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_1_out end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_in";

				ok_Hash.put("tAmazonAuroraOutput_3_in", true);
				end_Hash.put("tAmazonAuroraOutput_3_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_3_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_3 != 0) {
						int countSum_tAmazonAuroraOutput_3 = 0;

						for (int countEach_tAmazonAuroraOutput_3 : pstmt_tAmazonAuroraOutput_3
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_3 = 0;
					for (int countEach_tAmazonAuroraOutput_3 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_3 += (countEach_tAmazonAuroraOutput_3 < 0 ? 0
								: countEach_tAmazonAuroraOutput_3);
					}

					insertedCount_tAmazonAuroraOutput_3 += countSum_tAmazonAuroraOutput_3;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_3 = 0;

				if (pstmt_tAmazonAuroraOutput_3 != null) {

					pstmt_tAmazonAuroraOutput_3.close();

				}

				if (commitCounter_tAmazonAuroraOutput_3 > 0) {

					conn_tAmazonAuroraOutput_3.commit();

				}

				conn_tAmazonAuroraOutput_3.close();

				resourceMap.put("finish_tAmazonAuroraOutput_3", true);

				nb_line_deleted_tAmazonAuroraOutput_3 = nb_line_deleted_tAmazonAuroraOutput_3
						+ deletedCount_tAmazonAuroraOutput_3;
				nb_line_update_tAmazonAuroraOutput_3 = nb_line_update_tAmazonAuroraOutput_3
						+ updatedCount_tAmazonAuroraOutput_3;
				nb_line_inserted_tAmazonAuroraOutput_3 = nb_line_inserted_tAmazonAuroraOutput_3
						+ insertedCount_tAmazonAuroraOutput_3;
				nb_line_rejected_tAmazonAuroraOutput_3 = nb_line_rejected_tAmazonAuroraOutput_3
						+ rejectedCount_tAmazonAuroraOutput_3;

				globalMap.put("tAmazonAuroraOutput_3_NB_LINE",
						nb_line_tAmazonAuroraOutput_3);
				globalMap.put("tAmazonAuroraOutput_3_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_3);
				globalMap.put("tAmazonAuroraOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_3);
				globalMap.put("tAmazonAuroraOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_3);
				globalMap.put("tAmazonAuroraOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_3);

				ok_Hash.put("tAmazonAuroraOutput_3_out", true);
				end_Hash.put("tAmazonAuroraOutput_3_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_3_out end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row15 != null) {
					tHash_Lookup_row15.endGet();
				}
				globalMap.remove("tHash_Lookup_row15");

				// ###############################

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_8_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_8";

				currentComponent = "tAmazonAuroraOutput_8_in";

				ok_Hash.put("tAmazonAuroraOutput_8_in", true);
				end_Hash.put("tAmazonAuroraOutput_8_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_8_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_8_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_8";

				currentComponent = "tAmazonAuroraOutput_8_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_8 != 0) {
						int countSum_tAmazonAuroraOutput_8 = 0;

						for (int countEach_tAmazonAuroraOutput_8 : pstmt_tAmazonAuroraOutput_8
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_8 += (countEach_tAmazonAuroraOutput_8 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_8 += countSum_tAmazonAuroraOutput_8;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_8 = 0;
					for (int countEach_tAmazonAuroraOutput_8 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_8 += (countEach_tAmazonAuroraOutput_8 < 0 ? 0
								: countEach_tAmazonAuroraOutput_8);
					}

					insertedCount_tAmazonAuroraOutput_8 += countSum_tAmazonAuroraOutput_8;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_8 = 0;

				if (pstmt_tAmazonAuroraOutput_8 != null) {

					pstmt_tAmazonAuroraOutput_8.close();

				}

				if (commitCounter_tAmazonAuroraOutput_8 > 0) {

					conn_tAmazonAuroraOutput_8.commit();

				}

				conn_tAmazonAuroraOutput_8.close();

				resourceMap.put("finish_tAmazonAuroraOutput_8", true);

				nb_line_deleted_tAmazonAuroraOutput_8 = nb_line_deleted_tAmazonAuroraOutput_8
						+ deletedCount_tAmazonAuroraOutput_8;
				nb_line_update_tAmazonAuroraOutput_8 = nb_line_update_tAmazonAuroraOutput_8
						+ updatedCount_tAmazonAuroraOutput_8;
				nb_line_inserted_tAmazonAuroraOutput_8 = nb_line_inserted_tAmazonAuroraOutput_8
						+ insertedCount_tAmazonAuroraOutput_8;
				nb_line_rejected_tAmazonAuroraOutput_8 = nb_line_rejected_tAmazonAuroraOutput_8
						+ rejectedCount_tAmazonAuroraOutput_8;

				globalMap.put("tAmazonAuroraOutput_8_NB_LINE",
						nb_line_tAmazonAuroraOutput_8);
				globalMap.put("tAmazonAuroraOutput_8_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_8);
				globalMap.put("tAmazonAuroraOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_8);
				globalMap.put("tAmazonAuroraOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_8);
				globalMap.put("tAmazonAuroraOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_8);

				ok_Hash.put("tAmazonAuroraOutput_8_out", true);
				end_Hash.put("tAmazonAuroraOutput_8_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_8_out end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row16 != null) {
					tHash_Lookup_row16.endGet();
				}
				globalMap.remove("tHash_Lookup_row16");

				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_4_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_4";

				currentComponent = "tAmazonAuroraOutput_4_in";

				ok_Hash.put("tAmazonAuroraOutput_4_in", true);
				end_Hash.put("tAmazonAuroraOutput_4_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_4_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_4_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_4";

				currentComponent = "tAmazonAuroraOutput_4_out";

				try {
					if (pstmt_tAmazonAuroraOutput_4 != null) {
						int countSum_tAmazonAuroraOutput_4 = 0;

						for (int countEach_tAmazonAuroraOutput_4 : pstmt_tAmazonAuroraOutput_4
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_4 += (countEach_tAmazonAuroraOutput_4 < 0 ? 0
									: countEach_tAmazonAuroraOutput_4);
						}

						updatedCount_tAmazonAuroraOutput_4 += countSum_tAmazonAuroraOutput_4;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_4 = 0;
					for (int countEach_tAmazonAuroraOutput_4 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_4 += (countEach_tAmazonAuroraOutput_4 < 0 ? 0
								: countEach_tAmazonAuroraOutput_4);
					}

					updatedCount_tAmazonAuroraOutput_4 += countSum_tAmazonAuroraOutput_4;

					System.err.println(e.getMessage());

				}

				if (pstmt_tAmazonAuroraOutput_4 != null) {

					pstmt_tAmazonAuroraOutput_4.close();

				}

				if (commitCounter_tAmazonAuroraOutput_4 > 0) {

					conn_tAmazonAuroraOutput_4.commit();

				}

				conn_tAmazonAuroraOutput_4.close();

				resourceMap.put("finish_tAmazonAuroraOutput_4", true);

				nb_line_deleted_tAmazonAuroraOutput_4 = nb_line_deleted_tAmazonAuroraOutput_4
						+ deletedCount_tAmazonAuroraOutput_4;
				nb_line_update_tAmazonAuroraOutput_4 = nb_line_update_tAmazonAuroraOutput_4
						+ updatedCount_tAmazonAuroraOutput_4;
				nb_line_inserted_tAmazonAuroraOutput_4 = nb_line_inserted_tAmazonAuroraOutput_4
						+ insertedCount_tAmazonAuroraOutput_4;
				nb_line_rejected_tAmazonAuroraOutput_4 = nb_line_rejected_tAmazonAuroraOutput_4
						+ rejectedCount_tAmazonAuroraOutput_4;

				globalMap.put("tAmazonAuroraOutput_4_NB_LINE",
						nb_line_tAmazonAuroraOutput_4);
				globalMap.put("tAmazonAuroraOutput_4_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_4);
				globalMap.put("tAmazonAuroraOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_4);
				globalMap.put("tAmazonAuroraOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_4);
				globalMap.put("tAmazonAuroraOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_4);

				ok_Hash.put("tAmazonAuroraOutput_4_out", true);
				end_Hash.put("tAmazonAuroraOutput_4_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_4_out end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_9_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_9";

				currentComponent = "tAmazonAuroraOutput_9_in";

				ok_Hash.put("tAmazonAuroraOutput_9_in", true);
				end_Hash.put("tAmazonAuroraOutput_9_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_9_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_9_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_9";

				currentComponent = "tAmazonAuroraOutput_9_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_9 != 0) {
						int countSum_tAmazonAuroraOutput_9 = 0;

						for (int countEach_tAmazonAuroraOutput_9 : pstmt_tAmazonAuroraOutput_9
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_9 += (countEach_tAmazonAuroraOutput_9 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_9 += countSum_tAmazonAuroraOutput_9;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_9 = 0;
					for (int countEach_tAmazonAuroraOutput_9 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_9 += (countEach_tAmazonAuroraOutput_9 < 0 ? 0
								: countEach_tAmazonAuroraOutput_9);
					}

					insertedCount_tAmazonAuroraOutput_9 += countSum_tAmazonAuroraOutput_9;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_9 = 0;

				if (pstmt_tAmazonAuroraOutput_9 != null) {

					pstmt_tAmazonAuroraOutput_9.close();

				}

				if (commitCounter_tAmazonAuroraOutput_9 > 0) {

					conn_tAmazonAuroraOutput_9.commit();

				}

				conn_tAmazonAuroraOutput_9.close();

				resourceMap.put("finish_tAmazonAuroraOutput_9", true);

				nb_line_deleted_tAmazonAuroraOutput_9 = nb_line_deleted_tAmazonAuroraOutput_9
						+ deletedCount_tAmazonAuroraOutput_9;
				nb_line_update_tAmazonAuroraOutput_9 = nb_line_update_tAmazonAuroraOutput_9
						+ updatedCount_tAmazonAuroraOutput_9;
				nb_line_inserted_tAmazonAuroraOutput_9 = nb_line_inserted_tAmazonAuroraOutput_9
						+ insertedCount_tAmazonAuroraOutput_9;
				nb_line_rejected_tAmazonAuroraOutput_9 = nb_line_rejected_tAmazonAuroraOutput_9
						+ rejectedCount_tAmazonAuroraOutput_9;

				globalMap.put("tAmazonAuroraOutput_9_NB_LINE",
						nb_line_tAmazonAuroraOutput_9);
				globalMap.put("tAmazonAuroraOutput_9_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_9);
				globalMap.put("tAmazonAuroraOutput_9_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_9);
				globalMap.put("tAmazonAuroraOutput_9_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_9);
				globalMap.put("tAmazonAuroraOutput_9_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_9);

				ok_Hash.put("tAmazonAuroraOutput_9_out", true);
				end_Hash.put("tAmazonAuroraOutput_9_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_9_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row16");

			// free memory for "tMap_11"
			globalMap.remove("tHash_Lookup_row15");

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row14");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_household_portfolioId_lookup");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row13");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_custodian_lookup");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_advisor_lookup");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_account_type_lookup");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_account_lookup");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row1");

			// free memory for "tMap_15"
			globalMap.remove("tHash_Lookup_row22");

			// free memory for "tMap_14"
			globalMap.remove("tHash_Lookup_row21");

			try {

				/**
				 * [tAmazonAuroraInput_19_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_19";

				currentComponent = "tAmazonAuroraInput_19_in";

				/**
				 * [tAmazonAuroraInput_19_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_19_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_19";

				currentComponent = "tAmazonAuroraInput_19_out";

				/**
				 * [tAmazonAuroraInput_19_out finally ] stop
				 */

				/**
				 * [tMap_14 finally ] start
				 */

				currentComponent = "tMap_14";

				/**
				 * [tMap_14 finally ] stop
				 */

				/**
				 * [tMap_15 finally ] start
				 */

				currentComponent = "tMap_15";

				/**
				 * [tMap_15 finally ] stop
				 */

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_5_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_5";

				currentComponent = "tAmazonAuroraOutput_5_in";

				/**
				 * [tAmazonAuroraOutput_5_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_5_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_5";

				currentComponent = "tAmazonAuroraOutput_5_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_5") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_5") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_5")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_5) {
							String errorMessage_tAmazonAuroraOutput_5 = "failed to close the connection in tAmazonAuroraOutput_5 :"
									+ sqlEx_tAmazonAuroraOutput_5.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_5);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_5_out finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_11_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_11";

				currentComponent = "tAmazonAuroraOutput_11_in";

				/**
				 * [tAmazonAuroraOutput_11_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_11_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_11";

				currentComponent = "tAmazonAuroraOutput_11_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_11") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_11") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_11"))
									.close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_11) {
							String errorMessage_tAmazonAuroraOutput_11 = "failed to close the connection in tAmazonAuroraOutput_11 :"
									+ sqlEx_tAmazonAuroraOutput_11.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_11);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_11_out finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_in";

				/**
				 * [tAmazonAuroraOutput_1_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_1") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_1) {
							String errorMessage_tAmazonAuroraOutput_1 = "failed to close the connection in tAmazonAuroraOutput_1 :"
									+ sqlEx_tAmazonAuroraOutput_1.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_1);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_1_out finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_in";

				/**
				 * [tAmazonAuroraOutput_3_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_3_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_3";

				currentComponent = "tAmazonAuroraOutput_3_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_3") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_3") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_3")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_3) {
							String errorMessage_tAmazonAuroraOutput_3 = "failed to close the connection in tAmazonAuroraOutput_3 :"
									+ sqlEx_tAmazonAuroraOutput_3.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_3);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_3_out finally ] stop
				 */

				/**
				 * [tMap_11 finally ] start
				 */

				currentComponent = "tMap_11";

				/**
				 * [tMap_11 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_8_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_8";

				currentComponent = "tAmazonAuroraOutput_8_in";

				/**
				 * [tAmazonAuroraOutput_8_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_8_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_8";

				currentComponent = "tAmazonAuroraOutput_8_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_8") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_8") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_8")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_8) {
							String errorMessage_tAmazonAuroraOutput_8 = "failed to close the connection in tAmazonAuroraOutput_8 :"
									+ sqlEx_tAmazonAuroraOutput_8.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_8);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_8_out finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_4_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_4";

				currentComponent = "tAmazonAuroraOutput_4_in";

				/**
				 * [tAmazonAuroraOutput_4_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_4_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_4";

				currentComponent = "tAmazonAuroraOutput_4_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_4") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_4") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_4")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_4) {
							String errorMessage_tAmazonAuroraOutput_4 = "failed to close the connection in tAmazonAuroraOutput_4 :"
									+ sqlEx_tAmazonAuroraOutput_4.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_4);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_4_out finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_9_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_9";

				currentComponent = "tAmazonAuroraOutput_9_in";

				/**
				 * [tAmazonAuroraOutput_9_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_9_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_9";

				currentComponent = "tAmazonAuroraOutput_9_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_9") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_9") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_9")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_9) {
							String errorMessage_tAmazonAuroraOutput_9 = "failed to close the connection in tAmazonAuroraOutput_9 :"
									+ sqlEx_tAmazonAuroraOutput_9.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_9);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_9_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_19_in_SUBPROCESS_STATE", 1);
	}

	public static class row3_0Struct implements
			routines.system.IPersistableRow<row3_0Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class firm_connectionStruct implements
			routines.system.IPersistableRow<firm_connectionStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(firm_connectionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_1_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_1_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_1_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_1Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_1_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_3Process(globalMap);

				row_tAmazonAuroraInput_1_inStruct row_tAmazonAuroraInput_1_in = new row_tAmazonAuroraInput_1_inStruct();
				row_tAmazonAuroraInput_1_inStruct row4 = row_tAmazonAuroraInput_1_in;
				firm_connectionStruct firm_connection = new firm_connectionStruct();
				row3_0Struct row3_0 = new row3_0Struct();

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				firm_connectionStruct firm_connection_tmp = new firm_connectionStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_out", false);
				start_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				int tos_count_tAmazonAuroraInput_1_out = 0;

				/**
				 * [tAmazonAuroraInput_1_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_in", false);
				start_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				int tos_count_tAmazonAuroraInput_1_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_1_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_1_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_1_in = calendar_tAmazonAuroraInput_1_in
						.getTime();
				int nb_line_tAmazonAuroraInput_1_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_1_in = null;
				String driverClass_tAmazonAuroraInput_1_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_1_in);
				String dbUser_tAmazonAuroraInput_1_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_1_in = context.password;

				String dbPwd_tAmazonAuroraInput_1_in = decryptedPassword_tAmazonAuroraInput_1_in;

				String url_tAmazonAuroraInput_1_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_1_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_1_in,
								dbUser_tAmazonAuroraInput_1_in,
								dbPwd_tAmazonAuroraInput_1_in);

				java.sql.Statement stmt_tAmazonAuroraInput_1_in = conn_tAmazonAuroraInput_1_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_1_in = "SELECT `name` , `server` , `database` FROM `orionEclipseFirm`";

				globalMap.put("tAmazonAuroraInput_1_QUERY",
						dbquery_tAmazonAuroraInput_1_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_1_in = null;
				try {
					rs_tAmazonAuroraInput_1_in = stmt_tAmazonAuroraInput_1_in
							.executeQuery(dbquery_tAmazonAuroraInput_1_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_1_in = rs_tAmazonAuroraInput_1_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_1_in = rsmd_tAmazonAuroraInput_1_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_1_in = null;

					while (rs_tAmazonAuroraInput_1_in.next()) {
						nb_line_tAmazonAuroraInput_1_in++;

						if (colQtyInRs_tAmazonAuroraInput_1_in < 1) {
							row_tAmazonAuroraInput_1_in.name = null;
						} else {

							row_tAmazonAuroraInput_1_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 1,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 2) {
							row_tAmazonAuroraInput_1_in.server = null;
						} else {

							row_tAmazonAuroraInput_1_in.server = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 3) {
							row_tAmazonAuroraInput_1_in.database = null;
						} else {

							row_tAmazonAuroraInput_1_in.database = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 3,
											false);
						}

						/**
						 * [tAmazonAuroraInput_1_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

						tos_count_tAmazonAuroraInput_1_in++;

						/**
						 * [tAmazonAuroraInput_1_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_out";

						row4 = row_tAmazonAuroraInput_1_in;

						tos_count_tAmazonAuroraInput_1_out++;

						/**
						 * [tAmazonAuroraInput_1_out main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row3"
						// /////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row3HashKey.firm = row4.name;

							row3HashKey.hashCodeDirty = true;

							tHash_Lookup_row3.lookup(row3HashKey);

							if (!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.firm = '"
							// + row3HashKey.firm + "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							firm_connection = null;

							if (!rejectedInnerJoin_tMap_1) {

								// # Output table : 'firm_connection'
								firm_connection_tmp.server = row4.server;
								firm_connection_tmp.database = row4.database;
								firm_connection = firm_connection_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "firm_connection"
						if (firm_connection != null) {

							/**
							 * [tJavaRow_1 main ] start
							 */

							currentComponent = "tJavaRow_1";

							context.serverIp = firm_connection.server;
							context.database = firm_connection.database;
							context.currentDate = TalendDate
									.getDate("YYYY-mm-dd");
							nb_line_tJavaRow_1++;

							tos_count_tJavaRow_1++;

							/**
							 * [tJavaRow_1 main ] stop
							 */

							/**
							 * [tJava_1 main ] start
							 */

							currentComponent = "tJava_1";

							tos_count_tJava_1++;

							/**
							 * [tJava_1 main ] stop
							 */

						} // End of branch "firm_connection"

						/**
						 * [tAmazonAuroraInput_1_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_1_in != null) {
						rs_tAmazonAuroraInput_1_in.close();
					}
					stmt_tAmazonAuroraInput_1_in.close();
					if (conn_tAmazonAuroraInput_1_in != null
							&& !conn_tAmazonAuroraInput_1_in.isClosed()) {

						conn_tAmazonAuroraInput_1_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_1_NB_LINE",
						nb_line_tAmazonAuroraInput_1_in);

				ok_Hash.put("tAmazonAuroraInput_1_in", true);
				end_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				ok_Hash.put("tAmazonAuroraInput_1_out", true);
				end_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_out end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tAmazonAuroraInput_12_inProcess(globalMap);

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			try {

				/**
				 * [tAmazonAuroraInput_1_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				/**
				 * [tAmazonAuroraInput_1_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				/**
				 * [tAmazonAuroraInput_1_out finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableComparableLookupRow<row18Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmName = this.orionEclipseFirmName;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orionEclipseFirmName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_18_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_18_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_18_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_18_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_18_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_18_inStruct row_tAmazonAuroraInput_18_in = new row_tAmazonAuroraInput_18_inStruct();
				row_tAmazonAuroraInput_18_inStruct row18 = row_tAmazonAuroraInput_18_in;

				/**
				 * [tAdvancedHash_row18 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row18", false);
				start_Hash.put("tAdvancedHash_row18",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row18";

				int tos_count_tAdvancedHash_row18 = 0;

				// connection name:row18
				// source node:tAmazonAuroraInput_18_out -
				// inputs:(row_tAmazonAuroraInput_18_in) outputs:(row18,row18) |
				// target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
				// linked node: tMap_12 - inputs:(row17,row18) outputs:(s)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row18Struct> getLookup(matchingModeEnum_row18);

				globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);

				/**
				 * [tAdvancedHash_row18 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_18_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_18_out", false);
				start_Hash.put("tAmazonAuroraInput_18_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_18";

				currentComponent = "tAmazonAuroraInput_18_out";

				int tos_count_tAmazonAuroraInput_18_out = 0;

				/**
				 * [tAmazonAuroraInput_18_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_18_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_18_in", false);
				start_Hash.put("tAmazonAuroraInput_18_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_18";

				currentComponent = "tAmazonAuroraInput_18_in";

				int tos_count_tAmazonAuroraInput_18_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_18_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_18_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_18_in = calendar_tAmazonAuroraInput_18_in
						.getTime();
				int nb_line_tAmazonAuroraInput_18_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_18_in = null;
				String driverClass_tAmazonAuroraInput_18_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_18_in);
				String dbUser_tAmazonAuroraInput_18_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_18_in = context.password;

				String dbPwd_tAmazonAuroraInput_18_in = decryptedPassword_tAmazonAuroraInput_18_in;

				String url_tAmazonAuroraInput_18_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_18_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_18_in,
								dbUser_tAmazonAuroraInput_18_in,
								dbPwd_tAmazonAuroraInput_18_in);

				java.sql.Statement stmt_tAmazonAuroraInput_18_in = conn_tAmazonAuroraInput_18_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_18_in = "select orionConnectFirmId , orionEclipseFirmName from firm";

				globalMap.put("tAmazonAuroraInput_18_QUERY",
						dbquery_tAmazonAuroraInput_18_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_18_in = null;
				try {
					rs_tAmazonAuroraInput_18_in = stmt_tAmazonAuroraInput_18_in
							.executeQuery(dbquery_tAmazonAuroraInput_18_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_18_in = rs_tAmazonAuroraInput_18_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_18_in = rsmd_tAmazonAuroraInput_18_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_18_in = null;

					while (rs_tAmazonAuroraInput_18_in.next()) {
						nb_line_tAmazonAuroraInput_18_in++;

						if (colQtyInRs_tAmazonAuroraInput_18_in < 1) {
							row_tAmazonAuroraInput_18_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_18_in.getObject(1) != null) {
								row_tAmazonAuroraInput_18_in.orionConnectFirmId = rs_tAmazonAuroraInput_18_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_18_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_18_in < 2) {
							row_tAmazonAuroraInput_18_in.orionEclipseFirmName = null;
						} else {

							row_tAmazonAuroraInput_18_in.orionEclipseFirmName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_18_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_18_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_18_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_18";

						currentComponent = "tAmazonAuroraInput_18_in";

						tos_count_tAmazonAuroraInput_18_in++;

						/**
						 * [tAmazonAuroraInput_18_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_18_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_18";

						currentComponent = "tAmazonAuroraInput_18_out";

						row18 = row_tAmazonAuroraInput_18_in;

						tos_count_tAmazonAuroraInput_18_out++;

						/**
						 * [tAmazonAuroraInput_18_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row18 main ] start
						 */

						currentComponent = "tAdvancedHash_row18";

						row18Struct row18_HashRow = new row18Struct();

						row18_HashRow.orionConnectFirmId = row18.orionConnectFirmId;

						row18_HashRow.orionEclipseFirmName = row18.orionEclipseFirmName;

						tHash_Lookup_row18.put(row18_HashRow);

						tos_count_tAdvancedHash_row18++;

						/**
						 * [tAdvancedHash_row18 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_18_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_18";

						currentComponent = "tAmazonAuroraInput_18_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_18_in != null) {
						rs_tAmazonAuroraInput_18_in.close();
					}
					stmt_tAmazonAuroraInput_18_in.close();
					if (conn_tAmazonAuroraInput_18_in != null
							&& !conn_tAmazonAuroraInput_18_in.isClosed()) {

						conn_tAmazonAuroraInput_18_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_18_NB_LINE",
						nb_line_tAmazonAuroraInput_18_in);

				ok_Hash.put("tAmazonAuroraInput_18_in", true);
				end_Hash.put("tAmazonAuroraInput_18_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_18_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_18_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_18";

				currentComponent = "tAmazonAuroraInput_18_out";

				ok_Hash.put("tAmazonAuroraInput_18_out", true);
				end_Hash.put("tAmazonAuroraInput_18_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_18_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row18 end ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				tHash_Lookup_row18.endPut();

				ok_Hash.put("tAdvancedHash_row18", true);
				end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_18_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_18";

				currentComponent = "tAmazonAuroraInput_18_in";

				/**
				 * [tAmazonAuroraInput_18_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_18_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_18";

				currentComponent = "tAmazonAuroraInput_18_out";

				/**
				 * [tAmazonAuroraInput_18_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row18 finally ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				/**
				 * [tAdvancedHash_row18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_18_in_SUBPROCESS_STATE", 1);
	}

	public static class new_account_lookupStruct
			implements
			routines.system.IPersistableComparableLookupRow<new_account_lookupStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectExternalId;

		public Integer getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectExternalId == null) ? 0
								: this.orionConnectExternalId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final new_account_lookupStruct other = (new_account_lookupStruct) obj;

			if (this.orionConnectExternalId == null) {
				if (other.orionConnectExternalId != null)
					return false;

			} else if (!this.orionConnectExternalId
					.equals(other.orionConnectExternalId))

				return false;

			return true;
		}

		public void copyDataTo(new_account_lookupStruct other) {

			other.orionConnectExternalId = this.orionConnectExternalId;
			other.accountNumber = this.accountNumber;

		}

		public void copyKeysDataTo(new_account_lookupStruct other) {

			other.orionConnectExternalId = this.orionConnectExternalId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectExternalId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectExternalId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.accountNumber = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.accountNumber, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",accountNumber=" + accountNumber);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(new_account_lookupStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectExternalId,
					other.orionConnectExternalId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_10_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_10_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer orionConnectExternalId;

		public Integer getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectExternalId = readInteger(dis);

					this.accountNumber = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectExternalId, dos);

				// String

				writeString(this.accountNumber, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",accountNumber=" + accountNumber);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_10_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_10_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_10_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_10_inStruct row_tAmazonAuroraInput_10_in = new row_tAmazonAuroraInput_10_inStruct();
				row_tAmazonAuroraInput_10_inStruct new_account_lookup = row_tAmazonAuroraInput_10_in;

				/**
				 * [tAdvancedHash_new_account_lookup begin ] start
				 */

				ok_Hash.put("tAdvancedHash_new_account_lookup", false);
				start_Hash.put("tAdvancedHash_new_account_lookup",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_new_account_lookup";

				int tos_count_tAdvancedHash_new_account_lookup = 0;

				// connection name:new_account_lookup
				// source node:tAmazonAuroraInput_10_out -
				// inputs:(row_tAmazonAuroraInput_10_in)
				// outputs:(new_account_lookup,new_account_lookup) | target
				// node:tAdvancedHash_new_account_lookup -
				// inputs:(new_account_lookup) outputs:()
				// linked node: tMap_6 -
				// inputs:(mainout,new_account_lookup,new_portfolio_lookup,row7)
				// outputs:(row1_ErrorReject,sort_portfolios,noDataFound_joinReject3)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_new_account_lookup = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<new_account_lookupStruct> tHash_Lookup_new_account_lookup = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<new_account_lookupStruct> getLookup(matchingModeEnum_new_account_lookup);

				globalMap.put("tHash_Lookup_new_account_lookup",
						tHash_Lookup_new_account_lookup);

				/**
				 * [tAdvancedHash_new_account_lookup begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_10_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_10_out", false);
				start_Hash.put("tAmazonAuroraInput_10_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_10";

				currentComponent = "tAmazonAuroraInput_10_out";

				int tos_count_tAmazonAuroraInput_10_out = 0;

				/**
				 * [tAmazonAuroraInput_10_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_10_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_10_in", false);
				start_Hash.put("tAmazonAuroraInput_10_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_10";

				currentComponent = "tAmazonAuroraInput_10_in";

				int tos_count_tAmazonAuroraInput_10_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_10_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_10_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_10_in = calendar_tAmazonAuroraInput_10_in
						.getTime();
				int nb_line_tAmazonAuroraInput_10_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_10_in = null;
				String driverClass_tAmazonAuroraInput_10_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_10_in);
				String dbUser_tAmazonAuroraInput_10_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_10_in = context.password;

				String dbPwd_tAmazonAuroraInput_10_in = decryptedPassword_tAmazonAuroraInput_10_in;

				String url_tAmazonAuroraInput_10_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_10_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_10_in,
								dbUser_tAmazonAuroraInput_10_in,
								dbPwd_tAmazonAuroraInput_10_in);

				java.sql.Statement stmt_tAmazonAuroraInput_10_in = conn_tAmazonAuroraInput_10_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_10_in = "select orionConnectExternalId , accountNumber from account";

				globalMap.put("tAmazonAuroraInput_10_QUERY",
						dbquery_tAmazonAuroraInput_10_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_10_in = null;
				try {
					rs_tAmazonAuroraInput_10_in = stmt_tAmazonAuroraInput_10_in
							.executeQuery(dbquery_tAmazonAuroraInput_10_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_10_in = rs_tAmazonAuroraInput_10_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_10_in = rsmd_tAmazonAuroraInput_10_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_10_in = null;

					while (rs_tAmazonAuroraInput_10_in.next()) {
						nb_line_tAmazonAuroraInput_10_in++;

						if (colQtyInRs_tAmazonAuroraInput_10_in < 1) {
							row_tAmazonAuroraInput_10_in.orionConnectExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_10_in.getObject(1) != null) {
								row_tAmazonAuroraInput_10_in.orionConnectExternalId = rs_tAmazonAuroraInput_10_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_10_in.orionConnectExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_10_in < 2) {
							row_tAmazonAuroraInput_10_in.accountNumber = null;
						} else {

							row_tAmazonAuroraInput_10_in.accountNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_10_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_10_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_10_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_10";

						currentComponent = "tAmazonAuroraInput_10_in";

						tos_count_tAmazonAuroraInput_10_in++;

						/**
						 * [tAmazonAuroraInput_10_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_10_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_10";

						currentComponent = "tAmazonAuroraInput_10_out";

						new_account_lookup = row_tAmazonAuroraInput_10_in;

						tos_count_tAmazonAuroraInput_10_out++;

						/**
						 * [tAmazonAuroraInput_10_out main ] stop
						 */

						/**
						 * [tAdvancedHash_new_account_lookup main ] start
						 */

						currentComponent = "tAdvancedHash_new_account_lookup";

						new_account_lookupStruct new_account_lookup_HashRow = new new_account_lookupStruct();

						new_account_lookup_HashRow.orionConnectExternalId = new_account_lookup.orionConnectExternalId;

						new_account_lookup_HashRow.accountNumber = new_account_lookup.accountNumber;

						tHash_Lookup_new_account_lookup
								.put(new_account_lookup_HashRow);

						tos_count_tAdvancedHash_new_account_lookup++;

						/**
						 * [tAdvancedHash_new_account_lookup main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_10_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_10";

						currentComponent = "tAmazonAuroraInput_10_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_10_in != null) {
						rs_tAmazonAuroraInput_10_in.close();
					}
					stmt_tAmazonAuroraInput_10_in.close();
					if (conn_tAmazonAuroraInput_10_in != null
							&& !conn_tAmazonAuroraInput_10_in.isClosed()) {

						conn_tAmazonAuroraInput_10_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_10_NB_LINE",
						nb_line_tAmazonAuroraInput_10_in);

				ok_Hash.put("tAmazonAuroraInput_10_in", true);
				end_Hash.put("tAmazonAuroraInput_10_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_10_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_10_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_10";

				currentComponent = "tAmazonAuroraInput_10_out";

				ok_Hash.put("tAmazonAuroraInput_10_out", true);
				end_Hash.put("tAmazonAuroraInput_10_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_10_out end ] stop
				 */

				/**
				 * [tAdvancedHash_new_account_lookup end ] start
				 */

				currentComponent = "tAdvancedHash_new_account_lookup";

				tHash_Lookup_new_account_lookup.endPut();

				ok_Hash.put("tAdvancedHash_new_account_lookup", true);
				end_Hash.put("tAdvancedHash_new_account_lookup",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_new_account_lookup end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_10_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_10";

				currentComponent = "tAmazonAuroraInput_10_in";

				/**
				 * [tAmazonAuroraInput_10_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_10_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_10";

				currentComponent = "tAmazonAuroraInput_10_out";

				/**
				 * [tAmazonAuroraInput_10_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_new_account_lookup finally ] start
				 */

				currentComponent = "tAdvancedHash_new_account_lookup";

				/**
				 * [tAdvancedHash_new_account_lookup finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_10_in_SUBPROCESS_STATE", 1);
	}

	public static class new_portfolio_lookupStruct
			implements
			routines.system.IPersistableComparableLookupRow<new_portfolio_lookupStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.name == null) ? 0 : this.name.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final new_portfolio_lookupStruct other = (new_portfolio_lookupStruct) obj;

			if (this.name == null) {
				if (other.name != null)
					return false;

			} else if (!this.name.equals(other.name))

				return false;

			return true;
		}

		public void copyDataTo(new_portfolio_lookupStruct other) {

			other.id = this.id;
			other.name = this.name;

		}

		public void copyKeysDataTo(new_portfolio_lookupStruct other) {

			other.name = this.name;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(new_portfolio_lookupStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.name, other.name);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_11_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_11_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_tAmazonAuroraInput_11_inStruct other = (row_tAmazonAuroraInput_11_inStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row_tAmazonAuroraInput_11_inStruct other) {

			other.id = this.id;
			other.name = this.name;

		}

		public void copyKeysDataTo(row_tAmazonAuroraInput_11_inStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_11_inStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_11_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_11_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_11_inStruct row_tAmazonAuroraInput_11_in = new row_tAmazonAuroraInput_11_inStruct();
				row_tAmazonAuroraInput_11_inStruct new_portfolio_lookup = row_tAmazonAuroraInput_11_in;

				/**
				 * [tAdvancedHash_new_portfolio_lookup begin ] start
				 */

				ok_Hash.put("tAdvancedHash_new_portfolio_lookup", false);
				start_Hash.put("tAdvancedHash_new_portfolio_lookup",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_new_portfolio_lookup";

				int tos_count_tAdvancedHash_new_portfolio_lookup = 0;

				// connection name:new_portfolio_lookup
				// source node:tAmazonAuroraInput_11_out -
				// inputs:(row_tAmazonAuroraInput_11_in)
				// outputs:(new_portfolio_lookup,new_portfolio_lookup) | target
				// node:tAdvancedHash_new_portfolio_lookup -
				// inputs:(new_portfolio_lookup) outputs:()
				// linked node: tMap_6 -
				// inputs:(mainout,new_account_lookup,new_portfolio_lookup,row7)
				// outputs:(row1_ErrorReject,sort_portfolios,noDataFound_joinReject3)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_new_portfolio_lookup = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<new_portfolio_lookupStruct> tHash_Lookup_new_portfolio_lookup = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<new_portfolio_lookupStruct> getLookup(matchingModeEnum_new_portfolio_lookup);

				globalMap.put("tHash_Lookup_new_portfolio_lookup",
						tHash_Lookup_new_portfolio_lookup);

				/**
				 * [tAdvancedHash_new_portfolio_lookup begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_11_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_11_out", false);
				start_Hash.put("tAmazonAuroraInput_11_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_11";

				currentComponent = "tAmazonAuroraInput_11_out";

				int tos_count_tAmazonAuroraInput_11_out = 0;

				/**
				 * [tAmazonAuroraInput_11_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_11_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_11_in", false);
				start_Hash.put("tAmazonAuroraInput_11_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_11";

				currentComponent = "tAmazonAuroraInput_11_in";

				int tos_count_tAmazonAuroraInput_11_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_11_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_11_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_11_in = calendar_tAmazonAuroraInput_11_in
						.getTime();
				int nb_line_tAmazonAuroraInput_11_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_11_in = null;
				String driverClass_tAmazonAuroraInput_11_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_11_in);
				String dbUser_tAmazonAuroraInput_11_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_11_in = context.password;

				String dbPwd_tAmazonAuroraInput_11_in = decryptedPassword_tAmazonAuroraInput_11_in;

				String url_tAmazonAuroraInput_11_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_11_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_11_in,
								dbUser_tAmazonAuroraInput_11_in,
								dbPwd_tAmazonAuroraInput_11_in);

				java.sql.Statement stmt_tAmazonAuroraInput_11_in = conn_tAmazonAuroraInput_11_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_11_in = "select id , name from portfolio";

				globalMap.put("tAmazonAuroraInput_11_QUERY",
						dbquery_tAmazonAuroraInput_11_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_11_in = null;
				try {
					rs_tAmazonAuroraInput_11_in = stmt_tAmazonAuroraInput_11_in
							.executeQuery(dbquery_tAmazonAuroraInput_11_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_11_in = rs_tAmazonAuroraInput_11_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_11_in = rsmd_tAmazonAuroraInput_11_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_11_in = null;

					while (rs_tAmazonAuroraInput_11_in.next()) {
						nb_line_tAmazonAuroraInput_11_in++;

						if (colQtyInRs_tAmazonAuroraInput_11_in < 1) {
							row_tAmazonAuroraInput_11_in.id = 0;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(1) != null) {
								row_tAmazonAuroraInput_11_in.id = rs_tAmazonAuroraInput_11_in
										.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 2) {
							row_tAmazonAuroraInput_11_in.name = null;
						} else {

							row_tAmazonAuroraInput_11_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_11_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_11_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_11";

						currentComponent = "tAmazonAuroraInput_11_in";

						tos_count_tAmazonAuroraInput_11_in++;

						/**
						 * [tAmazonAuroraInput_11_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_11_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_11";

						currentComponent = "tAmazonAuroraInput_11_out";

						new_portfolio_lookup = row_tAmazonAuroraInput_11_in;

						tos_count_tAmazonAuroraInput_11_out++;

						/**
						 * [tAmazonAuroraInput_11_out main ] stop
						 */

						/**
						 * [tAdvancedHash_new_portfolio_lookup main ] start
						 */

						currentComponent = "tAdvancedHash_new_portfolio_lookup";

						new_portfolio_lookupStruct new_portfolio_lookup_HashRow = new new_portfolio_lookupStruct();

						new_portfolio_lookup_HashRow.id = new_portfolio_lookup.id;

						new_portfolio_lookup_HashRow.name = new_portfolio_lookup.name;

						tHash_Lookup_new_portfolio_lookup
								.put(new_portfolio_lookup_HashRow);

						tos_count_tAdvancedHash_new_portfolio_lookup++;

						/**
						 * [tAdvancedHash_new_portfolio_lookup main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_11_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_11";

						currentComponent = "tAmazonAuroraInput_11_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_11_in != null) {
						rs_tAmazonAuroraInput_11_in.close();
					}
					stmt_tAmazonAuroraInput_11_in.close();
					if (conn_tAmazonAuroraInput_11_in != null
							&& !conn_tAmazonAuroraInput_11_in.isClosed()) {

						conn_tAmazonAuroraInput_11_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_11_NB_LINE",
						nb_line_tAmazonAuroraInput_11_in);

				ok_Hash.put("tAmazonAuroraInput_11_in", true);
				end_Hash.put("tAmazonAuroraInput_11_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_11_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_11_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_11";

				currentComponent = "tAmazonAuroraInput_11_out";

				ok_Hash.put("tAmazonAuroraInput_11_out", true);
				end_Hash.put("tAmazonAuroraInput_11_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_11_out end ] stop
				 */

				/**
				 * [tAdvancedHash_new_portfolio_lookup end ] start
				 */

				currentComponent = "tAdvancedHash_new_portfolio_lookup";

				tHash_Lookup_new_portfolio_lookup.endPut();

				ok_Hash.put("tAdvancedHash_new_portfolio_lookup", true);
				end_Hash.put("tAdvancedHash_new_portfolio_lookup",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_new_portfolio_lookup end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_11_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_11";

				currentComponent = "tAmazonAuroraInput_11_in";

				/**
				 * [tAmazonAuroraInput_11_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_11_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_11";

				currentComponent = "tAmazonAuroraInput_11_out";

				/**
				 * [tAmazonAuroraInput_11_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_new_portfolio_lookup finally ] start
				 */

				currentComponent = "tAdvancedHash_new_portfolio_lookup";

				/**
				 * [tAdvancedHash_new_portfolio_lookup finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_11_in_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OrionFirmId == null) ? 0 : this.OrionFirmId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.OrionFirmId == null) {
				if (other.OrionFirmId != null)
					return false;

			} else if (!this.OrionFirmId.equals(other.OrionFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.OrionFirmId = this.OrionFirmId;
			other.ExternalId = this.ExternalId;
			other.PortfolioId = this.PortfolioId;
			other.PortfolioName = this.PortfolioName;
			other.sleeveContributionMethod = this.sleeveContributionMethod;
			other.sleeveStrategyName = this.sleeveStrategyName;
			other.sleeveDistributionMethod = this.sleeveDistributionMethod;
			other.registrationId = this.registrationId;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.OrionFirmId = this.OrionFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ExternalId = readInteger(dis, ois);

				this.PortfolioId = readString(dis, ois);

				this.PortfolioName = readString(dis, ois);

				this.sleeveContributionMethod = readString(dis, ois);

				this.sleeveStrategyName = readString(dis, ois);

				this.sleeveDistributionMethod = readString(dis, ois);

				this.registrationId = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.ExternalId, dos, oos);

				writeString(this.PortfolioId, dos, oos);

				writeString(this.PortfolioName, dos, oos);

				writeString(this.sleeveContributionMethod, dos, oos);

				writeString(this.sleeveStrategyName, dos, oos);

				writeString(this.sleeveDistributionMethod, dos, oos);

				writeInteger(this.registrationId, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OrionFirmId,
					other.OrionFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_9_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_9_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_9_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_9_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_9_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_9_inStruct row_tAmazonAuroraInput_9_in = new row_tAmazonAuroraInput_9_inStruct();
				row_tAmazonAuroraInput_9_inStruct row7 = row_tAmazonAuroraInput_9_in;

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tAmazonAuroraInput_9_out -
				// inputs:(row_tAmazonAuroraInput_9_in) outputs:(row7,row7) |
				// target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_6 -
				// inputs:(mainout,new_account_lookup,new_portfolio_lookup,row7)
				// outputs:(row1_ErrorReject,sort_portfolios,noDataFound_joinReject3)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_9_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_9_out", false);
				start_Hash.put("tAmazonAuroraInput_9_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_9";

				currentComponent = "tAmazonAuroraInput_9_out";

				int tos_count_tAmazonAuroraInput_9_out = 0;

				/**
				 * [tAmazonAuroraInput_9_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_9_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_9_in", false);
				start_Hash.put("tAmazonAuroraInput_9_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_9";

				currentComponent = "tAmazonAuroraInput_9_in";

				int tos_count_tAmazonAuroraInput_9_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_9_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_9_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_9_in = calendar_tAmazonAuroraInput_9_in
						.getTime();
				int nb_line_tAmazonAuroraInput_9_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_9_in = null;
				String driverClass_tAmazonAuroraInput_9_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_9_in);
				String dbUser_tAmazonAuroraInput_9_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_9_in = context.password;

				String dbPwd_tAmazonAuroraInput_9_in = decryptedPassword_tAmazonAuroraInput_9_in;

				String url_tAmazonAuroraInput_9_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_9_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_9_in,
								dbUser_tAmazonAuroraInput_9_in,
								dbPwd_tAmazonAuroraInput_9_in);

				java.sql.Statement stmt_tAmazonAuroraInput_9_in = conn_tAmazonAuroraInput_9_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_9_in = "select distinct OrionFirmId , externalID , PortfolioId , portfolioName , SleeveContributionMethod ,\nSleeveStrategyName ,\nSleeveDistributionMethod ,\nRegistrationId  from account_"
						+ context.firmId
						+ "_"
						+ context.date
						+ " where SleeveType ='None'";

				globalMap.put("tAmazonAuroraInput_9_QUERY",
						dbquery_tAmazonAuroraInput_9_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_9_in = null;
				try {
					rs_tAmazonAuroraInput_9_in = stmt_tAmazonAuroraInput_9_in
							.executeQuery(dbquery_tAmazonAuroraInput_9_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_9_in = rs_tAmazonAuroraInput_9_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_9_in = rsmd_tAmazonAuroraInput_9_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_9_in = null;

					while (rs_tAmazonAuroraInput_9_in.next()) {
						nb_line_tAmazonAuroraInput_9_in++;

						if (colQtyInRs_tAmazonAuroraInput_9_in < 1) {
							row_tAmazonAuroraInput_9_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_9_in.getObject(1) != null) {
								row_tAmazonAuroraInput_9_in.OrionFirmId = rs_tAmazonAuroraInput_9_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_9_in.OrionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_9_in < 2) {
							row_tAmazonAuroraInput_9_in.ExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_9_in.getObject(2) != null) {
								row_tAmazonAuroraInput_9_in.ExternalId = rs_tAmazonAuroraInput_9_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_9_in.ExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_9_in < 3) {
							row_tAmazonAuroraInput_9_in.PortfolioId = null;
						} else {

							row_tAmazonAuroraInput_9_in.PortfolioId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_9_in, 3,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_9_in < 4) {
							row_tAmazonAuroraInput_9_in.PortfolioName = null;
						} else {

							row_tAmazonAuroraInput_9_in.PortfolioName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_9_in, 4,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_9_in < 5) {
							row_tAmazonAuroraInput_9_in.sleeveContributionMethod = null;
						} else {

							row_tAmazonAuroraInput_9_in.sleeveContributionMethod = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_9_in, 5,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_9_in < 6) {
							row_tAmazonAuroraInput_9_in.sleeveStrategyName = null;
						} else {

							row_tAmazonAuroraInput_9_in.sleeveStrategyName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_9_in, 6,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_9_in < 7) {
							row_tAmazonAuroraInput_9_in.sleeveDistributionMethod = null;
						} else {

							row_tAmazonAuroraInput_9_in.sleeveDistributionMethod = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_9_in, 7,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_9_in < 8) {
							row_tAmazonAuroraInput_9_in.registrationId = null;
						} else {

							if (rs_tAmazonAuroraInput_9_in.getObject(8) != null) {
								row_tAmazonAuroraInput_9_in.registrationId = rs_tAmazonAuroraInput_9_in
										.getInt(8);
							} else {
								row_tAmazonAuroraInput_9_in.registrationId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_9_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_9_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_9";

						currentComponent = "tAmazonAuroraInput_9_in";

						tos_count_tAmazonAuroraInput_9_in++;

						/**
						 * [tAmazonAuroraInput_9_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_9_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_9";

						currentComponent = "tAmazonAuroraInput_9_out";

						row7 = row_tAmazonAuroraInput_9_in;

						tos_count_tAmazonAuroraInput_9_out++;

						/**
						 * [tAmazonAuroraInput_9_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.OrionFirmId = row7.OrionFirmId;

						row7_HashRow.ExternalId = row7.ExternalId;

						row7_HashRow.PortfolioId = row7.PortfolioId;

						row7_HashRow.PortfolioName = row7.PortfolioName;

						row7_HashRow.sleeveContributionMethod = row7.sleeveContributionMethod;

						row7_HashRow.sleeveStrategyName = row7.sleeveStrategyName;

						row7_HashRow.sleeveDistributionMethod = row7.sleeveDistributionMethod;

						row7_HashRow.registrationId = row7.registrationId;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_9_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_9";

						currentComponent = "tAmazonAuroraInput_9_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_9_in != null) {
						rs_tAmazonAuroraInput_9_in.close();
					}
					stmt_tAmazonAuroraInput_9_in.close();
					if (conn_tAmazonAuroraInput_9_in != null
							&& !conn_tAmazonAuroraInput_9_in.isClosed()) {

						conn_tAmazonAuroraInput_9_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_9_NB_LINE",
						nb_line_tAmazonAuroraInput_9_in);

				ok_Hash.put("tAmazonAuroraInput_9_in", true);
				end_Hash.put("tAmazonAuroraInput_9_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_9_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_9_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_9";

				currentComponent = "tAmazonAuroraInput_9_out";

				ok_Hash.put("tAmazonAuroraInput_9_out", true);
				end_Hash.put("tAmazonAuroraInput_9_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_9_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_9_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_9";

				currentComponent = "tAmazonAuroraInput_9_in";

				/**
				 * [tAmazonAuroraInput_9_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_9_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_9";

				currentComponent = "tAmazonAuroraInput_9_out";

				/**
				 * [tAmazonAuroraInput_9_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_9_in_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements
			routines.system.IPersistableComparableLookupRow<row21Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row21Struct other = (row21Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row21Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmName = this.orionEclipseFirmName;

		}

		public void copyKeysDataTo(row21Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orionEclipseFirmName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_20_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_20_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_20_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_20_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_20_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_20_inStruct row_tAmazonAuroraInput_20_in = new row_tAmazonAuroraInput_20_inStruct();
				row_tAmazonAuroraInput_20_inStruct row21 = row_tAmazonAuroraInput_20_in;

				/**
				 * [tAdvancedHash_row21 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row21", false);
				start_Hash.put("tAdvancedHash_row21",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row21";

				int tos_count_tAdvancedHash_row21 = 0;

				// connection name:row21
				// source node:tAmazonAuroraInput_20_out -
				// inputs:(row_tAmazonAuroraInput_20_in) outputs:(row21,row21) |
				// target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
				// linked node: tMap_14 - inputs:(row20,row21) outputs:(copyOfs)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row21Struct> getLookup(matchingModeEnum_row21);

				globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);

				/**
				 * [tAdvancedHash_row21 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_20_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_20_out", false);
				start_Hash.put("tAmazonAuroraInput_20_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_20";

				currentComponent = "tAmazonAuroraInput_20_out";

				int tos_count_tAmazonAuroraInput_20_out = 0;

				/**
				 * [tAmazonAuroraInput_20_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_20_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_20_in", false);
				start_Hash.put("tAmazonAuroraInput_20_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_20";

				currentComponent = "tAmazonAuroraInput_20_in";

				int tos_count_tAmazonAuroraInput_20_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_20_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_20_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_20_in = calendar_tAmazonAuroraInput_20_in
						.getTime();
				int nb_line_tAmazonAuroraInput_20_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_20_in = null;
				String driverClass_tAmazonAuroraInput_20_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_20_in);
				String dbUser_tAmazonAuroraInput_20_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_20_in = context.password;

				String dbPwd_tAmazonAuroraInput_20_in = decryptedPassword_tAmazonAuroraInput_20_in;

				String url_tAmazonAuroraInput_20_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_20_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_20_in,
								dbUser_tAmazonAuroraInput_20_in,
								dbPwd_tAmazonAuroraInput_20_in);

				java.sql.Statement stmt_tAmazonAuroraInput_20_in = conn_tAmazonAuroraInput_20_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_20_in = "select orionConnectFirmId , orionEclipseFirmName from firm";

				globalMap.put("tAmazonAuroraInput_20_QUERY",
						dbquery_tAmazonAuroraInput_20_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_20_in = null;
				try {
					rs_tAmazonAuroraInput_20_in = stmt_tAmazonAuroraInput_20_in
							.executeQuery(dbquery_tAmazonAuroraInput_20_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_20_in = rs_tAmazonAuroraInput_20_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_20_in = rsmd_tAmazonAuroraInput_20_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_20_in = null;

					while (rs_tAmazonAuroraInput_20_in.next()) {
						nb_line_tAmazonAuroraInput_20_in++;

						if (colQtyInRs_tAmazonAuroraInput_20_in < 1) {
							row_tAmazonAuroraInput_20_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_20_in.getObject(1) != null) {
								row_tAmazonAuroraInput_20_in.orionConnectFirmId = rs_tAmazonAuroraInput_20_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_20_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_20_in < 2) {
							row_tAmazonAuroraInput_20_in.orionEclipseFirmName = null;
						} else {

							row_tAmazonAuroraInput_20_in.orionEclipseFirmName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_20_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_20_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_20_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_20";

						currentComponent = "tAmazonAuroraInput_20_in";

						tos_count_tAmazonAuroraInput_20_in++;

						/**
						 * [tAmazonAuroraInput_20_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_20_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_20";

						currentComponent = "tAmazonAuroraInput_20_out";

						row21 = row_tAmazonAuroraInput_20_in;

						tos_count_tAmazonAuroraInput_20_out++;

						/**
						 * [tAmazonAuroraInput_20_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row21 main ] start
						 */

						currentComponent = "tAdvancedHash_row21";

						row21Struct row21_HashRow = new row21Struct();

						row21_HashRow.orionConnectFirmId = row21.orionConnectFirmId;

						row21_HashRow.orionEclipseFirmName = row21.orionEclipseFirmName;

						tHash_Lookup_row21.put(row21_HashRow);

						tos_count_tAdvancedHash_row21++;

						/**
						 * [tAdvancedHash_row21 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_20_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_20";

						currentComponent = "tAmazonAuroraInput_20_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_20_in != null) {
						rs_tAmazonAuroraInput_20_in.close();
					}
					stmt_tAmazonAuroraInput_20_in.close();
					if (conn_tAmazonAuroraInput_20_in != null
							&& !conn_tAmazonAuroraInput_20_in.isClosed()) {

						conn_tAmazonAuroraInput_20_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_20_NB_LINE",
						nb_line_tAmazonAuroraInput_20_in);

				ok_Hash.put("tAmazonAuroraInput_20_in", true);
				end_Hash.put("tAmazonAuroraInput_20_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_20_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_20_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_20";

				currentComponent = "tAmazonAuroraInput_20_out";

				ok_Hash.put("tAmazonAuroraInput_20_out", true);
				end_Hash.put("tAmazonAuroraInput_20_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_20_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row21 end ] start
				 */

				currentComponent = "tAdvancedHash_row21";

				tHash_Lookup_row21.endPut();

				ok_Hash.put("tAdvancedHash_row21", true);
				end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row21 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_20_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_20";

				currentComponent = "tAmazonAuroraInput_20_in";

				/**
				 * [tAmazonAuroraInput_20_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_20_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_20";

				currentComponent = "tAmazonAuroraInput_20_out";

				/**
				 * [tAmazonAuroraInput_20_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row21 finally ] start
				 */

				currentComponent = "tAdvancedHash_row21";

				/**
				 * [tAdvancedHash_row21 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_20_in_SUBPROCESS_STATE", 1);
	}

	public static class custodian_lookupStruct
			implements
			routines.system.IPersistableComparableLookupRow<custodian_lookupStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.name == null) ? 0 : this.name.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final custodian_lookupStruct other = (custodian_lookupStruct) obj;

			if (this.name == null) {
				if (other.name != null)
					return false;

			} else if (!this.name.equals(other.name))

				return false;

			return true;
		}

		public void copyDataTo(custodian_lookupStruct other) {

			other.id = this.id;
			other.name = this.name;

		}

		public void copyKeysDataTo(custodian_lookupStruct other) {

			other.name = this.name;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(custodian_lookupStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.name, other.name);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_4_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_4_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_4_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_4_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_4_inStruct row_tAmazonAuroraInput_4_in = new row_tAmazonAuroraInput_4_inStruct();
				row_tAmazonAuroraInput_4_inStruct custodian_lookup = row_tAmazonAuroraInput_4_in;

				/**
				 * [tAdvancedHash_custodian_lookup begin ] start
				 */

				ok_Hash.put("tAdvancedHash_custodian_lookup", false);
				start_Hash.put("tAdvancedHash_custodian_lookup",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_custodian_lookup";

				int tos_count_tAdvancedHash_custodian_lookup = 0;

				// connection name:custodian_lookup
				// source node:tAmazonAuroraInput_4_out -
				// inputs:(row_tAmazonAuroraInput_4_in)
				// outputs:(custodian_lookup,custodian_lookup) | target
				// node:tAdvancedHash_custodian_lookup -
				// inputs:(custodian_lookup) outputs:()
				// linked node: tMap_2 -
				// inputs:(copyOfmainout,custodian_lookup,advisor_lookup,account_type_lookup,account_lookup,row1)
				// outputs:(account_filter,noDataFount_joinReject)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_custodian_lookup = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<custodian_lookupStruct> tHash_Lookup_custodian_lookup = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<custodian_lookupStruct> getLookup(matchingModeEnum_custodian_lookup);

				globalMap.put("tHash_Lookup_custodian_lookup",
						tHash_Lookup_custodian_lookup);

				/**
				 * [tAdvancedHash_custodian_lookup begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_4_out", false);
				start_Hash.put("tAmazonAuroraInput_4_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				int tos_count_tAmazonAuroraInput_4_out = 0;

				/**
				 * [tAmazonAuroraInput_4_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_4_in", false);
				start_Hash.put("tAmazonAuroraInput_4_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_in";

				int tos_count_tAmazonAuroraInput_4_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_4_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_4_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_4_in = calendar_tAmazonAuroraInput_4_in
						.getTime();
				int nb_line_tAmazonAuroraInput_4_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_4_in = null;
				String driverClass_tAmazonAuroraInput_4_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_4_in);
				String dbUser_tAmazonAuroraInput_4_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_4_in = context.password;

				String dbPwd_tAmazonAuroraInput_4_in = decryptedPassword_tAmazonAuroraInput_4_in;

				String url_tAmazonAuroraInput_4_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_4_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_4_in,
								dbUser_tAmazonAuroraInput_4_in,
								dbPwd_tAmazonAuroraInput_4_in);

				java.sql.Statement stmt_tAmazonAuroraInput_4_in = conn_tAmazonAuroraInput_4_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_4_in = "select id , name from custodian";

				globalMap.put("tAmazonAuroraInput_4_QUERY",
						dbquery_tAmazonAuroraInput_4_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_4_in = null;
				try {
					rs_tAmazonAuroraInput_4_in = stmt_tAmazonAuroraInput_4_in
							.executeQuery(dbquery_tAmazonAuroraInput_4_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_4_in = rs_tAmazonAuroraInput_4_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_4_in = rsmd_tAmazonAuroraInput_4_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_4_in = null;

					while (rs_tAmazonAuroraInput_4_in.next()) {
						nb_line_tAmazonAuroraInput_4_in++;

						if (colQtyInRs_tAmazonAuroraInput_4_in < 1) {
							row_tAmazonAuroraInput_4_in.id = null;
						} else {

							if (rs_tAmazonAuroraInput_4_in.getObject(1) != null) {
								row_tAmazonAuroraInput_4_in.id = rs_tAmazonAuroraInput_4_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_4_in.id = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_4_in < 2) {
							row_tAmazonAuroraInput_4_in.name = null;
						} else {

							row_tAmazonAuroraInput_4_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_4_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_4_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_in";

						tos_count_tAmazonAuroraInput_4_in++;

						/**
						 * [tAmazonAuroraInput_4_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_out";

						custodian_lookup = row_tAmazonAuroraInput_4_in;

						tos_count_tAmazonAuroraInput_4_out++;

						/**
						 * [tAmazonAuroraInput_4_out main ] stop
						 */

						/**
						 * [tAdvancedHash_custodian_lookup main ] start
						 */

						currentComponent = "tAdvancedHash_custodian_lookup";

						custodian_lookupStruct custodian_lookup_HashRow = new custodian_lookupStruct();

						custodian_lookup_HashRow.id = custodian_lookup.id;

						custodian_lookup_HashRow.name = custodian_lookup.name;

						tHash_Lookup_custodian_lookup
								.put(custodian_lookup_HashRow);

						tos_count_tAdvancedHash_custodian_lookup++;

						/**
						 * [tAdvancedHash_custodian_lookup main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_4_in != null) {
						rs_tAmazonAuroraInput_4_in.close();
					}
					stmt_tAmazonAuroraInput_4_in.close();
					if (conn_tAmazonAuroraInput_4_in != null
							&& !conn_tAmazonAuroraInput_4_in.isClosed()) {

						conn_tAmazonAuroraInput_4_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_4_NB_LINE",
						nb_line_tAmazonAuroraInput_4_in);

				ok_Hash.put("tAmazonAuroraInput_4_in", true);
				end_Hash.put("tAmazonAuroraInput_4_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_4_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				ok_Hash.put("tAmazonAuroraInput_4_out", true);
				end_Hash.put("tAmazonAuroraInput_4_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_4_out end ] stop
				 */

				/**
				 * [tAdvancedHash_custodian_lookup end ] start
				 */

				currentComponent = "tAdvancedHash_custodian_lookup";

				tHash_Lookup_custodian_lookup.endPut();

				ok_Hash.put("tAdvancedHash_custodian_lookup", true);
				end_Hash.put("tAdvancedHash_custodian_lookup",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_custodian_lookup end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_4_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_in";

				/**
				 * [tAmazonAuroraInput_4_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				/**
				 * [tAmazonAuroraInput_4_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_custodian_lookup finally ] start
				 */

				currentComponent = "tAdvancedHash_custodian_lookup";

				/**
				 * [tAdvancedHash_custodian_lookup finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE", 1);
	}

	public static class advisor_lookupStruct
			implements
			routines.system.IPersistableComparableLookupRow<advisor_lookupStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.name == null) ? 0 : this.name.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final advisor_lookupStruct other = (advisor_lookupStruct) obj;

			if (this.name == null) {
				if (other.name != null)
					return false;

			} else if (!this.name.equals(other.name))

				return false;

			return true;
		}

		public void copyDataTo(advisor_lookupStruct other) {

			other.id = this.id;
			other.name = this.name;

		}

		public void copyKeysDataTo(advisor_lookupStruct other) {

			other.name = this.name;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(advisor_lookupStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.name, other.name);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_5_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_5_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_5_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_5_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_5_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_5_inStruct row_tAmazonAuroraInput_5_in = new row_tAmazonAuroraInput_5_inStruct();
				row_tAmazonAuroraInput_5_inStruct advisor_lookup = row_tAmazonAuroraInput_5_in;

				/**
				 * [tAdvancedHash_advisor_lookup begin ] start
				 */

				ok_Hash.put("tAdvancedHash_advisor_lookup", false);
				start_Hash.put("tAdvancedHash_advisor_lookup",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_advisor_lookup";

				int tos_count_tAdvancedHash_advisor_lookup = 0;

				// connection name:advisor_lookup
				// source node:tAmazonAuroraInput_5_out -
				// inputs:(row_tAmazonAuroraInput_5_in)
				// outputs:(advisor_lookup,advisor_lookup) | target
				// node:tAdvancedHash_advisor_lookup - inputs:(advisor_lookup)
				// outputs:()
				// linked node: tMap_2 -
				// inputs:(copyOfmainout,custodian_lookup,advisor_lookup,account_type_lookup,account_lookup,row1)
				// outputs:(account_filter,noDataFount_joinReject)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_advisor_lookup = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<advisor_lookupStruct> tHash_Lookup_advisor_lookup = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<advisor_lookupStruct> getLookup(matchingModeEnum_advisor_lookup);

				globalMap.put("tHash_Lookup_advisor_lookup",
						tHash_Lookup_advisor_lookup);

				/**
				 * [tAdvancedHash_advisor_lookup begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_5_out", false);
				start_Hash.put("tAmazonAuroraInput_5_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				int tos_count_tAmazonAuroraInput_5_out = 0;

				/**
				 * [tAmazonAuroraInput_5_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_5_in", false);
				start_Hash.put("tAmazonAuroraInput_5_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_in";

				int tos_count_tAmazonAuroraInput_5_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_5_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_5_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_5_in = calendar_tAmazonAuroraInput_5_in
						.getTime();
				int nb_line_tAmazonAuroraInput_5_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_5_in = null;
				String driverClass_tAmazonAuroraInput_5_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_5_in);
				String dbUser_tAmazonAuroraInput_5_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_5_in = context.password;

				String dbPwd_tAmazonAuroraInput_5_in = decryptedPassword_tAmazonAuroraInput_5_in;

				String url_tAmazonAuroraInput_5_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_5_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_5_in,
								dbUser_tAmazonAuroraInput_5_in,
								dbPwd_tAmazonAuroraInput_5_in);

				java.sql.Statement stmt_tAmazonAuroraInput_5_in = conn_tAmazonAuroraInput_5_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_5_in = "select id , name from advisor";

				globalMap.put("tAmazonAuroraInput_5_QUERY",
						dbquery_tAmazonAuroraInput_5_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_5_in = null;
				try {
					rs_tAmazonAuroraInput_5_in = stmt_tAmazonAuroraInput_5_in
							.executeQuery(dbquery_tAmazonAuroraInput_5_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_5_in = rs_tAmazonAuroraInput_5_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_5_in = rsmd_tAmazonAuroraInput_5_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_5_in = null;

					while (rs_tAmazonAuroraInput_5_in.next()) {
						nb_line_tAmazonAuroraInput_5_in++;

						if (colQtyInRs_tAmazonAuroraInput_5_in < 1) {
							row_tAmazonAuroraInput_5_in.id = null;
						} else {

							if (rs_tAmazonAuroraInput_5_in.getObject(1) != null) {
								row_tAmazonAuroraInput_5_in.id = rs_tAmazonAuroraInput_5_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_5_in.id = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_5_in < 2) {
							row_tAmazonAuroraInput_5_in.name = null;
						} else {

							row_tAmazonAuroraInput_5_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_5_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_5_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_in";

						tos_count_tAmazonAuroraInput_5_in++;

						/**
						 * [tAmazonAuroraInput_5_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_out";

						advisor_lookup = row_tAmazonAuroraInput_5_in;

						tos_count_tAmazonAuroraInput_5_out++;

						/**
						 * [tAmazonAuroraInput_5_out main ] stop
						 */

						/**
						 * [tAdvancedHash_advisor_lookup main ] start
						 */

						currentComponent = "tAdvancedHash_advisor_lookup";

						advisor_lookupStruct advisor_lookup_HashRow = new advisor_lookupStruct();

						advisor_lookup_HashRow.id = advisor_lookup.id;

						advisor_lookup_HashRow.name = advisor_lookup.name;

						tHash_Lookup_advisor_lookup.put(advisor_lookup_HashRow);

						tos_count_tAdvancedHash_advisor_lookup++;

						/**
						 * [tAdvancedHash_advisor_lookup main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_5_in != null) {
						rs_tAmazonAuroraInput_5_in.close();
					}
					stmt_tAmazonAuroraInput_5_in.close();
					if (conn_tAmazonAuroraInput_5_in != null
							&& !conn_tAmazonAuroraInput_5_in.isClosed()) {

						conn_tAmazonAuroraInput_5_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_5_NB_LINE",
						nb_line_tAmazonAuroraInput_5_in);

				ok_Hash.put("tAmazonAuroraInput_5_in", true);
				end_Hash.put("tAmazonAuroraInput_5_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_5_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				ok_Hash.put("tAmazonAuroraInput_5_out", true);
				end_Hash.put("tAmazonAuroraInput_5_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_5_out end ] stop
				 */

				/**
				 * [tAdvancedHash_advisor_lookup end ] start
				 */

				currentComponent = "tAdvancedHash_advisor_lookup";

				tHash_Lookup_advisor_lookup.endPut();

				ok_Hash.put("tAdvancedHash_advisor_lookup", true);
				end_Hash.put("tAdvancedHash_advisor_lookup",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_advisor_lookup end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_5_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_in";

				/**
				 * [tAmazonAuroraInput_5_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				/**
				 * [tAmazonAuroraInput_5_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_advisor_lookup finally ] start
				 */

				currentComponent = "tAdvancedHash_advisor_lookup";

				/**
				 * [tAdvancedHash_advisor_lookup finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_5_in_SUBPROCESS_STATE", 1);
	}

	public static class account_type_lookupStruct
			implements
			routines.system.IPersistableComparableLookupRow<account_type_lookupStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.name == null) ? 0 : this.name.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final account_type_lookupStruct other = (account_type_lookupStruct) obj;

			if (this.name == null) {
				if (other.name != null)
					return false;

			} else if (!this.name.equals(other.name))

				return false;

			return true;
		}

		public void copyDataTo(account_type_lookupStruct other) {

			other.id = this.id;
			other.name = this.name;

		}

		public void copyKeysDataTo(account_type_lookupStruct other) {

			other.name = this.name;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(account_type_lookupStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.name, other.name);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_6_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_6_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_tAmazonAuroraInput_6_inStruct other = (row_tAmazonAuroraInput_6_inStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row_tAmazonAuroraInput_6_inStruct other) {

			other.id = this.id;
			other.name = this.name;

		}

		public void copyKeysDataTo(row_tAmazonAuroraInput_6_inStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_6_inStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_6_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_6_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_6_inStruct row_tAmazonAuroraInput_6_in = new row_tAmazonAuroraInput_6_inStruct();
				row_tAmazonAuroraInput_6_inStruct account_type_lookup = row_tAmazonAuroraInput_6_in;

				/**
				 * [tAdvancedHash_account_type_lookup begin ] start
				 */

				ok_Hash.put("tAdvancedHash_account_type_lookup", false);
				start_Hash.put("tAdvancedHash_account_type_lookup",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_account_type_lookup";

				int tos_count_tAdvancedHash_account_type_lookup = 0;

				// connection name:account_type_lookup
				// source node:tAmazonAuroraInput_6_out -
				// inputs:(row_tAmazonAuroraInput_6_in)
				// outputs:(account_type_lookup,account_type_lookup) | target
				// node:tAdvancedHash_account_type_lookup -
				// inputs:(account_type_lookup) outputs:()
				// linked node: tMap_2 -
				// inputs:(copyOfmainout,custodian_lookup,advisor_lookup,account_type_lookup,account_lookup,row1)
				// outputs:(account_filter,noDataFount_joinReject)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_account_type_lookup = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<account_type_lookupStruct> tHash_Lookup_account_type_lookup = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<account_type_lookupStruct> getLookup(matchingModeEnum_account_type_lookup);

				globalMap.put("tHash_Lookup_account_type_lookup",
						tHash_Lookup_account_type_lookup);

				/**
				 * [tAdvancedHash_account_type_lookup begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_6_out", false);
				start_Hash.put("tAmazonAuroraInput_6_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_out";

				int tos_count_tAmazonAuroraInput_6_out = 0;

				/**
				 * [tAmazonAuroraInput_6_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_6_in", false);
				start_Hash.put("tAmazonAuroraInput_6_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_in";

				int tos_count_tAmazonAuroraInput_6_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_6_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_6_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_6_in = calendar_tAmazonAuroraInput_6_in
						.getTime();
				int nb_line_tAmazonAuroraInput_6_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_6_in = null;
				String driverClass_tAmazonAuroraInput_6_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_6_in);
				String dbUser_tAmazonAuroraInput_6_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_6_in = context.password;

				String dbPwd_tAmazonAuroraInput_6_in = decryptedPassword_tAmazonAuroraInput_6_in;

				String url_tAmazonAuroraInput_6_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_6_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_6_in,
								dbUser_tAmazonAuroraInput_6_in,
								dbPwd_tAmazonAuroraInput_6_in);

				java.sql.Statement stmt_tAmazonAuroraInput_6_in = conn_tAmazonAuroraInput_6_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_6_in = "select id , name from accountType";

				globalMap.put("tAmazonAuroraInput_6_QUERY",
						dbquery_tAmazonAuroraInput_6_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_6_in = null;
				try {
					rs_tAmazonAuroraInput_6_in = stmt_tAmazonAuroraInput_6_in
							.executeQuery(dbquery_tAmazonAuroraInput_6_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_6_in = rs_tAmazonAuroraInput_6_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_6_in = rsmd_tAmazonAuroraInput_6_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_6_in = null;

					while (rs_tAmazonAuroraInput_6_in.next()) {
						nb_line_tAmazonAuroraInput_6_in++;

						if (colQtyInRs_tAmazonAuroraInput_6_in < 1) {
							row_tAmazonAuroraInput_6_in.id = 0;
						} else {

							if (rs_tAmazonAuroraInput_6_in.getObject(1) != null) {
								row_tAmazonAuroraInput_6_in.id = rs_tAmazonAuroraInput_6_in
										.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_6_in < 2) {
							row_tAmazonAuroraInput_6_in.name = null;
						} else {

							row_tAmazonAuroraInput_6_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_6_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_6_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_6_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_6";

						currentComponent = "tAmazonAuroraInput_6_in";

						tos_count_tAmazonAuroraInput_6_in++;

						/**
						 * [tAmazonAuroraInput_6_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_6_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_6";

						currentComponent = "tAmazonAuroraInput_6_out";

						account_type_lookup = row_tAmazonAuroraInput_6_in;

						tos_count_tAmazonAuroraInput_6_out++;

						/**
						 * [tAmazonAuroraInput_6_out main ] stop
						 */

						/**
						 * [tAdvancedHash_account_type_lookup main ] start
						 */

						currentComponent = "tAdvancedHash_account_type_lookup";

						account_type_lookupStruct account_type_lookup_HashRow = new account_type_lookupStruct();

						account_type_lookup_HashRow.id = account_type_lookup.id;

						account_type_lookup_HashRow.name = account_type_lookup.name;

						tHash_Lookup_account_type_lookup
								.put(account_type_lookup_HashRow);

						tos_count_tAdvancedHash_account_type_lookup++;

						/**
						 * [tAdvancedHash_account_type_lookup main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_6_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_6";

						currentComponent = "tAmazonAuroraInput_6_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_6_in != null) {
						rs_tAmazonAuroraInput_6_in.close();
					}
					stmt_tAmazonAuroraInput_6_in.close();
					if (conn_tAmazonAuroraInput_6_in != null
							&& !conn_tAmazonAuroraInput_6_in.isClosed()) {

						conn_tAmazonAuroraInput_6_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_6_NB_LINE",
						nb_line_tAmazonAuroraInput_6_in);

				ok_Hash.put("tAmazonAuroraInput_6_in", true);
				end_Hash.put("tAmazonAuroraInput_6_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_6_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_out";

				ok_Hash.put("tAmazonAuroraInput_6_out", true);
				end_Hash.put("tAmazonAuroraInput_6_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_6_out end ] stop
				 */

				/**
				 * [tAdvancedHash_account_type_lookup end ] start
				 */

				currentComponent = "tAdvancedHash_account_type_lookup";

				tHash_Lookup_account_type_lookup.endPut();

				ok_Hash.put("tAdvancedHash_account_type_lookup", true);
				end_Hash.put("tAdvancedHash_account_type_lookup",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_account_type_lookup end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_6_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_in";

				/**
				 * [tAmazonAuroraInput_6_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_out";

				/**
				 * [tAmazonAuroraInput_6_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_account_type_lookup finally ] start
				 */

				currentComponent = "tAdvancedHash_account_type_lookup";

				/**
				 * [tAdvancedHash_account_type_lookup finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_6_in_SUBPROCESS_STATE", 1);
	}

	public static class account_lookupStruct
			implements
			routines.system.IPersistableComparableLookupRow<account_lookupStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectExternalId;

		public Integer getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public Integer portfolioId;

		public Integer getPortfolioId() {
			return this.portfolioId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectExternalId == null) ? 0
								: this.orionConnectExternalId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final account_lookupStruct other = (account_lookupStruct) obj;

			if (this.orionConnectExternalId == null) {
				if (other.orionConnectExternalId != null)
					return false;

			} else if (!this.orionConnectExternalId
					.equals(other.orionConnectExternalId))

				return false;

			return true;
		}

		public void copyDataTo(account_lookupStruct other) {

			other.orionConnectExternalId = this.orionConnectExternalId;
			other.accountNumber = this.accountNumber;
			other.portfolioId = this.portfolioId;

		}

		public void copyKeysDataTo(account_lookupStruct other) {

			other.orionConnectExternalId = this.orionConnectExternalId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectExternalId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectExternalId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.accountNumber = readString(dis, ois);

				this.portfolioId = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.accountNumber, dos, oos);

				writeInteger(this.portfolioId, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",portfolioId=" + String.valueOf(portfolioId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(account_lookupStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectExternalId,
					other.orionConnectExternalId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_7_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_7_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer orionConnectExternalId;

		public Integer getOrionConnectExternalId() {
			return this.orionConnectExternalId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public Integer portfolioId;

		public Integer getPortfolioId() {
			return this.portfolioId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectExternalId = readInteger(dis);

					this.accountNumber = readString(dis);

					this.portfolioId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectExternalId, dos);

				// String

				writeString(this.accountNumber, dos);

				// Integer

				writeInteger(this.portfolioId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectExternalId="
					+ String.valueOf(orionConnectExternalId));
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",portfolioId=" + String.valueOf(portfolioId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_7_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_7_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_7_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_7_inStruct row_tAmazonAuroraInput_7_in = new row_tAmazonAuroraInput_7_inStruct();
				row_tAmazonAuroraInput_7_inStruct account_lookup = row_tAmazonAuroraInput_7_in;

				/**
				 * [tAdvancedHash_account_lookup begin ] start
				 */

				ok_Hash.put("tAdvancedHash_account_lookup", false);
				start_Hash.put("tAdvancedHash_account_lookup",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_account_lookup";

				int tos_count_tAdvancedHash_account_lookup = 0;

				// connection name:account_lookup
				// source node:tAmazonAuroraInput_7_out -
				// inputs:(row_tAmazonAuroraInput_7_in)
				// outputs:(account_lookup,account_lookup) | target
				// node:tAdvancedHash_account_lookup - inputs:(account_lookup)
				// outputs:()
				// linked node: tMap_2 -
				// inputs:(copyOfmainout,custodian_lookup,advisor_lookup,account_type_lookup,account_lookup,row1)
				// outputs:(account_filter,noDataFount_joinReject)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_account_lookup = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<account_lookupStruct> tHash_Lookup_account_lookup = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<account_lookupStruct> getLookup(matchingModeEnum_account_lookup);

				globalMap.put("tHash_Lookup_account_lookup",
						tHash_Lookup_account_lookup);

				/**
				 * [tAdvancedHash_account_lookup begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_7_out", false);
				start_Hash.put("tAmazonAuroraInput_7_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_out";

				int tos_count_tAmazonAuroraInput_7_out = 0;

				/**
				 * [tAmazonAuroraInput_7_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_7_in", false);
				start_Hash.put("tAmazonAuroraInput_7_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_in";

				int tos_count_tAmazonAuroraInput_7_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_7_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_7_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_7_in = calendar_tAmazonAuroraInput_7_in
						.getTime();
				int nb_line_tAmazonAuroraInput_7_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_7_in = null;
				String driverClass_tAmazonAuroraInput_7_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_7_in);
				String dbUser_tAmazonAuroraInput_7_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_7_in = context.password;

				String dbPwd_tAmazonAuroraInput_7_in = decryptedPassword_tAmazonAuroraInput_7_in;

				String url_tAmazonAuroraInput_7_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_7_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_7_in,
								dbUser_tAmazonAuroraInput_7_in,
								dbPwd_tAmazonAuroraInput_7_in);

				java.sql.Statement stmt_tAmazonAuroraInput_7_in = conn_tAmazonAuroraInput_7_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_7_in = "select orionConnectExternalId , accountNumber , portfolioId from account";

				globalMap.put("tAmazonAuroraInput_7_QUERY",
						dbquery_tAmazonAuroraInput_7_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_7_in = null;
				try {
					rs_tAmazonAuroraInput_7_in = stmt_tAmazonAuroraInput_7_in
							.executeQuery(dbquery_tAmazonAuroraInput_7_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_7_in = rs_tAmazonAuroraInput_7_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_7_in = rsmd_tAmazonAuroraInput_7_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_7_in = null;

					while (rs_tAmazonAuroraInput_7_in.next()) {
						nb_line_tAmazonAuroraInput_7_in++;

						if (colQtyInRs_tAmazonAuroraInput_7_in < 1) {
							row_tAmazonAuroraInput_7_in.orionConnectExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_7_in.getObject(1) != null) {
								row_tAmazonAuroraInput_7_in.orionConnectExternalId = rs_tAmazonAuroraInput_7_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_7_in.orionConnectExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_7_in < 2) {
							row_tAmazonAuroraInput_7_in.accountNumber = null;
						} else {

							row_tAmazonAuroraInput_7_in.accountNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_7_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_7_in < 3) {
							row_tAmazonAuroraInput_7_in.portfolioId = null;
						} else {

							if (rs_tAmazonAuroraInput_7_in.getObject(3) != null) {
								row_tAmazonAuroraInput_7_in.portfolioId = rs_tAmazonAuroraInput_7_in
										.getInt(3);
							} else {
								row_tAmazonAuroraInput_7_in.portfolioId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_7_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_7_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_7";

						currentComponent = "tAmazonAuroraInput_7_in";

						tos_count_tAmazonAuroraInput_7_in++;

						/**
						 * [tAmazonAuroraInput_7_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_7_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_7";

						currentComponent = "tAmazonAuroraInput_7_out";

						account_lookup = row_tAmazonAuroraInput_7_in;

						tos_count_tAmazonAuroraInput_7_out++;

						/**
						 * [tAmazonAuroraInput_7_out main ] stop
						 */

						/**
						 * [tAdvancedHash_account_lookup main ] start
						 */

						currentComponent = "tAdvancedHash_account_lookup";

						account_lookupStruct account_lookup_HashRow = new account_lookupStruct();

						account_lookup_HashRow.orionConnectExternalId = account_lookup.orionConnectExternalId;

						account_lookup_HashRow.accountNumber = account_lookup.accountNumber;

						account_lookup_HashRow.portfolioId = account_lookup.portfolioId;

						tHash_Lookup_account_lookup.put(account_lookup_HashRow);

						tos_count_tAdvancedHash_account_lookup++;

						/**
						 * [tAdvancedHash_account_lookup main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_7_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_7";

						currentComponent = "tAmazonAuroraInput_7_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_7_in != null) {
						rs_tAmazonAuroraInput_7_in.close();
					}
					stmt_tAmazonAuroraInput_7_in.close();
					if (conn_tAmazonAuroraInput_7_in != null
							&& !conn_tAmazonAuroraInput_7_in.isClosed()) {

						conn_tAmazonAuroraInput_7_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_7_NB_LINE",
						nb_line_tAmazonAuroraInput_7_in);

				ok_Hash.put("tAmazonAuroraInput_7_in", true);
				end_Hash.put("tAmazonAuroraInput_7_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_7_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_out";

				ok_Hash.put("tAmazonAuroraInput_7_out", true);
				end_Hash.put("tAmazonAuroraInput_7_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_7_out end ] stop
				 */

				/**
				 * [tAdvancedHash_account_lookup end ] start
				 */

				currentComponent = "tAdvancedHash_account_lookup";

				tHash_Lookup_account_lookup.endPut();

				ok_Hash.put("tAdvancedHash_account_lookup", true);
				end_Hash.put("tAdvancedHash_account_lookup",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_account_lookup end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_7_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_in";

				/**
				 * [tAmazonAuroraInput_7_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_out";

				/**
				 * [tAmazonAuroraInput_7_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_account_lookup finally ] start
				 */

				currentComponent = "tAdvancedHash_account_lookup";

				/**
				 * [tAdvancedHash_account_lookup finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_7_in_SUBPROCESS_STATE", 1);
	}

	public static class household_portfolioId_lookupStruct
			implements
			routines.system.IPersistableComparableLookupRow<household_portfolioId_lookupStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.name == null) ? 0 : this.name.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final household_portfolioId_lookupStruct other = (household_portfolioId_lookupStruct) obj;

			if (this.name == null) {
				if (other.name != null)
					return false;

			} else if (!this.name.equals(other.name))

				return false;

			return true;
		}

		public void copyDataTo(household_portfolioId_lookupStruct other) {

			other.id = this.id;
			other.name = this.name;

		}

		public void copyKeysDataTo(household_portfolioId_lookupStruct other) {

			other.name = this.name;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(household_portfolioId_lookupStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.name, other.name);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_8_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_8_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_tAmazonAuroraInput_8_inStruct other = (row_tAmazonAuroraInput_8_inStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row_tAmazonAuroraInput_8_inStruct other) {

			other.id = this.id;
			other.name = this.name;

		}

		public void copyKeysDataTo(row_tAmazonAuroraInput_8_inStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_8_inStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_8_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_8_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_8_inStruct row_tAmazonAuroraInput_8_in = new row_tAmazonAuroraInput_8_inStruct();
				row_tAmazonAuroraInput_8_inStruct household_portfolioId_lookup = row_tAmazonAuroraInput_8_in;

				/**
				 * [tAdvancedHash_household_portfolioId_lookup begin ] start
				 */

				ok_Hash.put("tAdvancedHash_household_portfolioId_lookup", false);
				start_Hash.put("tAdvancedHash_household_portfolioId_lookup",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_household_portfolioId_lookup";

				int tos_count_tAdvancedHash_household_portfolioId_lookup = 0;

				// connection name:household_portfolioId_lookup
				// source node:tAmazonAuroraInput_8_out -
				// inputs:(row_tAmazonAuroraInput_8_in)
				// outputs:(household_portfolioId_lookup,household_portfolioId_lookup)
				// | target node:tAdvancedHash_household_portfolioId_lookup -
				// inputs:(household_portfolioId_lookup) outputs:()
				// linked node: tMap_3 -
				// inputs:(household_portfolio_id,household_portfolioId_lookup,row13)
				// outputs:(new_household_accounts,NoDataFound_joinReject2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_household_portfolioId_lookup = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<household_portfolioId_lookupStruct> tHash_Lookup_household_portfolioId_lookup = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<household_portfolioId_lookupStruct> getLookup(matchingModeEnum_household_portfolioId_lookup);

				globalMap.put("tHash_Lookup_household_portfolioId_lookup",
						tHash_Lookup_household_portfolioId_lookup);

				/**
				 * [tAdvancedHash_household_portfolioId_lookup begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_8_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_8_out", false);
				start_Hash.put("tAmazonAuroraInput_8_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_out";

				int tos_count_tAmazonAuroraInput_8_out = 0;

				/**
				 * [tAmazonAuroraInput_8_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_8_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_8_in", false);
				start_Hash.put("tAmazonAuroraInput_8_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_in";

				int tos_count_tAmazonAuroraInput_8_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_8_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_8_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_8_in = calendar_tAmazonAuroraInput_8_in
						.getTime();
				int nb_line_tAmazonAuroraInput_8_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_8_in = null;
				String driverClass_tAmazonAuroraInput_8_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_8_in);
				String dbUser_tAmazonAuroraInput_8_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_8_in = context.password;

				String dbPwd_tAmazonAuroraInput_8_in = decryptedPassword_tAmazonAuroraInput_8_in;

				String url_tAmazonAuroraInput_8_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_8_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_8_in,
								dbUser_tAmazonAuroraInput_8_in,
								dbPwd_tAmazonAuroraInput_8_in);

				java.sql.Statement stmt_tAmazonAuroraInput_8_in = conn_tAmazonAuroraInput_8_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_8_in = "select id , name from portfolio";

				globalMap.put("tAmazonAuroraInput_8_QUERY",
						dbquery_tAmazonAuroraInput_8_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_8_in = null;
				try {
					rs_tAmazonAuroraInput_8_in = stmt_tAmazonAuroraInput_8_in
							.executeQuery(dbquery_tAmazonAuroraInput_8_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_8_in = rs_tAmazonAuroraInput_8_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_8_in = rsmd_tAmazonAuroraInput_8_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_8_in = null;

					while (rs_tAmazonAuroraInput_8_in.next()) {
						nb_line_tAmazonAuroraInput_8_in++;

						if (colQtyInRs_tAmazonAuroraInput_8_in < 1) {
							row_tAmazonAuroraInput_8_in.id = 0;
						} else {

							if (rs_tAmazonAuroraInput_8_in.getObject(1) != null) {
								row_tAmazonAuroraInput_8_in.id = rs_tAmazonAuroraInput_8_in
										.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_8_in < 2) {
							row_tAmazonAuroraInput_8_in.name = null;
						} else {

							row_tAmazonAuroraInput_8_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_8_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_8_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_8_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_8";

						currentComponent = "tAmazonAuroraInput_8_in";

						tos_count_tAmazonAuroraInput_8_in++;

						/**
						 * [tAmazonAuroraInput_8_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_8_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_8";

						currentComponent = "tAmazonAuroraInput_8_out";

						household_portfolioId_lookup = row_tAmazonAuroraInput_8_in;

						tos_count_tAmazonAuroraInput_8_out++;

						/**
						 * [tAmazonAuroraInput_8_out main ] stop
						 */

						/**
						 * [tAdvancedHash_household_portfolioId_lookup main ]
						 * start
						 */

						currentComponent = "tAdvancedHash_household_portfolioId_lookup";

						household_portfolioId_lookupStruct household_portfolioId_lookup_HashRow = new household_portfolioId_lookupStruct();

						household_portfolioId_lookup_HashRow.id = household_portfolioId_lookup.id;

						household_portfolioId_lookup_HashRow.name = household_portfolioId_lookup.name;

						tHash_Lookup_household_portfolioId_lookup
								.put(household_portfolioId_lookup_HashRow);

						tos_count_tAdvancedHash_household_portfolioId_lookup++;

						/**
						 * [tAdvancedHash_household_portfolioId_lookup main ]
						 * stop
						 */

						/**
						 * [tAmazonAuroraInput_8_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_8";

						currentComponent = "tAmazonAuroraInput_8_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_8_in != null) {
						rs_tAmazonAuroraInput_8_in.close();
					}
					stmt_tAmazonAuroraInput_8_in.close();
					if (conn_tAmazonAuroraInput_8_in != null
							&& !conn_tAmazonAuroraInput_8_in.isClosed()) {

						conn_tAmazonAuroraInput_8_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_8_NB_LINE",
						nb_line_tAmazonAuroraInput_8_in);

				ok_Hash.put("tAmazonAuroraInput_8_in", true);
				end_Hash.put("tAmazonAuroraInput_8_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_8_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_8_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_out";

				ok_Hash.put("tAmazonAuroraInput_8_out", true);
				end_Hash.put("tAmazonAuroraInput_8_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_8_out end ] stop
				 */

				/**
				 * [tAdvancedHash_household_portfolioId_lookup end ] start
				 */

				currentComponent = "tAdvancedHash_household_portfolioId_lookup";

				tHash_Lookup_household_portfolioId_lookup.endPut();

				ok_Hash.put("tAdvancedHash_household_portfolioId_lookup", true);
				end_Hash.put("tAdvancedHash_household_portfolioId_lookup",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_household_portfolioId_lookup end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_8_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_in";

				/**
				 * [tAmazonAuroraInput_8_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_8_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_out";

				/**
				 * [tAmazonAuroraInput_8_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_household_portfolioId_lookup finally ] start
				 */

				currentComponent = "tAdvancedHash_household_portfolioId_lookup";

				/**
				 * [tAdvancedHash_household_portfolioId_lookup finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_8_in_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer AUTO_INCREMENT;

		public Integer getAUTO_INCREMENT() {
			return this.AUTO_INCREMENT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.AUTO_INCREMENT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.AUTO_INCREMENT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AUTO_INCREMENT=" + String.valueOf(AUTO_INCREMENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_14_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_14_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer AUTO_INCREMENT;

		public Integer getAUTO_INCREMENT() {
			return this.AUTO_INCREMENT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.AUTO_INCREMENT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.AUTO_INCREMENT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AUTO_INCREMENT=" + String.valueOf(AUTO_INCREMENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_14_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_14_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_14_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_14_inStruct row_tAmazonAuroraInput_14_in = new row_tAmazonAuroraInput_14_inStruct();
				row_tAmazonAuroraInput_14_inStruct row6 = row_tAmazonAuroraInput_14_in;

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tAmazonAuroraInput_14_out -
				// inputs:(row_tAmazonAuroraInput_14_in) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_4 -
				// inputs:(account_portfolio_id,row6,row14)
				// outputs:(new_account_portfolio_creation,new_account_output)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_14_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_14_out", false);
				start_Hash.put("tAmazonAuroraInput_14_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_14";

				currentComponent = "tAmazonAuroraInput_14_out";

				int tos_count_tAmazonAuroraInput_14_out = 0;

				/**
				 * [tAmazonAuroraInput_14_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_14_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_14_in", false);
				start_Hash.put("tAmazonAuroraInput_14_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_14";

				currentComponent = "tAmazonAuroraInput_14_in";

				int tos_count_tAmazonAuroraInput_14_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_14_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_14_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_14_in = calendar_tAmazonAuroraInput_14_in
						.getTime();
				int nb_line_tAmazonAuroraInput_14_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_14_in = null;
				String driverClass_tAmazonAuroraInput_14_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_14_in);
				String dbUser_tAmazonAuroraInput_14_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_14_in = context.password;

				String dbPwd_tAmazonAuroraInput_14_in = decryptedPassword_tAmazonAuroraInput_14_in;

				String url_tAmazonAuroraInput_14_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_14_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_14_in,
								dbUser_tAmazonAuroraInput_14_in,
								dbPwd_tAmazonAuroraInput_14_in);

				java.sql.Statement stmt_tAmazonAuroraInput_14_in = conn_tAmazonAuroraInput_14_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_14_in = "SELECT AUTO_INCREMENT\nFROM information_schema.tables\nWHERE table_name = 'portfolio'\nAND table_schema = DATABASE( )";

				globalMap.put("tAmazonAuroraInput_14_QUERY",
						dbquery_tAmazonAuroraInput_14_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_14_in = null;
				try {
					rs_tAmazonAuroraInput_14_in = stmt_tAmazonAuroraInput_14_in
							.executeQuery(dbquery_tAmazonAuroraInput_14_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_14_in = rs_tAmazonAuroraInput_14_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_14_in = rsmd_tAmazonAuroraInput_14_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_14_in = null;

					while (rs_tAmazonAuroraInput_14_in.next()) {
						nb_line_tAmazonAuroraInput_14_in++;

						if (colQtyInRs_tAmazonAuroraInput_14_in < 1) {
							row_tAmazonAuroraInput_14_in.AUTO_INCREMENT = null;
						} else {

							if (rs_tAmazonAuroraInput_14_in.getObject(1) != null) {
								row_tAmazonAuroraInput_14_in.AUTO_INCREMENT = rs_tAmazonAuroraInput_14_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_14_in.AUTO_INCREMENT = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_14_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_14_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_14";

						currentComponent = "tAmazonAuroraInput_14_in";

						tos_count_tAmazonAuroraInput_14_in++;

						/**
						 * [tAmazonAuroraInput_14_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_14_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_14";

						currentComponent = "tAmazonAuroraInput_14_out";

						row6 = row_tAmazonAuroraInput_14_in;

						tos_count_tAmazonAuroraInput_14_out++;

						/**
						 * [tAmazonAuroraInput_14_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.AUTO_INCREMENT = row6.AUTO_INCREMENT;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_14_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_14";

						currentComponent = "tAmazonAuroraInput_14_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_14_in != null) {
						rs_tAmazonAuroraInput_14_in.close();
					}
					stmt_tAmazonAuroraInput_14_in.close();
					if (conn_tAmazonAuroraInput_14_in != null
							&& !conn_tAmazonAuroraInput_14_in.isClosed()) {

						conn_tAmazonAuroraInput_14_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_14_NB_LINE",
						nb_line_tAmazonAuroraInput_14_in);

				ok_Hash.put("tAmazonAuroraInput_14_in", true);
				end_Hash.put("tAmazonAuroraInput_14_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_14_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_14_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_14";

				currentComponent = "tAmazonAuroraInput_14_out";

				ok_Hash.put("tAmazonAuroraInput_14_out", true);
				end_Hash.put("tAmazonAuroraInput_14_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_14_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_14_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_14";

				currentComponent = "tAmazonAuroraInput_14_in";

				/**
				 * [tAmazonAuroraInput_14_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_14_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_14";

				currentComponent = "tAmazonAuroraInput_14_out";

				/**
				 * [tAmazonAuroraInput_14_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_14_in_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableComparableLookupRow<row13Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmId = this.orionEclipseFirmId;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmId = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.orionEclipseFirmId, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_2_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_2_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_2_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_2_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_2_inStruct row_tAmazonAuroraInput_2_in = new row_tAmazonAuroraInput_2_inStruct();
				row_tAmazonAuroraInput_2_inStruct row13 = row_tAmazonAuroraInput_2_in;

				/**
				 * [tAdvancedHash_row13 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row13", false);
				start_Hash.put("tAdvancedHash_row13",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row13";

				int tos_count_tAdvancedHash_row13 = 0;

				// connection name:row13
				// source node:tAmazonAuroraInput_2_out -
				// inputs:(row_tAmazonAuroraInput_2_in) outputs:(row13,row13) |
				// target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
				// linked node: tMap_3 -
				// inputs:(household_portfolio_id,household_portfolioId_lookup,row13)
				// outputs:(new_household_accounts,NoDataFound_joinReject2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row13Struct> getLookup(matchingModeEnum_row13);

				globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);

				/**
				 * [tAdvancedHash_row13 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_2_out", false);
				start_Hash.put("tAmazonAuroraInput_2_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				int tos_count_tAmazonAuroraInput_2_out = 0;

				/**
				 * [tAmazonAuroraInput_2_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_2_in", false);
				start_Hash.put("tAmazonAuroraInput_2_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_in";

				int tos_count_tAmazonAuroraInput_2_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_2_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_2_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_2_in = calendar_tAmazonAuroraInput_2_in
						.getTime();
				int nb_line_tAmazonAuroraInput_2_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_2_in = null;
				String driverClass_tAmazonAuroraInput_2_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_2_in);
				String dbUser_tAmazonAuroraInput_2_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_2_in = context.password;

				String dbPwd_tAmazonAuroraInput_2_in = decryptedPassword_tAmazonAuroraInput_2_in;

				String url_tAmazonAuroraInput_2_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_2_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_2_in,
								dbUser_tAmazonAuroraInput_2_in,
								dbPwd_tAmazonAuroraInput_2_in);

				java.sql.Statement stmt_tAmazonAuroraInput_2_in = conn_tAmazonAuroraInput_2_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_2_in = "select orionConnectFirmId , orionEclipseFirmId from firm";

				globalMap.put("tAmazonAuroraInput_2_QUERY",
						dbquery_tAmazonAuroraInput_2_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_2_in = null;
				try {
					rs_tAmazonAuroraInput_2_in = stmt_tAmazonAuroraInput_2_in
							.executeQuery(dbquery_tAmazonAuroraInput_2_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_2_in = rs_tAmazonAuroraInput_2_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_2_in = rsmd_tAmazonAuroraInput_2_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_2_in = null;

					while (rs_tAmazonAuroraInput_2_in.next()) {
						nb_line_tAmazonAuroraInput_2_in++;

						if (colQtyInRs_tAmazonAuroraInput_2_in < 1) {
							row_tAmazonAuroraInput_2_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(1) != null) {
								row_tAmazonAuroraInput_2_in.orionConnectFirmId = rs_tAmazonAuroraInput_2_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_2_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 2) {
							row_tAmazonAuroraInput_2_in.orionEclipseFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(2) != null) {
								row_tAmazonAuroraInput_2_in.orionEclipseFirmId = rs_tAmazonAuroraInput_2_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_2_in.orionEclipseFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_2_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_in";

						tos_count_tAmazonAuroraInput_2_in++;

						/**
						 * [tAmazonAuroraInput_2_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_out";

						row13 = row_tAmazonAuroraInput_2_in;

						tos_count_tAmazonAuroraInput_2_out++;

						/**
						 * [tAmazonAuroraInput_2_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row13 main ] start
						 */

						currentComponent = "tAdvancedHash_row13";

						row13Struct row13_HashRow = new row13Struct();

						row13_HashRow.orionConnectFirmId = row13.orionConnectFirmId;

						row13_HashRow.orionEclipseFirmId = row13.orionEclipseFirmId;

						tHash_Lookup_row13.put(row13_HashRow);

						tos_count_tAdvancedHash_row13++;

						/**
						 * [tAdvancedHash_row13 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_2_in != null) {
						rs_tAmazonAuroraInput_2_in.close();
					}
					stmt_tAmazonAuroraInput_2_in.close();
					if (conn_tAmazonAuroraInput_2_in != null
							&& !conn_tAmazonAuroraInput_2_in.isClosed()) {

						conn_tAmazonAuroraInput_2_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_2_NB_LINE",
						nb_line_tAmazonAuroraInput_2_in);

				ok_Hash.put("tAmazonAuroraInput_2_in", true);
				end_Hash.put("tAmazonAuroraInput_2_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_2_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				ok_Hash.put("tAmazonAuroraInput_2_out", true);
				end_Hash.put("tAmazonAuroraInput_2_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_2_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row13 end ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				tHash_Lookup_row13.endPut();

				ok_Hash.put("tAdvancedHash_row13", true);
				end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_2_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_in";

				/**
				 * [tAmazonAuroraInput_2_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				/**
				 * [tAmazonAuroraInput_2_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row13 finally ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				/**
				 * [tAdvancedHash_row13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableComparableLookupRow<row14Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmId = this.orionEclipseFirmId;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmId = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.orionEclipseFirmId, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_13_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_13_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_13_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_13_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_13_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_13_inStruct row_tAmazonAuroraInput_13_in = new row_tAmazonAuroraInput_13_inStruct();
				row_tAmazonAuroraInput_13_inStruct row14 = row_tAmazonAuroraInput_13_in;

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row14";

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tAmazonAuroraInput_13_out -
				// inputs:(row_tAmazonAuroraInput_13_in) outputs:(row14,row14) |
				// target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
				// linked node: tMap_4 -
				// inputs:(account_portfolio_id,row6,row14)
				// outputs:(new_account_portfolio_creation,new_account_output)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14Struct> getLookup(matchingModeEnum_row14);

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_13_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_13_out", false);
				start_Hash.put("tAmazonAuroraInput_13_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_13";

				currentComponent = "tAmazonAuroraInput_13_out";

				int tos_count_tAmazonAuroraInput_13_out = 0;

				/**
				 * [tAmazonAuroraInput_13_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_13_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_13_in", false);
				start_Hash.put("tAmazonAuroraInput_13_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_13";

				currentComponent = "tAmazonAuroraInput_13_in";

				int tos_count_tAmazonAuroraInput_13_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_13_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_13_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_13_in = calendar_tAmazonAuroraInput_13_in
						.getTime();
				int nb_line_tAmazonAuroraInput_13_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_13_in = null;
				String driverClass_tAmazonAuroraInput_13_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_13_in);
				String dbUser_tAmazonAuroraInput_13_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_13_in = context.password;

				String dbPwd_tAmazonAuroraInput_13_in = decryptedPassword_tAmazonAuroraInput_13_in;

				String url_tAmazonAuroraInput_13_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_13_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_13_in,
								dbUser_tAmazonAuroraInput_13_in,
								dbPwd_tAmazonAuroraInput_13_in);

				java.sql.Statement stmt_tAmazonAuroraInput_13_in = conn_tAmazonAuroraInput_13_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_13_in = "select orionConnectFirmId , orionEclipseFirmId from firm";

				globalMap.put("tAmazonAuroraInput_13_QUERY",
						dbquery_tAmazonAuroraInput_13_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_13_in = null;
				try {
					rs_tAmazonAuroraInput_13_in = stmt_tAmazonAuroraInput_13_in
							.executeQuery(dbquery_tAmazonAuroraInput_13_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_13_in = rs_tAmazonAuroraInput_13_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_13_in = rsmd_tAmazonAuroraInput_13_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_13_in = null;

					while (rs_tAmazonAuroraInput_13_in.next()) {
						nb_line_tAmazonAuroraInput_13_in++;

						if (colQtyInRs_tAmazonAuroraInput_13_in < 1) {
							row_tAmazonAuroraInput_13_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_13_in.getObject(1) != null) {
								row_tAmazonAuroraInput_13_in.orionConnectFirmId = rs_tAmazonAuroraInput_13_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_13_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_13_in < 2) {
							row_tAmazonAuroraInput_13_in.orionEclipseFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_13_in.getObject(2) != null) {
								row_tAmazonAuroraInput_13_in.orionEclipseFirmId = rs_tAmazonAuroraInput_13_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_13_in.orionEclipseFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_13_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_13_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_13";

						currentComponent = "tAmazonAuroraInput_13_in";

						tos_count_tAmazonAuroraInput_13_in++;

						/**
						 * [tAmazonAuroraInput_13_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_13_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_13";

						currentComponent = "tAmazonAuroraInput_13_out";

						row14 = row_tAmazonAuroraInput_13_in;

						tos_count_tAmazonAuroraInput_13_out++;

						/**
						 * [tAmazonAuroraInput_13_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row14 main ] start
						 */

						currentComponent = "tAdvancedHash_row14";

						row14Struct row14_HashRow = new row14Struct();

						row14_HashRow.orionConnectFirmId = row14.orionConnectFirmId;

						row14_HashRow.orionEclipseFirmId = row14.orionEclipseFirmId;

						tHash_Lookup_row14.put(row14_HashRow);

						tos_count_tAdvancedHash_row14++;

						/**
						 * [tAdvancedHash_row14 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_13_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_13";

						currentComponent = "tAmazonAuroraInput_13_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_13_in != null) {
						rs_tAmazonAuroraInput_13_in.close();
					}
					stmt_tAmazonAuroraInput_13_in.close();
					if (conn_tAmazonAuroraInput_13_in != null
							&& !conn_tAmazonAuroraInput_13_in.isClosed()) {

						conn_tAmazonAuroraInput_13_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_13_NB_LINE",
						nb_line_tAmazonAuroraInput_13_in);

				ok_Hash.put("tAmazonAuroraInput_13_in", true);
				end_Hash.put("tAmazonAuroraInput_13_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_13_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_13_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_13";

				currentComponent = "tAmazonAuroraInput_13_out";

				ok_Hash.put("tAmazonAuroraInput_13_out", true);
				end_Hash.put("tAmazonAuroraInput_13_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_13_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_13_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_13";

				currentComponent = "tAmazonAuroraInput_13_in";

				/**
				 * [tAmazonAuroraInput_13_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_13_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_13";

				currentComponent = "tAmazonAuroraInput_13_out";

				/**
				 * [tAmazonAuroraInput_13_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row14 finally ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				/**
				 * [tAdvancedHash_row14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_13_in_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmId = this.orionEclipseFirmId;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmId = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.orionEclipseFirmId, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_15_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_15_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_15_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_15_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_15_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_15_inStruct row_tAmazonAuroraInput_15_in = new row_tAmazonAuroraInput_15_inStruct();
				row_tAmazonAuroraInput_15_inStruct row15 = row_tAmazonAuroraInput_15_in;

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row15";

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tAmazonAuroraInput_15_out -
				// inputs:(row_tAmazonAuroraInput_15_in) outputs:(row15,row15) |
				// target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
				// linked node: tMap_11 - inputs:(none_portfolio_id,row15)
				// outputs:(none_portfolio_account_creation)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15Struct> getLookup(matchingModeEnum_row15);

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_15_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_15_out", false);
				start_Hash.put("tAmazonAuroraInput_15_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_15";

				currentComponent = "tAmazonAuroraInput_15_out";

				int tos_count_tAmazonAuroraInput_15_out = 0;

				/**
				 * [tAmazonAuroraInput_15_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_15_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_15_in", false);
				start_Hash.put("tAmazonAuroraInput_15_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_15";

				currentComponent = "tAmazonAuroraInput_15_in";

				int tos_count_tAmazonAuroraInput_15_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_15_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_15_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_15_in = calendar_tAmazonAuroraInput_15_in
						.getTime();
				int nb_line_tAmazonAuroraInput_15_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_15_in = null;
				String driverClass_tAmazonAuroraInput_15_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_15_in);
				String dbUser_tAmazonAuroraInput_15_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_15_in = context.password;

				String dbPwd_tAmazonAuroraInput_15_in = decryptedPassword_tAmazonAuroraInput_15_in;

				String url_tAmazonAuroraInput_15_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_15_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_15_in,
								dbUser_tAmazonAuroraInput_15_in,
								dbPwd_tAmazonAuroraInput_15_in);

				java.sql.Statement stmt_tAmazonAuroraInput_15_in = conn_tAmazonAuroraInput_15_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_15_in = "select orionConnectFirmId , orionEclipseFirmId from firm";

				globalMap.put("tAmazonAuroraInput_15_QUERY",
						dbquery_tAmazonAuroraInput_15_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_15_in = null;
				try {
					rs_tAmazonAuroraInput_15_in = stmt_tAmazonAuroraInput_15_in
							.executeQuery(dbquery_tAmazonAuroraInput_15_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_15_in = rs_tAmazonAuroraInput_15_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_15_in = rsmd_tAmazonAuroraInput_15_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_15_in = null;

					while (rs_tAmazonAuroraInput_15_in.next()) {
						nb_line_tAmazonAuroraInput_15_in++;

						if (colQtyInRs_tAmazonAuroraInput_15_in < 1) {
							row_tAmazonAuroraInput_15_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_15_in.getObject(1) != null) {
								row_tAmazonAuroraInput_15_in.orionConnectFirmId = rs_tAmazonAuroraInput_15_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_15_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_15_in < 2) {
							row_tAmazonAuroraInput_15_in.orionEclipseFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_15_in.getObject(2) != null) {
								row_tAmazonAuroraInput_15_in.orionEclipseFirmId = rs_tAmazonAuroraInput_15_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_15_in.orionEclipseFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_15_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_15_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_15";

						currentComponent = "tAmazonAuroraInput_15_in";

						tos_count_tAmazonAuroraInput_15_in++;

						/**
						 * [tAmazonAuroraInput_15_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_15_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_15";

						currentComponent = "tAmazonAuroraInput_15_out";

						row15 = row_tAmazonAuroraInput_15_in;

						tos_count_tAmazonAuroraInput_15_out++;

						/**
						 * [tAmazonAuroraInput_15_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row15 main ] start
						 */

						currentComponent = "tAdvancedHash_row15";

						row15Struct row15_HashRow = new row15Struct();

						row15_HashRow.orionConnectFirmId = row15.orionConnectFirmId;

						row15_HashRow.orionEclipseFirmId = row15.orionEclipseFirmId;

						tHash_Lookup_row15.put(row15_HashRow);

						tos_count_tAdvancedHash_row15++;

						/**
						 * [tAdvancedHash_row15 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_15_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_15";

						currentComponent = "tAmazonAuroraInput_15_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_15_in != null) {
						rs_tAmazonAuroraInput_15_in.close();
					}
					stmt_tAmazonAuroraInput_15_in.close();
					if (conn_tAmazonAuroraInput_15_in != null
							&& !conn_tAmazonAuroraInput_15_in.isClosed()) {

						conn_tAmazonAuroraInput_15_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_15_NB_LINE",
						nb_line_tAmazonAuroraInput_15_in);

				ok_Hash.put("tAmazonAuroraInput_15_in", true);
				end_Hash.put("tAmazonAuroraInput_15_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_15_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_15_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_15";

				currentComponent = "tAmazonAuroraInput_15_out";

				ok_Hash.put("tAmazonAuroraInput_15_out", true);
				end_Hash.put("tAmazonAuroraInput_15_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_15_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_15_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_15";

				currentComponent = "tAmazonAuroraInput_15_in";

				/**
				 * [tAmazonAuroraInput_15_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_15_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_15";

				currentComponent = "tAmazonAuroraInput_15_out";

				/**
				 * [tAmazonAuroraInput_15_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row15 finally ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				/**
				 * [tAdvancedHash_row15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_15_in_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmId = this.orionEclipseFirmId;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmId = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.orionEclipseFirmId, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_16_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_16_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_16_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_16_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_16_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_16_inStruct row_tAmazonAuroraInput_16_in = new row_tAmazonAuroraInput_16_inStruct();
				row_tAmazonAuroraInput_16_inStruct row16 = row_tAmazonAuroraInput_16_in;

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row16";

				int tos_count_tAdvancedHash_row16 = 0;

				// connection name:row16
				// source node:tAmazonAuroraInput_16_out -
				// inputs:(row_tAmazonAuroraInput_16_in) outputs:(row16,row16) |
				// target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
				// linked node: tMap_5 - inputs:(row5,row16)
				// outputs:(update_old_accounts)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row16Struct> getLookup(matchingModeEnum_row16);

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_16_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_16_out", false);
				start_Hash.put("tAmazonAuroraInput_16_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_16";

				currentComponent = "tAmazonAuroraInput_16_out";

				int tos_count_tAmazonAuroraInput_16_out = 0;

				/**
				 * [tAmazonAuroraInput_16_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_16_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_16_in", false);
				start_Hash.put("tAmazonAuroraInput_16_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_16";

				currentComponent = "tAmazonAuroraInput_16_in";

				int tos_count_tAmazonAuroraInput_16_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_16_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_16_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_16_in = calendar_tAmazonAuroraInput_16_in
						.getTime();
				int nb_line_tAmazonAuroraInput_16_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_16_in = null;
				String driverClass_tAmazonAuroraInput_16_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_16_in);
				String dbUser_tAmazonAuroraInput_16_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_16_in = context.password;

				String dbPwd_tAmazonAuroraInput_16_in = decryptedPassword_tAmazonAuroraInput_16_in;

				String url_tAmazonAuroraInput_16_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_16_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_16_in,
								dbUser_tAmazonAuroraInput_16_in,
								dbPwd_tAmazonAuroraInput_16_in);

				java.sql.Statement stmt_tAmazonAuroraInput_16_in = conn_tAmazonAuroraInput_16_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_16_in = "select orionConnectFirmId , orionEclipseFirmId from firm";

				globalMap.put("tAmazonAuroraInput_16_QUERY",
						dbquery_tAmazonAuroraInput_16_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_16_in = null;
				try {
					rs_tAmazonAuroraInput_16_in = stmt_tAmazonAuroraInput_16_in
							.executeQuery(dbquery_tAmazonAuroraInput_16_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_16_in = rs_tAmazonAuroraInput_16_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_16_in = rsmd_tAmazonAuroraInput_16_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_16_in = null;

					while (rs_tAmazonAuroraInput_16_in.next()) {
						nb_line_tAmazonAuroraInput_16_in++;

						if (colQtyInRs_tAmazonAuroraInput_16_in < 1) {
							row_tAmazonAuroraInput_16_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_16_in.getObject(1) != null) {
								row_tAmazonAuroraInput_16_in.orionConnectFirmId = rs_tAmazonAuroraInput_16_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_16_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_16_in < 2) {
							row_tAmazonAuroraInput_16_in.orionEclipseFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_16_in.getObject(2) != null) {
								row_tAmazonAuroraInput_16_in.orionEclipseFirmId = rs_tAmazonAuroraInput_16_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_16_in.orionEclipseFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_16_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_16_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_16";

						currentComponent = "tAmazonAuroraInput_16_in";

						tos_count_tAmazonAuroraInput_16_in++;

						/**
						 * [tAmazonAuroraInput_16_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_16_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_16";

						currentComponent = "tAmazonAuroraInput_16_out";

						row16 = row_tAmazonAuroraInput_16_in;

						tos_count_tAmazonAuroraInput_16_out++;

						/**
						 * [tAmazonAuroraInput_16_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row16 main ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						row16Struct row16_HashRow = new row16Struct();

						row16_HashRow.orionConnectFirmId = row16.orionConnectFirmId;

						row16_HashRow.orionEclipseFirmId = row16.orionEclipseFirmId;

						tHash_Lookup_row16.put(row16_HashRow);

						tos_count_tAdvancedHash_row16++;

						/**
						 * [tAdvancedHash_row16 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_16_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_16";

						currentComponent = "tAmazonAuroraInput_16_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_16_in != null) {
						rs_tAmazonAuroraInput_16_in.close();
					}
					stmt_tAmazonAuroraInput_16_in.close();
					if (conn_tAmazonAuroraInput_16_in != null
							&& !conn_tAmazonAuroraInput_16_in.isClosed()) {

						conn_tAmazonAuroraInput_16_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_16_NB_LINE",
						nb_line_tAmazonAuroraInput_16_in);

				ok_Hash.put("tAmazonAuroraInput_16_in", true);
				end_Hash.put("tAmazonAuroraInput_16_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_16_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_16_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_16";

				currentComponent = "tAmazonAuroraInput_16_out";

				ok_Hash.put("tAmazonAuroraInput_16_out", true);
				end_Hash.put("tAmazonAuroraInput_16_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_16_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_16_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_16";

				currentComponent = "tAmazonAuroraInput_16_in";

				/**
				 * [tAmazonAuroraInput_16_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_16_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_16";

				currentComponent = "tAmazonAuroraInput_16_out";

				/**
				 * [tAmazonAuroraInput_16_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row16 finally ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				/**
				 * [tAdvancedHash_row16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_16_in_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableComparableLookupRow<row1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountName;

		public String getAccountName() {
			return this.AccountName;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public Integer HouseholdId;

		public Integer getHouseholdId() {
			return this.HouseholdId;
		}

		public String HouseholdName;

		public String getHouseholdName() {
			return this.HouseholdName;
		}

		public String AccountType;

		public String getAccountType() {
			return this.AccountType;
		}

		public Byte Taxable;

		public Byte getTaxable() {
			return this.Taxable;
		}

		public Float AccountYTDRealizedSTGL;

		public Float getAccountYTDRealizedSTGL() {
			return this.AccountYTDRealizedSTGL;
		}

		public Float AccountYTDRealizedLTGL;

		public Float getAccountYTDRealizedLTGL() {
			return this.AccountYTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String SweepSymbol;

		public String getSweepSymbol() {
			return this.SweepSymbol;
		}

		public String Custodian;

		public String getCustodian() {
			return this.Custodian;
		}

		public String CustodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.CustodialAccountNumber;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		public Integer AdvisorExternalId;

		public Integer getAdvisorExternalId() {
			return this.AdvisorExternalId;
		}

		public String SleeveType;

		public String getSleeveType() {
			return this.SleeveType;
		}

		public Float SleeveTarget;

		public Float getSleeveTarget() {
			return this.SleeveTarget;
		}

		public Float SleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.SleeveContributionPercent;
		}

		public Float SleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.SleeveDistributionPercent;
		}

		public Float SleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.SleeveToleranceLower;
		}

		public Float SleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.SleeveToleranceUpper;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public String SystematicAmount;

		public String getSystematicAmount() {
			return this.SystematicAmount;
		}

		public java.util.Date SystematicDate;

		public java.util.Date getSystematicDate() {
			return this.SystematicDate;
		}

		public String HashedSSN;

		public String getHashedSSN() {
			return this.HashedSSN;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OrionFirmId == null) ? 0 : this.OrionFirmId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.OrionFirmId == null) {
				if (other.OrionFirmId != null)
					return false;

			} else if (!this.OrionFirmId.equals(other.OrionFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.OrionFirmId = this.OrionFirmId;
			other.ExternalId = this.ExternalId;
			other.AccountId = this.AccountId;
			other.AccountNumber = this.AccountNumber;
			other.AccountName = this.AccountName;
			other.PortfolioId = this.PortfolioId;
			other.PortfolioName = this.PortfolioName;
			other.HouseholdId = this.HouseholdId;
			other.HouseholdName = this.HouseholdName;
			other.AccountType = this.AccountType;
			other.Taxable = this.Taxable;
			other.AccountYTDRealizedSTGL = this.AccountYTDRealizedSTGL;
			other.AccountYTDRealizedLTGL = this.AccountYTDRealizedLTGL;
			other.SSN = this.SSN;
			other.SweepSymbol = this.SweepSymbol;
			other.Custodian = this.Custodian;
			other.CustodialAccountNumber = this.CustodialAccountNumber;
			other.AdvisorName = this.AdvisorName;
			other.AdvisorExternalId = this.AdvisorExternalId;
			other.SleeveType = this.SleeveType;
			other.SleeveTarget = this.SleeveTarget;
			other.SleeveContributionPercent = this.SleeveContributionPercent;
			other.SleeveDistributionPercent = this.SleeveDistributionPercent;
			other.SleeveToleranceLower = this.SleeveToleranceLower;
			other.SleeveToleranceUpper = this.SleeveToleranceUpper;
			other.SMA = this.SMA;
			other.SMATradeable = this.SMATradeable;
			other.BillingAccount = this.BillingAccount;
			other.SystematicAmount = this.SystematicAmount;
			other.SystematicDate = this.SystematicDate;
			other.HashedSSN = this.HashedSSN;
			other.sleeveContributionMethod = this.sleeveContributionMethod;
			other.sleeveStrategyName = this.sleeveStrategyName;
			other.sleeveDistributionMethod = this.sleeveDistributionMethod;
			other.registrationId = this.registrationId;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.OrionFirmId = this.OrionFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ExternalId = readInteger(dis, ois);

				this.AccountId = readString(dis, ois);

				this.AccountNumber = readString(dis, ois);

				this.AccountName = readString(dis, ois);

				this.PortfolioId = readString(dis, ois);

				this.PortfolioName = readString(dis, ois);

				this.HouseholdId = readInteger(dis, ois);

				this.HouseholdName = readString(dis, ois);

				this.AccountType = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Taxable = null;
				} else {
					this.Taxable = dis.readByte();
				}

				length = dis.readByte();
				if (length == -1) {
					this.AccountYTDRealizedSTGL = null;
				} else {
					this.AccountYTDRealizedSTGL = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.AccountYTDRealizedLTGL = null;
				} else {
					this.AccountYTDRealizedLTGL = dis.readFloat();
				}

				this.SSN = readString(dis, ois);

				this.SweepSymbol = readString(dis, ois);

				this.Custodian = readString(dis, ois);

				this.CustodialAccountNumber = readString(dis, ois);

				this.AdvisorName = readString(dis, ois);

				this.AdvisorExternalId = readInteger(dis, ois);

				this.SleeveType = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.SleeveTarget = null;
				} else {
					this.SleeveTarget = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.SleeveContributionPercent = null;
				} else {
					this.SleeveContributionPercent = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.SleeveDistributionPercent = null;
				} else {
					this.SleeveDistributionPercent = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.SleeveToleranceLower = null;
				} else {
					this.SleeveToleranceLower = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.SleeveToleranceUpper = null;
				} else {
					this.SleeveToleranceUpper = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.SMA = null;
				} else {
					this.SMA = dis.readBoolean();
				}

				this.SMATradeable = readString(dis, ois);

				this.BillingAccount = readString(dis, ois);

				this.SystematicAmount = readString(dis, ois);

				this.SystematicDate = readDate(dis, ois);

				this.HashedSSN = readString(dis, ois);

				this.sleeveContributionMethod = readString(dis, ois);

				this.sleeveStrategyName = readString(dis, ois);

				this.sleeveDistributionMethod = readString(dis, ois);

				this.registrationId = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.ExternalId, dos, oos);

				writeString(this.AccountId, dos, oos);

				writeString(this.AccountNumber, dos, oos);

				writeString(this.AccountName, dos, oos);

				writeString(this.PortfolioId, dos, oos);

				writeString(this.PortfolioName, dos, oos);

				writeInteger(this.HouseholdId, dos, oos);

				writeString(this.HouseholdName, dos, oos);

				writeString(this.AccountType, dos, oos);

				if (this.Taxable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeByte(this.Taxable);
				}

				if (this.AccountYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedSTGL);
				}

				if (this.AccountYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedLTGL);
				}

				writeString(this.SSN, dos, oos);

				writeString(this.SweepSymbol, dos, oos);

				writeString(this.Custodian, dos, oos);

				writeString(this.CustodialAccountNumber, dos, oos);

				writeString(this.AdvisorName, dos, oos);

				writeInteger(this.AdvisorExternalId, dos, oos);

				writeString(this.SleeveType, dos, oos);

				if (this.SleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveTarget);
				}

				if (this.SleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveContributionPercent);
				}

				if (this.SleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveDistributionPercent);
				}

				if (this.SleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceLower);
				}

				if (this.SleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceUpper);
				}

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				writeString(this.SMATradeable, dos, oos);

				writeString(this.BillingAccount, dos, oos);

				writeString(this.SystematicAmount, dos, oos);

				writeDate(this.SystematicDate, dos, oos);

				writeString(this.HashedSSN, dos, oos);

				writeString(this.sleeveContributionMethod, dos, oos);

				writeString(this.sleeveStrategyName, dos, oos);

				writeString(this.sleeveDistributionMethod, dos, oos);

				writeInteger(this.registrationId, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountName=" + AccountName);
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",HouseholdId=" + String.valueOf(HouseholdId));
			sb.append(",HouseholdName=" + HouseholdName);
			sb.append(",AccountType=" + AccountType);
			sb.append(",Taxable=" + String.valueOf(Taxable));
			sb.append(",AccountYTDRealizedSTGL="
					+ String.valueOf(AccountYTDRealizedSTGL));
			sb.append(",AccountYTDRealizedLTGL="
					+ String.valueOf(AccountYTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",SweepSymbol=" + SweepSymbol);
			sb.append(",Custodian=" + Custodian);
			sb.append(",CustodialAccountNumber=" + CustodialAccountNumber);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append(",AdvisorExternalId=" + String.valueOf(AdvisorExternalId));
			sb.append(",SleeveType=" + SleeveType);
			sb.append(",SleeveTarget=" + String.valueOf(SleeveTarget));
			sb.append(",SleeveContributionPercent="
					+ String.valueOf(SleeveContributionPercent));
			sb.append(",SleeveDistributionPercent="
					+ String.valueOf(SleeveDistributionPercent));
			sb.append(",SleeveToleranceLower="
					+ String.valueOf(SleeveToleranceLower));
			sb.append(",SleeveToleranceUpper="
					+ String.valueOf(SleeveToleranceUpper));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",SystematicAmount=" + SystematicAmount);
			sb.append(",SystematicDate=" + String.valueOf(SystematicDate));
			sb.append(",HashedSSN=" + HashedSSN);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OrionFirmId,
					other.OrionFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_3_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_3_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountName;

		public String getAccountName() {
			return this.AccountName;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public Integer HouseholdId;

		public Integer getHouseholdId() {
			return this.HouseholdId;
		}

		public String HouseholdName;

		public String getHouseholdName() {
			return this.HouseholdName;
		}

		public String AccountType;

		public String getAccountType() {
			return this.AccountType;
		}

		public Byte Taxable;

		public Byte getTaxable() {
			return this.Taxable;
		}

		public Float AccountYTDRealizedSTGL;

		public Float getAccountYTDRealizedSTGL() {
			return this.AccountYTDRealizedSTGL;
		}

		public Float AccountYTDRealizedLTGL;

		public Float getAccountYTDRealizedLTGL() {
			return this.AccountYTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String SweepSymbol;

		public String getSweepSymbol() {
			return this.SweepSymbol;
		}

		public String Custodian;

		public String getCustodian() {
			return this.Custodian;
		}

		public String CustodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.CustodialAccountNumber;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		public Integer AdvisorExternalId;

		public Integer getAdvisorExternalId() {
			return this.AdvisorExternalId;
		}

		public String SleeveType;

		public String getSleeveType() {
			return this.SleeveType;
		}

		public Float SleeveTarget;

		public Float getSleeveTarget() {
			return this.SleeveTarget;
		}

		public Float SleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.SleeveContributionPercent;
		}

		public Float SleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.SleeveDistributionPercent;
		}

		public Float SleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.SleeveToleranceLower;
		}

		public Float SleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.SleeveToleranceUpper;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public String SystematicAmount;

		public String getSystematicAmount() {
			return this.SystematicAmount;
		}

		public java.util.Date SystematicDate;

		public java.util.Date getSystematicDate() {
			return this.SystematicDate;
		}

		public String HashedSSN;

		public String getHashedSSN() {
			return this.HashedSSN;
		}

		public String sleeveContributionMethod;

		public String getSleeveContributionMethod() {
			return this.sleeveContributionMethod;
		}

		public String sleeveStrategyName;

		public String getSleeveStrategyName() {
			return this.sleeveStrategyName;
		}

		public String sleeveDistributionMethod;

		public String getSleeveDistributionMethod() {
			return this.sleeveDistributionMethod;
		}

		public Integer registrationId;

		public Integer getRegistrationId() {
			return this.registrationId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_FirmAccountImport, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_FirmAccountImport) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					this.AccountName = readString(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.HouseholdId = readInteger(dis);

					this.HouseholdName = readString(dis);

					this.AccountType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taxable = null;
					} else {
						this.Taxable = dis.readByte();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedSTGL = null;
					} else {
						this.AccountYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedLTGL = null;
					} else {
						this.AccountYTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.SweepSymbol = readString(dis);

					this.Custodian = readString(dis);

					this.CustodialAccountNumber = readString(dis);

					this.AdvisorName = readString(dis);

					this.AdvisorExternalId = readInteger(dis);

					this.SleeveType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SleeveTarget = null;
					} else {
						this.SleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveContributionPercent = null;
					} else {
						this.SleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveDistributionPercent = null;
					} else {
						this.SleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceLower = null;
					} else {
						this.SleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceUpper = null;
					} else {
						this.SleeveToleranceUpper = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					this.SystematicAmount = readString(dis);

					this.SystematicDate = readDate(dis);

					this.HashedSSN = readString(dis);

					this.sleeveContributionMethod = readString(dis);

					this.sleeveStrategyName = readString(dis);

					this.sleeveDistributionMethod = readString(dis);

					this.registrationId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountName, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// Integer

				writeInteger(this.HouseholdId, dos);

				// String

				writeString(this.HouseholdName, dos);

				// String

				writeString(this.AccountType, dos);

				// Byte

				if (this.Taxable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeByte(this.Taxable);
				}

				// Float

				if (this.AccountYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedSTGL);
				}

				// Float

				if (this.AccountYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.SweepSymbol, dos);

				// String

				writeString(this.Custodian, dos);

				// String

				writeString(this.CustodialAccountNumber, dos);

				// String

				writeString(this.AdvisorName, dos);

				// Integer

				writeInteger(this.AdvisorExternalId, dos);

				// String

				writeString(this.SleeveType, dos);

				// Float

				if (this.SleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveTarget);
				}

				// Float

				if (this.SleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveContributionPercent);
				}

				// Float

				if (this.SleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveDistributionPercent);
				}

				// Float

				if (this.SleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceLower);
				}

				// Float

				if (this.SleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceUpper);
				}

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// String

				writeString(this.SystematicAmount, dos);

				// java.util.Date

				writeDate(this.SystematicDate, dos);

				// String

				writeString(this.HashedSSN, dos);

				// String

				writeString(this.sleeveContributionMethod, dos);

				// String

				writeString(this.sleeveStrategyName, dos);

				// String

				writeString(this.sleeveDistributionMethod, dos);

				// Integer

				writeInteger(this.registrationId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountName=" + AccountName);
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",HouseholdId=" + String.valueOf(HouseholdId));
			sb.append(",HouseholdName=" + HouseholdName);
			sb.append(",AccountType=" + AccountType);
			sb.append(",Taxable=" + String.valueOf(Taxable));
			sb.append(",AccountYTDRealizedSTGL="
					+ String.valueOf(AccountYTDRealizedSTGL));
			sb.append(",AccountYTDRealizedLTGL="
					+ String.valueOf(AccountYTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",SweepSymbol=" + SweepSymbol);
			sb.append(",Custodian=" + Custodian);
			sb.append(",CustodialAccountNumber=" + CustodialAccountNumber);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append(",AdvisorExternalId=" + String.valueOf(AdvisorExternalId));
			sb.append(",SleeveType=" + SleeveType);
			sb.append(",SleeveTarget=" + String.valueOf(SleeveTarget));
			sb.append(",SleeveContributionPercent="
					+ String.valueOf(SleeveContributionPercent));
			sb.append(",SleeveDistributionPercent="
					+ String.valueOf(SleeveDistributionPercent));
			sb.append(",SleeveToleranceLower="
					+ String.valueOf(SleeveToleranceLower));
			sb.append(",SleeveToleranceUpper="
					+ String.valueOf(SleeveToleranceUpper));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",SystematicAmount=" + SystematicAmount);
			sb.append(",SystematicDate=" + String.valueOf(SystematicDate));
			sb.append(",HashedSSN=" + HashedSSN);
			sb.append(",sleeveContributionMethod=" + sleeveContributionMethod);
			sb.append(",sleeveStrategyName=" + sleeveStrategyName);
			sb.append(",sleeveDistributionMethod=" + sleeveDistributionMethod);
			sb.append(",registrationId=" + String.valueOf(registrationId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_3_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_3_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_3_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_3_inStruct row_tAmazonAuroraInput_3_in = new row_tAmazonAuroraInput_3_inStruct();
				row_tAmazonAuroraInput_3_inStruct row1 = row_tAmazonAuroraInput_3_in;

				/**
				 * [tAdvancedHash_row1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row1", false);
				start_Hash
						.put("tAdvancedHash_row1", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row1";

				int tos_count_tAdvancedHash_row1 = 0;

				// connection name:row1
				// source node:tAmazonAuroraInput_3_out -
				// inputs:(row_tAmazonAuroraInput_3_in) outputs:(row1,row1) |
				// target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
				// linked node: tMap_2 -
				// inputs:(copyOfmainout,custodian_lookup,advisor_lookup,account_type_lookup,account_lookup,row1)
				// outputs:(account_filter,noDataFount_joinReject)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row1Struct> getLookup(matchingModeEnum_row1);

				globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);

				/**
				 * [tAdvancedHash_row1 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_3_out", false);
				start_Hash.put("tAmazonAuroraInput_3_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				int tos_count_tAmazonAuroraInput_3_out = 0;

				/**
				 * [tAmazonAuroraInput_3_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_3_in", false);
				start_Hash.put("tAmazonAuroraInput_3_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_in";

				int tos_count_tAmazonAuroraInput_3_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_3_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_3_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_3_in = calendar_tAmazonAuroraInput_3_in
						.getTime();
				int nb_line_tAmazonAuroraInput_3_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_3_in = null;
				String driverClass_tAmazonAuroraInput_3_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_3_in);
				String dbUser_tAmazonAuroraInput_3_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_3_in = context.password;

				String dbPwd_tAmazonAuroraInput_3_in = decryptedPassword_tAmazonAuroraInput_3_in;

				String url_tAmazonAuroraInput_3_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_3_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_3_in,
								dbUser_tAmazonAuroraInput_3_in,
								dbPwd_tAmazonAuroraInput_3_in);

				java.sql.Statement stmt_tAmazonAuroraInput_3_in = conn_tAmazonAuroraInput_3_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_3_in = "select * from account_"
						+ context.firmId
						+ "_"
						+ context.date
						+ " where SleeveType ='None'";

				globalMap.put("tAmazonAuroraInput_3_QUERY",
						dbquery_tAmazonAuroraInput_3_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_3_in = null;
				try {
					rs_tAmazonAuroraInput_3_in = stmt_tAmazonAuroraInput_3_in
							.executeQuery(dbquery_tAmazonAuroraInput_3_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_3_in = rs_tAmazonAuroraInput_3_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_3_in = rsmd_tAmazonAuroraInput_3_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_3_in = null;

					while (rs_tAmazonAuroraInput_3_in.next()) {
						nb_line_tAmazonAuroraInput_3_in++;

						if (colQtyInRs_tAmazonAuroraInput_3_in < 1) {
							row_tAmazonAuroraInput_3_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(1) != null) {
								row_tAmazonAuroraInput_3_in.OrionFirmId = rs_tAmazonAuroraInput_3_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_3_in.OrionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 2) {
							row_tAmazonAuroraInput_3_in.ExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(2) != null) {
								row_tAmazonAuroraInput_3_in.ExternalId = rs_tAmazonAuroraInput_3_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_3_in.ExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 3) {
							row_tAmazonAuroraInput_3_in.AccountId = null;
						} else {

							row_tAmazonAuroraInput_3_in.AccountId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 3,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 4) {
							row_tAmazonAuroraInput_3_in.AccountNumber = null;
						} else {

							row_tAmazonAuroraInput_3_in.AccountNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 4,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 5) {
							row_tAmazonAuroraInput_3_in.AccountName = null;
						} else {

							row_tAmazonAuroraInput_3_in.AccountName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 5,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 6) {
							row_tAmazonAuroraInput_3_in.PortfolioId = null;
						} else {

							row_tAmazonAuroraInput_3_in.PortfolioId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 6,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 7) {
							row_tAmazonAuroraInput_3_in.PortfolioName = null;
						} else {

							row_tAmazonAuroraInput_3_in.PortfolioName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 7,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 8) {
							row_tAmazonAuroraInput_3_in.HouseholdId = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(8) != null) {
								row_tAmazonAuroraInput_3_in.HouseholdId = rs_tAmazonAuroraInput_3_in
										.getInt(8);
							} else {
								row_tAmazonAuroraInput_3_in.HouseholdId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 9) {
							row_tAmazonAuroraInput_3_in.HouseholdName = null;
						} else {

							row_tAmazonAuroraInput_3_in.HouseholdName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 9,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 10) {
							row_tAmazonAuroraInput_3_in.AccountType = null;
						} else {

							row_tAmazonAuroraInput_3_in.AccountType = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 10,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 11) {
							row_tAmazonAuroraInput_3_in.Taxable = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(11) != null) {
								row_tAmazonAuroraInput_3_in.Taxable = rs_tAmazonAuroraInput_3_in
										.getByte(11);
							} else {
								row_tAmazonAuroraInput_3_in.Taxable = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 12) {
							row_tAmazonAuroraInput_3_in.AccountYTDRealizedSTGL = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(12) != null) {
								row_tAmazonAuroraInput_3_in.AccountYTDRealizedSTGL = rs_tAmazonAuroraInput_3_in
										.getFloat(12);
							} else {
								row_tAmazonAuroraInput_3_in.AccountYTDRealizedSTGL = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 13) {
							row_tAmazonAuroraInput_3_in.AccountYTDRealizedLTGL = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(13) != null) {
								row_tAmazonAuroraInput_3_in.AccountYTDRealizedLTGL = rs_tAmazonAuroraInput_3_in
										.getFloat(13);
							} else {
								row_tAmazonAuroraInput_3_in.AccountYTDRealizedLTGL = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 14) {
							row_tAmazonAuroraInput_3_in.SSN = null;
						} else {

							row_tAmazonAuroraInput_3_in.SSN = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 14,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 15) {
							row_tAmazonAuroraInput_3_in.SweepSymbol = null;
						} else {

							row_tAmazonAuroraInput_3_in.SweepSymbol = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 15,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 16) {
							row_tAmazonAuroraInput_3_in.Custodian = null;
						} else {

							row_tAmazonAuroraInput_3_in.Custodian = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 16,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 17) {
							row_tAmazonAuroraInput_3_in.CustodialAccountNumber = null;
						} else {

							row_tAmazonAuroraInput_3_in.CustodialAccountNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 17,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 18) {
							row_tAmazonAuroraInput_3_in.AdvisorName = null;
						} else {

							row_tAmazonAuroraInput_3_in.AdvisorName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 18,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 19) {
							row_tAmazonAuroraInput_3_in.AdvisorExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(19) != null) {
								row_tAmazonAuroraInput_3_in.AdvisorExternalId = rs_tAmazonAuroraInput_3_in
										.getInt(19);
							} else {
								row_tAmazonAuroraInput_3_in.AdvisorExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 20) {
							row_tAmazonAuroraInput_3_in.SleeveType = null;
						} else {

							row_tAmazonAuroraInput_3_in.SleeveType = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 20,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 21) {
							row_tAmazonAuroraInput_3_in.SleeveTarget = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(21) != null) {
								row_tAmazonAuroraInput_3_in.SleeveTarget = rs_tAmazonAuroraInput_3_in
										.getFloat(21);
							} else {
								row_tAmazonAuroraInput_3_in.SleeveTarget = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 22) {
							row_tAmazonAuroraInput_3_in.SleeveContributionPercent = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(22) != null) {
								row_tAmazonAuroraInput_3_in.SleeveContributionPercent = rs_tAmazonAuroraInput_3_in
										.getFloat(22);
							} else {
								row_tAmazonAuroraInput_3_in.SleeveContributionPercent = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 23) {
							row_tAmazonAuroraInput_3_in.SleeveDistributionPercent = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(23) != null) {
								row_tAmazonAuroraInput_3_in.SleeveDistributionPercent = rs_tAmazonAuroraInput_3_in
										.getFloat(23);
							} else {
								row_tAmazonAuroraInput_3_in.SleeveDistributionPercent = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 24) {
							row_tAmazonAuroraInput_3_in.SleeveToleranceLower = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(24) != null) {
								row_tAmazonAuroraInput_3_in.SleeveToleranceLower = rs_tAmazonAuroraInput_3_in
										.getFloat(24);
							} else {
								row_tAmazonAuroraInput_3_in.SleeveToleranceLower = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 25) {
							row_tAmazonAuroraInput_3_in.SleeveToleranceUpper = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(25) != null) {
								row_tAmazonAuroraInput_3_in.SleeveToleranceUpper = rs_tAmazonAuroraInput_3_in
										.getFloat(25);
							} else {
								row_tAmazonAuroraInput_3_in.SleeveToleranceUpper = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 26) {
							row_tAmazonAuroraInput_3_in.SMA = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(26) != null) {
								row_tAmazonAuroraInput_3_in.SMA = rs_tAmazonAuroraInput_3_in
										.getBoolean(26);
							} else {
								row_tAmazonAuroraInput_3_in.SMA = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 27) {
							row_tAmazonAuroraInput_3_in.SMATradeable = null;
						} else {

							row_tAmazonAuroraInput_3_in.SMATradeable = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 27,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 28) {
							row_tAmazonAuroraInput_3_in.BillingAccount = null;
						} else {

							row_tAmazonAuroraInput_3_in.BillingAccount = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 28,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 29) {
							row_tAmazonAuroraInput_3_in.SystematicAmount = null;
						} else {

							row_tAmazonAuroraInput_3_in.SystematicAmount = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 29,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 30) {
							row_tAmazonAuroraInput_3_in.SystematicDate = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getString(30) != null) {
								String dateString_tAmazonAuroraInput_3_in = rs_tAmazonAuroraInput_3_in
										.getString(30);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_3_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_3_in)) {
									row_tAmazonAuroraInput_3_in.SystematicDate = rs_tAmazonAuroraInput_3_in
											.getTimestamp(30);
								} else {
									row_tAmazonAuroraInput_3_in.SystematicDate = (java.util.Date) year0_tAmazonAuroraInput_3_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_3_in.SystematicDate = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 31) {
							row_tAmazonAuroraInput_3_in.HashedSSN = null;
						} else {

							row_tAmazonAuroraInput_3_in.HashedSSN = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 31,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 32) {
							row_tAmazonAuroraInput_3_in.sleeveContributionMethod = null;
						} else {

							row_tAmazonAuroraInput_3_in.sleeveContributionMethod = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 32,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 33) {
							row_tAmazonAuroraInput_3_in.sleeveStrategyName = null;
						} else {

							row_tAmazonAuroraInput_3_in.sleeveStrategyName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 33,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 34) {
							row_tAmazonAuroraInput_3_in.sleeveDistributionMethod = null;
						} else {

							row_tAmazonAuroraInput_3_in.sleeveDistributionMethod = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 34,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 35) {
							row_tAmazonAuroraInput_3_in.registrationId = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(35) != null) {
								row_tAmazonAuroraInput_3_in.registrationId = rs_tAmazonAuroraInput_3_in
										.getInt(35);
							} else {
								row_tAmazonAuroraInput_3_in.registrationId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_3_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_in";

						tos_count_tAmazonAuroraInput_3_in++;

						/**
						 * [tAmazonAuroraInput_3_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_out";

						row1 = row_tAmazonAuroraInput_3_in;

						tos_count_tAmazonAuroraInput_3_out++;

						/**
						 * [tAmazonAuroraInput_3_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row1 main ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						row1Struct row1_HashRow = new row1Struct();

						row1_HashRow.OrionFirmId = row1.OrionFirmId;

						row1_HashRow.ExternalId = row1.ExternalId;

						row1_HashRow.AccountId = row1.AccountId;

						row1_HashRow.AccountNumber = row1.AccountNumber;

						row1_HashRow.AccountName = row1.AccountName;

						row1_HashRow.PortfolioId = row1.PortfolioId;

						row1_HashRow.PortfolioName = row1.PortfolioName;

						row1_HashRow.HouseholdId = row1.HouseholdId;

						row1_HashRow.HouseholdName = row1.HouseholdName;

						row1_HashRow.AccountType = row1.AccountType;

						row1_HashRow.Taxable = row1.Taxable;

						row1_HashRow.AccountYTDRealizedSTGL = row1.AccountYTDRealizedSTGL;

						row1_HashRow.AccountYTDRealizedLTGL = row1.AccountYTDRealizedLTGL;

						row1_HashRow.SSN = row1.SSN;

						row1_HashRow.SweepSymbol = row1.SweepSymbol;

						row1_HashRow.Custodian = row1.Custodian;

						row1_HashRow.CustodialAccountNumber = row1.CustodialAccountNumber;

						row1_HashRow.AdvisorName = row1.AdvisorName;

						row1_HashRow.AdvisorExternalId = row1.AdvisorExternalId;

						row1_HashRow.SleeveType = row1.SleeveType;

						row1_HashRow.SleeveTarget = row1.SleeveTarget;

						row1_HashRow.SleeveContributionPercent = row1.SleeveContributionPercent;

						row1_HashRow.SleeveDistributionPercent = row1.SleeveDistributionPercent;

						row1_HashRow.SleeveToleranceLower = row1.SleeveToleranceLower;

						row1_HashRow.SleeveToleranceUpper = row1.SleeveToleranceUpper;

						row1_HashRow.SMA = row1.SMA;

						row1_HashRow.SMATradeable = row1.SMATradeable;

						row1_HashRow.BillingAccount = row1.BillingAccount;

						row1_HashRow.SystematicAmount = row1.SystematicAmount;

						row1_HashRow.SystematicDate = row1.SystematicDate;

						row1_HashRow.HashedSSN = row1.HashedSSN;

						row1_HashRow.sleeveContributionMethod = row1.sleeveContributionMethod;

						row1_HashRow.sleeveStrategyName = row1.sleeveStrategyName;

						row1_HashRow.sleeveDistributionMethod = row1.sleeveDistributionMethod;

						row1_HashRow.registrationId = row1.registrationId;

						tHash_Lookup_row1.put(row1_HashRow);

						tos_count_tAdvancedHash_row1++;

						/**
						 * [tAdvancedHash_row1 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_3_in != null) {
						rs_tAmazonAuroraInput_3_in.close();
					}
					stmt_tAmazonAuroraInput_3_in.close();
					if (conn_tAmazonAuroraInput_3_in != null
							&& !conn_tAmazonAuroraInput_3_in.isClosed()) {

						conn_tAmazonAuroraInput_3_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_3_NB_LINE",
						nb_line_tAmazonAuroraInput_3_in);

				ok_Hash.put("tAmazonAuroraInput_3_in", true);
				end_Hash.put("tAmazonAuroraInput_3_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_3_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				ok_Hash.put("tAmazonAuroraInput_3_out", true);
				end_Hash.put("tAmazonAuroraInput_3_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_3_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row1 end ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				tHash_Lookup_row1.endPut();

				ok_Hash.put("tAdvancedHash_row1", true);
				end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_3_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_in";

				/**
				 * [tAmazonAuroraInput_3_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				/**
				 * [tAmazonAuroraInput_3_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row1 finally ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				/**
				 * [tAdvancedHash_row1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_3_in_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final FirmAccountImport FirmAccountImportClass = new FirmAccountImport();

		int exitCode = FirmAccountImportClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = FirmAccountImport.class
					.getClassLoader().getResourceAsStream(
							"reliazedgainloss/firmaccountimport_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.currentDate = (String) context.getProperty("currentDate");
			context.preferenceOption = (String) context
					.getProperty("preferenceOption");
			context.custodianpath = (String) context
					.getProperty("custodianpath");
			context.inputDir = (String) context.getProperty("inputDir");
			context.taxlotpath = (String) context.getProperty("taxlotpath");
			context.contextDir = (String) context.getProperty("contextDir");
			context.database = (String) context.getProperty("database");
			context.password = (String) context.getProperty("password");
			context.filepath_advisor = (String) context
					.getProperty("filepath_advisor");
			context.transactionpath = (String) context
					.getProperty("transactionpath");
			context.serverIp = (String) context.getProperty("serverIp");
			context.positionpath = (String) context.getProperty("positionpath");
			context.securitypath = (String) context.getProperty("securitypath");
			context.accountpath = (String) context.getProperty("accountpath");
			context.username = (String) context.getProperty("username");
			context.localpath = (String) context.getProperty("localpath");
			context.commondb = (String) context.getProperty("commondb");
			context.port = (String) context.getProperty("port");
			context.stagingdb = (String) context.getProperty("stagingdb");
			context.host = (String) context.getProperty("host");
			try {
				context.rowCountRejectedFirm = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("rowCountRejectedFirm"));
			} catch (NumberFormatException e) {
				context.rowCountRejectedFirm = null;
			}
			context.firm = (String) context.getProperty("firm");
			try {
				context.rowCountFirm = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountFirm"));
			} catch (NumberFormatException e) {
				context.rowCountFirm = null;
			}
			try {
				context.rowCountStaging = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountStaging"));
			} catch (NumberFormatException e) {
				context.rowCountStaging = null;
			}
			try {
				context.rowCountTSV = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountTSV"));
			} catch (NumberFormatException e) {
				context.rowCountTSV = null;
			}
			try {
				context.rowCountUpdated = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountUpdated"));
			} catch (NumberFormatException e) {
				context.rowCountUpdated = null;
			}
			context.teamPreferenceOption = (String) context
					.getProperty("teamPreferenceOption");
			context.date = (String) context.getProperty("date");
			context.firmId = (String) context.getProperty("firmId");
			context.firmint3 = (String) context.getProperty("firmint3");
			context.pathforlocal = (String) context.getProperty("pathforlocal");
			context.filestorage = (String) context.getProperty("filestorage");
			try {
				context.a = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("a"));
			} catch (NumberFormatException e) {
				context.a = null;
			}
			try {
				context.b = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("b"));
			} catch (NumberFormatException e) {
				context.b = null;
			}
			try {
				context.c = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("c"));
			} catch (NumberFormatException e) {
				context.c = null;
			}
			try {
				context.d = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("d"));
			} catch (NumberFormatException e) {
				context.d = null;
			}
			try {
				context.e = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("e"));
			} catch (NumberFormatException e) {
				context.e = null;
			}
			try {
				context.f = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("f"));
			} catch (NumberFormatException e) {
				context.f = null;
			}
			try {
				context.g = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("g"));
			} catch (NumberFormatException e) {
				context.g = null;
			}
			context.filestorage2 = (String) context.getProperty("filestorage2");
			try {
				context.firmids = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("firmids"));
			} catch (NumberFormatException e) {
				context.firmids = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("currentDate")) {
				context.currentDate = (String) parentContextMap
						.get("currentDate");
			}
			if (parentContextMap.containsKey("preferenceOption")) {
				context.preferenceOption = (String) parentContextMap
						.get("preferenceOption");
			}
			if (parentContextMap.containsKey("custodianpath")) {
				context.custodianpath = (String) parentContextMap
						.get("custodianpath");
			}
			if (parentContextMap.containsKey("inputDir")) {
				context.inputDir = (String) parentContextMap.get("inputDir");
			}
			if (parentContextMap.containsKey("taxlotpath")) {
				context.taxlotpath = (String) parentContextMap
						.get("taxlotpath");
			}
			if (parentContextMap.containsKey("contextDir")) {
				context.contextDir = (String) parentContextMap
						.get("contextDir");
			}
			if (parentContextMap.containsKey("database")) {
				context.database = (String) parentContextMap.get("database");
			}
			if (parentContextMap.containsKey("password")) {
				context.password = (String) parentContextMap.get("password");
			}
			if (parentContextMap.containsKey("filepath_advisor")) {
				context.filepath_advisor = (String) parentContextMap
						.get("filepath_advisor");
			}
			if (parentContextMap.containsKey("transactionpath")) {
				context.transactionpath = (String) parentContextMap
						.get("transactionpath");
			}
			if (parentContextMap.containsKey("serverIp")) {
				context.serverIp = (String) parentContextMap.get("serverIp");
			}
			if (parentContextMap.containsKey("positionpath")) {
				context.positionpath = (String) parentContextMap
						.get("positionpath");
			}
			if (parentContextMap.containsKey("securitypath")) {
				context.securitypath = (String) parentContextMap
						.get("securitypath");
			}
			if (parentContextMap.containsKey("accountpath")) {
				context.accountpath = (String) parentContextMap
						.get("accountpath");
			}
			if (parentContextMap.containsKey("username")) {
				context.username = (String) parentContextMap.get("username");
			}
			if (parentContextMap.containsKey("localpath")) {
				context.localpath = (String) parentContextMap.get("localpath");
			}
			if (parentContextMap.containsKey("commondb")) {
				context.commondb = (String) parentContextMap.get("commondb");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (String) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("stagingdb")) {
				context.stagingdb = (String) parentContextMap.get("stagingdb");
			}
			if (parentContextMap.containsKey("host")) {
				context.host = (String) parentContextMap.get("host");
			}
			if (parentContextMap.containsKey("rowCountRejectedFirm")) {
				context.rowCountRejectedFirm = (Integer) parentContextMap
						.get("rowCountRejectedFirm");
			}
			if (parentContextMap.containsKey("firm")) {
				context.firm = (String) parentContextMap.get("firm");
			}
			if (parentContextMap.containsKey("rowCountFirm")) {
				context.rowCountFirm = (Integer) parentContextMap
						.get("rowCountFirm");
			}
			if (parentContextMap.containsKey("rowCountStaging")) {
				context.rowCountStaging = (Integer) parentContextMap
						.get("rowCountStaging");
			}
			if (parentContextMap.containsKey("rowCountTSV")) {
				context.rowCountTSV = (Integer) parentContextMap
						.get("rowCountTSV");
			}
			if (parentContextMap.containsKey("rowCountUpdated")) {
				context.rowCountUpdated = (Integer) parentContextMap
						.get("rowCountUpdated");
			}
			if (parentContextMap.containsKey("teamPreferenceOption")) {
				context.teamPreferenceOption = (String) parentContextMap
						.get("teamPreferenceOption");
			}
			if (parentContextMap.containsKey("date")) {
				context.date = (String) parentContextMap.get("date");
			}
			if (parentContextMap.containsKey("firmId")) {
				context.firmId = (String) parentContextMap.get("firmId");
			}
			if (parentContextMap.containsKey("firmint3")) {
				context.firmint3 = (String) parentContextMap.get("firmint3");
			}
			if (parentContextMap.containsKey("pathforlocal")) {
				context.pathforlocal = (String) parentContextMap
						.get("pathforlocal");
			}
			if (parentContextMap.containsKey("filestorage")) {
				context.filestorage = (String) parentContextMap
						.get("filestorage");
			}
			if (parentContextMap.containsKey("a")) {
				context.a = (Boolean) parentContextMap.get("a");
			}
			if (parentContextMap.containsKey("b")) {
				context.b = (Boolean) parentContextMap.get("b");
			}
			if (parentContextMap.containsKey("c")) {
				context.c = (Boolean) parentContextMap.get("c");
			}
			if (parentContextMap.containsKey("d")) {
				context.d = (Boolean) parentContextMap.get("d");
			}
			if (parentContextMap.containsKey("e")) {
				context.e = (Boolean) parentContextMap.get("e");
			}
			if (parentContextMap.containsKey("f")) {
				context.f = (Boolean) parentContextMap.get("f");
			}
			if (parentContextMap.containsKey("g")) {
				context.g = (Boolean) parentContextMap.get("g");
			}
			if (parentContextMap.containsKey("filestorage2")) {
				context.filestorage2 = (String) parentContextMap
						.get("filestorage2");
			}
			if (parentContextMap.containsKey("firmids")) {
				context.firmids = (Integer) parentContextMap.get("firmids");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tAmazonAuroraInput_1_inProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tAmazonAuroraInput_1_in) {
			globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", -1);

			e_tAmazonAuroraInput_1_in.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : FirmAccountImport");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1478490 characters generated by Talend Open Studio for Data Integration on
 * the October 24, 2016 5:34:14 PM IST
 ************************************************************************************************/
