// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package reliazedgainloss.rejected_rows_catch_for_non_permitted_orionconnectid_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_11
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_10
//import java.util.List;

//the import part of tJavaRow_13
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_12
//import java.util.List;

//the import part of tJavaRow_15
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJavaRow_14
//import java.util.List;

//the import part of tJavaRow_17
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJavaRow_16
//import java.util.List;

//the import part of tJavaRow_19
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJavaRow_8
//import java.util.List;

//the import part of tJavaRow_18
//import java.util.List;

//the import part of tJavaRow_21
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJavaRow_9
//import java.util.List;

//the import part of tJavaRow_20
//import java.util.List;

//the import part of tJavaRow_23
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tJavaRow_22
//import java.util.List;

//the import part of tJavaRow_25
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Rejected_rows_catch_for_non_permitted_orionConnectId Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.0.20160510_1709
 * @status 
 */
public class Rejected_rows_catch_for_non_permitted_orionConnectId implements
		TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (serverIp != null) {

				this.setProperty("serverIp", serverIp.toString());

			}

			if (database != null) {

				this.setProperty("database", database.toString());

			}

			if (filepath_advisor != null) {

				this.setProperty("filepath_advisor",
						filepath_advisor.toString());

			}

			if (positionpath != null) {

				this.setProperty("positionpath", positionpath.toString());

			}

			if (custodianpath != null) {

				this.setProperty("custodianpath", custodianpath.toString());

			}

			if (taxlotpath != null) {

				this.setProperty("taxlotpath", taxlotpath.toString());

			}

			if (transactionpath != null) {

				this.setProperty("transactionpath", transactionpath.toString());

			}

			if (securitypath != null) {

				this.setProperty("securitypath", securitypath.toString());

			}

			if (accountpath != null) {

				this.setProperty("accountpath", accountpath.toString());

			}

			if (inputDir != null) {

				this.setProperty("inputDir", inputDir.toString());

			}

			if (username != null) {

				this.setProperty("username", username.toString());

			}

			if (password != null) {

				this.setProperty("password", password.toString());

			}

			if (contextDir != null) {

				this.setProperty("contextDir", contextDir.toString());

			}

			if (stagingdb != null) {

				this.setProperty("stagingdb", stagingdb.toString());

			}

			if (commondb != null) {

				this.setProperty("commondb", commondb.toString());

			}

			if (localpath != null) {

				this.setProperty("localpath", localpath.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (host != null) {

				this.setProperty("host", host.toString());

			}

			if (teamPreferenceOption != null) {

				this.setProperty("teamPreferenceOption",
						teamPreferenceOption.toString());

			}

			if (rowCountTSV != null) {

				this.setProperty("rowCountTSV", rowCountTSV.toString());

			}

			if (rowCountStaging != null) {

				this.setProperty("rowCountStaging", rowCountStaging.toString());

			}

			if (rowCountFirm != null) {

				this.setProperty("rowCountFirm", rowCountFirm.toString());

			}

			if (firm != null) {

				this.setProperty("firm", firm.toString());

			}

			if (rowCountUpdated != null) {

				this.setProperty("rowCountUpdated", rowCountUpdated.toString());

			}

			if (rowCountRejectedFirm != null) {

				this.setProperty("rowCountRejectedFirm",
						rowCountRejectedFirm.toString());

			}

			if (firmId != null) {

				this.setProperty("firmId", firmId.toString());

			}

			if (date != null) {

				this.setProperty("date", date.toString());

			}

			if (filestorage != null) {

				this.setProperty("filestorage", filestorage.toString());

			}

			if (filestorage2 != null) {

				this.setProperty("filestorage2", filestorage2.toString());

			}

			if (pathforlocal != null) {

				this.setProperty("pathforlocal", pathforlocal.toString());

			}

			if (a != null) {

				this.setProperty("a", a.toString());

			}

			if (b != null) {

				this.setProperty("b", b.toString());

			}

			if (c != null) {

				this.setProperty("c", c.toString());

			}

			if (d != null) {

				this.setProperty("d", d.toString());

			}

			if (e != null) {

				this.setProperty("e", e.toString());

			}

			if (f != null) {

				this.setProperty("f", f.toString());

			}

			if (g != null) {

				this.setProperty("g", g.toString());

			}

			if (firmint3 != null) {

				this.setProperty("firmint3", firmint3.toString());

			}

			if (firmids != null) {

				this.setProperty("firmids", firmids.toString());

			}

		}

		public String serverIp;

		public String getServerIp() {
			return this.serverIp;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		public String filepath_advisor;

		public String getFilepath_advisor() {
			return this.filepath_advisor;
		}

		public String positionpath;

		public String getPositionpath() {
			return this.positionpath;
		}

		public String custodianpath;

		public String getCustodianpath() {
			return this.custodianpath;
		}

		public String taxlotpath;

		public String getTaxlotpath() {
			return this.taxlotpath;
		}

		public String transactionpath;

		public String getTransactionpath() {
			return this.transactionpath;
		}

		public String securitypath;

		public String getSecuritypath() {
			return this.securitypath;
		}

		public String accountpath;

		public String getAccountpath() {
			return this.accountpath;
		}

		public String inputDir;

		public String getInputDir() {
			return this.inputDir;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String contextDir;

		public String getContextDir() {
			return this.contextDir;
		}

		public String stagingdb;

		public String getStagingdb() {
			return this.stagingdb;
		}

		public String commondb;

		public String getCommondb() {
			return this.commondb;
		}

		public String localpath;

		public String getLocalpath() {
			return this.localpath;
		}

		public String port;

		public String getPort() {
			return this.port;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public String teamPreferenceOption;

		public String getTeamPreferenceOption() {
			return this.teamPreferenceOption;
		}

		public Integer rowCountTSV;

		public Integer getRowCountTSV() {
			return this.rowCountTSV;
		}

		public Integer rowCountStaging;

		public Integer getRowCountStaging() {
			return this.rowCountStaging;
		}

		public Integer rowCountFirm;

		public Integer getRowCountFirm() {
			return this.rowCountFirm;
		}

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		public Integer rowCountUpdated;

		public Integer getRowCountUpdated() {
			return this.rowCountUpdated;
		}

		public Integer rowCountRejectedFirm;

		public Integer getRowCountRejectedFirm() {
			return this.rowCountRejectedFirm;
		}

		public String firmId;

		public String getFirmId() {
			return this.firmId;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String filestorage;

		public String getFilestorage() {
			return this.filestorage;
		}

		public String filestorage2;

		public String getFilestorage2() {
			return this.filestorage2;
		}

		public String pathforlocal;

		public String getPathforlocal() {
			return this.pathforlocal;
		}

		public Boolean a;

		public Boolean getA() {
			return this.a;
		}

		public Boolean b;

		public Boolean getB() {
			return this.b;
		}

		public Boolean c;

		public Boolean getC() {
			return this.c;
		}

		public Boolean d;

		public Boolean getD() {
			return this.d;
		}

		public Boolean e;

		public Boolean getE() {
			return this.e;
		}

		public Boolean f;

		public Boolean getF() {
			return this.f;
		}

		public Boolean g;

		public Boolean getG() {
			return this.g;
		}

		public String firmint3;

		public String getFirmint3() {
			return this.firmint3;
		}

		public Integer firmids;

		public Integer getFirmids() {
			return this.firmids;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Rejected_rows_catch_for_non_permitted_orionConnectId";
	private final String projectName = "RELIAZEDGAINLOSS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Rejected_rows_catch_for_non_permitted_orionConnectId.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(
									Rejected_rows_catch_for_non_permitted_orionConnectId.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_23_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_23_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_23_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_6_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_6_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_6_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_6_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_24_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_24_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_24_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_8_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_8_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_8_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_8_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_25_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_25_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_25_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_12_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_12_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_12_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_12_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_26_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_26_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_26_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_26_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_14_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_14_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_14_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_14_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_27_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_27_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_27_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_27_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_28_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_28_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_28_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_20_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_20_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_20_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_20_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_29_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_29_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_29_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_29_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_33_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_33_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_34_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_33_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_35_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_33_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_33_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_5_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_7_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row30_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_9_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row13_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_10_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row33_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row16_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_11_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row21_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_13_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row22_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row36_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row17_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_15_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row18_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row19_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_16_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row39_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row24_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_18_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row9_0_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row25_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row42_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row27_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_21_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row28_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row29_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_22_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row45_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row48_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row56_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_34_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row57_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJavaRow_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row58_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_35_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_4_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_4_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_4_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_1_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_1_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_1_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_TMAP_OUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tMap_3_TMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tMap_3_TMAP_IN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_2_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_2_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_2_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_3_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_3_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_3_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_23_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_23_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_23_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_23_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_6_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_6_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_6_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_6_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_5_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_5_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_5_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_5_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_7_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_7_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_7_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_7_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_24_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_24_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_24_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_24_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_8_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_8_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_8_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_8_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_9_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_9_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_9_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_9_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_10_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_10_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_10_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_10_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_25_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_25_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_25_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_25_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_12_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_12_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_12_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_12_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_11_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_11_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_11_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_11_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_13_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_13_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_13_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_13_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_26_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_26_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_26_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_26_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_14_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_14_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_14_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_14_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_15_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_15_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_15_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_15_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_16_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_16_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_16_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_16_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_27_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_27_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_27_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_27_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_17_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_17_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_17_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_17_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_18_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_18_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_18_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_18_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_19_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_19_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_19_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_19_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_28_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_28_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_28_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_28_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_20_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_20_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_20_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_20_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_21_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_21_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_21_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_21_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_22_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_22_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_22_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_22_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_29_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_29_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_29_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_29_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_33_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_33_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_33_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_33_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_34_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_34_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_34_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_34_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_35_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_35_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_35_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_35_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_14_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_16_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_18_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_20_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_22_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_25_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_4_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_1_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_2_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_3_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_23_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_6_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_5_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_7_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_24_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_8_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_9_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_10_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_25_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_12_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_11_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_13_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_26_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_14_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_15_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_16_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_27_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_17_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_18_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_19_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_28_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_20_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_21_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_22_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_29_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_33_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_34_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_35_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row9Struct implements
			routines.system.IPersistableComparableLookupRow<row9Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tAdvancedHash_row9 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9", false);
				start_Hash
						.put("tAdvancedHash_row9", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row9";

				int tos_count_tAdvancedHash_row9 = 0;

				// connection name:row9
				// source node:tJavaRow_1 - inputs:(after_tAmazonAuroraInput_1)
				// outputs:(row9,row9) | target node:tAdvancedHash_row9 -
				// inputs:(row9) outputs:()
				// linked node: tMap_2 - inputs:(s,row9) outputs:(mainout)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row9Struct> getLookup(matchingModeEnum_row9);

				globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);

				/**
				 * [tAdvancedHash_row9 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 main ] start
				 */

				currentComponent = "tJavaRow_1";

				row9.firm = context.firmint3;

				nb_line_tJavaRow_1++;

				tos_count_tJavaRow_1++;

				/**
				 * [tJavaRow_1 main ] stop
				 */

				/**
				 * [tAdvancedHash_row9 main ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				row9Struct row9_HashRow = new row9Struct();

				row9_HashRow.firm = row9.firm;

				tHash_Lookup_row9.put(row9_HashRow);

				tos_count_tAdvancedHash_row9++;

				/**
				 * [tAdvancedHash_row9 main ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 end ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				tHash_Lookup_row9.endPut();

				ok_Hash.put("tAdvancedHash_row9", true);
				end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row9 finally ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				/**
				 * [tAdvancedHash_row9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tJavaRow_2 - inputs:(after_tAmazonAuroraInput_4)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_4 - inputs:(row1,row2)
				// outputs:(firm_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 main ] start
				 */

				currentComponent = "tJavaRow_2";

				row2.firm = context.firmint3;

				nb_line_tJavaRow_2++;

				tos_count_tJavaRow_2++;

				/**
				 * [tJavaRow_2 main ] stop
				 */

				/**
				 * [tAdvancedHash_row2 main ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				row2Struct row2_HashRow = new row2Struct();

				row2_HashRow.firm = row2.firm;

				tHash_Lookup_row2.put(row2_HashRow);

				tos_count_tAdvancedHash_row2++;

				/**
				 * [tAdvancedHash_row2 main ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_2_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row10";

				int tos_count_tAdvancedHash_row10 = 0;

				// connection name:row10
				// source node:tJavaRow_4 - inputs:(after_tAmazonAuroraInput_6)
				// outputs:(row10,row10) | target node:tAdvancedHash_row10 -
				// inputs:(row10) outputs:()
				// linked node: tMap_6 - inputs:(copyOfs,row10)
				// outputs:(copyOfmainout)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct> getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tJavaRow_4 main ] start
				 */

				currentComponent = "tJavaRow_4";

				row10.firm = context.firmint3;

				nb_line_tJavaRow_4++;

				tos_count_tJavaRow_4++;

				/**
				 * [tJavaRow_4 main ] stop
				 */

				/**
				 * [tAdvancedHash_row10 main ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				row10Struct row10_HashRow = new row10Struct();

				row10_HashRow.firm = row10.firm;

				tHash_Lookup_row10.put(row10_HashRow);

				tos_count_tAdvancedHash_row10++;

				/**
				 * [tAdvancedHash_row10 main ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row10 finally ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				/**
				 * [tAdvancedHash_row10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_4_SUBPROCESS_STATE", 1);
	}

	public static class row30Struct implements
			routines.system.IPersistableComparableLookupRow<row30Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row30Struct other = (row30Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row30Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row30Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row30Struct row30 = new row30Struct();

				/**
				 * [tAdvancedHash_row30 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row30", false);
				start_Hash.put("tAdvancedHash_row30",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row30";

				int tos_count_tAdvancedHash_row30 = 0;

				// connection name:row30
				// source node:tJavaRow_10 -
				// inputs:(after_tAmazonAuroraInput_23) outputs:(row30,row30) |
				// target node:tAdvancedHash_row30 - inputs:(row30) outputs:()
				// linked node: tMap_23 - inputs:(row31,row30)
				// outputs:(copyOffirm_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row30Struct> getLookup(matchingModeEnum_row30);

				globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);

				/**
				 * [tAdvancedHash_row30 begin ] stop
				 */

				/**
				 * [tJavaRow_10 begin ] start
				 */

				ok_Hash.put("tJavaRow_10", false);
				start_Hash.put("tJavaRow_10", System.currentTimeMillis());

				currentComponent = "tJavaRow_10";

				int tos_count_tJavaRow_10 = 0;

				int nb_line_tJavaRow_10 = 0;

				/**
				 * [tJavaRow_10 begin ] stop
				 */

				/**
				 * [tJavaRow_10 main ] start
				 */

				currentComponent = "tJavaRow_10";

				row30.firm = context.firmint3;

				nb_line_tJavaRow_10++;

				tos_count_tJavaRow_10++;

				/**
				 * [tJavaRow_10 main ] stop
				 */

				/**
				 * [tAdvancedHash_row30 main ] start
				 */

				currentComponent = "tAdvancedHash_row30";

				row30Struct row30_HashRow = new row30Struct();

				row30_HashRow.firm = row30.firm;

				tHash_Lookup_row30.put(row30_HashRow);

				tos_count_tAdvancedHash_row30++;

				/**
				 * [tAdvancedHash_row30 main ] stop
				 */

				/**
				 * [tJavaRow_10 end ] start
				 */

				currentComponent = "tJavaRow_10";

				globalMap.put("tJavaRow_10_NB_LINE", nb_line_tJavaRow_10);

				ok_Hash.put("tJavaRow_10", true);
				end_Hash.put("tJavaRow_10", System.currentTimeMillis());

				/**
				 * [tJavaRow_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_row30 end ] start
				 */

				currentComponent = "tAdvancedHash_row30";

				tHash_Lookup_row30.endPut();

				ok_Hash.put("tAdvancedHash_row30", true);
				end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row30 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_10 finally ] start
				 */

				currentComponent = "tJavaRow_10";

				/**
				 * [tJavaRow_10 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row30 finally ] start
				 */

				currentComponent = "tAdvancedHash_row30";

				/**
				 * [tAdvancedHash_row30 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_10_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableComparableLookupRow<row13Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tAdvancedHash_row13 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row13", false);
				start_Hash.put("tAdvancedHash_row13",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row13";

				int tos_count_tAdvancedHash_row13 = 0;

				// connection name:row13
				// source node:tJavaRow_5 - inputs:(after_tAmazonAuroraInput_8)
				// outputs:(row13,row13) | target node:tAdvancedHash_row13 -
				// inputs:(row13) outputs:()
				// linked node: tMap_9 - inputs:(copyOfs_0,row13)
				// outputs:(copyOfmainout_0)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row13Struct> getLookup(matchingModeEnum_row13);

				globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);

				/**
				 * [tAdvancedHash_row13 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tJavaRow_5 main ] start
				 */

				currentComponent = "tJavaRow_5";

				row13.firm = context.firmint3;

				nb_line_tJavaRow_5++;

				tos_count_tJavaRow_5++;

				/**
				 * [tJavaRow_5 main ] stop
				 */

				/**
				 * [tAdvancedHash_row13 main ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				row13Struct row13_HashRow = new row13Struct();

				row13_HashRow.firm = row13.firm;

				tHash_Lookup_row13.put(row13_HashRow);

				tos_count_tAdvancedHash_row13++;

				/**
				 * [tAdvancedHash_row13 main ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row13 end ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				tHash_Lookup_row13.endPut();

				ok_Hash.put("tAdvancedHash_row13", true);
				end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row13 finally ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				/**
				 * [tAdvancedHash_row13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_5_SUBPROCESS_STATE", 1);
	}

	public static class row33Struct implements
			routines.system.IPersistableComparableLookupRow<row33Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row33Struct other = (row33Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row33Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row33Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row33Struct row33 = new row33Struct();

				/**
				 * [tAdvancedHash_row33 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row33", false);
				start_Hash.put("tAdvancedHash_row33",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row33";

				int tos_count_tAdvancedHash_row33 = 0;

				// connection name:row33
				// source node:tJavaRow_12 -
				// inputs:(after_tAmazonAuroraInput_24) outputs:(row33,row33) |
				// target node:tAdvancedHash_row33 - inputs:(row33) outputs:()
				// linked node: tMap_24 - inputs:(row34,row33)
				// outputs:(copyOffirm_connection_0)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row33 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row33Struct> getLookup(matchingModeEnum_row33);

				globalMap.put("tHash_Lookup_row33", tHash_Lookup_row33);

				/**
				 * [tAdvancedHash_row33 begin ] stop
				 */

				/**
				 * [tJavaRow_12 begin ] start
				 */

				ok_Hash.put("tJavaRow_12", false);
				start_Hash.put("tJavaRow_12", System.currentTimeMillis());

				currentComponent = "tJavaRow_12";

				int tos_count_tJavaRow_12 = 0;

				int nb_line_tJavaRow_12 = 0;

				/**
				 * [tJavaRow_12 begin ] stop
				 */

				/**
				 * [tJavaRow_12 main ] start
				 */

				currentComponent = "tJavaRow_12";

				row33.firm = context.firmint3;

				nb_line_tJavaRow_12++;

				tos_count_tJavaRow_12++;

				/**
				 * [tJavaRow_12 main ] stop
				 */

				/**
				 * [tAdvancedHash_row33 main ] start
				 */

				currentComponent = "tAdvancedHash_row33";

				row33Struct row33_HashRow = new row33Struct();

				row33_HashRow.firm = row33.firm;

				tHash_Lookup_row33.put(row33_HashRow);

				tos_count_tAdvancedHash_row33++;

				/**
				 * [tAdvancedHash_row33 main ] stop
				 */

				/**
				 * [tJavaRow_12 end ] start
				 */

				currentComponent = "tJavaRow_12";

				globalMap.put("tJavaRow_12_NB_LINE", nb_line_tJavaRow_12);

				ok_Hash.put("tJavaRow_12", true);
				end_Hash.put("tJavaRow_12", System.currentTimeMillis());

				/**
				 * [tJavaRow_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_row33 end ] start
				 */

				currentComponent = "tAdvancedHash_row33";

				tHash_Lookup_row33.endPut();

				ok_Hash.put("tAdvancedHash_row33", true);
				end_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row33 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_12 finally ] start
				 */

				currentComponent = "tJavaRow_12";

				/**
				 * [tJavaRow_12 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row33 finally ] start
				 */

				currentComponent = "tAdvancedHash_row33";

				/**
				 * [tAdvancedHash_row33 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_12_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements
			routines.system.IPersistableComparableLookupRow<row22Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row22Struct other = (row22Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row22Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row22Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();

				/**
				 * [tAdvancedHash_row22 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row22", false);
				start_Hash.put("tAdvancedHash_row22",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row22";

				int tos_count_tAdvancedHash_row22 = 0;

				// connection name:row22
				// source node:tJavaRow_6 - inputs:(after_tAmazonAuroraInput_12)
				// outputs:(row22,row22) | target node:tAdvancedHash_row22 -
				// inputs:(row22) outputs:()
				// linked node: tMap_12 - inputs:(copyOfcopyOfs,row22)
				// outputs:(copyOfcopyOfmainout)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row22Struct> getLookup(matchingModeEnum_row22);

				globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);

				/**
				 * [tAdvancedHash_row22 begin ] stop
				 */

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());

				currentComponent = "tJavaRow_6";

				int tos_count_tJavaRow_6 = 0;

				int nb_line_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tJavaRow_6 main ] start
				 */

				currentComponent = "tJavaRow_6";

				row22.firm = context.firmint3;

				nb_line_tJavaRow_6++;

				tos_count_tJavaRow_6++;

				/**
				 * [tJavaRow_6 main ] stop
				 */

				/**
				 * [tAdvancedHash_row22 main ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				row22Struct row22_HashRow = new row22Struct();

				row22_HashRow.firm = row22.firm;

				tHash_Lookup_row22.put(row22_HashRow);

				tos_count_tAdvancedHash_row22++;

				/**
				 * [tAdvancedHash_row22 main ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				/**
				 * [tJavaRow_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row22 end ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				tHash_Lookup_row22.endPut();

				ok_Hash.put("tAdvancedHash_row22", true);
				end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row22 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row22 finally ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				/**
				 * [tAdvancedHash_row22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_6_SUBPROCESS_STATE", 1);
	}

	public static class row36Struct implements
			routines.system.IPersistableComparableLookupRow<row36Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row36Struct other = (row36Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row36Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row36Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row36Struct row36 = new row36Struct();

				/**
				 * [tAdvancedHash_row36 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row36", false);
				start_Hash.put("tAdvancedHash_row36",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row36";

				int tos_count_tAdvancedHash_row36 = 0;

				// connection name:row36
				// source node:tJavaRow_14 -
				// inputs:(after_tAmazonAuroraInput_25) outputs:(row36,row36) |
				// target node:tAdvancedHash_row36 - inputs:(row36) outputs:()
				// linked node: tMap_25 - inputs:(row37,row36)
				// outputs:(copyOffirm_connection_1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row36 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row36Struct> getLookup(matchingModeEnum_row36);

				globalMap.put("tHash_Lookup_row36", tHash_Lookup_row36);

				/**
				 * [tAdvancedHash_row36 begin ] stop
				 */

				/**
				 * [tJavaRow_14 begin ] start
				 */

				ok_Hash.put("tJavaRow_14", false);
				start_Hash.put("tJavaRow_14", System.currentTimeMillis());

				currentComponent = "tJavaRow_14";

				int tos_count_tJavaRow_14 = 0;

				int nb_line_tJavaRow_14 = 0;

				/**
				 * [tJavaRow_14 begin ] stop
				 */

				/**
				 * [tJavaRow_14 main ] start
				 */

				currentComponent = "tJavaRow_14";

				row36.firm = context.firmint3;

				nb_line_tJavaRow_14++;

				tos_count_tJavaRow_14++;

				/**
				 * [tJavaRow_14 main ] stop
				 */

				/**
				 * [tAdvancedHash_row36 main ] start
				 */

				currentComponent = "tAdvancedHash_row36";

				row36Struct row36_HashRow = new row36Struct();

				row36_HashRow.firm = row36.firm;

				tHash_Lookup_row36.put(row36_HashRow);

				tos_count_tAdvancedHash_row36++;

				/**
				 * [tAdvancedHash_row36 main ] stop
				 */

				/**
				 * [tJavaRow_14 end ] start
				 */

				currentComponent = "tJavaRow_14";

				globalMap.put("tJavaRow_14_NB_LINE", nb_line_tJavaRow_14);

				ok_Hash.put("tJavaRow_14", true);
				end_Hash.put("tJavaRow_14", System.currentTimeMillis());

				/**
				 * [tJavaRow_14 end ] stop
				 */

				/**
				 * [tAdvancedHash_row36 end ] start
				 */

				currentComponent = "tAdvancedHash_row36";

				tHash_Lookup_row36.endPut();

				ok_Hash.put("tAdvancedHash_row36", true);
				end_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row36 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_14 finally ] start
				 */

				currentComponent = "tJavaRow_14";

				/**
				 * [tJavaRow_14 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row36 finally ] start
				 */

				currentComponent = "tAdvancedHash_row36";

				/**
				 * [tAdvancedHash_row36 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_14_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableComparableLookupRow<row18Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tAdvancedHash_row18 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row18", false);
				start_Hash.put("tAdvancedHash_row18",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row18";

				int tos_count_tAdvancedHash_row18 = 0;

				// connection name:row18
				// source node:tJavaRow_7 - inputs:(after_tAmazonAuroraInput_14)
				// outputs:(row18,row18) | target node:tAdvancedHash_row18 -
				// inputs:(row18) outputs:()
				// linked node: tMap_15 - inputs:(copyOfs_1,row18)
				// outputs:(mainOutfirm)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row18Struct> getLookup(matchingModeEnum_row18);

				globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);

				/**
				 * [tAdvancedHash_row18 begin ] stop
				 */

				/**
				 * [tJavaRow_7 begin ] start
				 */

				ok_Hash.put("tJavaRow_7", false);
				start_Hash.put("tJavaRow_7", System.currentTimeMillis());

				currentComponent = "tJavaRow_7";

				int tos_count_tJavaRow_7 = 0;

				int nb_line_tJavaRow_7 = 0;

				/**
				 * [tJavaRow_7 begin ] stop
				 */

				/**
				 * [tJavaRow_7 main ] start
				 */

				currentComponent = "tJavaRow_7";

				row18.firm = context.firmint3;

				nb_line_tJavaRow_7++;

				tos_count_tJavaRow_7++;

				/**
				 * [tJavaRow_7 main ] stop
				 */

				/**
				 * [tAdvancedHash_row18 main ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				row18Struct row18_HashRow = new row18Struct();

				row18_HashRow.firm = row18.firm;

				tHash_Lookup_row18.put(row18_HashRow);

				tos_count_tAdvancedHash_row18++;

				/**
				 * [tAdvancedHash_row18 main ] stop
				 */

				/**
				 * [tJavaRow_7 end ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

				ok_Hash.put("tJavaRow_7", true);
				end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				/**
				 * [tJavaRow_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row18 end ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				tHash_Lookup_row18.endPut();

				ok_Hash.put("tAdvancedHash_row18", true);
				end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row18 finally ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				/**
				 * [tAdvancedHash_row18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_7_SUBPROCESS_STATE", 1);
	}

	public static class row39Struct implements
			routines.system.IPersistableComparableLookupRow<row39Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row39Struct other = (row39Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row39Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row39Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_16Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row39Struct row39 = new row39Struct();

				/**
				 * [tAdvancedHash_row39 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row39", false);
				start_Hash.put("tAdvancedHash_row39",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row39";

				int tos_count_tAdvancedHash_row39 = 0;

				// connection name:row39
				// source node:tJavaRow_16 -
				// inputs:(after_tAmazonAuroraInput_26) outputs:(row39,row39) |
				// target node:tAdvancedHash_row39 - inputs:(row39) outputs:()
				// linked node: tMap_26 - inputs:(row40,row39)
				// outputs:(copyOffirm_connection_2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row39 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row39Struct> getLookup(matchingModeEnum_row39);

				globalMap.put("tHash_Lookup_row39", tHash_Lookup_row39);

				/**
				 * [tAdvancedHash_row39 begin ] stop
				 */

				/**
				 * [tJavaRow_16 begin ] start
				 */

				ok_Hash.put("tJavaRow_16", false);
				start_Hash.put("tJavaRow_16", System.currentTimeMillis());

				currentComponent = "tJavaRow_16";

				int tos_count_tJavaRow_16 = 0;

				int nb_line_tJavaRow_16 = 0;

				/**
				 * [tJavaRow_16 begin ] stop
				 */

				/**
				 * [tJavaRow_16 main ] start
				 */

				currentComponent = "tJavaRow_16";

				row39.firm = context.firmint3;

				nb_line_tJavaRow_16++;

				tos_count_tJavaRow_16++;

				/**
				 * [tJavaRow_16 main ] stop
				 */

				/**
				 * [tAdvancedHash_row39 main ] start
				 */

				currentComponent = "tAdvancedHash_row39";

				row39Struct row39_HashRow = new row39Struct();

				row39_HashRow.firm = row39.firm;

				tHash_Lookup_row39.put(row39_HashRow);

				tos_count_tAdvancedHash_row39++;

				/**
				 * [tAdvancedHash_row39 main ] stop
				 */

				/**
				 * [tJavaRow_16 end ] start
				 */

				currentComponent = "tJavaRow_16";

				globalMap.put("tJavaRow_16_NB_LINE", nb_line_tJavaRow_16);

				ok_Hash.put("tJavaRow_16", true);
				end_Hash.put("tJavaRow_16", System.currentTimeMillis());

				/**
				 * [tJavaRow_16 end ] stop
				 */

				/**
				 * [tAdvancedHash_row39 end ] start
				 */

				currentComponent = "tAdvancedHash_row39";

				tHash_Lookup_row39.endPut();

				ok_Hash.put("tAdvancedHash_row39", true);
				end_Hash.put("tAdvancedHash_row39", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row39 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_16 finally ] start
				 */

				currentComponent = "tJavaRow_16";

				/**
				 * [tJavaRow_16 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row39 finally ] start
				 */

				currentComponent = "tAdvancedHash_row39";

				/**
				 * [tAdvancedHash_row39 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_16_SUBPROCESS_STATE", 1);
	}

	public static class row9_0Struct implements
			routines.system.IPersistableComparableLookupRow<row9_0Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9_0Struct other = (row9_0Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row9_0Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row9_0Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9_0Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9_0Struct row9_0 = new row9_0Struct();

				/**
				 * [tAdvancedHash_row9_0 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9_0", false);
				start_Hash.put("tAdvancedHash_row9_0",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row9_0";

				int tos_count_tAdvancedHash_row9_0 = 0;

				// connection name:row9_0
				// source node:tJavaRow_8 - inputs:(after_tAmazonAuroraInput_17)
				// outputs:(row9_0,row9_0) | target node:tAdvancedHash_row9_0 -
				// inputs:(row9_0) outputs:()
				// linked node: tMap_18 - inputs:(copyOfs_2,row9_0)
				// outputs:(copyOfmainout_1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9_0 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9_0Struct> tHash_Lookup_row9_0 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row9_0Struct> getLookup(matchingModeEnum_row9_0);

				globalMap.put("tHash_Lookup_row9_0", tHash_Lookup_row9_0);

				/**
				 * [tAdvancedHash_row9_0 begin ] stop
				 */

				/**
				 * [tJavaRow_8 begin ] start
				 */

				ok_Hash.put("tJavaRow_8", false);
				start_Hash.put("tJavaRow_8", System.currentTimeMillis());

				currentComponent = "tJavaRow_8";

				int tos_count_tJavaRow_8 = 0;

				int nb_line_tJavaRow_8 = 0;

				/**
				 * [tJavaRow_8 begin ] stop
				 */

				/**
				 * [tJavaRow_8 main ] start
				 */

				currentComponent = "tJavaRow_8";

				row9_0.firm = context.firmint3;

				nb_line_tJavaRow_8++;

				tos_count_tJavaRow_8++;

				/**
				 * [tJavaRow_8 main ] stop
				 */

				/**
				 * [tAdvancedHash_row9_0 main ] start
				 */

				currentComponent = "tAdvancedHash_row9_0";

				row9_0Struct row9_0_HashRow = new row9_0Struct();

				row9_0_HashRow.firm = row9_0.firm;

				tHash_Lookup_row9_0.put(row9_0_HashRow);

				tos_count_tAdvancedHash_row9_0++;

				/**
				 * [tAdvancedHash_row9_0 main ] stop
				 */

				/**
				 * [tJavaRow_8 end ] start
				 */

				currentComponent = "tJavaRow_8";

				globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);

				ok_Hash.put("tJavaRow_8", true);
				end_Hash.put("tJavaRow_8", System.currentTimeMillis());

				/**
				 * [tJavaRow_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row9_0 end ] start
				 */

				currentComponent = "tAdvancedHash_row9_0";

				tHash_Lookup_row9_0.endPut();

				ok_Hash.put("tAdvancedHash_row9_0", true);
				end_Hash.put("tAdvancedHash_row9_0", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9_0 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_8 finally ] start
				 */

				currentComponent = "tJavaRow_8";

				/**
				 * [tJavaRow_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row9_0 finally ] start
				 */

				currentComponent = "tAdvancedHash_row9_0";

				/**
				 * [tAdvancedHash_row9_0 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_8_SUBPROCESS_STATE", 1);
	}

	public static class row42Struct implements
			routines.system.IPersistableComparableLookupRow<row42Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row42Struct other = (row42Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row42Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row42Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row42Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_18Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row42Struct row42 = new row42Struct();

				/**
				 * [tAdvancedHash_row42 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row42", false);
				start_Hash.put("tAdvancedHash_row42",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row42";

				int tos_count_tAdvancedHash_row42 = 0;

				// connection name:row42
				// source node:tJavaRow_18 -
				// inputs:(after_tAmazonAuroraInput_27) outputs:(row42,row42) |
				// target node:tAdvancedHash_row42 - inputs:(row42) outputs:()
				// linked node: tMap_27 - inputs:(row43,row42)
				// outputs:(copyOffirm_connection_3)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row42 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row42Struct> getLookup(matchingModeEnum_row42);

				globalMap.put("tHash_Lookup_row42", tHash_Lookup_row42);

				/**
				 * [tAdvancedHash_row42 begin ] stop
				 */

				/**
				 * [tJavaRow_18 begin ] start
				 */

				ok_Hash.put("tJavaRow_18", false);
				start_Hash.put("tJavaRow_18", System.currentTimeMillis());

				currentComponent = "tJavaRow_18";

				int tos_count_tJavaRow_18 = 0;

				int nb_line_tJavaRow_18 = 0;

				/**
				 * [tJavaRow_18 begin ] stop
				 */

				/**
				 * [tJavaRow_18 main ] start
				 */

				currentComponent = "tJavaRow_18";

				row42.firm = context.firmint3;

				nb_line_tJavaRow_18++;

				tos_count_tJavaRow_18++;

				/**
				 * [tJavaRow_18 main ] stop
				 */

				/**
				 * [tAdvancedHash_row42 main ] start
				 */

				currentComponent = "tAdvancedHash_row42";

				row42Struct row42_HashRow = new row42Struct();

				row42_HashRow.firm = row42.firm;

				tHash_Lookup_row42.put(row42_HashRow);

				tos_count_tAdvancedHash_row42++;

				/**
				 * [tAdvancedHash_row42 main ] stop
				 */

				/**
				 * [tJavaRow_18 end ] start
				 */

				currentComponent = "tJavaRow_18";

				globalMap.put("tJavaRow_18_NB_LINE", nb_line_tJavaRow_18);

				ok_Hash.put("tJavaRow_18", true);
				end_Hash.put("tJavaRow_18", System.currentTimeMillis());

				/**
				 * [tJavaRow_18 end ] stop
				 */

				/**
				 * [tAdvancedHash_row42 end ] start
				 */

				currentComponent = "tAdvancedHash_row42";

				tHash_Lookup_row42.endPut();

				ok_Hash.put("tAdvancedHash_row42", true);
				end_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row42 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_18 finally ] start
				 */

				currentComponent = "tJavaRow_18";

				/**
				 * [tJavaRow_18 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row42 finally ] start
				 */

				currentComponent = "tAdvancedHash_row42";

				/**
				 * [tAdvancedHash_row42 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_18_SUBPROCESS_STATE", 1);
	}

	public static class row28Struct implements
			routines.system.IPersistableComparableLookupRow<row28Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row28Struct other = (row28Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row28Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row28Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();

				/**
				 * [tAdvancedHash_row28 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row28", false);
				start_Hash.put("tAdvancedHash_row28",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row28";

				int tos_count_tAdvancedHash_row28 = 0;

				// connection name:row28
				// source node:tJavaRow_9 - inputs:(after_tAmazonAuroraInput_20)
				// outputs:(row28,row28) | target node:tAdvancedHash_row28 -
				// inputs:(row28) outputs:()
				// linked node: tMap_21 - inputs:(copyOfs_3,row28)
				// outputs:(copyOfmainout_2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row28Struct> getLookup(matchingModeEnum_row28);

				globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);

				/**
				 * [tAdvancedHash_row28 begin ] stop
				 */

				/**
				 * [tJavaRow_9 begin ] start
				 */

				ok_Hash.put("tJavaRow_9", false);
				start_Hash.put("tJavaRow_9", System.currentTimeMillis());

				currentComponent = "tJavaRow_9";

				int tos_count_tJavaRow_9 = 0;

				int nb_line_tJavaRow_9 = 0;

				/**
				 * [tJavaRow_9 begin ] stop
				 */

				/**
				 * [tJavaRow_9 main ] start
				 */

				currentComponent = "tJavaRow_9";

				row28.firm = context.firmint3;

				nb_line_tJavaRow_9++;

				tos_count_tJavaRow_9++;

				/**
				 * [tJavaRow_9 main ] stop
				 */

				/**
				 * [tAdvancedHash_row28 main ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				row28Struct row28_HashRow = new row28Struct();

				row28_HashRow.firm = row28.firm;

				tHash_Lookup_row28.put(row28_HashRow);

				tos_count_tAdvancedHash_row28++;

				/**
				 * [tAdvancedHash_row28 main ] stop
				 */

				/**
				 * [tJavaRow_9 end ] start
				 */

				currentComponent = "tJavaRow_9";

				globalMap.put("tJavaRow_9_NB_LINE", nb_line_tJavaRow_9);

				ok_Hash.put("tJavaRow_9", true);
				end_Hash.put("tJavaRow_9", System.currentTimeMillis());

				/**
				 * [tJavaRow_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row28 end ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				tHash_Lookup_row28.endPut();

				ok_Hash.put("tAdvancedHash_row28", true);
				end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row28 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_9 finally ] start
				 */

				currentComponent = "tJavaRow_9";

				/**
				 * [tJavaRow_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row28 finally ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				/**
				 * [tAdvancedHash_row28 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_9_SUBPROCESS_STATE", 1);
	}

	public static class row45Struct implements
			routines.system.IPersistableComparableLookupRow<row45Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row45Struct other = (row45Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row45Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row45Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row45Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_20Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row45Struct row45 = new row45Struct();

				/**
				 * [tAdvancedHash_row45 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row45", false);
				start_Hash.put("tAdvancedHash_row45",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row45";

				int tos_count_tAdvancedHash_row45 = 0;

				// connection name:row45
				// source node:tJavaRow_20 -
				// inputs:(after_tAmazonAuroraInput_28) outputs:(row45,row45) |
				// target node:tAdvancedHash_row45 - inputs:(row45) outputs:()
				// linked node: tMap_28 - inputs:(row46,row45)
				// outputs:(copyOffirm_connection_4)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row45 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row45Struct> getLookup(matchingModeEnum_row45);

				globalMap.put("tHash_Lookup_row45", tHash_Lookup_row45);

				/**
				 * [tAdvancedHash_row45 begin ] stop
				 */

				/**
				 * [tJavaRow_20 begin ] start
				 */

				ok_Hash.put("tJavaRow_20", false);
				start_Hash.put("tJavaRow_20", System.currentTimeMillis());

				currentComponent = "tJavaRow_20";

				int tos_count_tJavaRow_20 = 0;

				int nb_line_tJavaRow_20 = 0;

				/**
				 * [tJavaRow_20 begin ] stop
				 */

				/**
				 * [tJavaRow_20 main ] start
				 */

				currentComponent = "tJavaRow_20";

				row45.firm = context.firmint3;

				nb_line_tJavaRow_20++;

				tos_count_tJavaRow_20++;

				/**
				 * [tJavaRow_20 main ] stop
				 */

				/**
				 * [tAdvancedHash_row45 main ] start
				 */

				currentComponent = "tAdvancedHash_row45";

				row45Struct row45_HashRow = new row45Struct();

				row45_HashRow.firm = row45.firm;

				tHash_Lookup_row45.put(row45_HashRow);

				tos_count_tAdvancedHash_row45++;

				/**
				 * [tAdvancedHash_row45 main ] stop
				 */

				/**
				 * [tJavaRow_20 end ] start
				 */

				currentComponent = "tJavaRow_20";

				globalMap.put("tJavaRow_20_NB_LINE", nb_line_tJavaRow_20);

				ok_Hash.put("tJavaRow_20", true);
				end_Hash.put("tJavaRow_20", System.currentTimeMillis());

				/**
				 * [tJavaRow_20 end ] stop
				 */

				/**
				 * [tAdvancedHash_row45 end ] start
				 */

				currentComponent = "tAdvancedHash_row45";

				tHash_Lookup_row45.endPut();

				ok_Hash.put("tAdvancedHash_row45", true);
				end_Hash.put("tAdvancedHash_row45", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row45 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_20 finally ] start
				 */

				currentComponent = "tJavaRow_20";

				/**
				 * [tJavaRow_20 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row45 finally ] start
				 */

				currentComponent = "tAdvancedHash_row45";

				/**
				 * [tAdvancedHash_row45 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_20_SUBPROCESS_STATE", 1);
	}

	public static class row48Struct implements
			routines.system.IPersistableComparableLookupRow<row48Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row48Struct other = (row48Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row48Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row48Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row48Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_22Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row48Struct row48 = new row48Struct();

				/**
				 * [tAdvancedHash_row48 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row48", false);
				start_Hash.put("tAdvancedHash_row48",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row48";

				int tos_count_tAdvancedHash_row48 = 0;

				// connection name:row48
				// source node:tJavaRow_22 -
				// inputs:(after_tAmazonAuroraInput_29) outputs:(row48,row48) |
				// target node:tAdvancedHash_row48 - inputs:(row48) outputs:()
				// linked node: tMap_29 - inputs:(row49,row48)
				// outputs:(copyOfcopyOffirm_connection_4)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row48 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct> tHash_Lookup_row48 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row48Struct> getLookup(matchingModeEnum_row48);

				globalMap.put("tHash_Lookup_row48", tHash_Lookup_row48);

				/**
				 * [tAdvancedHash_row48 begin ] stop
				 */

				/**
				 * [tJavaRow_22 begin ] start
				 */

				ok_Hash.put("tJavaRow_22", false);
				start_Hash.put("tJavaRow_22", System.currentTimeMillis());

				currentComponent = "tJavaRow_22";

				int tos_count_tJavaRow_22 = 0;

				int nb_line_tJavaRow_22 = 0;

				/**
				 * [tJavaRow_22 begin ] stop
				 */

				/**
				 * [tJavaRow_22 main ] start
				 */

				currentComponent = "tJavaRow_22";

				row48.firm = context.firmint3;

				nb_line_tJavaRow_22++;

				tos_count_tJavaRow_22++;

				/**
				 * [tJavaRow_22 main ] stop
				 */

				/**
				 * [tAdvancedHash_row48 main ] start
				 */

				currentComponent = "tAdvancedHash_row48";

				row48Struct row48_HashRow = new row48Struct();

				row48_HashRow.firm = row48.firm;

				tHash_Lookup_row48.put(row48_HashRow);

				tos_count_tAdvancedHash_row48++;

				/**
				 * [tAdvancedHash_row48 main ] stop
				 */

				/**
				 * [tJavaRow_22 end ] start
				 */

				currentComponent = "tJavaRow_22";

				globalMap.put("tJavaRow_22_NB_LINE", nb_line_tJavaRow_22);

				ok_Hash.put("tJavaRow_22", true);
				end_Hash.put("tJavaRow_22", System.currentTimeMillis());

				/**
				 * [tJavaRow_22 end ] stop
				 */

				/**
				 * [tAdvancedHash_row48 end ] start
				 */

				currentComponent = "tAdvancedHash_row48";

				tHash_Lookup_row48.endPut();

				ok_Hash.put("tAdvancedHash_row48", true);
				end_Hash.put("tAdvancedHash_row48", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row48 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_22 finally ] start
				 */

				currentComponent = "tJavaRow_22";

				/**
				 * [tJavaRow_22 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row48 finally ] start
				 */

				currentComponent = "tAdvancedHash_row48";

				/**
				 * [tAdvancedHash_row48 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_22_SUBPROCESS_STATE", 1);
	}

	public static class row57Struct implements
			routines.system.IPersistableComparableLookupRow<row57Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row57Struct other = (row57Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row57Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row57Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row57Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_25Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row57Struct row57 = new row57Struct();

				/**
				 * [tAdvancedHash_row57 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row57", false);
				start_Hash.put("tAdvancedHash_row57",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row57";

				int tos_count_tAdvancedHash_row57 = 0;

				// connection name:row57
				// source node:tJavaRow_25 -
				// inputs:(after_tAmazonAuroraInput_33) outputs:(row57,row57) |
				// target node:tAdvancedHash_row57 - inputs:(row57) outputs:()
				// linked node: tMap_34 - inputs:(copyOfs_4,row57)
				// outputs:(copyOfmainout_3)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row57 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row57Struct> tHash_Lookup_row57 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row57Struct> getLookup(matchingModeEnum_row57);

				globalMap.put("tHash_Lookup_row57", tHash_Lookup_row57);

				/**
				 * [tAdvancedHash_row57 begin ] stop
				 */

				/**
				 * [tJavaRow_25 begin ] start
				 */

				ok_Hash.put("tJavaRow_25", false);
				start_Hash.put("tJavaRow_25", System.currentTimeMillis());

				currentComponent = "tJavaRow_25";

				int tos_count_tJavaRow_25 = 0;

				int nb_line_tJavaRow_25 = 0;

				/**
				 * [tJavaRow_25 begin ] stop
				 */

				/**
				 * [tJavaRow_25 main ] start
				 */

				currentComponent = "tJavaRow_25";

				row57.firm = context.firmint3;

				nb_line_tJavaRow_25++;

				tos_count_tJavaRow_25++;

				/**
				 * [tJavaRow_25 main ] stop
				 */

				/**
				 * [tAdvancedHash_row57 main ] start
				 */

				currentComponent = "tAdvancedHash_row57";

				row57Struct row57_HashRow = new row57Struct();

				row57_HashRow.firm = row57.firm;

				tHash_Lookup_row57.put(row57_HashRow);

				tos_count_tAdvancedHash_row57++;

				/**
				 * [tAdvancedHash_row57 main ] stop
				 */

				/**
				 * [tJavaRow_25 end ] start
				 */

				currentComponent = "tJavaRow_25";

				globalMap.put("tJavaRow_25_NB_LINE", nb_line_tJavaRow_25);

				ok_Hash.put("tJavaRow_25", true);
				end_Hash.put("tJavaRow_25", System.currentTimeMillis());

				/**
				 * [tJavaRow_25 end ] stop
				 */

				/**
				 * [tAdvancedHash_row57 end ] start
				 */

				currentComponent = "tAdvancedHash_row57";

				tHash_Lookup_row57.endPut();

				ok_Hash.put("tAdvancedHash_row57", true);
				end_Hash.put("tAdvancedHash_row57", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row57 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_25 finally ] start
				 */

				currentComponent = "tJavaRow_25";

				/**
				 * [tJavaRow_25 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row57 finally ] start
				 */

				currentComponent = "tAdvancedHash_row57";

				/**
				 * [tAdvancedHash_row57 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_25_SUBPROCESS_STATE", 1);
	}

	public static class row3_0Struct implements
			routines.system.IPersistableRow<row3_0Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class firm_connectionStruct implements
			routines.system.IPersistableRow<firm_connectionStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(firm_connectionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_4_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_4_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_4_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_4Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_4Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_4_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_2Process(globalMap);

				row_tAmazonAuroraInput_4_inStruct row_tAmazonAuroraInput_4_in = new row_tAmazonAuroraInput_4_inStruct();
				row_tAmazonAuroraInput_4_inStruct row1 = row_tAmazonAuroraInput_4_in;
				firm_connectionStruct firm_connection = new firm_connectionStruct();
				row3_0Struct row3_0 = new row3_0Struct();

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				firm_connectionStruct firm_connection_tmp = new firm_connectionStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_4_out", false);
				start_Hash.put("tAmazonAuroraInput_4_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				int tos_count_tAmazonAuroraInput_4_out = 0;

				/**
				 * [tAmazonAuroraInput_4_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_4_in", false);
				start_Hash.put("tAmazonAuroraInput_4_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_in";

				int tos_count_tAmazonAuroraInput_4_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_4_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_4_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_4_in = calendar_tAmazonAuroraInput_4_in
						.getTime();
				int nb_line_tAmazonAuroraInput_4_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_4_in = null;
				String driverClass_tAmazonAuroraInput_4_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_4_in);
				String dbUser_tAmazonAuroraInput_4_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_4_in = context.password;

				String dbPwd_tAmazonAuroraInput_4_in = decryptedPassword_tAmazonAuroraInput_4_in;

				String url_tAmazonAuroraInput_4_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_4_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_4_in,
								dbUser_tAmazonAuroraInput_4_in,
								dbPwd_tAmazonAuroraInput_4_in);

				java.sql.Statement stmt_tAmazonAuroraInput_4_in = conn_tAmazonAuroraInput_4_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_4_in = "SELECT `name` , `server` , `database` FROM `orionEclipseFirm`";

				globalMap.put("tAmazonAuroraInput_4_QUERY",
						dbquery_tAmazonAuroraInput_4_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_4_in = null;
				try {
					rs_tAmazonAuroraInput_4_in = stmt_tAmazonAuroraInput_4_in
							.executeQuery(dbquery_tAmazonAuroraInput_4_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_4_in = rs_tAmazonAuroraInput_4_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_4_in = rsmd_tAmazonAuroraInput_4_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_4_in = null;

					while (rs_tAmazonAuroraInput_4_in.next()) {
						nb_line_tAmazonAuroraInput_4_in++;

						if (colQtyInRs_tAmazonAuroraInput_4_in < 1) {
							row_tAmazonAuroraInput_4_in.name = null;
						} else {

							row_tAmazonAuroraInput_4_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_4_in, 1,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_4_in < 2) {
							row_tAmazonAuroraInput_4_in.server = null;
						} else {

							row_tAmazonAuroraInput_4_in.server = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_4_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_4_in < 3) {
							row_tAmazonAuroraInput_4_in.database = null;
						} else {

							row_tAmazonAuroraInput_4_in.database = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_4_in, 3,
											false);
						}

						/**
						 * [tAmazonAuroraInput_4_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_in";

						tos_count_tAmazonAuroraInput_4_in++;

						/**
						 * [tAmazonAuroraInput_4_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_out";

						row1 = row_tAmazonAuroraInput_4_in;

						tos_count_tAmazonAuroraInput_4_out++;

						/**
						 * [tAmazonAuroraInput_4_out main ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_4 = false;

							row2HashKey.firm = row1.name;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

							if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_4 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.firm = '"
							// + row2HashKey.firm + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							firm_connection = null;

							if (!rejectedInnerJoin_tMap_4) {

								// # Output table : 'firm_connection'
								firm_connection_tmp.server = row1.server;
								firm_connection_tmp.database = row1.database;
								firm_connection = firm_connection_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */
						// Start of branch "firm_connection"
						if (firm_connection != null) {

							/**
							 * [tJavaRow_3 main ] start
							 */

							currentComponent = "tJavaRow_3";

							context.serverIp = firm_connection.server;
							context.database = firm_connection.database;

							nb_line_tJavaRow_3++;

							tos_count_tJavaRow_3++;

							/**
							 * [tJavaRow_3 main ] stop
							 */

							/**
							 * [tJava_1 main ] start
							 */

							currentComponent = "tJava_1";

							tos_count_tJava_1++;

							/**
							 * [tJava_1 main ] stop
							 */

						} // End of branch "firm_connection"

						/**
						 * [tAmazonAuroraInput_4_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_4_in != null) {
						rs_tAmazonAuroraInput_4_in.close();
					}
					stmt_tAmazonAuroraInput_4_in.close();
					if (conn_tAmazonAuroraInput_4_in != null
							&& !conn_tAmazonAuroraInput_4_in.isClosed()) {

						conn_tAmazonAuroraInput_4_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_4_NB_LINE",
						nb_line_tAmazonAuroraInput_4_in);

				ok_Hash.put("tAmazonAuroraInput_4_in", true);
				end_Hash.put("tAmazonAuroraInput_4_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_4_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				ok_Hash.put("tAmazonAuroraInput_4_out", true);
				end_Hash.put("tAmazonAuroraInput_4_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_4_out end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tAmazonAuroraInput_1_inProcess(globalMap);

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tAmazonAuroraInput_4_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_in";

				/**
				 * [tAmazonAuroraInput_4_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				/**
				 * [tAmazonAuroraInput_4_out finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE", 1);
	}

	public static class SecondOutputStruct implements
			routines.system.IPersistableRow<SecondOutputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.PriceDate = readDate(dis);

					this.AccountNumber = readString(dis);

					this.AccountId = readString(dis);

					this.Symbol = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MarketValue = null;
					} else {
						this.MarketValue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedSTGL = null;
					} else {
						this.PositionYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedLTGL = null;
					} else {
						this.PositionYTDRealizedLTGL = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// java.util.Date

				writeDate(this.PriceDate, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.Symbol, dos);

				// Float

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Float

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				// Float

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",Symbol=" + Symbol);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SecondOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mainoutStruct implements
			routines.system.IPersistableRow<mainoutStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mainoutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sStruct implements
			routines.system.IPersistableRow<sStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_1_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_1_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_1_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_1Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_1_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_1Process(globalMap);
				tAmazonAuroraInput_2_inProcess(globalMap);

				row_tAmazonAuroraInput_1_inStruct row_tAmazonAuroraInput_1_in = new row_tAmazonAuroraInput_1_inStruct();
				row_tAmazonAuroraInput_1_inStruct row3 = row_tAmazonAuroraInput_1_in;
				sStruct s = new sStruct();
				mainoutStruct mainout = new mainoutStruct();
				SecondOutputStruct SecondOutput = new SecondOutputStruct();

				/**
				 * [tMap_3_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_3_TMAP_OUT", false);
				start_Hash.put("tMap_3_TMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_OUT";

				int tos_count_tMap_3_TMAP_OUT = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3_TMAP_OUT__Struct {
				}
				Var__tMap_3_TMAP_OUT__Struct Var__tMap_3_TMAP_OUT = new Var__tMap_3_TMAP_OUT__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				// ###############################

				class SortableRow_tMap_3_1 implements
						Comparable<SortableRow_tMap_3_1>,
						routines.system.IPersistableRow<SortableRow_tMap_3_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					Integer exprKey_row5__OrionFirmId;

					// mainout
					Integer mainout__firm;

					public void fillFrom(mainoutStruct mainout,
							Integer exprKey_row5__OrionFirmId) {

						this.mainout__firm = mainout.firm;
						this.exprKey_row5__OrionFirmId = exprKey_row5__OrionFirmId;

					}

					public void copyDataTo(mainoutStruct mainout) {

						mainout.firm = this.mainout__firm;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("mainout__firm");
						sb.append("=");
						sb.append(String.valueOf(this.mainout__firm));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_3_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(
								this.exprKey_row5__OrionFirmId,
								other.exprKey_row5__OrionFirmId);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1,
							Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable
								&& object2 instanceof Comparable) {
							returnValue = ((Comparable) object1)
									.compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(),
									object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (mainoutStruct.commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readByte();
								if (length == -1) {
									this.mainout__firm = null;
								} else {
									this.mainout__firm = dis.readInt();
								}

								length = dis.readByte();
								if (length == -1) {
									this.exprKey_row5__OrionFirmId = null;
								} else {
									this.exprKey_row5__OrionFirmId = dis
											.readInt();
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.mainout__firm == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.mainout__firm);
							}

							if (this.exprKey_row5__OrionFirmId == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);
								dos.writeInt(this.exprKey_row5__OrionFirmId);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_3_1> fsi_tMap_3_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_3_1>(
						"C:/Users/Ashutosh/Downloads/TOS_DI-20160510_1709-V6.2.0/workspace/temp"
								+ "/" + jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid
								+ "_tMap_3_1", 2000000) {
					public SortableRow_tMap_3_1 createRowInstance() {
						return new SortableRow_tMap_3_1();
					}
				};

				fsi_tMap_3_1.initPut();

				/**
				 * [tMap_3_TMAP_OUT begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) globalMap
						.get("tHash_Lookup_row9"));

				row9Struct row9HashKey = new row9Struct();
				row9Struct row9Default = new row9Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				mainoutStruct mainout_tmp = new mainoutStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				sStruct s_tmp = new sStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_out", false);
				start_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				int tos_count_tAmazonAuroraInput_1_out = 0;

				/**
				 * [tAmazonAuroraInput_1_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_in", false);
				start_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				int tos_count_tAmazonAuroraInput_1_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_1_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_1_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_1_in = calendar_tAmazonAuroraInput_1_in
						.getTime();
				int nb_line_tAmazonAuroraInput_1_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_1_in = null;
				String driverClass_tAmazonAuroraInput_1_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_1_in);
				String dbUser_tAmazonAuroraInput_1_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_1_in = context.password;

				String dbPwd_tAmazonAuroraInput_1_in = decryptedPassword_tAmazonAuroraInput_1_in;

				String url_tAmazonAuroraInput_1_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_1_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_1_in,
								dbUser_tAmazonAuroraInput_1_in,
								dbPwd_tAmazonAuroraInput_1_in);

				java.sql.Statement stmt_tAmazonAuroraInput_1_in = conn_tAmazonAuroraInput_1_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_1_in = "select distinct OrionFirmId from position_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_1_QUERY",
						dbquery_tAmazonAuroraInput_1_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_1_in = null;
				try {
					rs_tAmazonAuroraInput_1_in = stmt_tAmazonAuroraInput_1_in
							.executeQuery(dbquery_tAmazonAuroraInput_1_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_1_in = rs_tAmazonAuroraInput_1_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_1_in = rsmd_tAmazonAuroraInput_1_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_1_in = null;

					while (rs_tAmazonAuroraInput_1_in.next()) {
						nb_line_tAmazonAuroraInput_1_in++;

						if (colQtyInRs_tAmazonAuroraInput_1_in < 1) {
							row_tAmazonAuroraInput_1_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(1) != null) {
								row_tAmazonAuroraInput_1_in.OrionFirmId = rs_tAmazonAuroraInput_1_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_1_in.OrionFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_1_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

						tos_count_tAmazonAuroraInput_1_in++;

						/**
						 * [tAmazonAuroraInput_1_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_out";

						row3 = row_tAmazonAuroraInput_1_in;

						tos_count_tAmazonAuroraInput_1_out++;

						/**
						 * [tAmazonAuroraInput_1_out main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row4"
						// /////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row4HashKey.orionConnectFirmId = row3.OrionFirmId;

							row4HashKey.hashCodeDirty = true;

							tHash_Lookup_row4.lookup(row4HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.orionConnectFirmId = '"
							// + row4HashKey.orionConnectFirmId + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							s = null;

							// # Output table : 's'
							s_tmp.OrionFirmId = row3.OrionFirmId;
							s_tmp.orionEclipseFirmName = row4.orionEclipseFirmName;
							s = s_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "s"
						if (s != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row9"
							// /////////////////////////////////////////////

							boolean forceLooprow9 = false;

							row9Struct row9ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_2 = false;

								row9HashKey.firm = s.orionEclipseFirmName;

								row9HashKey.hashCodeDirty = true;

								tHash_Lookup_row9.lookup(row9HashKey);

								if (!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_2 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row9 != null
									&& tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G
																						// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.firm = '"
								// + row9HashKey.firm + "'");
							} // G 071

							row9Struct row9 = null;

							row9Struct fromLookup_row9 = null;
							row9 = row9Default;

							if (tHash_Lookup_row9 != null
									&& tHash_Lookup_row9.hasNext()) { // G 099

								fromLookup_row9 = tHash_Lookup_row9.next();

							} // G 099

							if (fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								mainout = null;

								if (!rejectedInnerJoin_tMap_2) {
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'mainout'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_2) {
									mainout_tmp.firm = s.OrionFirmId;
									mainout = mainout_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */
							// Start of branch "mainout"
							if (mainout != null) {

								/**
								 * [tMap_3_TMAP_OUT main ] start
								 */

								currentVirtualComponent = "tMap_3";

								currentComponent = "tMap_3_TMAP_OUT";

								boolean hasCasePrimitiveKeyWithNull_tMap_3_TMAP_OUT = false;

								hasCasePrimitiveKeyWithNull_tMap_3_TMAP_OUT = false;

								Integer exprKey_row5__OrionFirmId = mainout.firm;

								SortableRow_tMap_3_1 sortableRow_tMap_3_1 = fsi_tMap_3_1
										.getNextFreeRow();

								sortableRow_tMap_3_1.fillFrom(mainout,
										exprKey_row5__OrionFirmId);

								fsi_tMap_3_1.put(sortableRow_tMap_3_1);

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_3_TMAP_OUT = false;
								boolean mainRowRejected_tMap_3_TMAP_OUT = false;

								// ###############################

								tos_count_tMap_3_TMAP_OUT++;

								/**
								 * [tMap_3_TMAP_OUT main ] stop
								 */

							} // End of branch "mainout"

						} // End of branch "s"

						/**
						 * [tAmazonAuroraInput_1_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_1_in != null) {
						rs_tAmazonAuroraInput_1_in.close();
					}
					stmt_tAmazonAuroraInput_1_in.close();
					if (conn_tAmazonAuroraInput_1_in != null
							&& !conn_tAmazonAuroraInput_1_in.isClosed()) {

						conn_tAmazonAuroraInput_1_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_1_NB_LINE",
						nb_line_tAmazonAuroraInput_1_in);

				ok_Hash.put("tAmazonAuroraInput_1_in", true);
				end_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				ok_Hash.put("tAmazonAuroraInput_1_out", true);
				end_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_out end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row9 != null) {
					tHash_Lookup_row9.endGet();
				}
				globalMap.remove("tHash_Lookup_row9");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMap_3_TMAP_OUT end ] start
				 */

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_OUT";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3_TMAP_OUT", true);
				end_Hash.put("tMap_3_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_3_TMAP_OUT end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_1", false);
				start_Hash.put("tAmazonMysqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_1";

				int tos_count_tAmazonMysqlOutput_1 = 0;

				int nb_line_tAmazonMysqlOutput_1 = 0;
				int nb_line_update_tAmazonMysqlOutput_1 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_1 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_1 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_1 = 0;

				int deletedCount_tAmazonMysqlOutput_1 = 0;
				int updatedCount_tAmazonMysqlOutput_1 = 0;
				int insertedCount_tAmazonMysqlOutput_1 = 0;

				int rejectedCount_tAmazonMysqlOutput_1 = 0;

				String tableName_tAmazonMysqlOutput_1 = "reject_Position";
				boolean whetherReject_tAmazonMysqlOutput_1 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_1 = calendar_tAmazonMysqlOutput_1
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_1 = calendar_tAmazonMysqlOutput_1
						.getTime().getTime();
				long date_tAmazonMysqlOutput_1;

				java.sql.Connection conn_tAmazonMysqlOutput_1 = null;
				String dbProperties_tAmazonMysqlOutput_1 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_1 = null;
				if (dbProperties_tAmazonMysqlOutput_1 == null
						|| dbProperties_tAmazonMysqlOutput_1.trim().length() == 0) {
					url_tAmazonMysqlOutput_1 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_1 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_1;
				}
				String dbUser_tAmazonMysqlOutput_1 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_1 = context.password;

				String dbPwd_tAmazonMysqlOutput_1 = decryptedPassword_tAmazonMysqlOutput_1;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_1 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_1,
								dbUser_tAmazonMysqlOutput_1,
								dbPwd_tAmazonMysqlOutput_1);

				resourceMap.put("conn_tAmazonMysqlOutput_1",
						conn_tAmazonMysqlOutput_1);

				conn_tAmazonMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_1 = 1000000;
				int commitCounter_tAmazonMysqlOutput_1 = 0;

				int count_tAmazonMysqlOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_1 = conn_tAmazonMysqlOutput_1
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_1 = dbMetaData_tAmazonMysqlOutput_1
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_1 = false;
				while (rsTable_tAmazonMysqlOutput_1.next()) {
					String table_tAmazonMysqlOutput_1 = rsTable_tAmazonMysqlOutput_1
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_1
							.equalsIgnoreCase("reject_Position")) {
						whetherExist_tAmazonMysqlOutput_1 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_1.close();
				if (!whetherExist_tAmazonMysqlOutput_1) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_1 = conn_tAmazonMysqlOutput_1
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_1
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_1
									+ "`(`OrionFirmId` INT(11)  ,`ExternalId` INT(11)  ,`Price` FLOAT(10,0)  ,`PriceDate` DATETIME ,`AccountNumber` VARCHAR(50)  ,`AccountId` VARCHAR(50)  ,`Symbol` VARCHAR(30)  ,`MarketValue` FLOAT(10,0)  ,`Quantity` FLOAT(10,2)  ,`PositionYTDRealizedSTGL` FLOAT(10,0)  ,`PositionYTDRealizedLTGL` FLOAT(10,0)  )");
					stmtCreate_tAmazonMysqlOutput_1.close();
				}

				String insert_tAmazonMysqlOutput_1 = "INSERT INTO `"
						+ "reject_Position"
						+ "` (`OrionFirmId`,`ExternalId`,`Price`,`PriceDate`,`AccountNumber`,`AccountId`,`Symbol`,`MarketValue`,`Quantity`,`PositionYTDRealizedSTGL`,`PositionYTDRealizedLTGL`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonMysqlOutput_1 = 100;
				int batchSizeCounter_tAmazonMysqlOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_1 = conn_tAmazonMysqlOutput_1
						.prepareStatement(insert_tAmazonMysqlOutput_1);

				/**
				 * [tAmazonMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_3_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_3_TMAP_IN", false);
				start_Hash.put("tMap_3_TMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_IN";

				int tos_count_tMap_3_TMAP_IN = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3_TMAP_IN__Struct {
				}
				Var__tMap_3_TMAP_IN__Struct Var__tMap_3_TMAP_IN = new Var__tMap_3_TMAP_IN__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				SecondOutputStruct SecondOutput_tmp = new SecondOutputStruct();
				// ###############################

				/**
				 * [tMap_3_TMAP_IN begin ] stop
				 */

				/**
				 * [tMap_3_TMAP_IN main ] start
				 */

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_3_TMAP_IN = false;

				fsi_tMap_3_1.endPut();

				if (mainout == null) {
					mainout = new mainoutStruct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_3_TMAP_IN = false;
				boolean mainRowRejected_tMap_3_TMAP_IN = false;

				// /////////////////////////////////////////////
				// Starting Lookup Table "row5"
				// /////////////////////////////////////////////

				SortableRow_tMap_3_1 rsc_tMap_3_1;

				fsi_tMap_3_1.initGet();

				// TEST firstLookupIsPersistentSorted=true
				// isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_3_TMAP_IN = false;

				while (fsi_tMap_3_1.hasNext()) { // G_TM_M_250 loop "1"

					// CALL close loop of lookup '1'

					rsc_tMap_3_1 = (SortableRow_tMap_3_1) fsi_tMap_3_1.next();
					rsc_tMap_3_1.copyDataTo(mainout);

					rejectedInnerJoin_tMap_3_TMAP_IN = rsc_tMap_3_1.is__rejectedInnerJoin;

					boolean forceLooprow5 = false;

					row5Struct row5ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_3_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_3_TMAP_IN = false;

						row5HashKey.OrionFirmId = rsc_tMap_3_1.exprKey_row5__OrionFirmId;

						tAmazonAuroraInput_3_inProcess(globalMap);

						tHash_Lookup_row5 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct>) globalMap
								.get("tHash_Lookup_row5"));

						tHash_Lookup_row5.initGet();

						tHash_Lookup_row5.lookup(row5HashKey);

						if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_3_TMAP_IN = true;

							forceLooprow5 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLooprow5 = true;
					} // G 21

					row5Struct row5 = null;

					while ((tHash_Lookup_row5 != null && tHash_Lookup_row5
							.hasNext()) || forceLooprow5) { // G_TM_M_043

						// CALL close loop of lookup 'row5'

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (!forceLooprow5) { // G 46

							fromLookup_row5 = tHash_Lookup_row5.next();

							if (fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}

						} // G 46

						forceLooprow5 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3_TMAP_IN__Struct Var = Var__tMap_3_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							SecondOutput = null;

							if (!rejectedInnerJoin_tMap_3_TMAP_IN) {

								// # Output table : 'SecondOutput'
								SecondOutput_tmp.OrionFirmId = row5.OrionFirmId;
								SecondOutput_tmp.ExternalId = row5.ExternalId;
								SecondOutput_tmp.Price = row5.Price;
								SecondOutput_tmp.PriceDate = row5.PriceDate;
								SecondOutput_tmp.AccountNumber = row5.AccountNumber;
								SecondOutput_tmp.AccountId = row5.AccountId;
								SecondOutput_tmp.Symbol = row5.Symbol;
								SecondOutput_tmp.MarketValue = row5.MarketValue;
								SecondOutput_tmp.Quantity = row5.Quantity;
								SecondOutput_tmp.PositionYTDRealizedSTGL = row5.PositionYTDRealizedSTGL;
								SecondOutput_tmp.PositionYTDRealizedLTGL = row5.PositionYTDRealizedLTGL;
								SecondOutput = SecondOutput_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3_TMAP_IN = false;

						tos_count_tMap_3_TMAP_IN++;

						/**
						 * [tMap_3_TMAP_IN main ] stop
						 */
						// Start of branch "SecondOutput"
						if (SecondOutput != null) {

							/**
							 * [tAmazonMysqlOutput_1 main ] start
							 */

							currentComponent = "tAmazonMysqlOutput_1";

							whetherReject_tAmazonMysqlOutput_1 = false;
							if (SecondOutput.OrionFirmId == null) {
								pstmt_tAmazonMysqlOutput_1.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonMysqlOutput_1.setInt(1,
										SecondOutput.OrionFirmId);
							}

							if (SecondOutput.ExternalId == null) {
								pstmt_tAmazonMysqlOutput_1.setNull(2,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonMysqlOutput_1.setInt(2,
										SecondOutput.ExternalId);
							}

							if (SecondOutput.Price == null) {
								pstmt_tAmazonMysqlOutput_1.setNull(3,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_1.setFloat(3,
										SecondOutput.Price);
							}

							if (SecondOutput.PriceDate != null) {
								date_tAmazonMysqlOutput_1 = SecondOutput.PriceDate
										.getTime();
								if (date_tAmazonMysqlOutput_1 < year1_tAmazonMysqlOutput_1
										|| date_tAmazonMysqlOutput_1 >= year10000_tAmazonMysqlOutput_1) {
									pstmt_tAmazonMysqlOutput_1.setString(4,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tAmazonMysqlOutput_1.setTimestamp(4,
											new java.sql.Timestamp(
													date_tAmazonMysqlOutput_1));
								}
							} else {
								pstmt_tAmazonMysqlOutput_1.setNull(4,
										java.sql.Types.DATE);
							}

							if (SecondOutput.AccountNumber == null) {
								pstmt_tAmazonMysqlOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonMysqlOutput_1.setString(5,
										SecondOutput.AccountNumber);
							}

							if (SecondOutput.AccountId == null) {
								pstmt_tAmazonMysqlOutput_1.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonMysqlOutput_1.setString(6,
										SecondOutput.AccountId);
							}

							if (SecondOutput.Symbol == null) {
								pstmt_tAmazonMysqlOutput_1.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonMysqlOutput_1.setString(7,
										SecondOutput.Symbol);
							}

							if (SecondOutput.MarketValue == null) {
								pstmt_tAmazonMysqlOutput_1.setNull(8,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_1.setFloat(8,
										SecondOutput.MarketValue);
							}

							if (SecondOutput.Quantity == null) {
								pstmt_tAmazonMysqlOutput_1.setNull(9,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_1.setFloat(9,
										SecondOutput.Quantity);
							}

							if (SecondOutput.PositionYTDRealizedSTGL == null) {
								pstmt_tAmazonMysqlOutput_1.setNull(10,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_1.setFloat(10,
										SecondOutput.PositionYTDRealizedSTGL);
							}

							if (SecondOutput.PositionYTDRealizedLTGL == null) {
								pstmt_tAmazonMysqlOutput_1.setNull(11,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_1.setFloat(11,
										SecondOutput.PositionYTDRealizedLTGL);
							}

							pstmt_tAmazonMysqlOutput_1.addBatch();
							nb_line_tAmazonMysqlOutput_1++;

							batchSizeCounter_tAmazonMysqlOutput_1++;

							if (batchSize_tAmazonMysqlOutput_1 <= batchSizeCounter_tAmazonMysqlOutput_1) {
								try {
									int countSum_tAmazonMysqlOutput_1 = 0;

									for (int countEach_tAmazonMysqlOutput_1 : pstmt_tAmazonMysqlOutput_1
											.executeBatch()) {
										countSum_tAmazonMysqlOutput_1 += (countEach_tAmazonMysqlOutput_1 < 0 ? 0
												: 1);
									}

									insertedCount_tAmazonMysqlOutput_1 += countSum_tAmazonMysqlOutput_1;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tAmazonMysqlOutput_1 = 0;
									for (int countEach_tAmazonMysqlOutput_1 : e
											.getUpdateCounts()) {
										countSum_tAmazonMysqlOutput_1 += (countEach_tAmazonMysqlOutput_1 < 0 ? 0
												: countEach_tAmazonMysqlOutput_1);
									}

									insertedCount_tAmazonMysqlOutput_1 += countSum_tAmazonMysqlOutput_1;

									System.err.println(e.getMessage());

								}

								batchSizeCounter_tAmazonMysqlOutput_1 = 0;
							}

							commitCounter_tAmazonMysqlOutput_1++;
							if (commitEvery_tAmazonMysqlOutput_1 <= commitCounter_tAmazonMysqlOutput_1) {
								if ((batchSize_tAmazonMysqlOutput_1 > 0)
										&& (batchSizeCounter_tAmazonMysqlOutput_1 > 0)) {
									try {
										int countSum_tAmazonMysqlOutput_1 = 0;

										for (int countEach_tAmazonMysqlOutput_1 : pstmt_tAmazonMysqlOutput_1
												.executeBatch()) {
											countSum_tAmazonMysqlOutput_1 += (countEach_tAmazonMysqlOutput_1 < 0 ? 0
													: 1);
										}

										insertedCount_tAmazonMysqlOutput_1 += countSum_tAmazonMysqlOutput_1;

										batchSizeCounter_tAmazonMysqlOutput_1 = 0;
									} catch (java.sql.BatchUpdateException e) {

										int countSum_tAmazonMysqlOutput_1 = 0;
										for (int countEach_tAmazonMysqlOutput_1 : e
												.getUpdateCounts()) {
											countSum_tAmazonMysqlOutput_1 += (countEach_tAmazonMysqlOutput_1 < 0 ? 0
													: countEach_tAmazonMysqlOutput_1);
										}

										insertedCount_tAmazonMysqlOutput_1 += countSum_tAmazonMysqlOutput_1;

										System.err.println(e.getMessage());

									}
								}

								conn_tAmazonMysqlOutput_1.commit();

								commitCounter_tAmazonMysqlOutput_1 = 0;
							}

							tos_count_tAmazonMysqlOutput_1++;

							/**
							 * [tAmazonMysqlOutput_1 main ] stop
							 */

						} // End of branch "SecondOutput"

					} // close loop of lookup 'row5' // G_TM_M_043

				} // G_TM_M_250 close loop read file data '1'

				/**
				 * [tMap_3_TMAP_IN end ] start
				 */

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_IN";

				// ###############################
				// # Lookup hashes releasing
				fsi_tMap_3_1.endGet();

				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				// ###############################

				ok_Hash.put("tMap_3_TMAP_IN", true);
				end_Hash.put("tMap_3_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_3_TMAP_IN end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_1";

				try {
					if (batchSizeCounter_tAmazonMysqlOutput_1 != 0) {
						int countSum_tAmazonMysqlOutput_1 = 0;

						for (int countEach_tAmazonMysqlOutput_1 : pstmt_tAmazonMysqlOutput_1
								.executeBatch()) {
							countSum_tAmazonMysqlOutput_1 += (countEach_tAmazonMysqlOutput_1 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonMysqlOutput_1 += countSum_tAmazonMysqlOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonMysqlOutput_1 = 0;
					for (int countEach_tAmazonMysqlOutput_1 : e
							.getUpdateCounts()) {
						countSum_tAmazonMysqlOutput_1 += (countEach_tAmazonMysqlOutput_1 < 0 ? 0
								: countEach_tAmazonMysqlOutput_1);
					}

					insertedCount_tAmazonMysqlOutput_1 += countSum_tAmazonMysqlOutput_1;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonMysqlOutput_1 = 0;

				if (pstmt_tAmazonMysqlOutput_1 != null) {
					pstmt_tAmazonMysqlOutput_1.close();
				}

				if (commitCounter_tAmazonMysqlOutput_1 > 0) {

					conn_tAmazonMysqlOutput_1.commit();

				}

				conn_tAmazonMysqlOutput_1.close();

				resourceMap.put("finish_tAmazonMysqlOutput_1", true);

				nb_line_deleted_tAmazonMysqlOutput_1 = nb_line_deleted_tAmazonMysqlOutput_1
						+ deletedCount_tAmazonMysqlOutput_1;
				nb_line_update_tAmazonMysqlOutput_1 = nb_line_update_tAmazonMysqlOutput_1
						+ updatedCount_tAmazonMysqlOutput_1;
				nb_line_inserted_tAmazonMysqlOutput_1 = nb_line_inserted_tAmazonMysqlOutput_1
						+ insertedCount_tAmazonMysqlOutput_1;
				nb_line_rejected_tAmazonMysqlOutput_1 = nb_line_rejected_tAmazonMysqlOutput_1
						+ rejectedCount_tAmazonMysqlOutput_1;

				globalMap.put("tAmazonMysqlOutput_1_NB_LINE",
						nb_line_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_1);

				ok_Hash.put("tAmazonMysqlOutput_1", true);
				end_Hash.put("tAmazonMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row9");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tAmazonAuroraInput_1_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				/**
				 * [tAmazonAuroraInput_1_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				/**
				 * [tAmazonAuroraInput_1_out finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMap_3_TMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_OUT";

				/**
				 * [tMap_3_TMAP_OUT finally ] stop
				 */

				/**
				 * [tMap_3_TMAP_IN finally ] start
				 */

				currentVirtualComponent = "tMap_3";

				currentComponent = "tMap_3_TMAP_IN";

				/**
				 * [tMap_3_TMAP_IN finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_1";

				if (resourceMap.get("finish_tAmazonMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_1) {
							String errorMessage_tAmazonMysqlOutput_1 = "failed to close the connection in tAmazonMysqlOutput_1 :"
									+ sqlEx_tAmazonMysqlOutput_1.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_1);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmName = this.orionEclipseFirmName;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orionEclipseFirmName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_2_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_2_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_2_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_2_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_2_inStruct row_tAmazonAuroraInput_2_in = new row_tAmazonAuroraInput_2_inStruct();
				row_tAmazonAuroraInput_2_inStruct row4 = row_tAmazonAuroraInput_2_in;

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tAmazonAuroraInput_2_out -
				// inputs:(row_tAmazonAuroraInput_2_in) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row3,row4) outputs:(s)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_2_out", false);
				start_Hash.put("tAmazonAuroraInput_2_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				int tos_count_tAmazonAuroraInput_2_out = 0;

				/**
				 * [tAmazonAuroraInput_2_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_2_in", false);
				start_Hash.put("tAmazonAuroraInput_2_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_in";

				int tos_count_tAmazonAuroraInput_2_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_2_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_2_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_2_in = calendar_tAmazonAuroraInput_2_in
						.getTime();
				int nb_line_tAmazonAuroraInput_2_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_2_in = null;
				String driverClass_tAmazonAuroraInput_2_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_2_in);
				String dbUser_tAmazonAuroraInput_2_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_2_in = context.password;

				String dbPwd_tAmazonAuroraInput_2_in = decryptedPassword_tAmazonAuroraInput_2_in;

				String url_tAmazonAuroraInput_2_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_2_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_2_in,
								dbUser_tAmazonAuroraInput_2_in,
								dbPwd_tAmazonAuroraInput_2_in);

				java.sql.Statement stmt_tAmazonAuroraInput_2_in = conn_tAmazonAuroraInput_2_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_2_in = "select orionConnectFirmId , orionEclipseFirmName from firm";

				globalMap.put("tAmazonAuroraInput_2_QUERY",
						dbquery_tAmazonAuroraInput_2_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_2_in = null;
				try {
					rs_tAmazonAuroraInput_2_in = stmt_tAmazonAuroraInput_2_in
							.executeQuery(dbquery_tAmazonAuroraInput_2_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_2_in = rs_tAmazonAuroraInput_2_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_2_in = rsmd_tAmazonAuroraInput_2_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_2_in = null;

					while (rs_tAmazonAuroraInput_2_in.next()) {
						nb_line_tAmazonAuroraInput_2_in++;

						if (colQtyInRs_tAmazonAuroraInput_2_in < 1) {
							row_tAmazonAuroraInput_2_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(1) != null) {
								row_tAmazonAuroraInput_2_in.orionConnectFirmId = rs_tAmazonAuroraInput_2_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_2_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 2) {
							row_tAmazonAuroraInput_2_in.orionEclipseFirmName = null;
						} else {

							row_tAmazonAuroraInput_2_in.orionEclipseFirmName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_2_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_2_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_in";

						tos_count_tAmazonAuroraInput_2_in++;

						/**
						 * [tAmazonAuroraInput_2_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_out";

						row4 = row_tAmazonAuroraInput_2_in;

						tos_count_tAmazonAuroraInput_2_out++;

						/**
						 * [tAmazonAuroraInput_2_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.orionConnectFirmId = row4.orionConnectFirmId;

						row4_HashRow.orionEclipseFirmName = row4.orionEclipseFirmName;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_2_in != null) {
						rs_tAmazonAuroraInput_2_in.close();
					}
					stmt_tAmazonAuroraInput_2_in.close();
					if (conn_tAmazonAuroraInput_2_in != null
							&& !conn_tAmazonAuroraInput_2_in.isClosed()) {

						conn_tAmazonAuroraInput_2_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_2_NB_LINE",
						nb_line_tAmazonAuroraInput_2_in);

				ok_Hash.put("tAmazonAuroraInput_2_in", true);
				end_Hash.put("tAmazonAuroraInput_2_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_2_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				ok_Hash.put("tAmazonAuroraInput_2_out", true);
				end_Hash.put("tAmazonAuroraInput_2_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_2_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_2_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_in";

				/**
				 * [tAmazonAuroraInput_2_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				/**
				 * [tAmazonAuroraInput_2_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OrionFirmId == null) ? 0 : this.OrionFirmId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.OrionFirmId == null) {
				if (other.OrionFirmId != null)
					return false;

			} else if (!this.OrionFirmId.equals(other.OrionFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.OrionFirmId = this.OrionFirmId;
			other.ExternalId = this.ExternalId;
			other.Price = this.Price;
			other.PriceDate = this.PriceDate;
			other.AccountNumber = this.AccountNumber;
			other.AccountId = this.AccountId;
			other.Symbol = this.Symbol;
			other.MarketValue = this.MarketValue;
			other.Quantity = this.Quantity;
			other.PositionYTDRealizedSTGL = this.PositionYTDRealizedSTGL;
			other.PositionYTDRealizedLTGL = this.PositionYTDRealizedLTGL;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.OrionFirmId = this.OrionFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ExternalId = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Price = null;
				} else {
					this.Price = dis.readFloat();
				}

				this.PriceDate = readDate(dis, ois);

				this.AccountNumber = readString(dis, ois);

				this.AccountId = readString(dis, ois);

				this.Symbol = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.MarketValue = null;
				} else {
					this.MarketValue = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Quantity = null;
				} else {
					this.Quantity = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.PositionYTDRealizedSTGL = null;
				} else {
					this.PositionYTDRealizedSTGL = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.PositionYTDRealizedLTGL = null;
				} else {
					this.PositionYTDRealizedLTGL = dis.readFloat();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.ExternalId, dos, oos);

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				writeDate(this.PriceDate, dos, oos);

				writeString(this.AccountNumber, dos, oos);

				writeString(this.AccountId, dos, oos);

				writeString(this.Symbol, dos, oos);

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",Symbol=" + Symbol);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OrionFirmId,
					other.OrionFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_3_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_3_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.PriceDate = readDate(dis);

					this.AccountNumber = readString(dis);

					this.AccountId = readString(dis);

					this.Symbol = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MarketValue = null;
					} else {
						this.MarketValue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedSTGL = null;
					} else {
						this.PositionYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedLTGL = null;
					} else {
						this.PositionYTDRealizedLTGL = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// java.util.Date

				writeDate(this.PriceDate, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.Symbol, dos);

				// Float

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Float

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				// Float

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",Symbol=" + Symbol);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_3_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_3_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_3_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_3_inStruct row_tAmazonAuroraInput_3_in = new row_tAmazonAuroraInput_3_inStruct();
				row_tAmazonAuroraInput_3_inStruct row5 = row_tAmazonAuroraInput_3_in;

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tAmazonAuroraInput_3_out -
				// inputs:(row_tAmazonAuroraInput_3_in) outputs:(row5,row5) |
				// target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_3 - inputs:(mainout,row5)
				// outputs:(SecondOutput)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct> tHash_Lookup_row5 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row5Struct>(
						matchingModeEnum_row5,
						"C:/Users/Ashutosh/Downloads/TOS_DI-20160510_1709-V6.2.0/workspace/temp"
								+ "/" + jobName + "_tMapData_" + pid
								+ "_Lookup_row5_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row5Struct createRowInstance() {
								return new row5Struct();
							}
						}

						, 2000000

				);

				tHash_Lookup_row5.initPut();

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_3_out", false);
				start_Hash.put("tAmazonAuroraInput_3_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				int tos_count_tAmazonAuroraInput_3_out = 0;

				/**
				 * [tAmazonAuroraInput_3_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_3_in", false);
				start_Hash.put("tAmazonAuroraInput_3_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_in";

				int tos_count_tAmazonAuroraInput_3_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_3_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_3_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_3_in = calendar_tAmazonAuroraInput_3_in
						.getTime();
				int nb_line_tAmazonAuroraInput_3_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_3_in = null;
				String driverClass_tAmazonAuroraInput_3_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_3_in);
				String dbUser_tAmazonAuroraInput_3_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_3_in = context.password;

				String dbPwd_tAmazonAuroraInput_3_in = decryptedPassword_tAmazonAuroraInput_3_in;

				String url_tAmazonAuroraInput_3_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_3_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_3_in,
								dbUser_tAmazonAuroraInput_3_in,
								dbPwd_tAmazonAuroraInput_3_in);

				java.sql.Statement stmt_tAmazonAuroraInput_3_in = conn_tAmazonAuroraInput_3_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_3_in = "select  OrionFirmId , ExternalId , Price , PriceDate , AccountNumber , AccountId , Symbol , MarketValue , Quantity , PositionYTDRealizedSTGL , PositionYTDRealizedLTGL  from position_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_3_QUERY",
						dbquery_tAmazonAuroraInput_3_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_3_in = null;
				try {
					rs_tAmazonAuroraInput_3_in = stmt_tAmazonAuroraInput_3_in
							.executeQuery(dbquery_tAmazonAuroraInput_3_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_3_in = rs_tAmazonAuroraInput_3_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_3_in = rsmd_tAmazonAuroraInput_3_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_3_in = null;

					while (rs_tAmazonAuroraInput_3_in.next()) {
						nb_line_tAmazonAuroraInput_3_in++;

						if (colQtyInRs_tAmazonAuroraInput_3_in < 1) {
							row_tAmazonAuroraInput_3_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(1) != null) {
								row_tAmazonAuroraInput_3_in.OrionFirmId = rs_tAmazonAuroraInput_3_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_3_in.OrionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 2) {
							row_tAmazonAuroraInput_3_in.ExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(2) != null) {
								row_tAmazonAuroraInput_3_in.ExternalId = rs_tAmazonAuroraInput_3_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_3_in.ExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 3) {
							row_tAmazonAuroraInput_3_in.Price = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(3) != null) {
								row_tAmazonAuroraInput_3_in.Price = rs_tAmazonAuroraInput_3_in
										.getFloat(3);
							} else {
								row_tAmazonAuroraInput_3_in.Price = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 4) {
							row_tAmazonAuroraInput_3_in.PriceDate = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getString(4) != null) {
								String dateString_tAmazonAuroraInput_3_in = rs_tAmazonAuroraInput_3_in
										.getString(4);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_3_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_3_in)) {
									row_tAmazonAuroraInput_3_in.PriceDate = rs_tAmazonAuroraInput_3_in
											.getTimestamp(4);
								} else {
									row_tAmazonAuroraInput_3_in.PriceDate = (java.util.Date) year0_tAmazonAuroraInput_3_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_3_in.PriceDate = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 5) {
							row_tAmazonAuroraInput_3_in.AccountNumber = null;
						} else {

							row_tAmazonAuroraInput_3_in.AccountNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 5,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 6) {
							row_tAmazonAuroraInput_3_in.AccountId = null;
						} else {

							row_tAmazonAuroraInput_3_in.AccountId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 6,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 7) {
							row_tAmazonAuroraInput_3_in.Symbol = null;
						} else {

							row_tAmazonAuroraInput_3_in.Symbol = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_3_in, 7,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 8) {
							row_tAmazonAuroraInput_3_in.MarketValue = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(8) != null) {
								row_tAmazonAuroraInput_3_in.MarketValue = rs_tAmazonAuroraInput_3_in
										.getFloat(8);
							} else {
								row_tAmazonAuroraInput_3_in.MarketValue = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 9) {
							row_tAmazonAuroraInput_3_in.Quantity = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(9) != null) {
								row_tAmazonAuroraInput_3_in.Quantity = rs_tAmazonAuroraInput_3_in
										.getFloat(9);
							} else {
								row_tAmazonAuroraInput_3_in.Quantity = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 10) {
							row_tAmazonAuroraInput_3_in.PositionYTDRealizedSTGL = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(10) != null) {
								row_tAmazonAuroraInput_3_in.PositionYTDRealizedSTGL = rs_tAmazonAuroraInput_3_in
										.getFloat(10);
							} else {
								row_tAmazonAuroraInput_3_in.PositionYTDRealizedSTGL = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 11) {
							row_tAmazonAuroraInput_3_in.PositionYTDRealizedLTGL = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(11) != null) {
								row_tAmazonAuroraInput_3_in.PositionYTDRealizedLTGL = rs_tAmazonAuroraInput_3_in
										.getFloat(11);
							} else {
								row_tAmazonAuroraInput_3_in.PositionYTDRealizedLTGL = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_3_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_in";

						tos_count_tAmazonAuroraInput_3_in++;

						/**
						 * [tAmazonAuroraInput_3_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_out";

						row5 = row_tAmazonAuroraInput_3_in;

						tos_count_tAmazonAuroraInput_3_out++;

						/**
						 * [tAmazonAuroraInput_3_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						row5Struct row5_HashRow = tHash_Lookup_row5
								.getNextFreeRow();

						row5_HashRow.OrionFirmId = row5.OrionFirmId;

						row5_HashRow.ExternalId = row5.ExternalId;

						row5_HashRow.Price = row5.Price;

						row5_HashRow.PriceDate = row5.PriceDate;

						row5_HashRow.AccountNumber = row5.AccountNumber;

						row5_HashRow.AccountId = row5.AccountId;

						row5_HashRow.Symbol = row5.Symbol;

						row5_HashRow.MarketValue = row5.MarketValue;

						row5_HashRow.Quantity = row5.Quantity;

						row5_HashRow.PositionYTDRealizedSTGL = row5.PositionYTDRealizedSTGL;

						row5_HashRow.PositionYTDRealizedLTGL = row5.PositionYTDRealizedLTGL;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_3_in != null) {
						rs_tAmazonAuroraInput_3_in.close();
					}
					stmt_tAmazonAuroraInput_3_in.close();
					if (conn_tAmazonAuroraInput_3_in != null
							&& !conn_tAmazonAuroraInput_3_in.isClosed()) {

						conn_tAmazonAuroraInput_3_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_3_NB_LINE",
						nb_line_tAmazonAuroraInput_3_in);

				ok_Hash.put("tAmazonAuroraInput_3_in", true);
				end_Hash.put("tAmazonAuroraInput_3_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_3_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				ok_Hash.put("tAmazonAuroraInput_3_out", true);
				end_Hash.put("tAmazonAuroraInput_3_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_3_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_3_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_in";

				/**
				 * [tAmazonAuroraInput_3_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				/**
				 * [tAmazonAuroraInput_3_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_3_in_SUBPROCESS_STATE", 1);
	}

	public static class row32Struct implements
			routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOffirm_connectionStruct implements
			routines.system.IPersistableRow<copyOffirm_connectionStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOffirm_connectionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_23_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_23_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_23_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_23Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_23Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_23_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_23_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_10Process(globalMap);

				row_tAmazonAuroraInput_23_inStruct row_tAmazonAuroraInput_23_in = new row_tAmazonAuroraInput_23_inStruct();
				row_tAmazonAuroraInput_23_inStruct row31 = row_tAmazonAuroraInput_23_in;
				copyOffirm_connectionStruct copyOffirm_connection = new copyOffirm_connectionStruct();
				row32Struct row32 = new row32Struct();

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJavaRow_11 begin ] start
				 */

				ok_Hash.put("tJavaRow_11", false);
				start_Hash.put("tJavaRow_11", System.currentTimeMillis());

				currentComponent = "tJavaRow_11";

				int tos_count_tJavaRow_11 = 0;

				int nb_line_tJavaRow_11 = 0;

				/**
				 * [tJavaRow_11 begin ] stop
				 */

				/**
				 * [tMap_23 begin ] start
				 */

				ok_Hash.put("tMap_23", false);
				start_Hash.put("tMap_23", System.currentTimeMillis());

				currentComponent = "tMap_23";

				int tos_count_tMap_23 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) globalMap
						.get("tHash_Lookup_row30"));

				row30Struct row30HashKey = new row30Struct();
				row30Struct row30Default = new row30Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_23__Struct {
				}
				Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOffirm_connectionStruct copyOffirm_connection_tmp = new copyOffirm_connectionStruct();
				// ###############################

				/**
				 * [tMap_23 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_23_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_23_out", false);
				start_Hash.put("tAmazonAuroraInput_23_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_23";

				currentComponent = "tAmazonAuroraInput_23_out";

				int tos_count_tAmazonAuroraInput_23_out = 0;

				/**
				 * [tAmazonAuroraInput_23_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_23_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_23_in", false);
				start_Hash.put("tAmazonAuroraInput_23_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_23";

				currentComponent = "tAmazonAuroraInput_23_in";

				int tos_count_tAmazonAuroraInput_23_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_23_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_23_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_23_in = calendar_tAmazonAuroraInput_23_in
						.getTime();
				int nb_line_tAmazonAuroraInput_23_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_23_in = null;
				String driverClass_tAmazonAuroraInput_23_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_23_in);
				String dbUser_tAmazonAuroraInput_23_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_23_in = context.password;

				String dbPwd_tAmazonAuroraInput_23_in = decryptedPassword_tAmazonAuroraInput_23_in;

				String url_tAmazonAuroraInput_23_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_23_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_23_in,
								dbUser_tAmazonAuroraInput_23_in,
								dbPwd_tAmazonAuroraInput_23_in);

				java.sql.Statement stmt_tAmazonAuroraInput_23_in = conn_tAmazonAuroraInput_23_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_23_in = "SELECT `name` , `server` , `database` FROM `orionEclipseFirm`";

				globalMap.put("tAmazonAuroraInput_23_QUERY",
						dbquery_tAmazonAuroraInput_23_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_23_in = null;
				try {
					rs_tAmazonAuroraInput_23_in = stmt_tAmazonAuroraInput_23_in
							.executeQuery(dbquery_tAmazonAuroraInput_23_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_23_in = rs_tAmazonAuroraInput_23_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_23_in = rsmd_tAmazonAuroraInput_23_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_23_in = null;

					while (rs_tAmazonAuroraInput_23_in.next()) {
						nb_line_tAmazonAuroraInput_23_in++;

						if (colQtyInRs_tAmazonAuroraInput_23_in < 1) {
							row_tAmazonAuroraInput_23_in.name = null;
						} else {

							row_tAmazonAuroraInput_23_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_23_in, 1,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_23_in < 2) {
							row_tAmazonAuroraInput_23_in.server = null;
						} else {

							row_tAmazonAuroraInput_23_in.server = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_23_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_23_in < 3) {
							row_tAmazonAuroraInput_23_in.database = null;
						} else {

							row_tAmazonAuroraInput_23_in.database = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_23_in, 3,
											false);
						}

						/**
						 * [tAmazonAuroraInput_23_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_23_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_23";

						currentComponent = "tAmazonAuroraInput_23_in";

						tos_count_tAmazonAuroraInput_23_in++;

						/**
						 * [tAmazonAuroraInput_23_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_23_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_23";

						currentComponent = "tAmazonAuroraInput_23_out";

						row31 = row_tAmazonAuroraInput_23_in;

						tos_count_tAmazonAuroraInput_23_out++;

						/**
						 * [tAmazonAuroraInput_23_out main ] stop
						 */

						/**
						 * [tMap_23 main ] start
						 */

						currentComponent = "tMap_23";

						boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_23 = false;
						boolean mainRowRejected_tMap_23 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row30"
						// /////////////////////////////////////////////

						boolean forceLooprow30 = false;

						row30Struct row30ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_23) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_23 = false;

							row30HashKey.firm = row31.name;

							row30HashKey.hashCodeDirty = true;

							tHash_Lookup_row30.lookup(row30HashKey);

							if (!tHash_Lookup_row30.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_23 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row30 != null
								&& tHash_Lookup_row30.getCount(row30HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row30' and it contains more one result from keys :  row30.firm = '"
							// + row30HashKey.firm + "'");
						} // G 071

						row30Struct row30 = null;

						row30Struct fromLookup_row30 = null;
						row30 = row30Default;

						if (tHash_Lookup_row30 != null
								&& tHash_Lookup_row30.hasNext()) { // G 099

							fromLookup_row30 = tHash_Lookup_row30.next();

						} // G 099

						if (fromLookup_row30 != null) {
							row30 = fromLookup_row30;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
							// ###############################
							// # Output tables

							copyOffirm_connection = null;

							if (!rejectedInnerJoin_tMap_23) {

								// # Output table : 'copyOffirm_connection'
								copyOffirm_connection_tmp.server = row31.server;
								copyOffirm_connection_tmp.database = row31.database;
								copyOffirm_connection = copyOffirm_connection_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_23 = false;

						tos_count_tMap_23++;

						/**
						 * [tMap_23 main ] stop
						 */
						// Start of branch "copyOffirm_connection"
						if (copyOffirm_connection != null) {

							/**
							 * [tJavaRow_11 main ] start
							 */

							currentComponent = "tJavaRow_11";

							context.serverIp = copyOffirm_connection.server;
							context.database = copyOffirm_connection.database;

							nb_line_tJavaRow_11++;

							tos_count_tJavaRow_11++;

							/**
							 * [tJavaRow_11 main ] stop
							 */

							/**
							 * [tJava_2 main ] start
							 */

							currentComponent = "tJava_2";

							tos_count_tJava_2++;

							/**
							 * [tJava_2 main ] stop
							 */

						} // End of branch "copyOffirm_connection"

						/**
						 * [tAmazonAuroraInput_23_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_23";

						currentComponent = "tAmazonAuroraInput_23_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_23_in != null) {
						rs_tAmazonAuroraInput_23_in.close();
					}
					stmt_tAmazonAuroraInput_23_in.close();
					if (conn_tAmazonAuroraInput_23_in != null
							&& !conn_tAmazonAuroraInput_23_in.isClosed()) {

						conn_tAmazonAuroraInput_23_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_23_NB_LINE",
						nb_line_tAmazonAuroraInput_23_in);

				ok_Hash.put("tAmazonAuroraInput_23_in", true);
				end_Hash.put("tAmazonAuroraInput_23_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_23_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_23_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_23";

				currentComponent = "tAmazonAuroraInput_23_out";

				ok_Hash.put("tAmazonAuroraInput_23_out", true);
				end_Hash.put("tAmazonAuroraInput_23_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_23_out end ] stop
				 */

				/**
				 * [tMap_23 end ] start
				 */

				currentComponent = "tMap_23";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row30 != null) {
					tHash_Lookup_row30.endGet();
				}
				globalMap.remove("tHash_Lookup_row30");

				// ###############################

				ok_Hash.put("tMap_23", true);
				end_Hash.put("tMap_23", System.currentTimeMillis());

				/**
				 * [tMap_23 end ] stop
				 */

				/**
				 * [tJavaRow_11 end ] start
				 */

				currentComponent = "tJavaRow_11";

				globalMap.put("tJavaRow_11_NB_LINE", nb_line_tJavaRow_11);

				ok_Hash.put("tJavaRow_11", true);
				end_Hash.put("tJavaRow_11", System.currentTimeMillis());

				/**
				 * [tJavaRow_11 end ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				tAmazonAuroraInput_6_inProcess(globalMap);

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_23"
			globalMap.remove("tHash_Lookup_row30");

			try {

				/**
				 * [tAmazonAuroraInput_23_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_23";

				currentComponent = "tAmazonAuroraInput_23_in";

				/**
				 * [tAmazonAuroraInput_23_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_23_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_23";

				currentComponent = "tAmazonAuroraInput_23_out";

				/**
				 * [tAmazonAuroraInput_23_out finally ] stop
				 */

				/**
				 * [tMap_23 finally ] start
				 */

				currentComponent = "tMap_23";

				/**
				 * [tMap_23 finally ] stop
				 */

				/**
				 * [tJavaRow_11 finally ] start
				 */

				currentComponent = "tJavaRow_11";

				/**
				 * [tJavaRow_11 finally ] stop
				 */

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_23_in_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AdvisorNumber;

		public String getAdvisorNumber() {
			return this.AdvisorNumber;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AdvisorNumber = readString(dis);

					this.AdvisorName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AdvisorNumber, dos);

				// String

				writeString(this.AdvisorName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AdvisorNumber=" + AdvisorNumber);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfmainoutStruct implements
			routines.system.IPersistableRow<copyOfmainoutStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmainoutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfsStruct implements
			routines.system.IPersistableRow<copyOfsStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_6_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_6_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_6_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_6Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_6Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_6_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_6_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_4Process(globalMap);
				tAmazonAuroraInput_7_inProcess(globalMap);
				tAmazonAuroraInput_5_inProcess(globalMap);

				row_tAmazonAuroraInput_6_inStruct row_tAmazonAuroraInput_6_in = new row_tAmazonAuroraInput_6_inStruct();
				row_tAmazonAuroraInput_6_inStruct row8 = row_tAmazonAuroraInput_6_in;
				copyOfsStruct copyOfs = new copyOfsStruct();
				copyOfmainoutStruct copyOfmainout = new copyOfmainoutStruct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tAmazonMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_2", false);
				start_Hash.put("tAmazonMysqlOutput_2",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_2";

				int tos_count_tAmazonMysqlOutput_2 = 0;

				int nb_line_tAmazonMysqlOutput_2 = 0;
				int nb_line_update_tAmazonMysqlOutput_2 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_2 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_2 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_2 = 0;

				int deletedCount_tAmazonMysqlOutput_2 = 0;
				int updatedCount_tAmazonMysqlOutput_2 = 0;
				int insertedCount_tAmazonMysqlOutput_2 = 0;

				int rejectedCount_tAmazonMysqlOutput_2 = 0;

				String tableName_tAmazonMysqlOutput_2 = "reject_Advisor";
				boolean whetherReject_tAmazonMysqlOutput_2 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_2 = calendar_tAmazonMysqlOutput_2
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_2 = calendar_tAmazonMysqlOutput_2
						.getTime().getTime();
				long date_tAmazonMysqlOutput_2;

				java.sql.Connection conn_tAmazonMysqlOutput_2 = null;
				String dbProperties_tAmazonMysqlOutput_2 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_2 = null;
				if (dbProperties_tAmazonMysqlOutput_2 == null
						|| dbProperties_tAmazonMysqlOutput_2.trim().length() == 0) {
					url_tAmazonMysqlOutput_2 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_2 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_2;
				}
				String dbUser_tAmazonMysqlOutput_2 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_2 = context.password;

				String dbPwd_tAmazonMysqlOutput_2 = decryptedPassword_tAmazonMysqlOutput_2;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_2 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_2,
								dbUser_tAmazonMysqlOutput_2,
								dbPwd_tAmazonMysqlOutput_2);

				resourceMap.put("conn_tAmazonMysqlOutput_2",
						conn_tAmazonMysqlOutput_2);

				conn_tAmazonMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_2 = 1000000;
				int commitCounter_tAmazonMysqlOutput_2 = 0;

				int count_tAmazonMysqlOutput_2 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_2 = conn_tAmazonMysqlOutput_2
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_2 = dbMetaData_tAmazonMysqlOutput_2
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_2 = false;
				while (rsTable_tAmazonMysqlOutput_2.next()) {
					String table_tAmazonMysqlOutput_2 = rsTable_tAmazonMysqlOutput_2
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_2
							.equalsIgnoreCase("reject_Advisor")) {
						whetherExist_tAmazonMysqlOutput_2 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_2.close();
				if (!whetherExist_tAmazonMysqlOutput_2) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_2 = conn_tAmazonMysqlOutput_2
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_2
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_2
									+ "`(`OrionFirmId` INT(11)  ,`ExternalId` INT(11)  ,`AdvisorNumber` VARCHAR(255)  ,`AdvisorName` VARCHAR(255)  )");
					stmtCreate_tAmazonMysqlOutput_2.close();
				}

				String insert_tAmazonMysqlOutput_2 = "INSERT INTO `"
						+ "reject_Advisor"
						+ "` (`OrionFirmId`,`ExternalId`,`AdvisorNumber`,`AdvisorName`) VALUES (?,?,?,?)";
				int batchSize_tAmazonMysqlOutput_2 = 100;
				int batchSizeCounter_tAmazonMysqlOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_2 = conn_tAmazonMysqlOutput_2
						.prepareStatement(insert_tAmazonMysqlOutput_2);

				/**
				 * [tAmazonMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
						.get("tHash_Lookup_row10"));

				row10Struct row10HashKey = new row10Struct();
				row10Struct row10Default = new row10Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfmainoutStruct copyOfmainout_tmp = new copyOfmainoutStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfsStruct copyOfs_tmp = new copyOfsStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_6_out", false);
				start_Hash.put("tAmazonAuroraInput_6_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_out";

				int tos_count_tAmazonAuroraInput_6_out = 0;

				/**
				 * [tAmazonAuroraInput_6_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_6_in", false);
				start_Hash.put("tAmazonAuroraInput_6_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_in";

				int tos_count_tAmazonAuroraInput_6_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_6_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_6_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_6_in = calendar_tAmazonAuroraInput_6_in
						.getTime();
				int nb_line_tAmazonAuroraInput_6_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_6_in = null;
				String driverClass_tAmazonAuroraInput_6_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_6_in);
				String dbUser_tAmazonAuroraInput_6_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_6_in = context.password;

				String dbPwd_tAmazonAuroraInput_6_in = decryptedPassword_tAmazonAuroraInput_6_in;

				String url_tAmazonAuroraInput_6_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_6_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_6_in,
								dbUser_tAmazonAuroraInput_6_in,
								dbPwd_tAmazonAuroraInput_6_in);

				java.sql.Statement stmt_tAmazonAuroraInput_6_in = conn_tAmazonAuroraInput_6_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_6_in = "select distinct OrionFirmId from advisor_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_6_QUERY",
						dbquery_tAmazonAuroraInput_6_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_6_in = null;
				try {
					rs_tAmazonAuroraInput_6_in = stmt_tAmazonAuroraInput_6_in
							.executeQuery(dbquery_tAmazonAuroraInput_6_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_6_in = rs_tAmazonAuroraInput_6_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_6_in = rsmd_tAmazonAuroraInput_6_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_6_in = null;

					while (rs_tAmazonAuroraInput_6_in.next()) {
						nb_line_tAmazonAuroraInput_6_in++;

						if (colQtyInRs_tAmazonAuroraInput_6_in < 1) {
							row_tAmazonAuroraInput_6_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_6_in.getObject(1) != null) {
								row_tAmazonAuroraInput_6_in.OrionFirmId = rs_tAmazonAuroraInput_6_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_6_in.OrionFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_6_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_6_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_6";

						currentComponent = "tAmazonAuroraInput_6_in";

						tos_count_tAmazonAuroraInput_6_in++;

						/**
						 * [tAmazonAuroraInput_6_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_6_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_6";

						currentComponent = "tAmazonAuroraInput_6_out";

						row8 = row_tAmazonAuroraInput_6_in;

						tos_count_tAmazonAuroraInput_6_out++;

						/**
						 * [tAmazonAuroraInput_6_out main ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row7"
						// /////////////////////////////////////////////

						boolean forceLooprow7 = false;

						row7Struct row7ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							row7HashKey.orionConnectFirmId = row8.OrionFirmId;

							row7HashKey.hashCodeDirty = true;

							tHash_Lookup_row7.lookup(row7HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row7 != null
								&& tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.orionConnectFirmId = '"
							// + row7HashKey.orionConnectFirmId + "'");
						} // G 071

						row7Struct row7 = null;

						row7Struct fromLookup_row7 = null;
						row7 = row7Default;

						if (tHash_Lookup_row7 != null
								&& tHash_Lookup_row7.hasNext()) { // G 099

							fromLookup_row7 = tHash_Lookup_row7.next();

						} // G 099

						if (fromLookup_row7 != null) {
							row7 = fromLookup_row7;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
							// ###############################
							// # Output tables

							copyOfs = null;

							// # Output table : 'copyOfs'
							copyOfs_tmp.OrionFirmId = row8.OrionFirmId;
							copyOfs_tmp.orionEclipseFirmName = row7.orionEclipseFirmName;
							copyOfs = copyOfs_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_5 = false;

						tos_count_tMap_5++;

						/**
						 * [tMap_5 main ] stop
						 */
						// Start of branch "copyOfs"
						if (copyOfs != null) {

							/**
							 * [tMap_6 main ] start
							 */

							currentComponent = "tMap_6";

							boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_6 = false;
							boolean mainRowRejected_tMap_6 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row10"
							// /////////////////////////////////////////////

							boolean forceLooprow10 = false;

							row10Struct row10ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_6 = false;

								row10HashKey.firm = copyOfs.orionEclipseFirmName;

								row10HashKey.hashCodeDirty = true;

								tHash_Lookup_row10.lookup(row10HashKey);

								if (!tHash_Lookup_row10.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_6 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row10 != null
									&& tHash_Lookup_row10
											.getCount(row10HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.firm = '"
								// + row10HashKey.firm + "'");
							} // G 071

							row10Struct row10 = null;

							row10Struct fromLookup_row10 = null;
							row10 = row10Default;

							if (tHash_Lookup_row10 != null
									&& tHash_Lookup_row10.hasNext()) { // G 099

								fromLookup_row10 = tHash_Lookup_row10.next();

							} // G 099

							if (fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
								// ###############################
								// # Output tables

								copyOfmainout = null;

								if (!rejectedInnerJoin_tMap_6) {
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'copyOfmainout'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_6) {
									copyOfmainout_tmp.firm = copyOfs.OrionFirmId;
									copyOfmainout = copyOfmainout_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */
							// Start of branch "copyOfmainout"
							if (copyOfmainout != null) {

								/**
								 * [tMap_7 main ] start
								 */

								currentComponent = "tMap_7";

								boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_7 = false;
								boolean mainRowRejected_tMap_7 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row6"
								// /////////////////////////////////////////////

								boolean forceLooprow6 = false;

								row6Struct row6ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_7 = false;

									row6HashKey.OrionFirmId = copyOfmainout.firm;

									row6HashKey.hashCodeDirty = true;

									tHash_Lookup_row6.lookup(row6HashKey);

									if (!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_7 = true;

										forceLooprow6 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow6 = true;
								} // G 21

								row6Struct row6 = null;

								while ((tHash_Lookup_row6 != null && tHash_Lookup_row6
										.hasNext()) || forceLooprow6) { // G_TM_M_043

									// CALL close loop of lookup 'row6'

									row6Struct fromLookup_row6 = null;
									row6 = row6Default;

									if (!forceLooprow6) { // G 46

										fromLookup_row6 = tHash_Lookup_row6
												.next();

										if (fromLookup_row6 != null) {
											row6 = fromLookup_row6;
										}

									} // G 46

									forceLooprow6 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
										// ###############################
										// # Output tables

										out1 = null;

										if (!rejectedInnerJoin_tMap_7) {

											// # Output table : 'out1'
											out1_tmp.OrionFirmId = row6.OrionFirmId;
											out1_tmp.ExternalId = row6.ExternalId;
											out1_tmp.AdvisorNumber = row6.AdvisorNumber;
											out1_tmp.AdvisorName = row6.AdvisorName;
											out1 = out1_tmp;
										} // closing inner join bracket (2)
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_7 = false;

									tos_count_tMap_7++;

									/**
									 * [tMap_7 main ] stop
									 */
									// Start of branch "out1"
									if (out1 != null) {

										/**
										 * [tAmazonMysqlOutput_2 main ] start
										 */

										currentComponent = "tAmazonMysqlOutput_2";

										whetherReject_tAmazonMysqlOutput_2 = false;
										if (out1.OrionFirmId == null) {
											pstmt_tAmazonMysqlOutput_2.setNull(
													1, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_2.setInt(
													1, out1.OrionFirmId);
										}

										if (out1.ExternalId == null) {
											pstmt_tAmazonMysqlOutput_2.setNull(
													2, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_2.setInt(
													2, out1.ExternalId);
										}

										if (out1.AdvisorNumber == null) {
											pstmt_tAmazonMysqlOutput_2.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_2
													.setString(3,
															out1.AdvisorNumber);
										}

										if (out1.AdvisorName == null) {
											pstmt_tAmazonMysqlOutput_2.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_2
													.setString(4,
															out1.AdvisorName);
										}

										pstmt_tAmazonMysqlOutput_2.addBatch();
										nb_line_tAmazonMysqlOutput_2++;

										batchSizeCounter_tAmazonMysqlOutput_2++;

										if (batchSize_tAmazonMysqlOutput_2 <= batchSizeCounter_tAmazonMysqlOutput_2) {
											try {
												int countSum_tAmazonMysqlOutput_2 = 0;

												for (int countEach_tAmazonMysqlOutput_2 : pstmt_tAmazonMysqlOutput_2
														.executeBatch()) {
													countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
															: 1);
												}

												insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

											} catch (java.sql.BatchUpdateException e) {

												int countSum_tAmazonMysqlOutput_2 = 0;
												for (int countEach_tAmazonMysqlOutput_2 : e
														.getUpdateCounts()) {
													countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
															: countEach_tAmazonMysqlOutput_2);
												}

												insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

												System.err.println(e
														.getMessage());

											}

											batchSizeCounter_tAmazonMysqlOutput_2 = 0;
										}

										commitCounter_tAmazonMysqlOutput_2++;
										if (commitEvery_tAmazonMysqlOutput_2 <= commitCounter_tAmazonMysqlOutput_2) {
											if ((batchSize_tAmazonMysqlOutput_2 > 0)
													&& (batchSizeCounter_tAmazonMysqlOutput_2 > 0)) {
												try {
													int countSum_tAmazonMysqlOutput_2 = 0;

													for (int countEach_tAmazonMysqlOutput_2 : pstmt_tAmazonMysqlOutput_2
															.executeBatch()) {
														countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
																: 1);
													}

													insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

													batchSizeCounter_tAmazonMysqlOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e) {

													int countSum_tAmazonMysqlOutput_2 = 0;
													for (int countEach_tAmazonMysqlOutput_2 : e
															.getUpdateCounts()) {
														countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
																: countEach_tAmazonMysqlOutput_2);
													}

													insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

													System.err.println(e
															.getMessage());

												}
											}

											conn_tAmazonMysqlOutput_2.commit();

											commitCounter_tAmazonMysqlOutput_2 = 0;
										}

										tos_count_tAmazonMysqlOutput_2++;

										/**
										 * [tAmazonMysqlOutput_2 main ] stop
										 */

									} // End of branch "out1"

								} // close loop of lookup 'row6' // G_TM_M_043

							} // End of branch "copyOfmainout"

						} // End of branch "copyOfs"

						/**
						 * [tAmazonAuroraInput_6_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_6";

						currentComponent = "tAmazonAuroraInput_6_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_6_in != null) {
						rs_tAmazonAuroraInput_6_in.close();
					}
					stmt_tAmazonAuroraInput_6_in.close();
					if (conn_tAmazonAuroraInput_6_in != null
							&& !conn_tAmazonAuroraInput_6_in.isClosed()) {

						conn_tAmazonAuroraInput_6_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_6_NB_LINE",
						nb_line_tAmazonAuroraInput_6_in);

				ok_Hash.put("tAmazonAuroraInput_6_in", true);
				end_Hash.put("tAmazonAuroraInput_6_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_6_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_out";

				ok_Hash.put("tAmazonAuroraInput_6_out", true);
				end_Hash.put("tAmazonAuroraInput_6_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_6_out end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row10 != null) {
					tHash_Lookup_row10.endGet();
				}
				globalMap.remove("tHash_Lookup_row10");

				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_2 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_2";

				try {
					if (batchSizeCounter_tAmazonMysqlOutput_2 != 0) {
						int countSum_tAmazonMysqlOutput_2 = 0;

						for (int countEach_tAmazonMysqlOutput_2 : pstmt_tAmazonMysqlOutput_2
								.executeBatch()) {
							countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonMysqlOutput_2 = 0;
					for (int countEach_tAmazonMysqlOutput_2 : e
							.getUpdateCounts()) {
						countSum_tAmazonMysqlOutput_2 += (countEach_tAmazonMysqlOutput_2 < 0 ? 0
								: countEach_tAmazonMysqlOutput_2);
					}

					insertedCount_tAmazonMysqlOutput_2 += countSum_tAmazonMysqlOutput_2;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonMysqlOutput_2 = 0;

				if (pstmt_tAmazonMysqlOutput_2 != null) {
					pstmt_tAmazonMysqlOutput_2.close();
				}

				if (commitCounter_tAmazonMysqlOutput_2 > 0) {

					conn_tAmazonMysqlOutput_2.commit();

				}

				conn_tAmazonMysqlOutput_2.close();

				resourceMap.put("finish_tAmazonMysqlOutput_2", true);

				nb_line_deleted_tAmazonMysqlOutput_2 = nb_line_deleted_tAmazonMysqlOutput_2
						+ deletedCount_tAmazonMysqlOutput_2;
				nb_line_update_tAmazonMysqlOutput_2 = nb_line_update_tAmazonMysqlOutput_2
						+ updatedCount_tAmazonMysqlOutput_2;
				nb_line_inserted_tAmazonMysqlOutput_2 = nb_line_inserted_tAmazonMysqlOutput_2
						+ insertedCount_tAmazonMysqlOutput_2;
				nb_line_rejected_tAmazonMysqlOutput_2 = nb_line_rejected_tAmazonMysqlOutput_2
						+ rejectedCount_tAmazonMysqlOutput_2;

				globalMap.put("tAmazonMysqlOutput_2_NB_LINE",
						nb_line_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_2);

				ok_Hash.put("tAmazonMysqlOutput_2", true);
				end_Hash.put("tAmazonMysqlOutput_2", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row10");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row7");

			try {

				/**
				 * [tAmazonAuroraInput_6_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_in";

				/**
				 * [tAmazonAuroraInput_6_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_6_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_6";

				currentComponent = "tAmazonAuroraInput_6_out";

				/**
				 * [tAmazonAuroraInput_6_out finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_2 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_2";

				if (resourceMap.get("finish_tAmazonMysqlOutput_2") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_2) {
							String errorMessage_tAmazonMysqlOutput_2 = "failed to close the connection in tAmazonMysqlOutput_2 :"
									+ sqlEx_tAmazonMysqlOutput_2.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_2);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_6_in_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AdvisorNumber;

		public String getAdvisorNumber() {
			return this.AdvisorNumber;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OrionFirmId == null) ? 0 : this.OrionFirmId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.OrionFirmId == null) {
				if (other.OrionFirmId != null)
					return false;

			} else if (!this.OrionFirmId.equals(other.OrionFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.OrionFirmId = this.OrionFirmId;
			other.ExternalId = this.ExternalId;
			other.AdvisorNumber = this.AdvisorNumber;
			other.AdvisorName = this.AdvisorName;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.OrionFirmId = this.OrionFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ExternalId = readInteger(dis, ois);

				this.AdvisorNumber = readString(dis, ois);

				this.AdvisorName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.ExternalId, dos, oos);

				writeString(this.AdvisorNumber, dos, oos);

				writeString(this.AdvisorName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AdvisorNumber=" + AdvisorNumber);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OrionFirmId,
					other.OrionFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_5_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_5_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AdvisorNumber;

		public String getAdvisorNumber() {
			return this.AdvisorNumber;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AdvisorNumber = readString(dis);

					this.AdvisorName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AdvisorNumber, dos);

				// String

				writeString(this.AdvisorName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AdvisorNumber=" + AdvisorNumber);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_5_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_5_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_5_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_5_inStruct row_tAmazonAuroraInput_5_in = new row_tAmazonAuroraInput_5_inStruct();
				row_tAmazonAuroraInput_5_inStruct row6 = row_tAmazonAuroraInput_5_in;

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tAmazonAuroraInput_5_out -
				// inputs:(row_tAmazonAuroraInput_5_in) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_7 - inputs:(copyOfmainout,row6)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_5_out", false);
				start_Hash.put("tAmazonAuroraInput_5_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				int tos_count_tAmazonAuroraInput_5_out = 0;

				/**
				 * [tAmazonAuroraInput_5_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_5_in", false);
				start_Hash.put("tAmazonAuroraInput_5_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_in";

				int tos_count_tAmazonAuroraInput_5_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_5_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_5_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_5_in = calendar_tAmazonAuroraInput_5_in
						.getTime();
				int nb_line_tAmazonAuroraInput_5_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_5_in = null;
				String driverClass_tAmazonAuroraInput_5_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_5_in);
				String dbUser_tAmazonAuroraInput_5_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_5_in = context.password;

				String dbPwd_tAmazonAuroraInput_5_in = decryptedPassword_tAmazonAuroraInput_5_in;

				String url_tAmazonAuroraInput_5_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_5_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_5_in,
								dbUser_tAmazonAuroraInput_5_in,
								dbPwd_tAmazonAuroraInput_5_in);

				java.sql.Statement stmt_tAmazonAuroraInput_5_in = conn_tAmazonAuroraInput_5_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_5_in = "select * from advisor_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_5_QUERY",
						dbquery_tAmazonAuroraInput_5_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_5_in = null;
				try {
					rs_tAmazonAuroraInput_5_in = stmt_tAmazonAuroraInput_5_in
							.executeQuery(dbquery_tAmazonAuroraInput_5_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_5_in = rs_tAmazonAuroraInput_5_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_5_in = rsmd_tAmazonAuroraInput_5_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_5_in = null;

					while (rs_tAmazonAuroraInput_5_in.next()) {
						nb_line_tAmazonAuroraInput_5_in++;

						if (colQtyInRs_tAmazonAuroraInput_5_in < 1) {
							row_tAmazonAuroraInput_5_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_5_in.getObject(1) != null) {
								row_tAmazonAuroraInput_5_in.OrionFirmId = rs_tAmazonAuroraInput_5_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_5_in.OrionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_5_in < 2) {
							row_tAmazonAuroraInput_5_in.ExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_5_in.getObject(2) != null) {
								row_tAmazonAuroraInput_5_in.ExternalId = rs_tAmazonAuroraInput_5_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_5_in.ExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_5_in < 3) {
							row_tAmazonAuroraInput_5_in.AdvisorNumber = null;
						} else {

							row_tAmazonAuroraInput_5_in.AdvisorNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_5_in, 3,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_5_in < 4) {
							row_tAmazonAuroraInput_5_in.AdvisorName = null;
						} else {

							row_tAmazonAuroraInput_5_in.AdvisorName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_5_in, 4,
											false);
						}

						/**
						 * [tAmazonAuroraInput_5_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_in";

						tos_count_tAmazonAuroraInput_5_in++;

						/**
						 * [tAmazonAuroraInput_5_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_out";

						row6 = row_tAmazonAuroraInput_5_in;

						tos_count_tAmazonAuroraInput_5_out++;

						/**
						 * [tAmazonAuroraInput_5_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.OrionFirmId = row6.OrionFirmId;

						row6_HashRow.ExternalId = row6.ExternalId;

						row6_HashRow.AdvisorNumber = row6.AdvisorNumber;

						row6_HashRow.AdvisorName = row6.AdvisorName;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_5_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_5";

						currentComponent = "tAmazonAuroraInput_5_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_5_in != null) {
						rs_tAmazonAuroraInput_5_in.close();
					}
					stmt_tAmazonAuroraInput_5_in.close();
					if (conn_tAmazonAuroraInput_5_in != null
							&& !conn_tAmazonAuroraInput_5_in.isClosed()) {

						conn_tAmazonAuroraInput_5_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_5_NB_LINE",
						nb_line_tAmazonAuroraInput_5_in);

				ok_Hash.put("tAmazonAuroraInput_5_in", true);
				end_Hash.put("tAmazonAuroraInput_5_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_5_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				ok_Hash.put("tAmazonAuroraInput_5_out", true);
				end_Hash.put("tAmazonAuroraInput_5_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_5_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_5_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_in";

				/**
				 * [tAmazonAuroraInput_5_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_5_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_5";

				currentComponent = "tAmazonAuroraInput_5_out";

				/**
				 * [tAmazonAuroraInput_5_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_5_in_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmName = this.orionEclipseFirmName;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orionEclipseFirmName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_7_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_7_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_7_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_7_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_7_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_7_inStruct row_tAmazonAuroraInput_7_in = new row_tAmazonAuroraInput_7_inStruct();
				row_tAmazonAuroraInput_7_inStruct row7 = row_tAmazonAuroraInput_7_in;

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tAmazonAuroraInput_7_out -
				// inputs:(row_tAmazonAuroraInput_7_in) outputs:(row7,row7) |
				// target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_5 - inputs:(row8,row7) outputs:(copyOfs)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_7_out", false);
				start_Hash.put("tAmazonAuroraInput_7_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_out";

				int tos_count_tAmazonAuroraInput_7_out = 0;

				/**
				 * [tAmazonAuroraInput_7_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_7_in", false);
				start_Hash.put("tAmazonAuroraInput_7_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_in";

				int tos_count_tAmazonAuroraInput_7_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_7_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_7_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_7_in = calendar_tAmazonAuroraInput_7_in
						.getTime();
				int nb_line_tAmazonAuroraInput_7_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_7_in = null;
				String driverClass_tAmazonAuroraInput_7_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_7_in);
				String dbUser_tAmazonAuroraInput_7_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_7_in = context.password;

				String dbPwd_tAmazonAuroraInput_7_in = decryptedPassword_tAmazonAuroraInput_7_in;

				String url_tAmazonAuroraInput_7_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_7_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_7_in,
								dbUser_tAmazonAuroraInput_7_in,
								dbPwd_tAmazonAuroraInput_7_in);

				java.sql.Statement stmt_tAmazonAuroraInput_7_in = conn_tAmazonAuroraInput_7_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_7_in = "select orionConnectFirmId , orionEclipseFirmName from firm";

				globalMap.put("tAmazonAuroraInput_7_QUERY",
						dbquery_tAmazonAuroraInput_7_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_7_in = null;
				try {
					rs_tAmazonAuroraInput_7_in = stmt_tAmazonAuroraInput_7_in
							.executeQuery(dbquery_tAmazonAuroraInput_7_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_7_in = rs_tAmazonAuroraInput_7_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_7_in = rsmd_tAmazonAuroraInput_7_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_7_in = null;

					while (rs_tAmazonAuroraInput_7_in.next()) {
						nb_line_tAmazonAuroraInput_7_in++;

						if (colQtyInRs_tAmazonAuroraInput_7_in < 1) {
							row_tAmazonAuroraInput_7_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_7_in.getObject(1) != null) {
								row_tAmazonAuroraInput_7_in.orionConnectFirmId = rs_tAmazonAuroraInput_7_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_7_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_7_in < 2) {
							row_tAmazonAuroraInput_7_in.orionEclipseFirmName = null;
						} else {

							row_tAmazonAuroraInput_7_in.orionEclipseFirmName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_7_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_7_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_7_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_7";

						currentComponent = "tAmazonAuroraInput_7_in";

						tos_count_tAmazonAuroraInput_7_in++;

						/**
						 * [tAmazonAuroraInput_7_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_7_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_7";

						currentComponent = "tAmazonAuroraInput_7_out";

						row7 = row_tAmazonAuroraInput_7_in;

						tos_count_tAmazonAuroraInput_7_out++;

						/**
						 * [tAmazonAuroraInput_7_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.orionConnectFirmId = row7.orionConnectFirmId;

						row7_HashRow.orionEclipseFirmName = row7.orionEclipseFirmName;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_7_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_7";

						currentComponent = "tAmazonAuroraInput_7_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_7_in != null) {
						rs_tAmazonAuroraInput_7_in.close();
					}
					stmt_tAmazonAuroraInput_7_in.close();
					if (conn_tAmazonAuroraInput_7_in != null
							&& !conn_tAmazonAuroraInput_7_in.isClosed()) {

						conn_tAmazonAuroraInput_7_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_7_NB_LINE",
						nb_line_tAmazonAuroraInput_7_in);

				ok_Hash.put("tAmazonAuroraInput_7_in", true);
				end_Hash.put("tAmazonAuroraInput_7_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_7_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_out";

				ok_Hash.put("tAmazonAuroraInput_7_out", true);
				end_Hash.put("tAmazonAuroraInput_7_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_7_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_7_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_in";

				/**
				 * [tAmazonAuroraInput_7_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_7_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_7";

				currentComponent = "tAmazonAuroraInput_7_out";

				/**
				 * [tAmazonAuroraInput_7_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_7_in_SUBPROCESS_STATE", 1);
	}

	public static class row35Struct implements
			routines.system.IPersistableRow<row35Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOffirm_connection_0Struct implements
			routines.system.IPersistableRow<copyOffirm_connection_0Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOffirm_connection_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row34Struct implements
			routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_24_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_24_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_24_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_24Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_24Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_24_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_24_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_12Process(globalMap);

				row_tAmazonAuroraInput_24_inStruct row_tAmazonAuroraInput_24_in = new row_tAmazonAuroraInput_24_inStruct();
				row_tAmazonAuroraInput_24_inStruct row34 = row_tAmazonAuroraInput_24_in;
				copyOffirm_connection_0Struct copyOffirm_connection_0 = new copyOffirm_connection_0Struct();
				row35Struct row35 = new row35Struct();

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJavaRow_13 begin ] start
				 */

				ok_Hash.put("tJavaRow_13", false);
				start_Hash.put("tJavaRow_13", System.currentTimeMillis());

				currentComponent = "tJavaRow_13";

				int tos_count_tJavaRow_13 = 0;

				int nb_line_tJavaRow_13 = 0;

				/**
				 * [tJavaRow_13 begin ] stop
				 */

				/**
				 * [tMap_24 begin ] start
				 */

				ok_Hash.put("tMap_24", false);
				start_Hash.put("tMap_24", System.currentTimeMillis());

				currentComponent = "tMap_24";

				int tos_count_tMap_24 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) globalMap
						.get("tHash_Lookup_row33"));

				row33Struct row33HashKey = new row33Struct();
				row33Struct row33Default = new row33Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_24__Struct {
				}
				Var__tMap_24__Struct Var__tMap_24 = new Var__tMap_24__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOffirm_connection_0Struct copyOffirm_connection_0_tmp = new copyOffirm_connection_0Struct();
				// ###############################

				/**
				 * [tMap_24 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_24_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_24_out", false);
				start_Hash.put("tAmazonAuroraInput_24_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_24";

				currentComponent = "tAmazonAuroraInput_24_out";

				int tos_count_tAmazonAuroraInput_24_out = 0;

				/**
				 * [tAmazonAuroraInput_24_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_24_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_24_in", false);
				start_Hash.put("tAmazonAuroraInput_24_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_24";

				currentComponent = "tAmazonAuroraInput_24_in";

				int tos_count_tAmazonAuroraInput_24_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_24_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_24_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_24_in = calendar_tAmazonAuroraInput_24_in
						.getTime();
				int nb_line_tAmazonAuroraInput_24_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_24_in = null;
				String driverClass_tAmazonAuroraInput_24_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_24_in);
				String dbUser_tAmazonAuroraInput_24_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_24_in = context.password;

				String dbPwd_tAmazonAuroraInput_24_in = decryptedPassword_tAmazonAuroraInput_24_in;

				String url_tAmazonAuroraInput_24_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_24_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_24_in,
								dbUser_tAmazonAuroraInput_24_in,
								dbPwd_tAmazonAuroraInput_24_in);

				java.sql.Statement stmt_tAmazonAuroraInput_24_in = conn_tAmazonAuroraInput_24_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_24_in = "SELECT `name` , `server` , `database` FROM `orionEclipseFirm`";

				globalMap.put("tAmazonAuroraInput_24_QUERY",
						dbquery_tAmazonAuroraInput_24_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_24_in = null;
				try {
					rs_tAmazonAuroraInput_24_in = stmt_tAmazonAuroraInput_24_in
							.executeQuery(dbquery_tAmazonAuroraInput_24_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_24_in = rs_tAmazonAuroraInput_24_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_24_in = rsmd_tAmazonAuroraInput_24_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_24_in = null;

					while (rs_tAmazonAuroraInput_24_in.next()) {
						nb_line_tAmazonAuroraInput_24_in++;

						if (colQtyInRs_tAmazonAuroraInput_24_in < 1) {
							row_tAmazonAuroraInput_24_in.name = null;
						} else {

							row_tAmazonAuroraInput_24_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_24_in, 1,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_24_in < 2) {
							row_tAmazonAuroraInput_24_in.server = null;
						} else {

							row_tAmazonAuroraInput_24_in.server = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_24_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_24_in < 3) {
							row_tAmazonAuroraInput_24_in.database = null;
						} else {

							row_tAmazonAuroraInput_24_in.database = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_24_in, 3,
											false);
						}

						/**
						 * [tAmazonAuroraInput_24_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_24_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_24";

						currentComponent = "tAmazonAuroraInput_24_in";

						tos_count_tAmazonAuroraInput_24_in++;

						/**
						 * [tAmazonAuroraInput_24_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_24_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_24";

						currentComponent = "tAmazonAuroraInput_24_out";

						row34 = row_tAmazonAuroraInput_24_in;

						tos_count_tAmazonAuroraInput_24_out++;

						/**
						 * [tAmazonAuroraInput_24_out main ] stop
						 */

						/**
						 * [tMap_24 main ] start
						 */

						currentComponent = "tMap_24";

						boolean hasCasePrimitiveKeyWithNull_tMap_24 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_24 = false;
						boolean mainRowRejected_tMap_24 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row33"
						// /////////////////////////////////////////////

						boolean forceLooprow33 = false;

						row33Struct row33ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_24) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_24 = false;

							row33HashKey.firm = row34.name;

							row33HashKey.hashCodeDirty = true;

							tHash_Lookup_row33.lookup(row33HashKey);

							if (!tHash_Lookup_row33.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_24 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row33 != null
								&& tHash_Lookup_row33.getCount(row33HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row33' and it contains more one result from keys :  row33.firm = '"
							// + row33HashKey.firm + "'");
						} // G 071

						row33Struct row33 = null;

						row33Struct fromLookup_row33 = null;
						row33 = row33Default;

						if (tHash_Lookup_row33 != null
								&& tHash_Lookup_row33.hasNext()) { // G 099

							fromLookup_row33 = tHash_Lookup_row33.next();

						} // G 099

						if (fromLookup_row33 != null) {
							row33 = fromLookup_row33;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_24__Struct Var = Var__tMap_24;// ###############################
							// ###############################
							// # Output tables

							copyOffirm_connection_0 = null;

							if (!rejectedInnerJoin_tMap_24) {

								// # Output table : 'copyOffirm_connection_0'
								copyOffirm_connection_0_tmp.server = row34.server;
								copyOffirm_connection_0_tmp.database = row34.database;
								copyOffirm_connection_0 = copyOffirm_connection_0_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_24 = false;

						tos_count_tMap_24++;

						/**
						 * [tMap_24 main ] stop
						 */
						// Start of branch "copyOffirm_connection_0"
						if (copyOffirm_connection_0 != null) {

							/**
							 * [tJavaRow_13 main ] start
							 */

							currentComponent = "tJavaRow_13";

							context.serverIp = copyOffirm_connection_0.server;
							context.database = copyOffirm_connection_0.database;

							nb_line_tJavaRow_13++;

							tos_count_tJavaRow_13++;

							/**
							 * [tJavaRow_13 main ] stop
							 */

							/**
							 * [tJava_3 main ] start
							 */

							currentComponent = "tJava_3";

							tos_count_tJava_3++;

							/**
							 * [tJava_3 main ] stop
							 */

						} // End of branch "copyOffirm_connection_0"

						/**
						 * [tAmazonAuroraInput_24_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_24";

						currentComponent = "tAmazonAuroraInput_24_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_24_in != null) {
						rs_tAmazonAuroraInput_24_in.close();
					}
					stmt_tAmazonAuroraInput_24_in.close();
					if (conn_tAmazonAuroraInput_24_in != null
							&& !conn_tAmazonAuroraInput_24_in.isClosed()) {

						conn_tAmazonAuroraInput_24_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_24_NB_LINE",
						nb_line_tAmazonAuroraInput_24_in);

				ok_Hash.put("tAmazonAuroraInput_24_in", true);
				end_Hash.put("tAmazonAuroraInput_24_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_24_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_24_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_24";

				currentComponent = "tAmazonAuroraInput_24_out";

				ok_Hash.put("tAmazonAuroraInput_24_out", true);
				end_Hash.put("tAmazonAuroraInput_24_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_24_out end ] stop
				 */

				/**
				 * [tMap_24 end ] start
				 */

				currentComponent = "tMap_24";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row33 != null) {
					tHash_Lookup_row33.endGet();
				}
				globalMap.remove("tHash_Lookup_row33");

				// ###############################

				ok_Hash.put("tMap_24", true);
				end_Hash.put("tMap_24", System.currentTimeMillis());

				/**
				 * [tMap_24 end ] stop
				 */

				/**
				 * [tJavaRow_13 end ] start
				 */

				currentComponent = "tJavaRow_13";

				globalMap.put("tJavaRow_13_NB_LINE", nb_line_tJavaRow_13);

				ok_Hash.put("tJavaRow_13", true);
				end_Hash.put("tJavaRow_13", System.currentTimeMillis());

				/**
				 * [tJavaRow_13 end ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				tAmazonAuroraInput_8_inProcess(globalMap);

				/**
				 * [tJava_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_24"
			globalMap.remove("tHash_Lookup_row33");

			try {

				/**
				 * [tAmazonAuroraInput_24_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_24";

				currentComponent = "tAmazonAuroraInput_24_in";

				/**
				 * [tAmazonAuroraInput_24_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_24_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_24";

				currentComponent = "tAmazonAuroraInput_24_out";

				/**
				 * [tAmazonAuroraInput_24_out finally ] stop
				 */

				/**
				 * [tMap_24 finally ] start
				 */

				currentComponent = "tMap_24";

				/**
				 * [tMap_24 finally ] stop
				 */

				/**
				 * [tJavaRow_13 finally ] start
				 */

				currentComponent = "tJavaRow_13";

				/**
				 * [tJavaRow_13 finally ] stop
				 */

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_24_in_SUBPROCESS_STATE", 1);
	}

	public static class custodian_firm_outputStruct implements
			routines.system.IPersistableRow<custodian_firm_outputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					this.name = readString(dis);

					this.code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",name=" + name);
			sb.append(",code=" + code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(custodian_firm_outputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfmainout_0Struct implements
			routines.system.IPersistableRow<copyOfmainout_0Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmainout_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfs_0Struct implements
			routines.system.IPersistableRow<copyOfs_0Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfs_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_8_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_8_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_8_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_8Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_8Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_8_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_8_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tAmazonAuroraInput_10_inProcess(globalMap);
				tJavaRow_5Process(globalMap);
				tAmazonAuroraInput_9_inProcess(globalMap);

				row_tAmazonAuroraInput_8_inStruct row_tAmazonAuroraInput_8_in = new row_tAmazonAuroraInput_8_inStruct();
				row_tAmazonAuroraInput_8_inStruct row11 = row_tAmazonAuroraInput_8_in;
				copyOfs_0Struct copyOfs_0 = new copyOfs_0Struct();
				copyOfmainout_0Struct copyOfmainout_0 = new copyOfmainout_0Struct();
				custodian_firm_outputStruct custodian_firm_output = new custodian_firm_outputStruct();

				/**
				 * [tAmazonMysqlOutput_3 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_3", false);
				start_Hash.put("tAmazonMysqlOutput_3",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_3";

				int tos_count_tAmazonMysqlOutput_3 = 0;

				int nb_line_tAmazonMysqlOutput_3 = 0;
				int nb_line_update_tAmazonMysqlOutput_3 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_3 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_3 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_3 = 0;

				int deletedCount_tAmazonMysqlOutput_3 = 0;
				int updatedCount_tAmazonMysqlOutput_3 = 0;
				int insertedCount_tAmazonMysqlOutput_3 = 0;

				int rejectedCount_tAmazonMysqlOutput_3 = 0;

				String tableName_tAmazonMysqlOutput_3 = "reject_Custodian";
				boolean whetherReject_tAmazonMysqlOutput_3 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_3 = calendar_tAmazonMysqlOutput_3
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_3 = calendar_tAmazonMysqlOutput_3
						.getTime().getTime();
				long date_tAmazonMysqlOutput_3;

				java.sql.Connection conn_tAmazonMysqlOutput_3 = null;
				String dbProperties_tAmazonMysqlOutput_3 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_3 = null;
				if (dbProperties_tAmazonMysqlOutput_3 == null
						|| dbProperties_tAmazonMysqlOutput_3.trim().length() == 0) {
					url_tAmazonMysqlOutput_3 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_3 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_3;
				}
				String dbUser_tAmazonMysqlOutput_3 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_3 = context.password;

				String dbPwd_tAmazonMysqlOutput_3 = decryptedPassword_tAmazonMysqlOutput_3;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_3 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_3,
								dbUser_tAmazonMysqlOutput_3,
								dbPwd_tAmazonMysqlOutput_3);

				resourceMap.put("conn_tAmazonMysqlOutput_3",
						conn_tAmazonMysqlOutput_3);

				conn_tAmazonMysqlOutput_3.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_3 = 1000000;
				int commitCounter_tAmazonMysqlOutput_3 = 0;

				int count_tAmazonMysqlOutput_3 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_3 = conn_tAmazonMysqlOutput_3
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_3 = dbMetaData_tAmazonMysqlOutput_3
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_3 = false;
				while (rsTable_tAmazonMysqlOutput_3.next()) {
					String table_tAmazonMysqlOutput_3 = rsTable_tAmazonMysqlOutput_3
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_3
							.equalsIgnoreCase("reject_Custodian")) {
						whetherExist_tAmazonMysqlOutput_3 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_3.close();
				if (!whetherExist_tAmazonMysqlOutput_3) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_3 = conn_tAmazonMysqlOutput_3
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_3
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_3
									+ "`(`orionFirmId` INT(10)  ,`externalId` INT(10)  ,`name` VARCHAR(255)  ,`code` VARCHAR(20)  )");
					stmtCreate_tAmazonMysqlOutput_3.close();
				}

				String insert_tAmazonMysqlOutput_3 = "INSERT INTO `"
						+ "reject_Custodian"
						+ "` (`orionFirmId`,`externalId`,`name`,`code`) VALUES (?,?,?,?)";
				int batchSize_tAmazonMysqlOutput_3 = 100;
				int batchSizeCounter_tAmazonMysqlOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_3 = conn_tAmazonMysqlOutput_3
						.prepareStatement(insert_tAmazonMysqlOutput_3);

				/**
				 * [tAmazonMysqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				int tos_count_tMap_10 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
						.get("tHash_Lookup_row14"));

				row14Struct row14HashKey = new row14Struct();
				row14Struct row14Default = new row14Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				custodian_firm_outputStruct custodian_firm_output_tmp = new custodian_firm_outputStruct();
				// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				int tos_count_tMap_9 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) globalMap
						.get("tHash_Lookup_row13"));

				row13Struct row13HashKey = new row13Struct();
				row13Struct row13Default = new row13Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfmainout_0Struct copyOfmainout_0_tmp = new copyOfmainout_0Struct();
				// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				int tos_count_tMap_8 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) globalMap
						.get("tHash_Lookup_row12"));

				row12Struct row12HashKey = new row12Struct();
				row12Struct row12Default = new row12Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfs_0Struct copyOfs_0_tmp = new copyOfs_0Struct();
				// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_8_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_8_out", false);
				start_Hash.put("tAmazonAuroraInput_8_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_out";

				int tos_count_tAmazonAuroraInput_8_out = 0;

				/**
				 * [tAmazonAuroraInput_8_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_8_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_8_in", false);
				start_Hash.put("tAmazonAuroraInput_8_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_in";

				int tos_count_tAmazonAuroraInput_8_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_8_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_8_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_8_in = calendar_tAmazonAuroraInput_8_in
						.getTime();
				int nb_line_tAmazonAuroraInput_8_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_8_in = null;
				String driverClass_tAmazonAuroraInput_8_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_8_in);
				String dbUser_tAmazonAuroraInput_8_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_8_in = context.password;

				String dbPwd_tAmazonAuroraInput_8_in = decryptedPassword_tAmazonAuroraInput_8_in;

				String url_tAmazonAuroraInput_8_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_8_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_8_in,
								dbUser_tAmazonAuroraInput_8_in,
								dbPwd_tAmazonAuroraInput_8_in);

				java.sql.Statement stmt_tAmazonAuroraInput_8_in = conn_tAmazonAuroraInput_8_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_8_in = "select distinct OrionFirmId from custodian_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_8_QUERY",
						dbquery_tAmazonAuroraInput_8_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_8_in = null;
				try {
					rs_tAmazonAuroraInput_8_in = stmt_tAmazonAuroraInput_8_in
							.executeQuery(dbquery_tAmazonAuroraInput_8_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_8_in = rs_tAmazonAuroraInput_8_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_8_in = rsmd_tAmazonAuroraInput_8_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_8_in = null;

					while (rs_tAmazonAuroraInput_8_in.next()) {
						nb_line_tAmazonAuroraInput_8_in++;

						if (colQtyInRs_tAmazonAuroraInput_8_in < 1) {
							row_tAmazonAuroraInput_8_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_8_in.getObject(1) != null) {
								row_tAmazonAuroraInput_8_in.OrionFirmId = rs_tAmazonAuroraInput_8_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_8_in.OrionFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_8_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_8_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_8";

						currentComponent = "tAmazonAuroraInput_8_in";

						tos_count_tAmazonAuroraInput_8_in++;

						/**
						 * [tAmazonAuroraInput_8_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_8_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_8";

						currentComponent = "tAmazonAuroraInput_8_out";

						row11 = row_tAmazonAuroraInput_8_in;

						tos_count_tAmazonAuroraInput_8_out++;

						/**
						 * [tAmazonAuroraInput_8_out main ] stop
						 */

						/**
						 * [tMap_8 main ] start
						 */

						currentComponent = "tMap_8";

						boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_8 = false;
						boolean mainRowRejected_tMap_8 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row12"
						// /////////////////////////////////////////////

						boolean forceLooprow12 = false;

						row12Struct row12ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_8 = false;

							row12HashKey.orionConnectFirmId = row11.OrionFirmId;

							row12HashKey.hashCodeDirty = true;

							tHash_Lookup_row12.lookup(row12HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row12 != null
								&& tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.orionConnectFirmId = '"
							// + row12HashKey.orionConnectFirmId + "'");
						} // G 071

						row12Struct row12 = null;

						row12Struct fromLookup_row12 = null;
						row12 = row12Default;

						if (tHash_Lookup_row12 != null
								&& tHash_Lookup_row12.hasNext()) { // G 099

							fromLookup_row12 = tHash_Lookup_row12.next();

						} // G 099

						if (fromLookup_row12 != null) {
							row12 = fromLookup_row12;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
							// ###############################
							// # Output tables

							copyOfs_0 = null;

							// # Output table : 'copyOfs_0'
							copyOfs_0_tmp.OrionFirmId = row11.OrionFirmId;
							copyOfs_0_tmp.orionEclipseFirmName = row12.orionEclipseFirmName;
							copyOfs_0 = copyOfs_0_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_8 = false;

						tos_count_tMap_8++;

						/**
						 * [tMap_8 main ] stop
						 */
						// Start of branch "copyOfs_0"
						if (copyOfs_0 != null) {

							/**
							 * [tMap_9 main ] start
							 */

							currentComponent = "tMap_9";

							boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_9 = false;
							boolean mainRowRejected_tMap_9 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row13"
							// /////////////////////////////////////////////

							boolean forceLooprow13 = false;

							row13Struct row13ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_9 = false;

								row13HashKey.firm = copyOfs_0.orionEclipseFirmName;

								row13HashKey.hashCodeDirty = true;

								tHash_Lookup_row13.lookup(row13HashKey);

								if (!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_9 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row13 != null
									&& tHash_Lookup_row13
											.getCount(row13HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.firm = '"
								// + row13HashKey.firm + "'");
							} // G 071

							row13Struct row13 = null;

							row13Struct fromLookup_row13 = null;
							row13 = row13Default;

							if (tHash_Lookup_row13 != null
									&& tHash_Lookup_row13.hasNext()) { // G 099

								fromLookup_row13 = tHash_Lookup_row13.next();

							} // G 099

							if (fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
								// ###############################
								// # Output tables

								copyOfmainout_0 = null;

								if (!rejectedInnerJoin_tMap_9) {
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'copyOfmainout_0'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_9) {
									copyOfmainout_0_tmp.firm = copyOfs_0.OrionFirmId;
									copyOfmainout_0 = copyOfmainout_0_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_9 = false;

							tos_count_tMap_9++;

							/**
							 * [tMap_9 main ] stop
							 */
							// Start of branch "copyOfmainout_0"
							if (copyOfmainout_0 != null) {

								/**
								 * [tMap_10 main ] start
								 */

								currentComponent = "tMap_10";

								boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_10 = false;
								boolean mainRowRejected_tMap_10 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row14"
								// /////////////////////////////////////////////

								boolean forceLooprow14 = false;

								row14Struct row14ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_10 = false;

									row14HashKey.OrionFirmId = copyOfmainout_0.firm;

									row14HashKey.hashCodeDirty = true;

									tHash_Lookup_row14.lookup(row14HashKey);

									if (!tHash_Lookup_row14.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_10 = true;

										forceLooprow14 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow14 = true;
								} // G 21

								row14Struct row14 = null;

								while ((tHash_Lookup_row14 != null && tHash_Lookup_row14
										.hasNext()) || forceLooprow14) { // G_TM_M_043

									// CALL close loop of lookup 'row14'

									row14Struct fromLookup_row14 = null;
									row14 = row14Default;

									if (!forceLooprow14) { // G 46

										fromLookup_row14 = tHash_Lookup_row14
												.next();

										if (fromLookup_row14 != null) {
											row14 = fromLookup_row14;
										}

									} // G 46

									forceLooprow14 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
										// ###############################
										// # Output tables

										custodian_firm_output = null;

										if (!rejectedInnerJoin_tMap_10) {

											// # Output table :
											// 'custodian_firm_output'
											custodian_firm_output_tmp.orionFirmId = row14.OrionFirmId;
											custodian_firm_output_tmp.externalId = row14.ExternalId;
											custodian_firm_output_tmp.name = row14.Name;
											custodian_firm_output_tmp.code = row14.Code;
											custodian_firm_output = custodian_firm_output_tmp;
										} // closing inner join bracket (2)
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_10 = false;

									tos_count_tMap_10++;

									/**
									 * [tMap_10 main ] stop
									 */
									// Start of branch "custodian_firm_output"
									if (custodian_firm_output != null) {

										/**
										 * [tAmazonMysqlOutput_3 main ] start
										 */

										currentComponent = "tAmazonMysqlOutput_3";

										whetherReject_tAmazonMysqlOutput_3 = false;
										if (custodian_firm_output.orionFirmId == null) {
											pstmt_tAmazonMysqlOutput_3.setNull(
													1, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_3
													.setInt(1,
															custodian_firm_output.orionFirmId);
										}

										if (custodian_firm_output.externalId == null) {
											pstmt_tAmazonMysqlOutput_3.setNull(
													2, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_3
													.setInt(2,
															custodian_firm_output.externalId);
										}

										if (custodian_firm_output.name == null) {
											pstmt_tAmazonMysqlOutput_3.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_3
													.setString(
															3,
															custodian_firm_output.name);
										}

										if (custodian_firm_output.code == null) {
											pstmt_tAmazonMysqlOutput_3.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_3
													.setString(
															4,
															custodian_firm_output.code);
										}

										pstmt_tAmazonMysqlOutput_3.addBatch();
										nb_line_tAmazonMysqlOutput_3++;

										batchSizeCounter_tAmazonMysqlOutput_3++;

										if (batchSize_tAmazonMysqlOutput_3 <= batchSizeCounter_tAmazonMysqlOutput_3) {
											try {
												int countSum_tAmazonMysqlOutput_3 = 0;

												for (int countEach_tAmazonMysqlOutput_3 : pstmt_tAmazonMysqlOutput_3
														.executeBatch()) {
													countSum_tAmazonMysqlOutput_3 += (countEach_tAmazonMysqlOutput_3 < 0 ? 0
															: 1);
												}

												insertedCount_tAmazonMysqlOutput_3 += countSum_tAmazonMysqlOutput_3;

											} catch (java.sql.BatchUpdateException e) {

												int countSum_tAmazonMysqlOutput_3 = 0;
												for (int countEach_tAmazonMysqlOutput_3 : e
														.getUpdateCounts()) {
													countSum_tAmazonMysqlOutput_3 += (countEach_tAmazonMysqlOutput_3 < 0 ? 0
															: countEach_tAmazonMysqlOutput_3);
												}

												insertedCount_tAmazonMysqlOutput_3 += countSum_tAmazonMysqlOutput_3;

												System.err.println(e
														.getMessage());

											}

											batchSizeCounter_tAmazonMysqlOutput_3 = 0;
										}

										commitCounter_tAmazonMysqlOutput_3++;
										if (commitEvery_tAmazonMysqlOutput_3 <= commitCounter_tAmazonMysqlOutput_3) {
											if ((batchSize_tAmazonMysqlOutput_3 > 0)
													&& (batchSizeCounter_tAmazonMysqlOutput_3 > 0)) {
												try {
													int countSum_tAmazonMysqlOutput_3 = 0;

													for (int countEach_tAmazonMysqlOutput_3 : pstmt_tAmazonMysqlOutput_3
															.executeBatch()) {
														countSum_tAmazonMysqlOutput_3 += (countEach_tAmazonMysqlOutput_3 < 0 ? 0
																: 1);
													}

													insertedCount_tAmazonMysqlOutput_3 += countSum_tAmazonMysqlOutput_3;

													batchSizeCounter_tAmazonMysqlOutput_3 = 0;
												} catch (java.sql.BatchUpdateException e) {

													int countSum_tAmazonMysqlOutput_3 = 0;
													for (int countEach_tAmazonMysqlOutput_3 : e
															.getUpdateCounts()) {
														countSum_tAmazonMysqlOutput_3 += (countEach_tAmazonMysqlOutput_3 < 0 ? 0
																: countEach_tAmazonMysqlOutput_3);
													}

													insertedCount_tAmazonMysqlOutput_3 += countSum_tAmazonMysqlOutput_3;

													System.err.println(e
															.getMessage());

												}
											}

											conn_tAmazonMysqlOutput_3.commit();

											commitCounter_tAmazonMysqlOutput_3 = 0;
										}

										tos_count_tAmazonMysqlOutput_3++;

										/**
										 * [tAmazonMysqlOutput_3 main ] stop
										 */

									} // End of branch "custodian_firm_output"

								} // close loop of lookup 'row14' // G_TM_M_043

							} // End of branch "copyOfmainout_0"

						} // End of branch "copyOfs_0"

						/**
						 * [tAmazonAuroraInput_8_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_8";

						currentComponent = "tAmazonAuroraInput_8_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_8_in != null) {
						rs_tAmazonAuroraInput_8_in.close();
					}
					stmt_tAmazonAuroraInput_8_in.close();
					if (conn_tAmazonAuroraInput_8_in != null
							&& !conn_tAmazonAuroraInput_8_in.isClosed()) {

						conn_tAmazonAuroraInput_8_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_8_NB_LINE",
						nb_line_tAmazonAuroraInput_8_in);

				ok_Hash.put("tAmazonAuroraInput_8_in", true);
				end_Hash.put("tAmazonAuroraInput_8_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_8_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_8_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_out";

				ok_Hash.put("tAmazonAuroraInput_8_out", true);
				end_Hash.put("tAmazonAuroraInput_8_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_8_out end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row12 != null) {
					tHash_Lookup_row12.endGet();
				}
				globalMap.remove("tHash_Lookup_row12");

				// ###############################

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row13 != null) {
					tHash_Lookup_row13.endGet();
				}
				globalMap.remove("tHash_Lookup_row13");

				// ###############################

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row14 != null) {
					tHash_Lookup_row14.endGet();
				}
				globalMap.remove("tHash_Lookup_row14");

				// ###############################

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_3 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_3";

				try {
					if (batchSizeCounter_tAmazonMysqlOutput_3 != 0) {
						int countSum_tAmazonMysqlOutput_3 = 0;

						for (int countEach_tAmazonMysqlOutput_3 : pstmt_tAmazonMysqlOutput_3
								.executeBatch()) {
							countSum_tAmazonMysqlOutput_3 += (countEach_tAmazonMysqlOutput_3 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonMysqlOutput_3 += countSum_tAmazonMysqlOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonMysqlOutput_3 = 0;
					for (int countEach_tAmazonMysqlOutput_3 : e
							.getUpdateCounts()) {
						countSum_tAmazonMysqlOutput_3 += (countEach_tAmazonMysqlOutput_3 < 0 ? 0
								: countEach_tAmazonMysqlOutput_3);
					}

					insertedCount_tAmazonMysqlOutput_3 += countSum_tAmazonMysqlOutput_3;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonMysqlOutput_3 = 0;

				if (pstmt_tAmazonMysqlOutput_3 != null) {
					pstmt_tAmazonMysqlOutput_3.close();
				}

				if (commitCounter_tAmazonMysqlOutput_3 > 0) {

					conn_tAmazonMysqlOutput_3.commit();

				}

				conn_tAmazonMysqlOutput_3.close();

				resourceMap.put("finish_tAmazonMysqlOutput_3", true);

				nb_line_deleted_tAmazonMysqlOutput_3 = nb_line_deleted_tAmazonMysqlOutput_3
						+ deletedCount_tAmazonMysqlOutput_3;
				nb_line_update_tAmazonMysqlOutput_3 = nb_line_update_tAmazonMysqlOutput_3
						+ updatedCount_tAmazonMysqlOutput_3;
				nb_line_inserted_tAmazonMysqlOutput_3 = nb_line_inserted_tAmazonMysqlOutput_3
						+ insertedCount_tAmazonMysqlOutput_3;
				nb_line_rejected_tAmazonMysqlOutput_3 = nb_line_rejected_tAmazonMysqlOutput_3
						+ rejectedCount_tAmazonMysqlOutput_3;

				globalMap.put("tAmazonMysqlOutput_3_NB_LINE",
						nb_line_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_3);

				ok_Hash.put("tAmazonMysqlOutput_3", true);
				end_Hash.put("tAmazonMysqlOutput_3", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_10"
			globalMap.remove("tHash_Lookup_row14");

			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_row13");

			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row12");

			try {

				/**
				 * [tAmazonAuroraInput_8_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_in";

				/**
				 * [tAmazonAuroraInput_8_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_8_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_8";

				currentComponent = "tAmazonAuroraInput_8_out";

				/**
				 * [tAmazonAuroraInput_8_out finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_3 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_3";

				if (resourceMap.get("finish_tAmazonMysqlOutput_3") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_3") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_3")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_3) {
							String errorMessage_tAmazonMysqlOutput_3 = "failed to close the connection in tAmazonMysqlOutput_3 :"
									+ sqlEx_tAmazonMysqlOutput_3.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_3);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_8_in_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableComparableLookupRow<row12Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmName = this.orionEclipseFirmName;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orionEclipseFirmName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_9_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_9_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_9_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_9_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_9_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_9_inStruct row_tAmazonAuroraInput_9_in = new row_tAmazonAuroraInput_9_inStruct();
				row_tAmazonAuroraInput_9_inStruct row12 = row_tAmazonAuroraInput_9_in;

				/**
				 * [tAdvancedHash_row12 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row12", false);
				start_Hash.put("tAdvancedHash_row12",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row12";

				int tos_count_tAdvancedHash_row12 = 0;

				// connection name:row12
				// source node:tAmazonAuroraInput_9_out -
				// inputs:(row_tAmazonAuroraInput_9_in) outputs:(row12,row12) |
				// target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
				// linked node: tMap_8 - inputs:(row11,row12)
				// outputs:(copyOfs_0)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row12Struct> getLookup(matchingModeEnum_row12);

				globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);

				/**
				 * [tAdvancedHash_row12 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_9_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_9_out", false);
				start_Hash.put("tAmazonAuroraInput_9_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_9";

				currentComponent = "tAmazonAuroraInput_9_out";

				int tos_count_tAmazonAuroraInput_9_out = 0;

				/**
				 * [tAmazonAuroraInput_9_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_9_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_9_in", false);
				start_Hash.put("tAmazonAuroraInput_9_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_9";

				currentComponent = "tAmazonAuroraInput_9_in";

				int tos_count_tAmazonAuroraInput_9_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_9_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_9_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_9_in = calendar_tAmazonAuroraInput_9_in
						.getTime();
				int nb_line_tAmazonAuroraInput_9_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_9_in = null;
				String driverClass_tAmazonAuroraInput_9_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_9_in);
				String dbUser_tAmazonAuroraInput_9_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_9_in = context.password;

				String dbPwd_tAmazonAuroraInput_9_in = decryptedPassword_tAmazonAuroraInput_9_in;

				String url_tAmazonAuroraInput_9_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_9_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_9_in,
								dbUser_tAmazonAuroraInput_9_in,
								dbPwd_tAmazonAuroraInput_9_in);

				java.sql.Statement stmt_tAmazonAuroraInput_9_in = conn_tAmazonAuroraInput_9_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_9_in = "select orionConnectFirmId , orionEclipseFirmName from firm";

				globalMap.put("tAmazonAuroraInput_9_QUERY",
						dbquery_tAmazonAuroraInput_9_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_9_in = null;
				try {
					rs_tAmazonAuroraInput_9_in = stmt_tAmazonAuroraInput_9_in
							.executeQuery(dbquery_tAmazonAuroraInput_9_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_9_in = rs_tAmazonAuroraInput_9_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_9_in = rsmd_tAmazonAuroraInput_9_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_9_in = null;

					while (rs_tAmazonAuroraInput_9_in.next()) {
						nb_line_tAmazonAuroraInput_9_in++;

						if (colQtyInRs_tAmazonAuroraInput_9_in < 1) {
							row_tAmazonAuroraInput_9_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_9_in.getObject(1) != null) {
								row_tAmazonAuroraInput_9_in.orionConnectFirmId = rs_tAmazonAuroraInput_9_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_9_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_9_in < 2) {
							row_tAmazonAuroraInput_9_in.orionEclipseFirmName = null;
						} else {

							row_tAmazonAuroraInput_9_in.orionEclipseFirmName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_9_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_9_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_9_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_9";

						currentComponent = "tAmazonAuroraInput_9_in";

						tos_count_tAmazonAuroraInput_9_in++;

						/**
						 * [tAmazonAuroraInput_9_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_9_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_9";

						currentComponent = "tAmazonAuroraInput_9_out";

						row12 = row_tAmazonAuroraInput_9_in;

						tos_count_tAmazonAuroraInput_9_out++;

						/**
						 * [tAmazonAuroraInput_9_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row12 main ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						row12Struct row12_HashRow = new row12Struct();

						row12_HashRow.orionConnectFirmId = row12.orionConnectFirmId;

						row12_HashRow.orionEclipseFirmName = row12.orionEclipseFirmName;

						tHash_Lookup_row12.put(row12_HashRow);

						tos_count_tAdvancedHash_row12++;

						/**
						 * [tAdvancedHash_row12 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_9_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_9";

						currentComponent = "tAmazonAuroraInput_9_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_9_in != null) {
						rs_tAmazonAuroraInput_9_in.close();
					}
					stmt_tAmazonAuroraInput_9_in.close();
					if (conn_tAmazonAuroraInput_9_in != null
							&& !conn_tAmazonAuroraInput_9_in.isClosed()) {

						conn_tAmazonAuroraInput_9_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_9_NB_LINE",
						nb_line_tAmazonAuroraInput_9_in);

				ok_Hash.put("tAmazonAuroraInput_9_in", true);
				end_Hash.put("tAmazonAuroraInput_9_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_9_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_9_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_9";

				currentComponent = "tAmazonAuroraInput_9_out";

				ok_Hash.put("tAmazonAuroraInput_9_out", true);
				end_Hash.put("tAmazonAuroraInput_9_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_9_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row12 end ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				tHash_Lookup_row12.endPut();

				ok_Hash.put("tAdvancedHash_row12", true);
				end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_9_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_9";

				currentComponent = "tAmazonAuroraInput_9_in";

				/**
				 * [tAmazonAuroraInput_9_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_9_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_9";

				currentComponent = "tAmazonAuroraInput_9_out";

				/**
				 * [tAmazonAuroraInput_9_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row12 finally ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				/**
				 * [tAdvancedHash_row12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_9_in_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableComparableLookupRow<row14Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Code;

		public String getCode() {
			return this.Code;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OrionFirmId == null) ? 0 : this.OrionFirmId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.OrionFirmId == null) {
				if (other.OrionFirmId != null)
					return false;

			} else if (!this.OrionFirmId.equals(other.OrionFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.OrionFirmId = this.OrionFirmId;
			other.ExternalId = this.ExternalId;
			other.Name = this.Name;
			other.Code = this.Code;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.OrionFirmId = this.OrionFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ExternalId = readInteger(dis, ois);

				this.Name = readString(dis, ois);

				this.Code = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.ExternalId, dos, oos);

				writeString(this.Name, dos, oos);

				writeString(this.Code, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Name=" + Name);
			sb.append(",Code=" + Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OrionFirmId,
					other.OrionFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_10_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_10_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Code;

		public String getCode() {
			return this.Code;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Name = readString(dis);

					this.Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Name=" + Name);
			sb.append(",Code=" + Code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_10_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_10_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_10_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_10_inStruct row_tAmazonAuroraInput_10_in = new row_tAmazonAuroraInput_10_inStruct();
				row_tAmazonAuroraInput_10_inStruct row14 = row_tAmazonAuroraInput_10_in;

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row14";

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tAmazonAuroraInput_10_out -
				// inputs:(row_tAmazonAuroraInput_10_in) outputs:(row14,row14) |
				// target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
				// linked node: tMap_10 - inputs:(copyOfmainout_0,row14)
				// outputs:(custodian_firm_output)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14Struct> getLookup(matchingModeEnum_row14);

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_10_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_10_out", false);
				start_Hash.put("tAmazonAuroraInput_10_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_10";

				currentComponent = "tAmazonAuroraInput_10_out";

				int tos_count_tAmazonAuroraInput_10_out = 0;

				/**
				 * [tAmazonAuroraInput_10_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_10_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_10_in", false);
				start_Hash.put("tAmazonAuroraInput_10_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_10";

				currentComponent = "tAmazonAuroraInput_10_in";

				int tos_count_tAmazonAuroraInput_10_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_10_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_10_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_10_in = calendar_tAmazonAuroraInput_10_in
						.getTime();
				int nb_line_tAmazonAuroraInput_10_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_10_in = null;
				String driverClass_tAmazonAuroraInput_10_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_10_in);
				String dbUser_tAmazonAuroraInput_10_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_10_in = context.password;

				String dbPwd_tAmazonAuroraInput_10_in = decryptedPassword_tAmazonAuroraInput_10_in;

				String url_tAmazonAuroraInput_10_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_10_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_10_in,
								dbUser_tAmazonAuroraInput_10_in,
								dbPwd_tAmazonAuroraInput_10_in);

				java.sql.Statement stmt_tAmazonAuroraInput_10_in = conn_tAmazonAuroraInput_10_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_10_in = "select  * from custodian_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_10_QUERY",
						dbquery_tAmazonAuroraInput_10_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_10_in = null;
				try {
					rs_tAmazonAuroraInput_10_in = stmt_tAmazonAuroraInput_10_in
							.executeQuery(dbquery_tAmazonAuroraInput_10_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_10_in = rs_tAmazonAuroraInput_10_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_10_in = rsmd_tAmazonAuroraInput_10_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_10_in = null;

					while (rs_tAmazonAuroraInput_10_in.next()) {
						nb_line_tAmazonAuroraInput_10_in++;

						if (colQtyInRs_tAmazonAuroraInput_10_in < 1) {
							row_tAmazonAuroraInput_10_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_10_in.getObject(1) != null) {
								row_tAmazonAuroraInput_10_in.OrionFirmId = rs_tAmazonAuroraInput_10_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_10_in.OrionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_10_in < 2) {
							row_tAmazonAuroraInput_10_in.ExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_10_in.getObject(2) != null) {
								row_tAmazonAuroraInput_10_in.ExternalId = rs_tAmazonAuroraInput_10_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_10_in.ExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_10_in < 3) {
							row_tAmazonAuroraInput_10_in.Name = null;
						} else {

							row_tAmazonAuroraInput_10_in.Name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_10_in, 3,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_10_in < 4) {
							row_tAmazonAuroraInput_10_in.Code = null;
						} else {

							row_tAmazonAuroraInput_10_in.Code = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_10_in, 4,
											false);
						}

						/**
						 * [tAmazonAuroraInput_10_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_10_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_10";

						currentComponent = "tAmazonAuroraInput_10_in";

						tos_count_tAmazonAuroraInput_10_in++;

						/**
						 * [tAmazonAuroraInput_10_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_10_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_10";

						currentComponent = "tAmazonAuroraInput_10_out";

						row14 = row_tAmazonAuroraInput_10_in;

						tos_count_tAmazonAuroraInput_10_out++;

						/**
						 * [tAmazonAuroraInput_10_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row14 main ] start
						 */

						currentComponent = "tAdvancedHash_row14";

						row14Struct row14_HashRow = new row14Struct();

						row14_HashRow.OrionFirmId = row14.OrionFirmId;

						row14_HashRow.ExternalId = row14.ExternalId;

						row14_HashRow.Name = row14.Name;

						row14_HashRow.Code = row14.Code;

						tHash_Lookup_row14.put(row14_HashRow);

						tos_count_tAdvancedHash_row14++;

						/**
						 * [tAdvancedHash_row14 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_10_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_10";

						currentComponent = "tAmazonAuroraInput_10_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_10_in != null) {
						rs_tAmazonAuroraInput_10_in.close();
					}
					stmt_tAmazonAuroraInput_10_in.close();
					if (conn_tAmazonAuroraInput_10_in != null
							&& !conn_tAmazonAuroraInput_10_in.isClosed()) {

						conn_tAmazonAuroraInput_10_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_10_NB_LINE",
						nb_line_tAmazonAuroraInput_10_in);

				ok_Hash.put("tAmazonAuroraInput_10_in", true);
				end_Hash.put("tAmazonAuroraInput_10_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_10_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_10_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_10";

				currentComponent = "tAmazonAuroraInput_10_out";

				ok_Hash.put("tAmazonAuroraInput_10_out", true);
				end_Hash.put("tAmazonAuroraInput_10_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_10_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_10_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_10";

				currentComponent = "tAmazonAuroraInput_10_in";

				/**
				 * [tAmazonAuroraInput_10_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_10_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_10";

				currentComponent = "tAmazonAuroraInput_10_out";

				/**
				 * [tAmazonAuroraInput_10_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row14 finally ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				/**
				 * [tAdvancedHash_row14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_10_in_SUBPROCESS_STATE", 1);
	}

	public static class row38Struct implements
			routines.system.IPersistableRow<row38Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOffirm_connection_1Struct implements
			routines.system.IPersistableRow<copyOffirm_connection_1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOffirm_connection_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row37Struct implements
			routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_25_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_25_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_25_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_25Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_25Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_25_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_25_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_14Process(globalMap);

				row_tAmazonAuroraInput_25_inStruct row_tAmazonAuroraInput_25_in = new row_tAmazonAuroraInput_25_inStruct();
				row_tAmazonAuroraInput_25_inStruct row37 = row_tAmazonAuroraInput_25_in;
				copyOffirm_connection_1Struct copyOffirm_connection_1 = new copyOffirm_connection_1Struct();
				row38Struct row38 = new row38Struct();

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJavaRow_15 begin ] start
				 */

				ok_Hash.put("tJavaRow_15", false);
				start_Hash.put("tJavaRow_15", System.currentTimeMillis());

				currentComponent = "tJavaRow_15";

				int tos_count_tJavaRow_15 = 0;

				int nb_line_tJavaRow_15 = 0;

				/**
				 * [tJavaRow_15 begin ] stop
				 */

				/**
				 * [tMap_25 begin ] start
				 */

				ok_Hash.put("tMap_25", false);
				start_Hash.put("tMap_25", System.currentTimeMillis());

				currentComponent = "tMap_25";

				int tos_count_tMap_25 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) globalMap
						.get("tHash_Lookup_row36"));

				row36Struct row36HashKey = new row36Struct();
				row36Struct row36Default = new row36Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_25__Struct {
				}
				Var__tMap_25__Struct Var__tMap_25 = new Var__tMap_25__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOffirm_connection_1Struct copyOffirm_connection_1_tmp = new copyOffirm_connection_1Struct();
				// ###############################

				/**
				 * [tMap_25 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_25_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_25_out", false);
				start_Hash.put("tAmazonAuroraInput_25_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_25";

				currentComponent = "tAmazonAuroraInput_25_out";

				int tos_count_tAmazonAuroraInput_25_out = 0;

				/**
				 * [tAmazonAuroraInput_25_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_25_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_25_in", false);
				start_Hash.put("tAmazonAuroraInput_25_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_25";

				currentComponent = "tAmazonAuroraInput_25_in";

				int tos_count_tAmazonAuroraInput_25_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_25_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_25_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_25_in = calendar_tAmazonAuroraInput_25_in
						.getTime();
				int nb_line_tAmazonAuroraInput_25_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_25_in = null;
				String driverClass_tAmazonAuroraInput_25_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_25_in);
				String dbUser_tAmazonAuroraInput_25_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_25_in = context.password;

				String dbPwd_tAmazonAuroraInput_25_in = decryptedPassword_tAmazonAuroraInput_25_in;

				String url_tAmazonAuroraInput_25_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_25_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_25_in,
								dbUser_tAmazonAuroraInput_25_in,
								dbPwd_tAmazonAuroraInput_25_in);

				java.sql.Statement stmt_tAmazonAuroraInput_25_in = conn_tAmazonAuroraInput_25_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_25_in = "SELECT `name` , `server` , `database` FROM `orionEclipseFirm`";

				globalMap.put("tAmazonAuroraInput_25_QUERY",
						dbquery_tAmazonAuroraInput_25_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_25_in = null;
				try {
					rs_tAmazonAuroraInput_25_in = stmt_tAmazonAuroraInput_25_in
							.executeQuery(dbquery_tAmazonAuroraInput_25_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_25_in = rs_tAmazonAuroraInput_25_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_25_in = rsmd_tAmazonAuroraInput_25_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_25_in = null;

					while (rs_tAmazonAuroraInput_25_in.next()) {
						nb_line_tAmazonAuroraInput_25_in++;

						if (colQtyInRs_tAmazonAuroraInput_25_in < 1) {
							row_tAmazonAuroraInput_25_in.name = null;
						} else {

							row_tAmazonAuroraInput_25_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_25_in, 1,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_25_in < 2) {
							row_tAmazonAuroraInput_25_in.server = null;
						} else {

							row_tAmazonAuroraInput_25_in.server = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_25_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_25_in < 3) {
							row_tAmazonAuroraInput_25_in.database = null;
						} else {

							row_tAmazonAuroraInput_25_in.database = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_25_in, 3,
											false);
						}

						/**
						 * [tAmazonAuroraInput_25_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_25_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_25";

						currentComponent = "tAmazonAuroraInput_25_in";

						tos_count_tAmazonAuroraInput_25_in++;

						/**
						 * [tAmazonAuroraInput_25_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_25_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_25";

						currentComponent = "tAmazonAuroraInput_25_out";

						row37 = row_tAmazonAuroraInput_25_in;

						tos_count_tAmazonAuroraInput_25_out++;

						/**
						 * [tAmazonAuroraInput_25_out main ] stop
						 */

						/**
						 * [tMap_25 main ] start
						 */

						currentComponent = "tMap_25";

						boolean hasCasePrimitiveKeyWithNull_tMap_25 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_25 = false;
						boolean mainRowRejected_tMap_25 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row36"
						// /////////////////////////////////////////////

						boolean forceLooprow36 = false;

						row36Struct row36ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_25) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_25 = false;

							row36HashKey.firm = row37.name;

							row36HashKey.hashCodeDirty = true;

							tHash_Lookup_row36.lookup(row36HashKey);

							if (!tHash_Lookup_row36.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_25 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row36 != null
								&& tHash_Lookup_row36.getCount(row36HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row36' and it contains more one result from keys :  row36.firm = '"
							// + row36HashKey.firm + "'");
						} // G 071

						row36Struct row36 = null;

						row36Struct fromLookup_row36 = null;
						row36 = row36Default;

						if (tHash_Lookup_row36 != null
								&& tHash_Lookup_row36.hasNext()) { // G 099

							fromLookup_row36 = tHash_Lookup_row36.next();

						} // G 099

						if (fromLookup_row36 != null) {
							row36 = fromLookup_row36;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_25__Struct Var = Var__tMap_25;// ###############################
							// ###############################
							// # Output tables

							copyOffirm_connection_1 = null;

							if (!rejectedInnerJoin_tMap_25) {

								// # Output table : 'copyOffirm_connection_1'
								copyOffirm_connection_1_tmp.server = row37.server;
								copyOffirm_connection_1_tmp.database = row37.database;
								copyOffirm_connection_1 = copyOffirm_connection_1_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_25 = false;

						tos_count_tMap_25++;

						/**
						 * [tMap_25 main ] stop
						 */
						// Start of branch "copyOffirm_connection_1"
						if (copyOffirm_connection_1 != null) {

							/**
							 * [tJavaRow_15 main ] start
							 */

							currentComponent = "tJavaRow_15";

							context.serverIp = copyOffirm_connection_1.server;
							context.database = copyOffirm_connection_1.database;

							nb_line_tJavaRow_15++;

							tos_count_tJavaRow_15++;

							/**
							 * [tJavaRow_15 main ] stop
							 */

							/**
							 * [tJava_4 main ] start
							 */

							currentComponent = "tJava_4";

							tos_count_tJava_4++;

							/**
							 * [tJava_4 main ] stop
							 */

						} // End of branch "copyOffirm_connection_1"

						/**
						 * [tAmazonAuroraInput_25_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_25";

						currentComponent = "tAmazonAuroraInput_25_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_25_in != null) {
						rs_tAmazonAuroraInput_25_in.close();
					}
					stmt_tAmazonAuroraInput_25_in.close();
					if (conn_tAmazonAuroraInput_25_in != null
							&& !conn_tAmazonAuroraInput_25_in.isClosed()) {

						conn_tAmazonAuroraInput_25_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_25_NB_LINE",
						nb_line_tAmazonAuroraInput_25_in);

				ok_Hash.put("tAmazonAuroraInput_25_in", true);
				end_Hash.put("tAmazonAuroraInput_25_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_25_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_25_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_25";

				currentComponent = "tAmazonAuroraInput_25_out";

				ok_Hash.put("tAmazonAuroraInput_25_out", true);
				end_Hash.put("tAmazonAuroraInput_25_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_25_out end ] stop
				 */

				/**
				 * [tMap_25 end ] start
				 */

				currentComponent = "tMap_25";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row36 != null) {
					tHash_Lookup_row36.endGet();
				}
				globalMap.remove("tHash_Lookup_row36");

				// ###############################

				ok_Hash.put("tMap_25", true);
				end_Hash.put("tMap_25", System.currentTimeMillis());

				/**
				 * [tMap_25 end ] stop
				 */

				/**
				 * [tJavaRow_15 end ] start
				 */

				currentComponent = "tJavaRow_15";

				globalMap.put("tJavaRow_15_NB_LINE", nb_line_tJavaRow_15);

				ok_Hash.put("tJavaRow_15", true);
				end_Hash.put("tJavaRow_15", System.currentTimeMillis());

				tAmazonAuroraInput_12_inProcess(globalMap);

				/**
				 * [tJavaRow_15 end ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_25"
			globalMap.remove("tHash_Lookup_row36");

			try {

				/**
				 * [tAmazonAuroraInput_25_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_25";

				currentComponent = "tAmazonAuroraInput_25_in";

				/**
				 * [tAmazonAuroraInput_25_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_25_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_25";

				currentComponent = "tAmazonAuroraInput_25_out";

				/**
				 * [tAmazonAuroraInput_25_out finally ] stop
				 */

				/**
				 * [tMap_25 finally ] start
				 */

				currentComponent = "tMap_25";

				/**
				 * [tMap_25 finally ] stop
				 */

				/**
				 * [tJavaRow_15 finally ] start
				 */

				currentComponent = "tJavaRow_15";

				/**
				 * [tJavaRow_15 finally ] stop
				 */

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_25_in_SUBPROCESS_STATE", 1);
	}

	public static class out2Struct implements
			routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountName;

		public String getAccountName() {
			return this.AccountName;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public Integer HouseholdId;

		public Integer getHouseholdId() {
			return this.HouseholdId;
		}

		public String HouseholdName;

		public String getHouseholdName() {
			return this.HouseholdName;
		}

		public String AccountType;

		public String getAccountType() {
			return this.AccountType;
		}

		public Byte Taxable;

		public Byte getTaxable() {
			return this.Taxable;
		}

		public Float AccountYTDRealizedSTGL;

		public Float getAccountYTDRealizedSTGL() {
			return this.AccountYTDRealizedSTGL;
		}

		public Float AccountYTDRealizedLTGL;

		public Float getAccountYTDRealizedLTGL() {
			return this.AccountYTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String SweepSymbol;

		public String getSweepSymbol() {
			return this.SweepSymbol;
		}

		public String Custodian;

		public String getCustodian() {
			return this.Custodian;
		}

		public String CustodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.CustodialAccountNumber;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		public Integer AdvisorExternalId;

		public Integer getAdvisorExternalId() {
			return this.AdvisorExternalId;
		}

		public String SleeveType;

		public String getSleeveType() {
			return this.SleeveType;
		}

		public Float SleeveTarget;

		public Float getSleeveTarget() {
			return this.SleeveTarget;
		}

		public Float SleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.SleeveContributionPercent;
		}

		public Float SleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.SleeveDistributionPercent;
		}

		public Float SleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.SleeveToleranceLower;
		}

		public Float SleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.SleeveToleranceUpper;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public String SystematicAmount;

		public String getSystematicAmount() {
			return this.SystematicAmount;
		}

		public java.util.Date SystematicDate;

		public java.util.Date getSystematicDate() {
			return this.SystematicDate;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					this.AccountName = readString(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.HouseholdId = readInteger(dis);

					this.HouseholdName = readString(dis);

					this.AccountType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taxable = null;
					} else {
						this.Taxable = dis.readByte();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedSTGL = null;
					} else {
						this.AccountYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedLTGL = null;
					} else {
						this.AccountYTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.SweepSymbol = readString(dis);

					this.Custodian = readString(dis);

					this.CustodialAccountNumber = readString(dis);

					this.AdvisorName = readString(dis);

					this.AdvisorExternalId = readInteger(dis);

					this.SleeveType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SleeveTarget = null;
					} else {
						this.SleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveContributionPercent = null;
					} else {
						this.SleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveDistributionPercent = null;
					} else {
						this.SleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceLower = null;
					} else {
						this.SleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceUpper = null;
					} else {
						this.SleeveToleranceUpper = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					this.SystematicAmount = readString(dis);

					this.SystematicDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountName, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// Integer

				writeInteger(this.HouseholdId, dos);

				// String

				writeString(this.HouseholdName, dos);

				// String

				writeString(this.AccountType, dos);

				// Byte

				if (this.Taxable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeByte(this.Taxable);
				}

				// Float

				if (this.AccountYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedSTGL);
				}

				// Float

				if (this.AccountYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.SweepSymbol, dos);

				// String

				writeString(this.Custodian, dos);

				// String

				writeString(this.CustodialAccountNumber, dos);

				// String

				writeString(this.AdvisorName, dos);

				// Integer

				writeInteger(this.AdvisorExternalId, dos);

				// String

				writeString(this.SleeveType, dos);

				// Float

				if (this.SleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveTarget);
				}

				// Float

				if (this.SleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveContributionPercent);
				}

				// Float

				if (this.SleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveDistributionPercent);
				}

				// Float

				if (this.SleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceLower);
				}

				// Float

				if (this.SleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceUpper);
				}

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// String

				writeString(this.SystematicAmount, dos);

				// java.util.Date

				writeDate(this.SystematicDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountName=" + AccountName);
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",HouseholdId=" + String.valueOf(HouseholdId));
			sb.append(",HouseholdName=" + HouseholdName);
			sb.append(",AccountType=" + AccountType);
			sb.append(",Taxable=" + String.valueOf(Taxable));
			sb.append(",AccountYTDRealizedSTGL="
					+ String.valueOf(AccountYTDRealizedSTGL));
			sb.append(",AccountYTDRealizedLTGL="
					+ String.valueOf(AccountYTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",SweepSymbol=" + SweepSymbol);
			sb.append(",Custodian=" + Custodian);
			sb.append(",CustodialAccountNumber=" + CustodialAccountNumber);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append(",AdvisorExternalId=" + String.valueOf(AdvisorExternalId));
			sb.append(",SleeveType=" + SleeveType);
			sb.append(",SleeveTarget=" + String.valueOf(SleeveTarget));
			sb.append(",SleeveContributionPercent="
					+ String.valueOf(SleeveContributionPercent));
			sb.append(",SleeveDistributionPercent="
					+ String.valueOf(SleeveDistributionPercent));
			sb.append(",SleeveToleranceLower="
					+ String.valueOf(SleeveToleranceLower));
			sb.append(",SleeveToleranceUpper="
					+ String.valueOf(SleeveToleranceUpper));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",SystematicAmount=" + SystematicAmount);
			sb.append(",SystematicDate=" + String.valueOf(SystematicDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfmainoutStruct implements
			routines.system.IPersistableRow<copyOfcopyOfmainoutStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfmainoutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfsStruct implements
			routines.system.IPersistableRow<copyOfcopyOfsStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_12_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_12_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_12_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_12Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_12Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_12_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_12_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_6Process(globalMap);
				tAmazonAuroraInput_13_inProcess(globalMap);
				tAmazonAuroraInput_11_inProcess(globalMap);

				row_tAmazonAuroraInput_12_inStruct row_tAmazonAuroraInput_12_in = new row_tAmazonAuroraInput_12_inStruct();
				row_tAmazonAuroraInput_12_inStruct row20 = row_tAmazonAuroraInput_12_in;
				copyOfcopyOfsStruct copyOfcopyOfs = new copyOfcopyOfsStruct();
				copyOfcopyOfmainoutStruct copyOfcopyOfmainout = new copyOfcopyOfmainoutStruct();
				out2Struct out2 = new out2Struct();

				/**
				 * [tAmazonMysqlOutput_4 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_4", false);
				start_Hash.put("tAmazonMysqlOutput_4",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_4";

				int tos_count_tAmazonMysqlOutput_4 = 0;

				int nb_line_tAmazonMysqlOutput_4 = 0;
				int nb_line_update_tAmazonMysqlOutput_4 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_4 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_4 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_4 = 0;

				int deletedCount_tAmazonMysqlOutput_4 = 0;
				int updatedCount_tAmazonMysqlOutput_4 = 0;
				int insertedCount_tAmazonMysqlOutput_4 = 0;

				int rejectedCount_tAmazonMysqlOutput_4 = 0;

				String tableName_tAmazonMysqlOutput_4 = "reject_Account";
				boolean whetherReject_tAmazonMysqlOutput_4 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_4 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_4 = calendar_tAmazonMysqlOutput_4
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_4 = calendar_tAmazonMysqlOutput_4
						.getTime().getTime();
				long date_tAmazonMysqlOutput_4;

				java.sql.Connection conn_tAmazonMysqlOutput_4 = null;
				String dbProperties_tAmazonMysqlOutput_4 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_4 = null;
				if (dbProperties_tAmazonMysqlOutput_4 == null
						|| dbProperties_tAmazonMysqlOutput_4.trim().length() == 0) {
					url_tAmazonMysqlOutput_4 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_4 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_4
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_4 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_4 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_4;
				}
				String dbUser_tAmazonMysqlOutput_4 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_4 = context.password;

				String dbPwd_tAmazonMysqlOutput_4 = decryptedPassword_tAmazonMysqlOutput_4;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_4 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_4,
								dbUser_tAmazonMysqlOutput_4,
								dbPwd_tAmazonMysqlOutput_4);

				resourceMap.put("conn_tAmazonMysqlOutput_4",
						conn_tAmazonMysqlOutput_4);

				conn_tAmazonMysqlOutput_4.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_4 = 1000000;
				int commitCounter_tAmazonMysqlOutput_4 = 0;

				int count_tAmazonMysqlOutput_4 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_4 = conn_tAmazonMysqlOutput_4
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_4 = dbMetaData_tAmazonMysqlOutput_4
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_4 = false;
				while (rsTable_tAmazonMysqlOutput_4.next()) {
					String table_tAmazonMysqlOutput_4 = rsTable_tAmazonMysqlOutput_4
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_4
							.equalsIgnoreCase("reject_Account")) {
						whetherExist_tAmazonMysqlOutput_4 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_4.close();
				if (!whetherExist_tAmazonMysqlOutput_4) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_4 = conn_tAmazonMysqlOutput_4
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_4
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_4
									+ "`(`OrionFirmId` INT(10)  ,`ExternalId` INT(10)  ,`AccountId` VARCHAR(50)  ,`AccountNumber` VARCHAR(50)  ,`AccountName` VARCHAR(255)  ,`PortfolioId` VARCHAR(50)  ,`PortfolioName` VARCHAR(50)  ,`HouseholdId` INT(10)  ,`HouseholdName` VARCHAR(50)  ,`AccountType` VARCHAR(20)  ,`Taxable` TINYINT(3)  ,`AccountYTDRealizedSTGL` FLOAT(10,2)  ,`AccountYTDRealizedLTGL` FLOAT(10,2)  ,`SSN` VARCHAR(255)  ,`SweepSymbol` VARCHAR(255)  ,`Custodian` VARCHAR(255)  ,`CustodialAccountNumber` VARCHAR(255)  ,`AdvisorName` VARCHAR(255)  ,`AdvisorExternalId` INT(10)  ,`SleeveType` VARCHAR(50)  ,`SleeveTarget` FLOAT(12,0)  ,`SleeveContributionPercent` FLOAT(12,0)  ,`SleeveDistributionPercent` FLOAT(12,0)  ,`SleeveToleranceLower` FLOAT(12,0)  ,`SleeveToleranceUpper` FLOAT(12,0)  ,`SMA` BIT(0)  ,`SMATradeable` VARCHAR(255)  ,`BillingAccount` VARCHAR(255)  ,`SystematicAmount` VARCHAR(255)  ,`SystematicDate` DATETIME )");
					stmtCreate_tAmazonMysqlOutput_4.close();
				}

				String insert_tAmazonMysqlOutput_4 = "INSERT INTO `"
						+ "reject_Account"
						+ "` (`OrionFirmId`,`ExternalId`,`AccountId`,`AccountNumber`,`AccountName`,`PortfolioId`,`PortfolioName`,`HouseholdId`,`HouseholdName`,`AccountType`,`Taxable`,`AccountYTDRealizedSTGL`,`AccountYTDRealizedLTGL`,`SSN`,`SweepSymbol`,`Custodian`,`CustodialAccountNumber`,`AdvisorName`,`AdvisorExternalId`,`SleeveType`,`SleeveTarget`,`SleeveContributionPercent`,`SleeveDistributionPercent`,`SleeveToleranceLower`,`SleeveToleranceUpper`,`SMA`,`SMATradeable`,`BillingAccount`,`SystematicAmount`,`SystematicDate`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonMysqlOutput_4 = 100;
				int batchSizeCounter_tAmazonMysqlOutput_4 = 0;

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_4 = conn_tAmazonMysqlOutput_4
						.prepareStatement(insert_tAmazonMysqlOutput_4);

				/**
				 * [tAmazonMysqlOutput_4 begin ] stop
				 */

				/**
				 * [tMap_13 begin ] start
				 */

				ok_Hash.put("tMap_13", false);
				start_Hash.put("tMap_13", System.currentTimeMillis());

				currentComponent = "tMap_13";

				int tos_count_tMap_13 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) globalMap
						.get("tHash_Lookup_row16"));

				row16Struct row16HashKey = new row16Struct();
				row16Struct row16Default = new row16Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_13__Struct {
				}
				Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out2Struct out2_tmp = new out2Struct();
				// ###############################

				/**
				 * [tMap_13 begin ] stop
				 */

				/**
				 * [tMap_12 begin ] start
				 */

				ok_Hash.put("tMap_12", false);
				start_Hash.put("tMap_12", System.currentTimeMillis());

				currentComponent = "tMap_12";

				int tos_count_tMap_12 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) globalMap
						.get("tHash_Lookup_row22"));

				row22Struct row22HashKey = new row22Struct();
				row22Struct row22Default = new row22Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_12__Struct {
				}
				Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfcopyOfmainoutStruct copyOfcopyOfmainout_tmp = new copyOfcopyOfmainoutStruct();
				// ###############################

				/**
				 * [tMap_12 begin ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());

				currentComponent = "tMap_11";

				int tos_count_tMap_11 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) globalMap
						.get("tHash_Lookup_row21"));

				row21Struct row21HashKey = new row21Struct();
				row21Struct row21Default = new row21Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfcopyOfsStruct copyOfcopyOfs_tmp = new copyOfcopyOfsStruct();
				// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_12_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_12_out", false);
				start_Hash.put("tAmazonAuroraInput_12_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_12";

				currentComponent = "tAmazonAuroraInput_12_out";

				int tos_count_tAmazonAuroraInput_12_out = 0;

				/**
				 * [tAmazonAuroraInput_12_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_12_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_12_in", false);
				start_Hash.put("tAmazonAuroraInput_12_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_12";

				currentComponent = "tAmazonAuroraInput_12_in";

				int tos_count_tAmazonAuroraInput_12_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_12_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_12_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_12_in = calendar_tAmazonAuroraInput_12_in
						.getTime();
				int nb_line_tAmazonAuroraInput_12_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_12_in = null;
				String driverClass_tAmazonAuroraInput_12_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_12_in);
				String dbUser_tAmazonAuroraInput_12_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_12_in = context.password;

				String dbPwd_tAmazonAuroraInput_12_in = decryptedPassword_tAmazonAuroraInput_12_in;

				String url_tAmazonAuroraInput_12_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_12_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_12_in,
								dbUser_tAmazonAuroraInput_12_in,
								dbPwd_tAmazonAuroraInput_12_in);

				java.sql.Statement stmt_tAmazonAuroraInput_12_in = conn_tAmazonAuroraInput_12_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_12_in = "select distinct OrionFirmId from account_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_12_QUERY",
						dbquery_tAmazonAuroraInput_12_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_12_in = null;
				try {
					rs_tAmazonAuroraInput_12_in = stmt_tAmazonAuroraInput_12_in
							.executeQuery(dbquery_tAmazonAuroraInput_12_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_12_in = rs_tAmazonAuroraInput_12_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_12_in = rsmd_tAmazonAuroraInput_12_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_12_in = null;

					while (rs_tAmazonAuroraInput_12_in.next()) {
						nb_line_tAmazonAuroraInput_12_in++;

						if (colQtyInRs_tAmazonAuroraInput_12_in < 1) {
							row_tAmazonAuroraInput_12_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_12_in.getObject(1) != null) {
								row_tAmazonAuroraInput_12_in.OrionFirmId = rs_tAmazonAuroraInput_12_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_12_in.OrionFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_12_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_12_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_12";

						currentComponent = "tAmazonAuroraInput_12_in";

						tos_count_tAmazonAuroraInput_12_in++;

						/**
						 * [tAmazonAuroraInput_12_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_12_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_12";

						currentComponent = "tAmazonAuroraInput_12_out";

						row20 = row_tAmazonAuroraInput_12_in;

						tos_count_tAmazonAuroraInput_12_out++;

						/**
						 * [tAmazonAuroraInput_12_out main ] stop
						 */

						/**
						 * [tMap_11 main ] start
						 */

						currentComponent = "tMap_11";

						boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_11 = false;
						boolean mainRowRejected_tMap_11 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row21"
						// /////////////////////////////////////////////

						boolean forceLooprow21 = false;

						row21Struct row21ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_11) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_11 = false;

							row21HashKey.orionConnectFirmId = row20.OrionFirmId;

							row21HashKey.hashCodeDirty = true;

							tHash_Lookup_row21.lookup(row21HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row21 != null
								&& tHash_Lookup_row21.getCount(row21HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row21' and it contains more one result from keys :  row21.orionConnectFirmId = '"
							// + row21HashKey.orionConnectFirmId + "'");
						} // G 071

						row21Struct row21 = null;

						row21Struct fromLookup_row21 = null;
						row21 = row21Default;

						if (tHash_Lookup_row21 != null
								&& tHash_Lookup_row21.hasNext()) { // G 099

							fromLookup_row21 = tHash_Lookup_row21.next();

						} // G 099

						if (fromLookup_row21 != null) {
							row21 = fromLookup_row21;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
							// ###############################
							// # Output tables

							copyOfcopyOfs = null;

							// # Output table : 'copyOfcopyOfs'
							copyOfcopyOfs_tmp.OrionFirmId = row20.OrionFirmId;
							copyOfcopyOfs_tmp.orionEclipseFirmName = row21.orionEclipseFirmName;
							copyOfcopyOfs = copyOfcopyOfs_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_11 = false;

						tos_count_tMap_11++;

						/**
						 * [tMap_11 main ] stop
						 */
						// Start of branch "copyOfcopyOfs"
						if (copyOfcopyOfs != null) {

							/**
							 * [tMap_12 main ] start
							 */

							currentComponent = "tMap_12";

							boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_12 = false;
							boolean mainRowRejected_tMap_12 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row22"
							// /////////////////////////////////////////////

							boolean forceLooprow22 = false;

							row22Struct row22ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_12) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_12 = false;

								row22HashKey.firm = copyOfcopyOfs.orionEclipseFirmName;

								row22HashKey.hashCodeDirty = true;

								tHash_Lookup_row22.lookup(row22HashKey);

								if (!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_12 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row22 != null
									&& tHash_Lookup_row22
											.getCount(row22HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row22' and it contains more one result from keys :  row22.firm = '"
								// + row22HashKey.firm + "'");
							} // G 071

							row22Struct row22 = null;

							row22Struct fromLookup_row22 = null;
							row22 = row22Default;

							if (tHash_Lookup_row22 != null
									&& tHash_Lookup_row22.hasNext()) { // G 099

								fromLookup_row22 = tHash_Lookup_row22.next();

							} // G 099

							if (fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfmainout = null;

								if (!rejectedInnerJoin_tMap_12) {
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'copyOfcopyOfmainout'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_12) {
									copyOfcopyOfmainout_tmp.firm = copyOfcopyOfs.OrionFirmId;
									copyOfcopyOfmainout = copyOfcopyOfmainout_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_12 = false;

							tos_count_tMap_12++;

							/**
							 * [tMap_12 main ] stop
							 */
							// Start of branch "copyOfcopyOfmainout"
							if (copyOfcopyOfmainout != null) {

								/**
								 * [tMap_13 main ] start
								 */

								currentComponent = "tMap_13";

								boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_13 = false;
								boolean mainRowRejected_tMap_13 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row16"
								// /////////////////////////////////////////////

								boolean forceLooprow16 = false;

								row16Struct row16ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_13) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_13 = false;

									row16HashKey.OrionFirmId = copyOfcopyOfmainout.firm;

									row16HashKey.hashCodeDirty = true;

									tHash_Lookup_row16.lookup(row16HashKey);

									if (!tHash_Lookup_row16.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_13 = true;

										forceLooprow16 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow16 = true;
								} // G 21

								row16Struct row16 = null;

								while ((tHash_Lookup_row16 != null && tHash_Lookup_row16
										.hasNext()) || forceLooprow16) { // G_TM_M_043

									// CALL close loop of lookup 'row16'

									row16Struct fromLookup_row16 = null;
									row16 = row16Default;

									if (!forceLooprow16) { // G 46

										fromLookup_row16 = tHash_Lookup_row16
												.next();

										if (fromLookup_row16 != null) {
											row16 = fromLookup_row16;
										}

									} // G 46

									forceLooprow16 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
										// ###############################
										// # Output tables

										out2 = null;

										if (!rejectedInnerJoin_tMap_13) {

											// # Output table : 'out2'
											out2_tmp.OrionFirmId = row16.OrionFirmId;
											out2_tmp.ExternalId = row16.ExternalId;
											out2_tmp.AccountId = row16.AccountId;
											out2_tmp.AccountNumber = row16.AccountNumber;
											out2_tmp.AccountName = row16.AccountName;
											out2_tmp.PortfolioId = row16.PortfolioId;
											out2_tmp.PortfolioName = row16.PortfolioName;
											out2_tmp.HouseholdId = row16.HouseholdId;
											out2_tmp.HouseholdName = row16.HouseholdName;
											out2_tmp.AccountType = row16.AccountType;
											out2_tmp.Taxable = row16.Taxable;
											out2_tmp.AccountYTDRealizedSTGL = row16.AccountYTDRealizedSTGL;
											out2_tmp.AccountYTDRealizedLTGL = row16.AccountYTDRealizedLTGL;
											out2_tmp.SSN = row16.SSN;
											out2_tmp.SweepSymbol = row16.SweepSymbol;
											out2_tmp.Custodian = row16.Custodian;
											out2_tmp.CustodialAccountNumber = row16.CustodialAccountNumber;
											out2_tmp.AdvisorName = row16.AdvisorName;
											out2_tmp.AdvisorExternalId = row16.AdvisorExternalId;
											out2_tmp.SleeveType = row16.SleeveType;
											out2_tmp.SleeveTarget = row16.SleeveTarget;
											out2_tmp.SleeveContributionPercent = row16.SleeveContributionPercent;
											out2_tmp.SleeveDistributionPercent = row16.SleeveDistributionPercent;
											out2_tmp.SleeveToleranceLower = row16.SleeveToleranceLower;
											out2_tmp.SleeveToleranceUpper = row16.SleeveToleranceUpper;
											out2_tmp.SMA = row16.SMA;
											out2_tmp.SMATradeable = row16.SMATradeable;
											out2_tmp.BillingAccount = row16.BillingAccount;
											out2_tmp.SystematicAmount = row16.SystematicAmount;
											out2_tmp.SystematicDate = row16.SystematicDate;
											out2 = out2_tmp;
										} // closing inner join bracket (2)
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_13 = false;

									tos_count_tMap_13++;

									/**
									 * [tMap_13 main ] stop
									 */
									// Start of branch "out2"
									if (out2 != null) {

										/**
										 * [tAmazonMysqlOutput_4 main ] start
										 */

										currentComponent = "tAmazonMysqlOutput_4";

										whetherReject_tAmazonMysqlOutput_4 = false;
										if (out2.OrionFirmId == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													1, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_4.setInt(
													1, out2.OrionFirmId);
										}

										if (out2.ExternalId == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													2, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_4.setInt(
													2, out2.ExternalId);
										}

										if (out2.AccountId == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(3,
															out2.AccountId);
										}

										if (out2.AccountNumber == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(4,
															out2.AccountNumber);
										}

										if (out2.AccountName == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(5,
															out2.AccountName);
										}

										if (out2.PortfolioId == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													6, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(6,
															out2.PortfolioId);
										}

										if (out2.PortfolioName == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(7,
															out2.PortfolioName);
										}

										if (out2.HouseholdId == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													8, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_4.setInt(
													8, out2.HouseholdId);
										}

										if (out2.HouseholdName == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													9, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(9,
															out2.HouseholdName);
										}

										if (out2.AccountType == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													10, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(10,
															out2.AccountType);
										}

										if (out2.Taxable == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													11, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_4.setByte(
													11, out2.Taxable);
										}

										if (out2.AccountYTDRealizedSTGL == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													12, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setFloat(
															12,
															out2.AccountYTDRealizedSTGL);
										}

										if (out2.AccountYTDRealizedLTGL == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													13, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setFloat(
															13,
															out2.AccountYTDRealizedLTGL);
										}

										if (out2.SSN == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													14, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(14, out2.SSN);
										}

										if (out2.SweepSymbol == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													15, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(15,
															out2.SweepSymbol);
										}

										if (out2.Custodian == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													16, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(16,
															out2.Custodian);
										}

										if (out2.CustodialAccountNumber == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													17, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(
															17,
															out2.CustodialAccountNumber);
										}

										if (out2.AdvisorName == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													18, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(18,
															out2.AdvisorName);
										}

										if (out2.AdvisorExternalId == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													19, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_4.setInt(
													19, out2.AdvisorExternalId);
										}

										if (out2.SleeveType == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													20, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(20,
															out2.SleeveType);
										}

										if (out2.SleeveTarget == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													21, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setFloat(21,
															out2.SleeveTarget);
										}

										if (out2.SleeveContributionPercent == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													22, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setFloat(
															22,
															out2.SleeveContributionPercent);
										}

										if (out2.SleeveDistributionPercent == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													23, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setFloat(
															23,
															out2.SleeveDistributionPercent);
										}

										if (out2.SleeveToleranceLower == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													24, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setFloat(
															24,
															out2.SleeveToleranceLower);
										}

										if (out2.SleeveToleranceUpper == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													25, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setFloat(
															25,
															out2.SleeveToleranceUpper);
										}

										if (out2.SMA == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													26, java.sql.Types.BOOLEAN);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setBoolean(26, out2.SMA);
										}

										if (out2.SMATradeable == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													27, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(27,
															out2.SMATradeable);
										}

										if (out2.BillingAccount == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													28, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(28,
															out2.BillingAccount);
										}

										if (out2.SystematicAmount == null) {
											pstmt_tAmazonMysqlOutput_4.setNull(
													29, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_4
													.setString(
															29,
															out2.SystematicAmount);
										}

										if (out2.SystematicDate != null) {
											date_tAmazonMysqlOutput_4 = out2.SystematicDate
													.getTime();
											if (date_tAmazonMysqlOutput_4 < year1_tAmazonMysqlOutput_4
													|| date_tAmazonMysqlOutput_4 >= year10000_tAmazonMysqlOutput_4) {
												pstmt_tAmazonMysqlOutput_4
														.setString(30,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonMysqlOutput_4
														.setTimestamp(
																30,
																new java.sql.Timestamp(
																		date_tAmazonMysqlOutput_4));
											}
										} else {
											pstmt_tAmazonMysqlOutput_4.setNull(
													30, java.sql.Types.DATE);
										}

										pstmt_tAmazonMysqlOutput_4.addBatch();
										nb_line_tAmazonMysqlOutput_4++;

										batchSizeCounter_tAmazonMysqlOutput_4++;

										if (batchSize_tAmazonMysqlOutput_4 <= batchSizeCounter_tAmazonMysqlOutput_4) {
											try {
												int countSum_tAmazonMysqlOutput_4 = 0;

												for (int countEach_tAmazonMysqlOutput_4 : pstmt_tAmazonMysqlOutput_4
														.executeBatch()) {
													countSum_tAmazonMysqlOutput_4 += (countEach_tAmazonMysqlOutput_4 < 0 ? 0
															: 1);
												}

												insertedCount_tAmazonMysqlOutput_4 += countSum_tAmazonMysqlOutput_4;

											} catch (java.sql.BatchUpdateException e) {

												int countSum_tAmazonMysqlOutput_4 = 0;
												for (int countEach_tAmazonMysqlOutput_4 : e
														.getUpdateCounts()) {
													countSum_tAmazonMysqlOutput_4 += (countEach_tAmazonMysqlOutput_4 < 0 ? 0
															: countEach_tAmazonMysqlOutput_4);
												}

												insertedCount_tAmazonMysqlOutput_4 += countSum_tAmazonMysqlOutput_4;

												System.err.println(e
														.getMessage());

											}

											batchSizeCounter_tAmazonMysqlOutput_4 = 0;
										}

										commitCounter_tAmazonMysqlOutput_4++;
										if (commitEvery_tAmazonMysqlOutput_4 <= commitCounter_tAmazonMysqlOutput_4) {
											if ((batchSize_tAmazonMysqlOutput_4 > 0)
													&& (batchSizeCounter_tAmazonMysqlOutput_4 > 0)) {
												try {
													int countSum_tAmazonMysqlOutput_4 = 0;

													for (int countEach_tAmazonMysqlOutput_4 : pstmt_tAmazonMysqlOutput_4
															.executeBatch()) {
														countSum_tAmazonMysqlOutput_4 += (countEach_tAmazonMysqlOutput_4 < 0 ? 0
																: 1);
													}

													insertedCount_tAmazonMysqlOutput_4 += countSum_tAmazonMysqlOutput_4;

													batchSizeCounter_tAmazonMysqlOutput_4 = 0;
												} catch (java.sql.BatchUpdateException e) {

													int countSum_tAmazonMysqlOutput_4 = 0;
													for (int countEach_tAmazonMysqlOutput_4 : e
															.getUpdateCounts()) {
														countSum_tAmazonMysqlOutput_4 += (countEach_tAmazonMysqlOutput_4 < 0 ? 0
																: countEach_tAmazonMysqlOutput_4);
													}

													insertedCount_tAmazonMysqlOutput_4 += countSum_tAmazonMysqlOutput_4;

													System.err.println(e
															.getMessage());

												}
											}

											conn_tAmazonMysqlOutput_4.commit();

											commitCounter_tAmazonMysqlOutput_4 = 0;
										}

										tos_count_tAmazonMysqlOutput_4++;

										/**
										 * [tAmazonMysqlOutput_4 main ] stop
										 */

									} // End of branch "out2"

								} // close loop of lookup 'row16' // G_TM_M_043

							} // End of branch "copyOfcopyOfmainout"

						} // End of branch "copyOfcopyOfs"

						/**
						 * [tAmazonAuroraInput_12_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_12";

						currentComponent = "tAmazonAuroraInput_12_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_12_in != null) {
						rs_tAmazonAuroraInput_12_in.close();
					}
					stmt_tAmazonAuroraInput_12_in.close();
					if (conn_tAmazonAuroraInput_12_in != null
							&& !conn_tAmazonAuroraInput_12_in.isClosed()) {

						conn_tAmazonAuroraInput_12_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_12_NB_LINE",
						nb_line_tAmazonAuroraInput_12_in);

				ok_Hash.put("tAmazonAuroraInput_12_in", true);
				end_Hash.put("tAmazonAuroraInput_12_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_12_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_12_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_12";

				currentComponent = "tAmazonAuroraInput_12_out";

				ok_Hash.put("tAmazonAuroraInput_12_out", true);
				end_Hash.put("tAmazonAuroraInput_12_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_12_out end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row21 != null) {
					tHash_Lookup_row21.endGet();
				}
				globalMap.remove("tHash_Lookup_row21");

				// ###############################

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tMap_12 end ] start
				 */

				currentComponent = "tMap_12";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row22 != null) {
					tHash_Lookup_row22.endGet();
				}
				globalMap.remove("tHash_Lookup_row22");

				// ###############################

				ok_Hash.put("tMap_12", true);
				end_Hash.put("tMap_12", System.currentTimeMillis());

				/**
				 * [tMap_12 end ] stop
				 */

				/**
				 * [tMap_13 end ] start
				 */

				currentComponent = "tMap_13";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row16 != null) {
					tHash_Lookup_row16.endGet();
				}
				globalMap.remove("tHash_Lookup_row16");

				// ###############################

				ok_Hash.put("tMap_13", true);
				end_Hash.put("tMap_13", System.currentTimeMillis());

				/**
				 * [tMap_13 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_4 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_4";

				try {
					if (batchSizeCounter_tAmazonMysqlOutput_4 != 0) {
						int countSum_tAmazonMysqlOutput_4 = 0;

						for (int countEach_tAmazonMysqlOutput_4 : pstmt_tAmazonMysqlOutput_4
								.executeBatch()) {
							countSum_tAmazonMysqlOutput_4 += (countEach_tAmazonMysqlOutput_4 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonMysqlOutput_4 += countSum_tAmazonMysqlOutput_4;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonMysqlOutput_4 = 0;
					for (int countEach_tAmazonMysqlOutput_4 : e
							.getUpdateCounts()) {
						countSum_tAmazonMysqlOutput_4 += (countEach_tAmazonMysqlOutput_4 < 0 ? 0
								: countEach_tAmazonMysqlOutput_4);
					}

					insertedCount_tAmazonMysqlOutput_4 += countSum_tAmazonMysqlOutput_4;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonMysqlOutput_4 = 0;

				if (pstmt_tAmazonMysqlOutput_4 != null) {
					pstmt_tAmazonMysqlOutput_4.close();
				}

				if (commitCounter_tAmazonMysqlOutput_4 > 0) {

					conn_tAmazonMysqlOutput_4.commit();

				}

				conn_tAmazonMysqlOutput_4.close();

				resourceMap.put("finish_tAmazonMysqlOutput_4", true);

				nb_line_deleted_tAmazonMysqlOutput_4 = nb_line_deleted_tAmazonMysqlOutput_4
						+ deletedCount_tAmazonMysqlOutput_4;
				nb_line_update_tAmazonMysqlOutput_4 = nb_line_update_tAmazonMysqlOutput_4
						+ updatedCount_tAmazonMysqlOutput_4;
				nb_line_inserted_tAmazonMysqlOutput_4 = nb_line_inserted_tAmazonMysqlOutput_4
						+ insertedCount_tAmazonMysqlOutput_4;
				nb_line_rejected_tAmazonMysqlOutput_4 = nb_line_rejected_tAmazonMysqlOutput_4
						+ rejectedCount_tAmazonMysqlOutput_4;

				globalMap.put("tAmazonMysqlOutput_4_NB_LINE",
						nb_line_tAmazonMysqlOutput_4);
				globalMap.put("tAmazonMysqlOutput_4_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_4);
				globalMap.put("tAmazonMysqlOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_4);
				globalMap.put("tAmazonMysqlOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_4);
				globalMap.put("tAmazonMysqlOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_4);

				ok_Hash.put("tAmazonMysqlOutput_4", true);
				end_Hash.put("tAmazonMysqlOutput_4", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_13"
			globalMap.remove("tHash_Lookup_row16");

			// free memory for "tMap_12"
			globalMap.remove("tHash_Lookup_row22");

			// free memory for "tMap_11"
			globalMap.remove("tHash_Lookup_row21");

			try {

				/**
				 * [tAmazonAuroraInput_12_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_12";

				currentComponent = "tAmazonAuroraInput_12_in";

				/**
				 * [tAmazonAuroraInput_12_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_12_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_12";

				currentComponent = "tAmazonAuroraInput_12_out";

				/**
				 * [tAmazonAuroraInput_12_out finally ] stop
				 */

				/**
				 * [tMap_11 finally ] start
				 */

				currentComponent = "tMap_11";

				/**
				 * [tMap_11 finally ] stop
				 */

				/**
				 * [tMap_12 finally ] start
				 */

				currentComponent = "tMap_12";

				/**
				 * [tMap_12 finally ] stop
				 */

				/**
				 * [tMap_13 finally ] start
				 */

				currentComponent = "tMap_13";

				/**
				 * [tMap_13 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_4 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_4";

				if (resourceMap.get("finish_tAmazonMysqlOutput_4") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_4") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_4")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_4) {
							String errorMessage_tAmazonMysqlOutput_4 = "failed to close the connection in tAmazonMysqlOutput_4 :"
									+ sqlEx_tAmazonMysqlOutput_4.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_4);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_12_in_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountName;

		public String getAccountName() {
			return this.AccountName;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public Integer HouseholdId;

		public Integer getHouseholdId() {
			return this.HouseholdId;
		}

		public String HouseholdName;

		public String getHouseholdName() {
			return this.HouseholdName;
		}

		public String AccountType;

		public String getAccountType() {
			return this.AccountType;
		}

		public Byte Taxable;

		public Byte getTaxable() {
			return this.Taxable;
		}

		public Float AccountYTDRealizedSTGL;

		public Float getAccountYTDRealizedSTGL() {
			return this.AccountYTDRealizedSTGL;
		}

		public Float AccountYTDRealizedLTGL;

		public Float getAccountYTDRealizedLTGL() {
			return this.AccountYTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String SweepSymbol;

		public String getSweepSymbol() {
			return this.SweepSymbol;
		}

		public String Custodian;

		public String getCustodian() {
			return this.Custodian;
		}

		public String CustodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.CustodialAccountNumber;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		public Integer AdvisorExternalId;

		public Integer getAdvisorExternalId() {
			return this.AdvisorExternalId;
		}

		public String SleeveType;

		public String getSleeveType() {
			return this.SleeveType;
		}

		public Float SleeveTarget;

		public Float getSleeveTarget() {
			return this.SleeveTarget;
		}

		public Float SleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.SleeveContributionPercent;
		}

		public Float SleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.SleeveDistributionPercent;
		}

		public Float SleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.SleeveToleranceLower;
		}

		public Float SleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.SleeveToleranceUpper;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public String SystematicAmount;

		public String getSystematicAmount() {
			return this.SystematicAmount;
		}

		public java.util.Date SystematicDate;

		public java.util.Date getSystematicDate() {
			return this.SystematicDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OrionFirmId == null) ? 0 : this.OrionFirmId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.OrionFirmId == null) {
				if (other.OrionFirmId != null)
					return false;

			} else if (!this.OrionFirmId.equals(other.OrionFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.OrionFirmId = this.OrionFirmId;
			other.ExternalId = this.ExternalId;
			other.AccountId = this.AccountId;
			other.AccountNumber = this.AccountNumber;
			other.AccountName = this.AccountName;
			other.PortfolioId = this.PortfolioId;
			other.PortfolioName = this.PortfolioName;
			other.HouseholdId = this.HouseholdId;
			other.HouseholdName = this.HouseholdName;
			other.AccountType = this.AccountType;
			other.Taxable = this.Taxable;
			other.AccountYTDRealizedSTGL = this.AccountYTDRealizedSTGL;
			other.AccountYTDRealizedLTGL = this.AccountYTDRealizedLTGL;
			other.SSN = this.SSN;
			other.SweepSymbol = this.SweepSymbol;
			other.Custodian = this.Custodian;
			other.CustodialAccountNumber = this.CustodialAccountNumber;
			other.AdvisorName = this.AdvisorName;
			other.AdvisorExternalId = this.AdvisorExternalId;
			other.SleeveType = this.SleeveType;
			other.SleeveTarget = this.SleeveTarget;
			other.SleeveContributionPercent = this.SleeveContributionPercent;
			other.SleeveDistributionPercent = this.SleeveDistributionPercent;
			other.SleeveToleranceLower = this.SleeveToleranceLower;
			other.SleeveToleranceUpper = this.SleeveToleranceUpper;
			other.SMA = this.SMA;
			other.SMATradeable = this.SMATradeable;
			other.BillingAccount = this.BillingAccount;
			other.SystematicAmount = this.SystematicAmount;
			other.SystematicDate = this.SystematicDate;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.OrionFirmId = this.OrionFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ExternalId = readInteger(dis, ois);

				this.AccountId = readString(dis, ois);

				this.AccountNumber = readString(dis, ois);

				this.AccountName = readString(dis, ois);

				this.PortfolioId = readString(dis, ois);

				this.PortfolioName = readString(dis, ois);

				this.HouseholdId = readInteger(dis, ois);

				this.HouseholdName = readString(dis, ois);

				this.AccountType = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Taxable = null;
				} else {
					this.Taxable = dis.readByte();
				}

				length = dis.readByte();
				if (length == -1) {
					this.AccountYTDRealizedSTGL = null;
				} else {
					this.AccountYTDRealizedSTGL = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.AccountYTDRealizedLTGL = null;
				} else {
					this.AccountYTDRealizedLTGL = dis.readFloat();
				}

				this.SSN = readString(dis, ois);

				this.SweepSymbol = readString(dis, ois);

				this.Custodian = readString(dis, ois);

				this.CustodialAccountNumber = readString(dis, ois);

				this.AdvisorName = readString(dis, ois);

				this.AdvisorExternalId = readInteger(dis, ois);

				this.SleeveType = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.SleeveTarget = null;
				} else {
					this.SleeveTarget = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.SleeveContributionPercent = null;
				} else {
					this.SleeveContributionPercent = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.SleeveDistributionPercent = null;
				} else {
					this.SleeveDistributionPercent = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.SleeveToleranceLower = null;
				} else {
					this.SleeveToleranceLower = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.SleeveToleranceUpper = null;
				} else {
					this.SleeveToleranceUpper = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.SMA = null;
				} else {
					this.SMA = dis.readBoolean();
				}

				this.SMATradeable = readString(dis, ois);

				this.BillingAccount = readString(dis, ois);

				this.SystematicAmount = readString(dis, ois);

				this.SystematicDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.ExternalId, dos, oos);

				writeString(this.AccountId, dos, oos);

				writeString(this.AccountNumber, dos, oos);

				writeString(this.AccountName, dos, oos);

				writeString(this.PortfolioId, dos, oos);

				writeString(this.PortfolioName, dos, oos);

				writeInteger(this.HouseholdId, dos, oos);

				writeString(this.HouseholdName, dos, oos);

				writeString(this.AccountType, dos, oos);

				if (this.Taxable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeByte(this.Taxable);
				}

				if (this.AccountYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedSTGL);
				}

				if (this.AccountYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedLTGL);
				}

				writeString(this.SSN, dos, oos);

				writeString(this.SweepSymbol, dos, oos);

				writeString(this.Custodian, dos, oos);

				writeString(this.CustodialAccountNumber, dos, oos);

				writeString(this.AdvisorName, dos, oos);

				writeInteger(this.AdvisorExternalId, dos, oos);

				writeString(this.SleeveType, dos, oos);

				if (this.SleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveTarget);
				}

				if (this.SleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveContributionPercent);
				}

				if (this.SleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveDistributionPercent);
				}

				if (this.SleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceLower);
				}

				if (this.SleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceUpper);
				}

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				writeString(this.SMATradeable, dos, oos);

				writeString(this.BillingAccount, dos, oos);

				writeString(this.SystematicAmount, dos, oos);

				writeDate(this.SystematicDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountName=" + AccountName);
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",HouseholdId=" + String.valueOf(HouseholdId));
			sb.append(",HouseholdName=" + HouseholdName);
			sb.append(",AccountType=" + AccountType);
			sb.append(",Taxable=" + String.valueOf(Taxable));
			sb.append(",AccountYTDRealizedSTGL="
					+ String.valueOf(AccountYTDRealizedSTGL));
			sb.append(",AccountYTDRealizedLTGL="
					+ String.valueOf(AccountYTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",SweepSymbol=" + SweepSymbol);
			sb.append(",Custodian=" + Custodian);
			sb.append(",CustodialAccountNumber=" + CustodialAccountNumber);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append(",AdvisorExternalId=" + String.valueOf(AdvisorExternalId));
			sb.append(",SleeveType=" + SleeveType);
			sb.append(",SleeveTarget=" + String.valueOf(SleeveTarget));
			sb.append(",SleeveContributionPercent="
					+ String.valueOf(SleeveContributionPercent));
			sb.append(",SleeveDistributionPercent="
					+ String.valueOf(SleeveDistributionPercent));
			sb.append(",SleeveToleranceLower="
					+ String.valueOf(SleeveToleranceLower));
			sb.append(",SleeveToleranceUpper="
					+ String.valueOf(SleeveToleranceUpper));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",SystematicAmount=" + SystematicAmount);
			sb.append(",SystematicDate=" + String.valueOf(SystematicDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OrionFirmId,
					other.OrionFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_11_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_11_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountName;

		public String getAccountName() {
			return this.AccountName;
		}

		public String PortfolioId;

		public String getPortfolioId() {
			return this.PortfolioId;
		}

		public String PortfolioName;

		public String getPortfolioName() {
			return this.PortfolioName;
		}

		public Integer HouseholdId;

		public Integer getHouseholdId() {
			return this.HouseholdId;
		}

		public String HouseholdName;

		public String getHouseholdName() {
			return this.HouseholdName;
		}

		public String AccountType;

		public String getAccountType() {
			return this.AccountType;
		}

		public Byte Taxable;

		public Byte getTaxable() {
			return this.Taxable;
		}

		public Float AccountYTDRealizedSTGL;

		public Float getAccountYTDRealizedSTGL() {
			return this.AccountYTDRealizedSTGL;
		}

		public Float AccountYTDRealizedLTGL;

		public Float getAccountYTDRealizedLTGL() {
			return this.AccountYTDRealizedLTGL;
		}

		public String SSN;

		public String getSSN() {
			return this.SSN;
		}

		public String SweepSymbol;

		public String getSweepSymbol() {
			return this.SweepSymbol;
		}

		public String Custodian;

		public String getCustodian() {
			return this.Custodian;
		}

		public String CustodialAccountNumber;

		public String getCustodialAccountNumber() {
			return this.CustodialAccountNumber;
		}

		public String AdvisorName;

		public String getAdvisorName() {
			return this.AdvisorName;
		}

		public Integer AdvisorExternalId;

		public Integer getAdvisorExternalId() {
			return this.AdvisorExternalId;
		}

		public String SleeveType;

		public String getSleeveType() {
			return this.SleeveType;
		}

		public Float SleeveTarget;

		public Float getSleeveTarget() {
			return this.SleeveTarget;
		}

		public Float SleeveContributionPercent;

		public Float getSleeveContributionPercent() {
			return this.SleeveContributionPercent;
		}

		public Float SleeveDistributionPercent;

		public Float getSleeveDistributionPercent() {
			return this.SleeveDistributionPercent;
		}

		public Float SleeveToleranceLower;

		public Float getSleeveToleranceLower() {
			return this.SleeveToleranceLower;
		}

		public Float SleeveToleranceUpper;

		public Float getSleeveToleranceUpper() {
			return this.SleeveToleranceUpper;
		}

		public Boolean SMA;

		public Boolean getSMA() {
			return this.SMA;
		}

		public String SMATradeable;

		public String getSMATradeable() {
			return this.SMATradeable;
		}

		public String BillingAccount;

		public String getBillingAccount() {
			return this.BillingAccount;
		}

		public String SystematicAmount;

		public String getSystematicAmount() {
			return this.SystematicAmount;
		}

		public java.util.Date SystematicDate;

		public java.util.Date getSystematicDate() {
			return this.SystematicDate;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					this.AccountName = readString(dis);

					this.PortfolioId = readString(dis);

					this.PortfolioName = readString(dis);

					this.HouseholdId = readInteger(dis);

					this.HouseholdName = readString(dis);

					this.AccountType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taxable = null;
					} else {
						this.Taxable = dis.readByte();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedSTGL = null;
					} else {
						this.AccountYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AccountYTDRealizedLTGL = null;
					} else {
						this.AccountYTDRealizedLTGL = dis.readFloat();
					}

					this.SSN = readString(dis);

					this.SweepSymbol = readString(dis);

					this.Custodian = readString(dis);

					this.CustodialAccountNumber = readString(dis);

					this.AdvisorName = readString(dis);

					this.AdvisorExternalId = readInteger(dis);

					this.SleeveType = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SleeveTarget = null;
					} else {
						this.SleeveTarget = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveContributionPercent = null;
					} else {
						this.SleeveContributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveDistributionPercent = null;
					} else {
						this.SleeveDistributionPercent = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceLower = null;
					} else {
						this.SleeveToleranceLower = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SleeveToleranceUpper = null;
					} else {
						this.SleeveToleranceUpper = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SMA = null;
					} else {
						this.SMA = dis.readBoolean();
					}

					this.SMATradeable = readString(dis);

					this.BillingAccount = readString(dis);

					this.SystematicAmount = readString(dis);

					this.SystematicDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountName, dos);

				// String

				writeString(this.PortfolioId, dos);

				// String

				writeString(this.PortfolioName, dos);

				// Integer

				writeInteger(this.HouseholdId, dos);

				// String

				writeString(this.HouseholdName, dos);

				// String

				writeString(this.AccountType, dos);

				// Byte

				if (this.Taxable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeByte(this.Taxable);
				}

				// Float

				if (this.AccountYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedSTGL);
				}

				// Float

				if (this.AccountYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AccountYTDRealizedLTGL);
				}

				// String

				writeString(this.SSN, dos);

				// String

				writeString(this.SweepSymbol, dos);

				// String

				writeString(this.Custodian, dos);

				// String

				writeString(this.CustodialAccountNumber, dos);

				// String

				writeString(this.AdvisorName, dos);

				// Integer

				writeInteger(this.AdvisorExternalId, dos);

				// String

				writeString(this.SleeveType, dos);

				// Float

				if (this.SleeveTarget == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveTarget);
				}

				// Float

				if (this.SleeveContributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveContributionPercent);
				}

				// Float

				if (this.SleeveDistributionPercent == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveDistributionPercent);
				}

				// Float

				if (this.SleeveToleranceLower == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceLower);
				}

				// Float

				if (this.SleeveToleranceUpper == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SleeveToleranceUpper);
				}

				// Boolean

				if (this.SMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.SMA);
				}

				// String

				writeString(this.SMATradeable, dos);

				// String

				writeString(this.BillingAccount, dos);

				// String

				writeString(this.SystematicAmount, dos);

				// java.util.Date

				writeDate(this.SystematicDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountName=" + AccountName);
			sb.append(",PortfolioId=" + PortfolioId);
			sb.append(",PortfolioName=" + PortfolioName);
			sb.append(",HouseholdId=" + String.valueOf(HouseholdId));
			sb.append(",HouseholdName=" + HouseholdName);
			sb.append(",AccountType=" + AccountType);
			sb.append(",Taxable=" + String.valueOf(Taxable));
			sb.append(",AccountYTDRealizedSTGL="
					+ String.valueOf(AccountYTDRealizedSTGL));
			sb.append(",AccountYTDRealizedLTGL="
					+ String.valueOf(AccountYTDRealizedLTGL));
			sb.append(",SSN=" + SSN);
			sb.append(",SweepSymbol=" + SweepSymbol);
			sb.append(",Custodian=" + Custodian);
			sb.append(",CustodialAccountNumber=" + CustodialAccountNumber);
			sb.append(",AdvisorName=" + AdvisorName);
			sb.append(",AdvisorExternalId=" + String.valueOf(AdvisorExternalId));
			sb.append(",SleeveType=" + SleeveType);
			sb.append(",SleeveTarget=" + String.valueOf(SleeveTarget));
			sb.append(",SleeveContributionPercent="
					+ String.valueOf(SleeveContributionPercent));
			sb.append(",SleeveDistributionPercent="
					+ String.valueOf(SleeveDistributionPercent));
			sb.append(",SleeveToleranceLower="
					+ String.valueOf(SleeveToleranceLower));
			sb.append(",SleeveToleranceUpper="
					+ String.valueOf(SleeveToleranceUpper));
			sb.append(",SMA=" + String.valueOf(SMA));
			sb.append(",SMATradeable=" + SMATradeable);
			sb.append(",BillingAccount=" + BillingAccount);
			sb.append(",SystematicAmount=" + SystematicAmount);
			sb.append(",SystematicDate=" + String.valueOf(SystematicDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_11_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_11_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_11_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_11_inStruct row_tAmazonAuroraInput_11_in = new row_tAmazonAuroraInput_11_inStruct();
				row_tAmazonAuroraInput_11_inStruct row16 = row_tAmazonAuroraInput_11_in;

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row16";

				int tos_count_tAdvancedHash_row16 = 0;

				// connection name:row16
				// source node:tAmazonAuroraInput_11_out -
				// inputs:(row_tAmazonAuroraInput_11_in) outputs:(row16,row16) |
				// target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
				// linked node: tMap_13 - inputs:(copyOfcopyOfmainout,row16)
				// outputs:(out2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row16Struct> getLookup(matchingModeEnum_row16);

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_11_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_11_out", false);
				start_Hash.put("tAmazonAuroraInput_11_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_11";

				currentComponent = "tAmazonAuroraInput_11_out";

				int tos_count_tAmazonAuroraInput_11_out = 0;

				/**
				 * [tAmazonAuroraInput_11_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_11_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_11_in", false);
				start_Hash.put("tAmazonAuroraInput_11_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_11";

				currentComponent = "tAmazonAuroraInput_11_in";

				int tos_count_tAmazonAuroraInput_11_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_11_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_11_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_11_in = calendar_tAmazonAuroraInput_11_in
						.getTime();
				int nb_line_tAmazonAuroraInput_11_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_11_in = null;
				String driverClass_tAmazonAuroraInput_11_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_11_in);
				String dbUser_tAmazonAuroraInput_11_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_11_in = context.password;

				String dbPwd_tAmazonAuroraInput_11_in = decryptedPassword_tAmazonAuroraInput_11_in;

				String url_tAmazonAuroraInput_11_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_11_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_11_in,
								dbUser_tAmazonAuroraInput_11_in,
								dbPwd_tAmazonAuroraInput_11_in);

				java.sql.Statement stmt_tAmazonAuroraInput_11_in = conn_tAmazonAuroraInput_11_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_11_in = "select * from account_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_11_QUERY",
						dbquery_tAmazonAuroraInput_11_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_11_in = null;
				try {
					rs_tAmazonAuroraInput_11_in = stmt_tAmazonAuroraInput_11_in
							.executeQuery(dbquery_tAmazonAuroraInput_11_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_11_in = rs_tAmazonAuroraInput_11_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_11_in = rsmd_tAmazonAuroraInput_11_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_11_in = null;

					while (rs_tAmazonAuroraInput_11_in.next()) {
						nb_line_tAmazonAuroraInput_11_in++;

						if (colQtyInRs_tAmazonAuroraInput_11_in < 1) {
							row_tAmazonAuroraInput_11_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(1) != null) {
								row_tAmazonAuroraInput_11_in.OrionFirmId = rs_tAmazonAuroraInput_11_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_11_in.OrionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 2) {
							row_tAmazonAuroraInput_11_in.ExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(2) != null) {
								row_tAmazonAuroraInput_11_in.ExternalId = rs_tAmazonAuroraInput_11_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_11_in.ExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 3) {
							row_tAmazonAuroraInput_11_in.AccountId = null;
						} else {

							row_tAmazonAuroraInput_11_in.AccountId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 3,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 4) {
							row_tAmazonAuroraInput_11_in.AccountNumber = null;
						} else {

							row_tAmazonAuroraInput_11_in.AccountNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 4,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 5) {
							row_tAmazonAuroraInput_11_in.AccountName = null;
						} else {

							row_tAmazonAuroraInput_11_in.AccountName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 5,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 6) {
							row_tAmazonAuroraInput_11_in.PortfolioId = null;
						} else {

							row_tAmazonAuroraInput_11_in.PortfolioId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 6,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 7) {
							row_tAmazonAuroraInput_11_in.PortfolioName = null;
						} else {

							row_tAmazonAuroraInput_11_in.PortfolioName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 7,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 8) {
							row_tAmazonAuroraInput_11_in.HouseholdId = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(8) != null) {
								row_tAmazonAuroraInput_11_in.HouseholdId = rs_tAmazonAuroraInput_11_in
										.getInt(8);
							} else {
								row_tAmazonAuroraInput_11_in.HouseholdId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 9) {
							row_tAmazonAuroraInput_11_in.HouseholdName = null;
						} else {

							row_tAmazonAuroraInput_11_in.HouseholdName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 9,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 10) {
							row_tAmazonAuroraInput_11_in.AccountType = null;
						} else {

							row_tAmazonAuroraInput_11_in.AccountType = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 10,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 11) {
							row_tAmazonAuroraInput_11_in.Taxable = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(11) != null) {
								row_tAmazonAuroraInput_11_in.Taxable = rs_tAmazonAuroraInput_11_in
										.getByte(11);
							} else {
								row_tAmazonAuroraInput_11_in.Taxable = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 12) {
							row_tAmazonAuroraInput_11_in.AccountYTDRealizedSTGL = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(12) != null) {
								row_tAmazonAuroraInput_11_in.AccountYTDRealizedSTGL = rs_tAmazonAuroraInput_11_in
										.getFloat(12);
							} else {
								row_tAmazonAuroraInput_11_in.AccountYTDRealizedSTGL = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 13) {
							row_tAmazonAuroraInput_11_in.AccountYTDRealizedLTGL = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(13) != null) {
								row_tAmazonAuroraInput_11_in.AccountYTDRealizedLTGL = rs_tAmazonAuroraInput_11_in
										.getFloat(13);
							} else {
								row_tAmazonAuroraInput_11_in.AccountYTDRealizedLTGL = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 14) {
							row_tAmazonAuroraInput_11_in.SSN = null;
						} else {

							row_tAmazonAuroraInput_11_in.SSN = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 14,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 15) {
							row_tAmazonAuroraInput_11_in.SweepSymbol = null;
						} else {

							row_tAmazonAuroraInput_11_in.SweepSymbol = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 15,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 16) {
							row_tAmazonAuroraInput_11_in.Custodian = null;
						} else {

							row_tAmazonAuroraInput_11_in.Custodian = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 16,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 17) {
							row_tAmazonAuroraInput_11_in.CustodialAccountNumber = null;
						} else {

							row_tAmazonAuroraInput_11_in.CustodialAccountNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 17,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 18) {
							row_tAmazonAuroraInput_11_in.AdvisorName = null;
						} else {

							row_tAmazonAuroraInput_11_in.AdvisorName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 18,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 19) {
							row_tAmazonAuroraInput_11_in.AdvisorExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(19) != null) {
								row_tAmazonAuroraInput_11_in.AdvisorExternalId = rs_tAmazonAuroraInput_11_in
										.getInt(19);
							} else {
								row_tAmazonAuroraInput_11_in.AdvisorExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 20) {
							row_tAmazonAuroraInput_11_in.SleeveType = null;
						} else {

							row_tAmazonAuroraInput_11_in.SleeveType = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 20,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 21) {
							row_tAmazonAuroraInput_11_in.SleeveTarget = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(21) != null) {
								row_tAmazonAuroraInput_11_in.SleeveTarget = rs_tAmazonAuroraInput_11_in
										.getFloat(21);
							} else {
								row_tAmazonAuroraInput_11_in.SleeveTarget = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 22) {
							row_tAmazonAuroraInput_11_in.SleeveContributionPercent = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(22) != null) {
								row_tAmazonAuroraInput_11_in.SleeveContributionPercent = rs_tAmazonAuroraInput_11_in
										.getFloat(22);
							} else {
								row_tAmazonAuroraInput_11_in.SleeveContributionPercent = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 23) {
							row_tAmazonAuroraInput_11_in.SleeveDistributionPercent = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(23) != null) {
								row_tAmazonAuroraInput_11_in.SleeveDistributionPercent = rs_tAmazonAuroraInput_11_in
										.getFloat(23);
							} else {
								row_tAmazonAuroraInput_11_in.SleeveDistributionPercent = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 24) {
							row_tAmazonAuroraInput_11_in.SleeveToleranceLower = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(24) != null) {
								row_tAmazonAuroraInput_11_in.SleeveToleranceLower = rs_tAmazonAuroraInput_11_in
										.getFloat(24);
							} else {
								row_tAmazonAuroraInput_11_in.SleeveToleranceLower = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 25) {
							row_tAmazonAuroraInput_11_in.SleeveToleranceUpper = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(25) != null) {
								row_tAmazonAuroraInput_11_in.SleeveToleranceUpper = rs_tAmazonAuroraInput_11_in
										.getFloat(25);
							} else {
								row_tAmazonAuroraInput_11_in.SleeveToleranceUpper = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 26) {
							row_tAmazonAuroraInput_11_in.SMA = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getObject(26) != null) {
								row_tAmazonAuroraInput_11_in.SMA = rs_tAmazonAuroraInput_11_in
										.getBoolean(26);
							} else {
								row_tAmazonAuroraInput_11_in.SMA = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 27) {
							row_tAmazonAuroraInput_11_in.SMATradeable = null;
						} else {

							row_tAmazonAuroraInput_11_in.SMATradeable = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 27,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 28) {
							row_tAmazonAuroraInput_11_in.BillingAccount = null;
						} else {

							row_tAmazonAuroraInput_11_in.BillingAccount = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 28,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 29) {
							row_tAmazonAuroraInput_11_in.SystematicAmount = null;
						} else {

							row_tAmazonAuroraInput_11_in.SystematicAmount = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_11_in, 29,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_11_in < 30) {
							row_tAmazonAuroraInput_11_in.SystematicDate = null;
						} else {

							if (rs_tAmazonAuroraInput_11_in.getString(30) != null) {
								String dateString_tAmazonAuroraInput_11_in = rs_tAmazonAuroraInput_11_in
										.getString(30);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_11_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_11_in)) {
									row_tAmazonAuroraInput_11_in.SystematicDate = rs_tAmazonAuroraInput_11_in
											.getTimestamp(30);
								} else {
									row_tAmazonAuroraInput_11_in.SystematicDate = (java.util.Date) year0_tAmazonAuroraInput_11_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_11_in.SystematicDate = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_11_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_11_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_11";

						currentComponent = "tAmazonAuroraInput_11_in";

						tos_count_tAmazonAuroraInput_11_in++;

						/**
						 * [tAmazonAuroraInput_11_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_11_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_11";

						currentComponent = "tAmazonAuroraInput_11_out";

						row16 = row_tAmazonAuroraInput_11_in;

						tos_count_tAmazonAuroraInput_11_out++;

						/**
						 * [tAmazonAuroraInput_11_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row16 main ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						row16Struct row16_HashRow = new row16Struct();

						row16_HashRow.OrionFirmId = row16.OrionFirmId;

						row16_HashRow.ExternalId = row16.ExternalId;

						row16_HashRow.AccountId = row16.AccountId;

						row16_HashRow.AccountNumber = row16.AccountNumber;

						row16_HashRow.AccountName = row16.AccountName;

						row16_HashRow.PortfolioId = row16.PortfolioId;

						row16_HashRow.PortfolioName = row16.PortfolioName;

						row16_HashRow.HouseholdId = row16.HouseholdId;

						row16_HashRow.HouseholdName = row16.HouseholdName;

						row16_HashRow.AccountType = row16.AccountType;

						row16_HashRow.Taxable = row16.Taxable;

						row16_HashRow.AccountYTDRealizedSTGL = row16.AccountYTDRealizedSTGL;

						row16_HashRow.AccountYTDRealizedLTGL = row16.AccountYTDRealizedLTGL;

						row16_HashRow.SSN = row16.SSN;

						row16_HashRow.SweepSymbol = row16.SweepSymbol;

						row16_HashRow.Custodian = row16.Custodian;

						row16_HashRow.CustodialAccountNumber = row16.CustodialAccountNumber;

						row16_HashRow.AdvisorName = row16.AdvisorName;

						row16_HashRow.AdvisorExternalId = row16.AdvisorExternalId;

						row16_HashRow.SleeveType = row16.SleeveType;

						row16_HashRow.SleeveTarget = row16.SleeveTarget;

						row16_HashRow.SleeveContributionPercent = row16.SleeveContributionPercent;

						row16_HashRow.SleeveDistributionPercent = row16.SleeveDistributionPercent;

						row16_HashRow.SleeveToleranceLower = row16.SleeveToleranceLower;

						row16_HashRow.SleeveToleranceUpper = row16.SleeveToleranceUpper;

						row16_HashRow.SMA = row16.SMA;

						row16_HashRow.SMATradeable = row16.SMATradeable;

						row16_HashRow.BillingAccount = row16.BillingAccount;

						row16_HashRow.SystematicAmount = row16.SystematicAmount;

						row16_HashRow.SystematicDate = row16.SystematicDate;

						tHash_Lookup_row16.put(row16_HashRow);

						tos_count_tAdvancedHash_row16++;

						/**
						 * [tAdvancedHash_row16 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_11_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_11";

						currentComponent = "tAmazonAuroraInput_11_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_11_in != null) {
						rs_tAmazonAuroraInput_11_in.close();
					}
					stmt_tAmazonAuroraInput_11_in.close();
					if (conn_tAmazonAuroraInput_11_in != null
							&& !conn_tAmazonAuroraInput_11_in.isClosed()) {

						conn_tAmazonAuroraInput_11_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_11_NB_LINE",
						nb_line_tAmazonAuroraInput_11_in);

				ok_Hash.put("tAmazonAuroraInput_11_in", true);
				end_Hash.put("tAmazonAuroraInput_11_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_11_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_11_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_11";

				currentComponent = "tAmazonAuroraInput_11_out";

				ok_Hash.put("tAmazonAuroraInput_11_out", true);
				end_Hash.put("tAmazonAuroraInput_11_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_11_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_11_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_11";

				currentComponent = "tAmazonAuroraInput_11_in";

				/**
				 * [tAmazonAuroraInput_11_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_11_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_11";

				currentComponent = "tAmazonAuroraInput_11_out";

				/**
				 * [tAmazonAuroraInput_11_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row16 finally ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				/**
				 * [tAdvancedHash_row16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_11_in_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements
			routines.system.IPersistableComparableLookupRow<row21Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row21Struct other = (row21Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row21Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmName = this.orionEclipseFirmName;

		}

		public void copyKeysDataTo(row21Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orionEclipseFirmName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_13_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_13_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_13_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_13_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_13_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_13_inStruct row_tAmazonAuroraInput_13_in = new row_tAmazonAuroraInput_13_inStruct();
				row_tAmazonAuroraInput_13_inStruct row21 = row_tAmazonAuroraInput_13_in;

				/**
				 * [tAdvancedHash_row21 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row21", false);
				start_Hash.put("tAdvancedHash_row21",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row21";

				int tos_count_tAdvancedHash_row21 = 0;

				// connection name:row21
				// source node:tAmazonAuroraInput_13_out -
				// inputs:(row_tAmazonAuroraInput_13_in) outputs:(row21,row21) |
				// target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
				// linked node: tMap_11 - inputs:(row20,row21)
				// outputs:(copyOfcopyOfs)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row21Struct> getLookup(matchingModeEnum_row21);

				globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);

				/**
				 * [tAdvancedHash_row21 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_13_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_13_out", false);
				start_Hash.put("tAmazonAuroraInput_13_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_13";

				currentComponent = "tAmazonAuroraInput_13_out";

				int tos_count_tAmazonAuroraInput_13_out = 0;

				/**
				 * [tAmazonAuroraInput_13_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_13_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_13_in", false);
				start_Hash.put("tAmazonAuroraInput_13_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_13";

				currentComponent = "tAmazonAuroraInput_13_in";

				int tos_count_tAmazonAuroraInput_13_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_13_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_13_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_13_in = calendar_tAmazonAuroraInput_13_in
						.getTime();
				int nb_line_tAmazonAuroraInput_13_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_13_in = null;
				String driverClass_tAmazonAuroraInput_13_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_13_in);
				String dbUser_tAmazonAuroraInput_13_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_13_in = context.password;

				String dbPwd_tAmazonAuroraInput_13_in = decryptedPassword_tAmazonAuroraInput_13_in;

				String url_tAmazonAuroraInput_13_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_13_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_13_in,
								dbUser_tAmazonAuroraInput_13_in,
								dbPwd_tAmazonAuroraInput_13_in);

				java.sql.Statement stmt_tAmazonAuroraInput_13_in = conn_tAmazonAuroraInput_13_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_13_in = "select orionConnectFirmId , orionEclipseFirmName from firm";

				globalMap.put("tAmazonAuroraInput_13_QUERY",
						dbquery_tAmazonAuroraInput_13_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_13_in = null;
				try {
					rs_tAmazonAuroraInput_13_in = stmt_tAmazonAuroraInput_13_in
							.executeQuery(dbquery_tAmazonAuroraInput_13_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_13_in = rs_tAmazonAuroraInput_13_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_13_in = rsmd_tAmazonAuroraInput_13_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_13_in = null;

					while (rs_tAmazonAuroraInput_13_in.next()) {
						nb_line_tAmazonAuroraInput_13_in++;

						if (colQtyInRs_tAmazonAuroraInput_13_in < 1) {
							row_tAmazonAuroraInput_13_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_13_in.getObject(1) != null) {
								row_tAmazonAuroraInput_13_in.orionConnectFirmId = rs_tAmazonAuroraInput_13_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_13_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_13_in < 2) {
							row_tAmazonAuroraInput_13_in.orionEclipseFirmName = null;
						} else {

							row_tAmazonAuroraInput_13_in.orionEclipseFirmName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_13_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_13_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_13_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_13";

						currentComponent = "tAmazonAuroraInput_13_in";

						tos_count_tAmazonAuroraInput_13_in++;

						/**
						 * [tAmazonAuroraInput_13_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_13_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_13";

						currentComponent = "tAmazonAuroraInput_13_out";

						row21 = row_tAmazonAuroraInput_13_in;

						tos_count_tAmazonAuroraInput_13_out++;

						/**
						 * [tAmazonAuroraInput_13_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row21 main ] start
						 */

						currentComponent = "tAdvancedHash_row21";

						row21Struct row21_HashRow = new row21Struct();

						row21_HashRow.orionConnectFirmId = row21.orionConnectFirmId;

						row21_HashRow.orionEclipseFirmName = row21.orionEclipseFirmName;

						tHash_Lookup_row21.put(row21_HashRow);

						tos_count_tAdvancedHash_row21++;

						/**
						 * [tAdvancedHash_row21 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_13_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_13";

						currentComponent = "tAmazonAuroraInput_13_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_13_in != null) {
						rs_tAmazonAuroraInput_13_in.close();
					}
					stmt_tAmazonAuroraInput_13_in.close();
					if (conn_tAmazonAuroraInput_13_in != null
							&& !conn_tAmazonAuroraInput_13_in.isClosed()) {

						conn_tAmazonAuroraInput_13_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_13_NB_LINE",
						nb_line_tAmazonAuroraInput_13_in);

				ok_Hash.put("tAmazonAuroraInput_13_in", true);
				end_Hash.put("tAmazonAuroraInput_13_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_13_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_13_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_13";

				currentComponent = "tAmazonAuroraInput_13_out";

				ok_Hash.put("tAmazonAuroraInput_13_out", true);
				end_Hash.put("tAmazonAuroraInput_13_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_13_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row21 end ] start
				 */

				currentComponent = "tAdvancedHash_row21";

				tHash_Lookup_row21.endPut();

				ok_Hash.put("tAdvancedHash_row21", true);
				end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row21 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_13_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_13";

				currentComponent = "tAmazonAuroraInput_13_in";

				/**
				 * [tAmazonAuroraInput_13_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_13_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_13";

				currentComponent = "tAmazonAuroraInput_13_out";

				/**
				 * [tAmazonAuroraInput_13_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row21 finally ] start
				 */

				currentComponent = "tAdvancedHash_row21";

				/**
				 * [tAdvancedHash_row21 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_13_in_SUBPROCESS_STATE", 1);
	}

	public static class row41Struct implements
			routines.system.IPersistableRow<row41Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOffirm_connection_2Struct implements
			routines.system.IPersistableRow<copyOffirm_connection_2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOffirm_connection_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row40Struct implements
			routines.system.IPersistableRow<row40Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row40Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_26_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_26_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_26_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_26Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_26Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_26_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_26_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_16Process(globalMap);

				row_tAmazonAuroraInput_26_inStruct row_tAmazonAuroraInput_26_in = new row_tAmazonAuroraInput_26_inStruct();
				row_tAmazonAuroraInput_26_inStruct row40 = row_tAmazonAuroraInput_26_in;
				copyOffirm_connection_2Struct copyOffirm_connection_2 = new copyOffirm_connection_2Struct();
				row41Struct row41 = new row41Struct();

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());

				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tJavaRow_17 begin ] start
				 */

				ok_Hash.put("tJavaRow_17", false);
				start_Hash.put("tJavaRow_17", System.currentTimeMillis());

				currentComponent = "tJavaRow_17";

				int tos_count_tJavaRow_17 = 0;

				int nb_line_tJavaRow_17 = 0;

				/**
				 * [tJavaRow_17 begin ] stop
				 */

				/**
				 * [tMap_26 begin ] start
				 */

				ok_Hash.put("tMap_26", false);
				start_Hash.put("tMap_26", System.currentTimeMillis());

				currentComponent = "tMap_26";

				int tos_count_tMap_26 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) globalMap
						.get("tHash_Lookup_row39"));

				row39Struct row39HashKey = new row39Struct();
				row39Struct row39Default = new row39Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_26__Struct {
				}
				Var__tMap_26__Struct Var__tMap_26 = new Var__tMap_26__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOffirm_connection_2Struct copyOffirm_connection_2_tmp = new copyOffirm_connection_2Struct();
				// ###############################

				/**
				 * [tMap_26 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_26_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_26_out", false);
				start_Hash.put("tAmazonAuroraInput_26_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_26";

				currentComponent = "tAmazonAuroraInput_26_out";

				int tos_count_tAmazonAuroraInput_26_out = 0;

				/**
				 * [tAmazonAuroraInput_26_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_26_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_26_in", false);
				start_Hash.put("tAmazonAuroraInput_26_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_26";

				currentComponent = "tAmazonAuroraInput_26_in";

				int tos_count_tAmazonAuroraInput_26_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_26_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_26_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_26_in = calendar_tAmazonAuroraInput_26_in
						.getTime();
				int nb_line_tAmazonAuroraInput_26_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_26_in = null;
				String driverClass_tAmazonAuroraInput_26_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_26_in);
				String dbUser_tAmazonAuroraInput_26_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_26_in = context.password;

				String dbPwd_tAmazonAuroraInput_26_in = decryptedPassword_tAmazonAuroraInput_26_in;

				String url_tAmazonAuroraInput_26_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_26_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_26_in,
								dbUser_tAmazonAuroraInput_26_in,
								dbPwd_tAmazonAuroraInput_26_in);

				java.sql.Statement stmt_tAmazonAuroraInput_26_in = conn_tAmazonAuroraInput_26_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_26_in = "SELECT `name` , `server` , `database` FROM `orionEclipseFirm`";

				globalMap.put("tAmazonAuroraInput_26_QUERY",
						dbquery_tAmazonAuroraInput_26_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_26_in = null;
				try {
					rs_tAmazonAuroraInput_26_in = stmt_tAmazonAuroraInput_26_in
							.executeQuery(dbquery_tAmazonAuroraInput_26_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_26_in = rs_tAmazonAuroraInput_26_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_26_in = rsmd_tAmazonAuroraInput_26_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_26_in = null;

					while (rs_tAmazonAuroraInput_26_in.next()) {
						nb_line_tAmazonAuroraInput_26_in++;

						if (colQtyInRs_tAmazonAuroraInput_26_in < 1) {
							row_tAmazonAuroraInput_26_in.name = null;
						} else {

							row_tAmazonAuroraInput_26_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_26_in, 1,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_26_in < 2) {
							row_tAmazonAuroraInput_26_in.server = null;
						} else {

							row_tAmazonAuroraInput_26_in.server = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_26_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_26_in < 3) {
							row_tAmazonAuroraInput_26_in.database = null;
						} else {

							row_tAmazonAuroraInput_26_in.database = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_26_in, 3,
											false);
						}

						/**
						 * [tAmazonAuroraInput_26_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_26_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_26";

						currentComponent = "tAmazonAuroraInput_26_in";

						tos_count_tAmazonAuroraInput_26_in++;

						/**
						 * [tAmazonAuroraInput_26_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_26_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_26";

						currentComponent = "tAmazonAuroraInput_26_out";

						row40 = row_tAmazonAuroraInput_26_in;

						tos_count_tAmazonAuroraInput_26_out++;

						/**
						 * [tAmazonAuroraInput_26_out main ] stop
						 */

						/**
						 * [tMap_26 main ] start
						 */

						currentComponent = "tMap_26";

						boolean hasCasePrimitiveKeyWithNull_tMap_26 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_26 = false;
						boolean mainRowRejected_tMap_26 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row39"
						// /////////////////////////////////////////////

						boolean forceLooprow39 = false;

						row39Struct row39ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_26) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_26 = false;

							row39HashKey.firm = row40.name;

							row39HashKey.hashCodeDirty = true;

							tHash_Lookup_row39.lookup(row39HashKey);

							if (!tHash_Lookup_row39.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_26 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row39 != null
								&& tHash_Lookup_row39.getCount(row39HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row39' and it contains more one result from keys :  row39.firm = '"
							// + row39HashKey.firm + "'");
						} // G 071

						row39Struct row39 = null;

						row39Struct fromLookup_row39 = null;
						row39 = row39Default;

						if (tHash_Lookup_row39 != null
								&& tHash_Lookup_row39.hasNext()) { // G 099

							fromLookup_row39 = tHash_Lookup_row39.next();

						} // G 099

						if (fromLookup_row39 != null) {
							row39 = fromLookup_row39;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_26__Struct Var = Var__tMap_26;// ###############################
							// ###############################
							// # Output tables

							copyOffirm_connection_2 = null;

							if (!rejectedInnerJoin_tMap_26) {

								// # Output table : 'copyOffirm_connection_2'
								copyOffirm_connection_2_tmp.server = row40.server;
								copyOffirm_connection_2_tmp.database = row40.database;
								copyOffirm_connection_2 = copyOffirm_connection_2_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_26 = false;

						tos_count_tMap_26++;

						/**
						 * [tMap_26 main ] stop
						 */
						// Start of branch "copyOffirm_connection_2"
						if (copyOffirm_connection_2 != null) {

							/**
							 * [tJavaRow_17 main ] start
							 */

							currentComponent = "tJavaRow_17";

							context.serverIp = copyOffirm_connection_2.server;
							context.database = copyOffirm_connection_2.database;

							nb_line_tJavaRow_17++;

							tos_count_tJavaRow_17++;

							/**
							 * [tJavaRow_17 main ] stop
							 */

							/**
							 * [tJava_5 main ] start
							 */

							currentComponent = "tJava_5";

							tos_count_tJava_5++;

							/**
							 * [tJava_5 main ] stop
							 */

						} // End of branch "copyOffirm_connection_2"

						/**
						 * [tAmazonAuroraInput_26_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_26";

						currentComponent = "tAmazonAuroraInput_26_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_26_in != null) {
						rs_tAmazonAuroraInput_26_in.close();
					}
					stmt_tAmazonAuroraInput_26_in.close();
					if (conn_tAmazonAuroraInput_26_in != null
							&& !conn_tAmazonAuroraInput_26_in.isClosed()) {

						conn_tAmazonAuroraInput_26_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_26_NB_LINE",
						nb_line_tAmazonAuroraInput_26_in);

				ok_Hash.put("tAmazonAuroraInput_26_in", true);
				end_Hash.put("tAmazonAuroraInput_26_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_26_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_26_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_26";

				currentComponent = "tAmazonAuroraInput_26_out";

				ok_Hash.put("tAmazonAuroraInput_26_out", true);
				end_Hash.put("tAmazonAuroraInput_26_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_26_out end ] stop
				 */

				/**
				 * [tMap_26 end ] start
				 */

				currentComponent = "tMap_26";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row39 != null) {
					tHash_Lookup_row39.endGet();
				}
				globalMap.remove("tHash_Lookup_row39");

				// ###############################

				ok_Hash.put("tMap_26", true);
				end_Hash.put("tMap_26", System.currentTimeMillis());

				/**
				 * [tMap_26 end ] stop
				 */

				/**
				 * [tJavaRow_17 end ] start
				 */

				currentComponent = "tJavaRow_17";

				globalMap.put("tJavaRow_17_NB_LINE", nb_line_tJavaRow_17);

				ok_Hash.put("tJavaRow_17", true);
				end_Hash.put("tJavaRow_17", System.currentTimeMillis());

				/**
				 * [tJavaRow_17 end ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				tAmazonAuroraInput_14_inProcess(globalMap);

				/**
				 * [tJava_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_26"
			globalMap.remove("tHash_Lookup_row39");

			try {

				/**
				 * [tAmazonAuroraInput_26_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_26";

				currentComponent = "tAmazonAuroraInput_26_in";

				/**
				 * [tAmazonAuroraInput_26_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_26_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_26";

				currentComponent = "tAmazonAuroraInput_26_out";

				/**
				 * [tAmazonAuroraInput_26_out finally ] stop
				 */

				/**
				 * [tMap_26 finally ] start
				 */

				currentComponent = "tMap_26";

				/**
				 * [tMap_26 finally ] stop
				 */

				/**
				 * [tJavaRow_17 finally ] start
				 */

				currentComponent = "tJavaRow_17";

				/**
				 * [tJavaRow_17 finally ] stop
				 */

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_26_in_SUBPROCESS_STATE", 1);
	}

	public static class out3Struct implements
			routines.system.IPersistableRow<out3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Float price;

		public Float getPrice() {
			return this.price;
		}

		public String securityType;

		public String getSecurityType() {
			return this.securityType;
		}

		public String assetCategory;

		public String getAssetCategory() {
			return this.assetCategory;
		}

		public String assetClass;

		public String getAssetClass() {
			return this.assetClass;
		}

		public String subClass;

		public String getSubClass() {
			return this.subClass;
		}

		public java.util.Date maturityDate;

		public java.util.Date getMaturityDate() {
			return this.maturityDate;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					this.symbol = readString(dis);

					this.name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.price = null;
					} else {
						this.price = dis.readFloat();
					}

					this.securityType = readString(dis);

					this.assetCategory = readString(dis);

					this.assetClass = readString(dis);

					this.subClass = readString(dis);

					this.maturityDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// String

				writeString(this.symbol, dos);

				// String

				writeString(this.name, dos);

				// Float

				if (this.price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price);
				}

				// String

				writeString(this.securityType, dos);

				// String

				writeString(this.assetCategory, dos);

				// String

				writeString(this.assetClass, dos);

				// String

				writeString(this.subClass, dos);

				// java.util.Date

				writeDate(this.maturityDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",symbol=" + symbol);
			sb.append(",name=" + name);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",securityType=" + securityType);
			sb.append(",assetCategory=" + assetCategory);
			sb.append(",assetClass=" + assetClass);
			sb.append(",subClass=" + subClass);
			sb.append(",maturityDate=" + String.valueOf(maturityDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mainOutfirmStruct implements
			routines.system.IPersistableRow<mainOutfirmStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mainOutfirmStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfs_1Struct implements
			routines.system.IPersistableRow<copyOfs_1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfs_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_14_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_14_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_14_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_14Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_14Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_14_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_14_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tAmazonAuroraInput_16_inProcess(globalMap);
				tJavaRow_7Process(globalMap);
				tAmazonAuroraInput_15_inProcess(globalMap);

				row_tAmazonAuroraInput_14_inStruct row_tAmazonAuroraInput_14_in = new row_tAmazonAuroraInput_14_inStruct();
				row_tAmazonAuroraInput_14_inStruct row15 = row_tAmazonAuroraInput_14_in;
				copyOfs_1Struct copyOfs_1 = new copyOfs_1Struct();
				mainOutfirmStruct mainOutfirm = new mainOutfirmStruct();
				out3Struct out3 = new out3Struct();

				/**
				 * [tAmazonMysqlOutput_5 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_5", false);
				start_Hash.put("tAmazonMysqlOutput_5",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_5";

				int tos_count_tAmazonMysqlOutput_5 = 0;

				int nb_line_tAmazonMysqlOutput_5 = 0;
				int nb_line_update_tAmazonMysqlOutput_5 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_5 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_5 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_5 = 0;

				int deletedCount_tAmazonMysqlOutput_5 = 0;
				int updatedCount_tAmazonMysqlOutput_5 = 0;
				int insertedCount_tAmazonMysqlOutput_5 = 0;

				int rejectedCount_tAmazonMysqlOutput_5 = 0;

				String tableName_tAmazonMysqlOutput_5 = "reject_Security";
				boolean whetherReject_tAmazonMysqlOutput_5 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_5 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_5 = calendar_tAmazonMysqlOutput_5
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_5 = calendar_tAmazonMysqlOutput_5
						.getTime().getTime();
				long date_tAmazonMysqlOutput_5;

				java.sql.Connection conn_tAmazonMysqlOutput_5 = null;
				String dbProperties_tAmazonMysqlOutput_5 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_5 = null;
				if (dbProperties_tAmazonMysqlOutput_5 == null
						|| dbProperties_tAmazonMysqlOutput_5.trim().length() == 0) {
					url_tAmazonMysqlOutput_5 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_5 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_5
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_5 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_5 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_5;
				}
				String dbUser_tAmazonMysqlOutput_5 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_5 = context.password;

				String dbPwd_tAmazonMysqlOutput_5 = decryptedPassword_tAmazonMysqlOutput_5;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_5 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_5,
								dbUser_tAmazonMysqlOutput_5,
								dbPwd_tAmazonMysqlOutput_5);

				resourceMap.put("conn_tAmazonMysqlOutput_5",
						conn_tAmazonMysqlOutput_5);

				conn_tAmazonMysqlOutput_5.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_5 = 1000000;
				int commitCounter_tAmazonMysqlOutput_5 = 0;

				int count_tAmazonMysqlOutput_5 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_5 = conn_tAmazonMysqlOutput_5
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_5 = dbMetaData_tAmazonMysqlOutput_5
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_5 = false;
				while (rsTable_tAmazonMysqlOutput_5.next()) {
					String table_tAmazonMysqlOutput_5 = rsTable_tAmazonMysqlOutput_5
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_5
							.equalsIgnoreCase("reject_Security")) {
						whetherExist_tAmazonMysqlOutput_5 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_5.close();
				if (!whetherExist_tAmazonMysqlOutput_5) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_5 = conn_tAmazonMysqlOutput_5
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_5
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_5
									+ "`(`orionFirmId` INT(10)  ,`externalId` INT(10)  ,`symbol` VARCHAR(100)  ,`name` VARCHAR(255)  ,`price` FLOAT(22,2)  ,`securityType` VARCHAR(50)  ,`assetCategory` VARCHAR(100)  ,`assetClass` VARCHAR(100)  ,`subClass` VARCHAR(100)  ,`maturityDate` DATETIME )");
					stmtCreate_tAmazonMysqlOutput_5.close();
				}

				String insert_tAmazonMysqlOutput_5 = "INSERT INTO `"
						+ "reject_Security"
						+ "` (`orionFirmId`,`externalId`,`symbol`,`name`,`price`,`securityType`,`assetCategory`,`assetClass`,`subClass`,`maturityDate`) VALUES (?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonMysqlOutput_5 = 100;
				int batchSizeCounter_tAmazonMysqlOutput_5 = 0;

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_5 = conn_tAmazonMysqlOutput_5
						.prepareStatement(insert_tAmazonMysqlOutput_5);

				/**
				 * [tAmazonMysqlOutput_5 begin ] stop
				 */

				/**
				 * [tMap_16 begin ] start
				 */

				ok_Hash.put("tMap_16", false);
				start_Hash.put("tMap_16", System.currentTimeMillis());

				currentComponent = "tMap_16";

				int tos_count_tMap_16 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) globalMap
						.get("tHash_Lookup_row19"));

				row19Struct row19HashKey = new row19Struct();
				row19Struct row19Default = new row19Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_16__Struct {
				}
				Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out3Struct out3_tmp = new out3Struct();
				// ###############################

				/**
				 * [tMap_16 begin ] stop
				 */

				/**
				 * [tMap_15 begin ] start
				 */

				ok_Hash.put("tMap_15", false);
				start_Hash.put("tMap_15", System.currentTimeMillis());

				currentComponent = "tMap_15";

				int tos_count_tMap_15 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) globalMap
						.get("tHash_Lookup_row18"));

				row18Struct row18HashKey = new row18Struct();
				row18Struct row18Default = new row18Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_15__Struct {
				}
				Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				mainOutfirmStruct mainOutfirm_tmp = new mainOutfirmStruct();
				// ###############################

				/**
				 * [tMap_15 begin ] stop
				 */

				/**
				 * [tMap_14 begin ] start
				 */

				ok_Hash.put("tMap_14", false);
				start_Hash.put("tMap_14", System.currentTimeMillis());

				currentComponent = "tMap_14";

				int tos_count_tMap_14 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) globalMap
						.get("tHash_Lookup_row17"));

				row17Struct row17HashKey = new row17Struct();
				row17Struct row17Default = new row17Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_14__Struct {
				}
				Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfs_1Struct copyOfs_1_tmp = new copyOfs_1Struct();
				// ###############################

				/**
				 * [tMap_14 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_14_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_14_out", false);
				start_Hash.put("tAmazonAuroraInput_14_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_14";

				currentComponent = "tAmazonAuroraInput_14_out";

				int tos_count_tAmazonAuroraInput_14_out = 0;

				/**
				 * [tAmazonAuroraInput_14_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_14_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_14_in", false);
				start_Hash.put("tAmazonAuroraInput_14_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_14";

				currentComponent = "tAmazonAuroraInput_14_in";

				int tos_count_tAmazonAuroraInput_14_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_14_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_14_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_14_in = calendar_tAmazonAuroraInput_14_in
						.getTime();
				int nb_line_tAmazonAuroraInput_14_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_14_in = null;
				String driverClass_tAmazonAuroraInput_14_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_14_in);
				String dbUser_tAmazonAuroraInput_14_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_14_in = context.password;

				String dbPwd_tAmazonAuroraInput_14_in = decryptedPassword_tAmazonAuroraInput_14_in;

				String url_tAmazonAuroraInput_14_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_14_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_14_in,
								dbUser_tAmazonAuroraInput_14_in,
								dbPwd_tAmazonAuroraInput_14_in);

				java.sql.Statement stmt_tAmazonAuroraInput_14_in = conn_tAmazonAuroraInput_14_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_14_in = "select distinct OrionFirmId from security_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_14_QUERY",
						dbquery_tAmazonAuroraInput_14_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_14_in = null;
				try {
					rs_tAmazonAuroraInput_14_in = stmt_tAmazonAuroraInput_14_in
							.executeQuery(dbquery_tAmazonAuroraInput_14_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_14_in = rs_tAmazonAuroraInput_14_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_14_in = rsmd_tAmazonAuroraInput_14_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_14_in = null;

					while (rs_tAmazonAuroraInput_14_in.next()) {
						nb_line_tAmazonAuroraInput_14_in++;

						if (colQtyInRs_tAmazonAuroraInput_14_in < 1) {
							row_tAmazonAuroraInput_14_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_14_in.getObject(1) != null) {
								row_tAmazonAuroraInput_14_in.OrionFirmId = rs_tAmazonAuroraInput_14_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_14_in.OrionFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_14_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_14_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_14";

						currentComponent = "tAmazonAuroraInput_14_in";

						tos_count_tAmazonAuroraInput_14_in++;

						/**
						 * [tAmazonAuroraInput_14_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_14_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_14";

						currentComponent = "tAmazonAuroraInput_14_out";

						row15 = row_tAmazonAuroraInput_14_in;

						tos_count_tAmazonAuroraInput_14_out++;

						/**
						 * [tAmazonAuroraInput_14_out main ] stop
						 */

						/**
						 * [tMap_14 main ] start
						 */

						currentComponent = "tMap_14";

						boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_14 = false;
						boolean mainRowRejected_tMap_14 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row17"
						// /////////////////////////////////////////////

						boolean forceLooprow17 = false;

						row17Struct row17ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_14) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_14 = false;

							row17HashKey.orionConnectFirmId = row15.OrionFirmId;

							row17HashKey.hashCodeDirty = true;

							tHash_Lookup_row17.lookup(row17HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row17 != null
								&& tHash_Lookup_row17.getCount(row17HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row17' and it contains more one result from keys :  row17.orionConnectFirmId = '"
							// + row17HashKey.orionConnectFirmId + "'");
						} // G 071

						row17Struct row17 = null;

						row17Struct fromLookup_row17 = null;
						row17 = row17Default;

						if (tHash_Lookup_row17 != null
								&& tHash_Lookup_row17.hasNext()) { // G 099

							fromLookup_row17 = tHash_Lookup_row17.next();

						} // G 099

						if (fromLookup_row17 != null) {
							row17 = fromLookup_row17;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
							// ###############################
							// # Output tables

							copyOfs_1 = null;

							// # Output table : 'copyOfs_1'
							copyOfs_1_tmp.OrionFirmId = row15.OrionFirmId;
							copyOfs_1_tmp.orionEclipseFirmName = row17.orionEclipseFirmName;
							copyOfs_1 = copyOfs_1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_14 = false;

						tos_count_tMap_14++;

						/**
						 * [tMap_14 main ] stop
						 */
						// Start of branch "copyOfs_1"
						if (copyOfs_1 != null) {

							/**
							 * [tMap_15 main ] start
							 */

							currentComponent = "tMap_15";

							boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_15 = false;
							boolean mainRowRejected_tMap_15 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row18"
							// /////////////////////////////////////////////

							boolean forceLooprow18 = false;

							row18Struct row18ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_15) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_15 = false;

								row18HashKey.firm = copyOfs_1.orionEclipseFirmName;

								row18HashKey.hashCodeDirty = true;

								tHash_Lookup_row18.lookup(row18HashKey);

								if (!tHash_Lookup_row18.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_15 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row18 != null
									&& tHash_Lookup_row18
											.getCount(row18HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.firm = '"
								// + row18HashKey.firm + "'");
							} // G 071

							row18Struct row18 = null;

							row18Struct fromLookup_row18 = null;
							row18 = row18Default;

							if (tHash_Lookup_row18 != null
									&& tHash_Lookup_row18.hasNext()) { // G 099

								fromLookup_row18 = tHash_Lookup_row18.next();

							} // G 099

							if (fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
								// ###############################
								// # Output tables

								mainOutfirm = null;

								if (!rejectedInnerJoin_tMap_15) {
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'mainOutfirm'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_15) {
									mainOutfirm_tmp.firm = copyOfs_1.OrionFirmId;
									mainOutfirm = mainOutfirm_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_15 = false;

							tos_count_tMap_15++;

							/**
							 * [tMap_15 main ] stop
							 */
							// Start of branch "mainOutfirm"
							if (mainOutfirm != null) {

								/**
								 * [tMap_16 main ] start
								 */

								currentComponent = "tMap_16";

								boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_16 = false;
								boolean mainRowRejected_tMap_16 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row19"
								// /////////////////////////////////////////////

								boolean forceLooprow19 = false;

								row19Struct row19ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_16) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_16 = false;

									row19HashKey.orionFirmId = mainOutfirm.firm;

									row19HashKey.hashCodeDirty = true;

									tHash_Lookup_row19.lookup(row19HashKey);

									if (!tHash_Lookup_row19.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_16 = true;

										forceLooprow19 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow19 = true;
								} // G 21

								row19Struct row19 = null;

								while ((tHash_Lookup_row19 != null && tHash_Lookup_row19
										.hasNext()) || forceLooprow19) { // G_TM_M_043

									// CALL close loop of lookup 'row19'

									row19Struct fromLookup_row19 = null;
									row19 = row19Default;

									if (!forceLooprow19) { // G 46

										fromLookup_row19 = tHash_Lookup_row19
												.next();

										if (fromLookup_row19 != null) {
											row19 = fromLookup_row19;
										}

									} // G 46

									forceLooprow19 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
										// ###############################
										// # Output tables

										out3 = null;

										if (!rejectedInnerJoin_tMap_16) {

											// # Output table : 'out3'
											out3_tmp.orionFirmId = row19.orionFirmId;
											out3_tmp.externalId = row19.externalId;
											out3_tmp.symbol = row19.symbol;
											out3_tmp.name = row19.name;
											out3_tmp.price = row19.price;
											out3_tmp.securityType = row19.securityType;
											out3_tmp.assetCategory = row19.assetCategory;
											out3_tmp.assetClass = row19.assetClass;
											out3_tmp.subClass = row19.subClass;
											out3_tmp.maturityDate = row19.maturityDate;
											out3 = out3_tmp;
										} // closing inner join bracket (2)
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_16 = false;

									tos_count_tMap_16++;

									/**
									 * [tMap_16 main ] stop
									 */
									// Start of branch "out3"
									if (out3 != null) {

										/**
										 * [tAmazonMysqlOutput_5 main ] start
										 */

										currentComponent = "tAmazonMysqlOutput_5";

										whetherReject_tAmazonMysqlOutput_5 = false;
										if (out3.orionFirmId == null) {
											pstmt_tAmazonMysqlOutput_5.setNull(
													1, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_5.setInt(
													1, out3.orionFirmId);
										}

										if (out3.externalId == null) {
											pstmt_tAmazonMysqlOutput_5.setNull(
													2, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_5.setInt(
													2, out3.externalId);
										}

										if (out3.symbol == null) {
											pstmt_tAmazonMysqlOutput_5.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_5
													.setString(3, out3.symbol);
										}

										if (out3.name == null) {
											pstmt_tAmazonMysqlOutput_5.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_5
													.setString(4, out3.name);
										}

										if (out3.price == null) {
											pstmt_tAmazonMysqlOutput_5.setNull(
													5, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_5
													.setFloat(5, out3.price);
										}

										if (out3.securityType == null) {
											pstmt_tAmazonMysqlOutput_5.setNull(
													6, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_5
													.setString(6,
															out3.securityType);
										}

										if (out3.assetCategory == null) {
											pstmt_tAmazonMysqlOutput_5.setNull(
													7, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_5
													.setString(7,
															out3.assetCategory);
										}

										if (out3.assetClass == null) {
											pstmt_tAmazonMysqlOutput_5.setNull(
													8, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_5
													.setString(8,
															out3.assetClass);
										}

										if (out3.subClass == null) {
											pstmt_tAmazonMysqlOutput_5.setNull(
													9, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_5
													.setString(9, out3.subClass);
										}

										if (out3.maturityDate != null) {
											date_tAmazonMysqlOutput_5 = out3.maturityDate
													.getTime();
											if (date_tAmazonMysqlOutput_5 < year1_tAmazonMysqlOutput_5
													|| date_tAmazonMysqlOutput_5 >= year10000_tAmazonMysqlOutput_5) {
												pstmt_tAmazonMysqlOutput_5
														.setString(10,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonMysqlOutput_5
														.setTimestamp(
																10,
																new java.sql.Timestamp(
																		date_tAmazonMysqlOutput_5));
											}
										} else {
											pstmt_tAmazonMysqlOutput_5.setNull(
													10, java.sql.Types.DATE);
										}

										pstmt_tAmazonMysqlOutput_5.addBatch();
										nb_line_tAmazonMysqlOutput_5++;

										batchSizeCounter_tAmazonMysqlOutput_5++;

										if (batchSize_tAmazonMysqlOutput_5 <= batchSizeCounter_tAmazonMysqlOutput_5) {
											try {
												int countSum_tAmazonMysqlOutput_5 = 0;

												for (int countEach_tAmazonMysqlOutput_5 : pstmt_tAmazonMysqlOutput_5
														.executeBatch()) {
													countSum_tAmazonMysqlOutput_5 += (countEach_tAmazonMysqlOutput_5 < 0 ? 0
															: 1);
												}

												insertedCount_tAmazonMysqlOutput_5 += countSum_tAmazonMysqlOutput_5;

											} catch (java.sql.BatchUpdateException e) {

												int countSum_tAmazonMysqlOutput_5 = 0;
												for (int countEach_tAmazonMysqlOutput_5 : e
														.getUpdateCounts()) {
													countSum_tAmazonMysqlOutput_5 += (countEach_tAmazonMysqlOutput_5 < 0 ? 0
															: countEach_tAmazonMysqlOutput_5);
												}

												insertedCount_tAmazonMysqlOutput_5 += countSum_tAmazonMysqlOutput_5;

												System.err.println(e
														.getMessage());

											}

											batchSizeCounter_tAmazonMysqlOutput_5 = 0;
										}

										commitCounter_tAmazonMysqlOutput_5++;
										if (commitEvery_tAmazonMysqlOutput_5 <= commitCounter_tAmazonMysqlOutput_5) {
											if ((batchSize_tAmazonMysqlOutput_5 > 0)
													&& (batchSizeCounter_tAmazonMysqlOutput_5 > 0)) {
												try {
													int countSum_tAmazonMysqlOutput_5 = 0;

													for (int countEach_tAmazonMysqlOutput_5 : pstmt_tAmazonMysqlOutput_5
															.executeBatch()) {
														countSum_tAmazonMysqlOutput_5 += (countEach_tAmazonMysqlOutput_5 < 0 ? 0
																: 1);
													}

													insertedCount_tAmazonMysqlOutput_5 += countSum_tAmazonMysqlOutput_5;

													batchSizeCounter_tAmazonMysqlOutput_5 = 0;
												} catch (java.sql.BatchUpdateException e) {

													int countSum_tAmazonMysqlOutput_5 = 0;
													for (int countEach_tAmazonMysqlOutput_5 : e
															.getUpdateCounts()) {
														countSum_tAmazonMysqlOutput_5 += (countEach_tAmazonMysqlOutput_5 < 0 ? 0
																: countEach_tAmazonMysqlOutput_5);
													}

													insertedCount_tAmazonMysqlOutput_5 += countSum_tAmazonMysqlOutput_5;

													System.err.println(e
															.getMessage());

												}
											}

											conn_tAmazonMysqlOutput_5.commit();

											commitCounter_tAmazonMysqlOutput_5 = 0;
										}

										tos_count_tAmazonMysqlOutput_5++;

										/**
										 * [tAmazonMysqlOutput_5 main ] stop
										 */

									} // End of branch "out3"

								} // close loop of lookup 'row19' // G_TM_M_043

							} // End of branch "mainOutfirm"

						} // End of branch "copyOfs_1"

						/**
						 * [tAmazonAuroraInput_14_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_14";

						currentComponent = "tAmazonAuroraInput_14_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_14_in != null) {
						rs_tAmazonAuroraInput_14_in.close();
					}
					stmt_tAmazonAuroraInput_14_in.close();
					if (conn_tAmazonAuroraInput_14_in != null
							&& !conn_tAmazonAuroraInput_14_in.isClosed()) {

						conn_tAmazonAuroraInput_14_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_14_NB_LINE",
						nb_line_tAmazonAuroraInput_14_in);

				ok_Hash.put("tAmazonAuroraInput_14_in", true);
				end_Hash.put("tAmazonAuroraInput_14_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_14_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_14_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_14";

				currentComponent = "tAmazonAuroraInput_14_out";

				ok_Hash.put("tAmazonAuroraInput_14_out", true);
				end_Hash.put("tAmazonAuroraInput_14_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_14_out end ] stop
				 */

				/**
				 * [tMap_14 end ] start
				 */

				currentComponent = "tMap_14";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row17 != null) {
					tHash_Lookup_row17.endGet();
				}
				globalMap.remove("tHash_Lookup_row17");

				// ###############################

				ok_Hash.put("tMap_14", true);
				end_Hash.put("tMap_14", System.currentTimeMillis());

				/**
				 * [tMap_14 end ] stop
				 */

				/**
				 * [tMap_15 end ] start
				 */

				currentComponent = "tMap_15";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row18 != null) {
					tHash_Lookup_row18.endGet();
				}
				globalMap.remove("tHash_Lookup_row18");

				// ###############################

				ok_Hash.put("tMap_15", true);
				end_Hash.put("tMap_15", System.currentTimeMillis());

				/**
				 * [tMap_15 end ] stop
				 */

				/**
				 * [tMap_16 end ] start
				 */

				currentComponent = "tMap_16";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row19 != null) {
					tHash_Lookup_row19.endGet();
				}
				globalMap.remove("tHash_Lookup_row19");

				// ###############################

				ok_Hash.put("tMap_16", true);
				end_Hash.put("tMap_16", System.currentTimeMillis());

				/**
				 * [tMap_16 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_5 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_5";

				try {
					if (batchSizeCounter_tAmazonMysqlOutput_5 != 0) {
						int countSum_tAmazonMysqlOutput_5 = 0;

						for (int countEach_tAmazonMysqlOutput_5 : pstmt_tAmazonMysqlOutput_5
								.executeBatch()) {
							countSum_tAmazonMysqlOutput_5 += (countEach_tAmazonMysqlOutput_5 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonMysqlOutput_5 += countSum_tAmazonMysqlOutput_5;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonMysqlOutput_5 = 0;
					for (int countEach_tAmazonMysqlOutput_5 : e
							.getUpdateCounts()) {
						countSum_tAmazonMysqlOutput_5 += (countEach_tAmazonMysqlOutput_5 < 0 ? 0
								: countEach_tAmazonMysqlOutput_5);
					}

					insertedCount_tAmazonMysqlOutput_5 += countSum_tAmazonMysqlOutput_5;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonMysqlOutput_5 = 0;

				if (pstmt_tAmazonMysqlOutput_5 != null) {
					pstmt_tAmazonMysqlOutput_5.close();
				}

				if (commitCounter_tAmazonMysqlOutput_5 > 0) {

					conn_tAmazonMysqlOutput_5.commit();

				}

				conn_tAmazonMysqlOutput_5.close();

				resourceMap.put("finish_tAmazonMysqlOutput_5", true);

				nb_line_deleted_tAmazonMysqlOutput_5 = nb_line_deleted_tAmazonMysqlOutput_5
						+ deletedCount_tAmazonMysqlOutput_5;
				nb_line_update_tAmazonMysqlOutput_5 = nb_line_update_tAmazonMysqlOutput_5
						+ updatedCount_tAmazonMysqlOutput_5;
				nb_line_inserted_tAmazonMysqlOutput_5 = nb_line_inserted_tAmazonMysqlOutput_5
						+ insertedCount_tAmazonMysqlOutput_5;
				nb_line_rejected_tAmazonMysqlOutput_5 = nb_line_rejected_tAmazonMysqlOutput_5
						+ rejectedCount_tAmazonMysqlOutput_5;

				globalMap.put("tAmazonMysqlOutput_5_NB_LINE",
						nb_line_tAmazonMysqlOutput_5);
				globalMap.put("tAmazonMysqlOutput_5_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_5);
				globalMap.put("tAmazonMysqlOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_5);
				globalMap.put("tAmazonMysqlOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_5);
				globalMap.put("tAmazonMysqlOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_5);

				ok_Hash.put("tAmazonMysqlOutput_5", true);
				end_Hash.put("tAmazonMysqlOutput_5", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_16"
			globalMap.remove("tHash_Lookup_row19");

			// free memory for "tMap_15"
			globalMap.remove("tHash_Lookup_row18");

			// free memory for "tMap_14"
			globalMap.remove("tHash_Lookup_row17");

			try {

				/**
				 * [tAmazonAuroraInput_14_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_14";

				currentComponent = "tAmazonAuroraInput_14_in";

				/**
				 * [tAmazonAuroraInput_14_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_14_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_14";

				currentComponent = "tAmazonAuroraInput_14_out";

				/**
				 * [tAmazonAuroraInput_14_out finally ] stop
				 */

				/**
				 * [tMap_14 finally ] start
				 */

				currentComponent = "tMap_14";

				/**
				 * [tMap_14 finally ] stop
				 */

				/**
				 * [tMap_15 finally ] start
				 */

				currentComponent = "tMap_15";

				/**
				 * [tMap_15 finally ] stop
				 */

				/**
				 * [tMap_16 finally ] start
				 */

				currentComponent = "tMap_16";

				/**
				 * [tMap_16 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_5 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_5";

				if (resourceMap.get("finish_tAmazonMysqlOutput_5") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_5") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_5")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_5) {
							String errorMessage_tAmazonMysqlOutput_5 = "failed to close the connection in tAmazonMysqlOutput_5 :"
									+ sqlEx_tAmazonMysqlOutput_5.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_5);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_14_in_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements
			routines.system.IPersistableComparableLookupRow<row17Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmName = this.orionEclipseFirmName;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orionEclipseFirmName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_15_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_15_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_15_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_15_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_15_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_15_inStruct row_tAmazonAuroraInput_15_in = new row_tAmazonAuroraInput_15_inStruct();
				row_tAmazonAuroraInput_15_inStruct row17 = row_tAmazonAuroraInput_15_in;

				/**
				 * [tAdvancedHash_row17 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row17", false);
				start_Hash.put("tAdvancedHash_row17",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row17";

				int tos_count_tAdvancedHash_row17 = 0;

				// connection name:row17
				// source node:tAmazonAuroraInput_15_out -
				// inputs:(row_tAmazonAuroraInput_15_in) outputs:(row17,row17) |
				// target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
				// linked node: tMap_14 - inputs:(row15,row17)
				// outputs:(copyOfs_1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row17Struct> getLookup(matchingModeEnum_row17);

				globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);

				/**
				 * [tAdvancedHash_row17 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_15_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_15_out", false);
				start_Hash.put("tAmazonAuroraInput_15_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_15";

				currentComponent = "tAmazonAuroraInput_15_out";

				int tos_count_tAmazonAuroraInput_15_out = 0;

				/**
				 * [tAmazonAuroraInput_15_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_15_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_15_in", false);
				start_Hash.put("tAmazonAuroraInput_15_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_15";

				currentComponent = "tAmazonAuroraInput_15_in";

				int tos_count_tAmazonAuroraInput_15_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_15_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_15_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_15_in = calendar_tAmazonAuroraInput_15_in
						.getTime();
				int nb_line_tAmazonAuroraInput_15_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_15_in = null;
				String driverClass_tAmazonAuroraInput_15_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_15_in);
				String dbUser_tAmazonAuroraInput_15_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_15_in = context.password;

				String dbPwd_tAmazonAuroraInput_15_in = decryptedPassword_tAmazonAuroraInput_15_in;

				String url_tAmazonAuroraInput_15_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_15_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_15_in,
								dbUser_tAmazonAuroraInput_15_in,
								dbPwd_tAmazonAuroraInput_15_in);

				java.sql.Statement stmt_tAmazonAuroraInput_15_in = conn_tAmazonAuroraInput_15_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_15_in = "select orionConnectFirmId , orionEclipseFirmName from firm";

				globalMap.put("tAmazonAuroraInput_15_QUERY",
						dbquery_tAmazonAuroraInput_15_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_15_in = null;
				try {
					rs_tAmazonAuroraInput_15_in = stmt_tAmazonAuroraInput_15_in
							.executeQuery(dbquery_tAmazonAuroraInput_15_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_15_in = rs_tAmazonAuroraInput_15_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_15_in = rsmd_tAmazonAuroraInput_15_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_15_in = null;

					while (rs_tAmazonAuroraInput_15_in.next()) {
						nb_line_tAmazonAuroraInput_15_in++;

						if (colQtyInRs_tAmazonAuroraInput_15_in < 1) {
							row_tAmazonAuroraInput_15_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_15_in.getObject(1) != null) {
								row_tAmazonAuroraInput_15_in.orionConnectFirmId = rs_tAmazonAuroraInput_15_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_15_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_15_in < 2) {
							row_tAmazonAuroraInput_15_in.orionEclipseFirmName = null;
						} else {

							row_tAmazonAuroraInput_15_in.orionEclipseFirmName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_15_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_15_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_15_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_15";

						currentComponent = "tAmazonAuroraInput_15_in";

						tos_count_tAmazonAuroraInput_15_in++;

						/**
						 * [tAmazonAuroraInput_15_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_15_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_15";

						currentComponent = "tAmazonAuroraInput_15_out";

						row17 = row_tAmazonAuroraInput_15_in;

						tos_count_tAmazonAuroraInput_15_out++;

						/**
						 * [tAmazonAuroraInput_15_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row17 main ] start
						 */

						currentComponent = "tAdvancedHash_row17";

						row17Struct row17_HashRow = new row17Struct();

						row17_HashRow.orionConnectFirmId = row17.orionConnectFirmId;

						row17_HashRow.orionEclipseFirmName = row17.orionEclipseFirmName;

						tHash_Lookup_row17.put(row17_HashRow);

						tos_count_tAdvancedHash_row17++;

						/**
						 * [tAdvancedHash_row17 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_15_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_15";

						currentComponent = "tAmazonAuroraInput_15_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_15_in != null) {
						rs_tAmazonAuroraInput_15_in.close();
					}
					stmt_tAmazonAuroraInput_15_in.close();
					if (conn_tAmazonAuroraInput_15_in != null
							&& !conn_tAmazonAuroraInput_15_in.isClosed()) {

						conn_tAmazonAuroraInput_15_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_15_NB_LINE",
						nb_line_tAmazonAuroraInput_15_in);

				ok_Hash.put("tAmazonAuroraInput_15_in", true);
				end_Hash.put("tAmazonAuroraInput_15_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_15_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_15_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_15";

				currentComponent = "tAmazonAuroraInput_15_out";

				ok_Hash.put("tAmazonAuroraInput_15_out", true);
				end_Hash.put("tAmazonAuroraInput_15_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_15_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row17 end ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				tHash_Lookup_row17.endPut();

				ok_Hash.put("tAdvancedHash_row17", true);
				end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row17 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_15_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_15";

				currentComponent = "tAmazonAuroraInput_15_in";

				/**
				 * [tAmazonAuroraInput_15_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_15_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_15";

				currentComponent = "tAmazonAuroraInput_15_out";

				/**
				 * [tAmazonAuroraInput_15_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row17 finally ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				/**
				 * [tAdvancedHash_row17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_15_in_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableComparableLookupRow<row19Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Float price;

		public Float getPrice() {
			return this.price;
		}

		public String securityType;

		public String getSecurityType() {
			return this.securityType;
		}

		public String assetCategory;

		public String getAssetCategory() {
			return this.assetCategory;
		}

		public String assetClass;

		public String getAssetClass() {
			return this.assetClass;
		}

		public String subClass;

		public String getSubClass() {
			return this.subClass;
		}

		public java.util.Date maturityDate;

		public java.util.Date getMaturityDate() {
			return this.maturityDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionFirmId == null) ? 0 : this.orionFirmId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row19Struct other = (row19Struct) obj;

			if (this.orionFirmId == null) {
				if (other.orionFirmId != null)
					return false;

			} else if (!this.orionFirmId.equals(other.orionFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row19Struct other) {

			other.orionFirmId = this.orionFirmId;
			other.externalId = this.externalId;
			other.symbol = this.symbol;
			other.name = this.name;
			other.price = this.price;
			other.securityType = this.securityType;
			other.assetCategory = this.assetCategory;
			other.assetClass = this.assetClass;
			other.subClass = this.subClass;
			other.maturityDate = this.maturityDate;

		}

		public void copyKeysDataTo(row19Struct other) {

			other.orionFirmId = this.orionFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.externalId = readInteger(dis, ois);

				this.symbol = readString(dis, ois);

				this.name = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.price = null;
				} else {
					this.price = dis.readFloat();
				}

				this.securityType = readString(dis, ois);

				this.assetCategory = readString(dis, ois);

				this.assetClass = readString(dis, ois);

				this.subClass = readString(dis, ois);

				this.maturityDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.externalId, dos, oos);

				writeString(this.symbol, dos, oos);

				writeString(this.name, dos, oos);

				if (this.price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price);
				}

				writeString(this.securityType, dos, oos);

				writeString(this.assetCategory, dos, oos);

				writeString(this.assetClass, dos, oos);

				writeString(this.subClass, dos, oos);

				writeDate(this.maturityDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",symbol=" + symbol);
			sb.append(",name=" + name);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",securityType=" + securityType);
			sb.append(",assetCategory=" + assetCategory);
			sb.append(",assetClass=" + assetClass);
			sb.append(",subClass=" + subClass);
			sb.append(",maturityDate=" + String.valueOf(maturityDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionFirmId,
					other.orionFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_16_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_16_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Float price;

		public Float getPrice() {
			return this.price;
		}

		public String securityType;

		public String getSecurityType() {
			return this.securityType;
		}

		public String assetCategory;

		public String getAssetCategory() {
			return this.assetCategory;
		}

		public String assetClass;

		public String getAssetClass() {
			return this.assetClass;
		}

		public String subClass;

		public String getSubClass() {
			return this.subClass;
		}

		public java.util.Date maturityDate;

		public java.util.Date getMaturityDate() {
			return this.maturityDate;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					this.symbol = readString(dis);

					this.name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.price = null;
					} else {
						this.price = dis.readFloat();
					}

					this.securityType = readString(dis);

					this.assetCategory = readString(dis);

					this.assetClass = readString(dis);

					this.subClass = readString(dis);

					this.maturityDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// String

				writeString(this.symbol, dos);

				// String

				writeString(this.name, dos);

				// Float

				if (this.price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price);
				}

				// String

				writeString(this.securityType, dos);

				// String

				writeString(this.assetCategory, dos);

				// String

				writeString(this.assetClass, dos);

				// String

				writeString(this.subClass, dos);

				// java.util.Date

				writeDate(this.maturityDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",symbol=" + symbol);
			sb.append(",name=" + name);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",securityType=" + securityType);
			sb.append(",assetCategory=" + assetCategory);
			sb.append(",assetClass=" + assetClass);
			sb.append(",subClass=" + subClass);
			sb.append(",maturityDate=" + String.valueOf(maturityDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_16_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_16_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_16_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_16_inStruct row_tAmazonAuroraInput_16_in = new row_tAmazonAuroraInput_16_inStruct();
				row_tAmazonAuroraInput_16_inStruct row19 = row_tAmazonAuroraInput_16_in;

				/**
				 * [tAdvancedHash_row19 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row19", false);
				start_Hash.put("tAdvancedHash_row19",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row19";

				int tos_count_tAdvancedHash_row19 = 0;

				// connection name:row19
				// source node:tAmazonAuroraInput_16_out -
				// inputs:(row_tAmazonAuroraInput_16_in) outputs:(row19,row19) |
				// target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
				// linked node: tMap_16 - inputs:(mainOutfirm,row19)
				// outputs:(out3)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row19Struct> getLookup(matchingModeEnum_row19);

				globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);

				/**
				 * [tAdvancedHash_row19 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_16_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_16_out", false);
				start_Hash.put("tAmazonAuroraInput_16_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_16";

				currentComponent = "tAmazonAuroraInput_16_out";

				int tos_count_tAmazonAuroraInput_16_out = 0;

				/**
				 * [tAmazonAuroraInput_16_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_16_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_16_in", false);
				start_Hash.put("tAmazonAuroraInput_16_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_16";

				currentComponent = "tAmazonAuroraInput_16_in";

				int tos_count_tAmazonAuroraInput_16_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_16_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_16_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_16_in = calendar_tAmazonAuroraInput_16_in
						.getTime();
				int nb_line_tAmazonAuroraInput_16_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_16_in = null;
				String driverClass_tAmazonAuroraInput_16_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_16_in);
				String dbUser_tAmazonAuroraInput_16_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_16_in = context.password;

				String dbPwd_tAmazonAuroraInput_16_in = decryptedPassword_tAmazonAuroraInput_16_in;

				String url_tAmazonAuroraInput_16_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_16_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_16_in,
								dbUser_tAmazonAuroraInput_16_in,
								dbPwd_tAmazonAuroraInput_16_in);

				java.sql.Statement stmt_tAmazonAuroraInput_16_in = conn_tAmazonAuroraInput_16_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_16_in = "select * from security_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_16_QUERY",
						dbquery_tAmazonAuroraInput_16_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_16_in = null;
				try {
					rs_tAmazonAuroraInput_16_in = stmt_tAmazonAuroraInput_16_in
							.executeQuery(dbquery_tAmazonAuroraInput_16_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_16_in = rs_tAmazonAuroraInput_16_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_16_in = rsmd_tAmazonAuroraInput_16_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_16_in = null;

					while (rs_tAmazonAuroraInput_16_in.next()) {
						nb_line_tAmazonAuroraInput_16_in++;

						if (colQtyInRs_tAmazonAuroraInput_16_in < 1) {
							row_tAmazonAuroraInput_16_in.orionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_16_in.getObject(1) != null) {
								row_tAmazonAuroraInput_16_in.orionFirmId = rs_tAmazonAuroraInput_16_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_16_in.orionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_16_in < 2) {
							row_tAmazonAuroraInput_16_in.externalId = null;
						} else {

							if (rs_tAmazonAuroraInput_16_in.getObject(2) != null) {
								row_tAmazonAuroraInput_16_in.externalId = rs_tAmazonAuroraInput_16_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_16_in.externalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_16_in < 3) {
							row_tAmazonAuroraInput_16_in.symbol = null;
						} else {

							row_tAmazonAuroraInput_16_in.symbol = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_16_in, 3,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_16_in < 4) {
							row_tAmazonAuroraInput_16_in.name = null;
						} else {

							row_tAmazonAuroraInput_16_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_16_in, 4,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_16_in < 5) {
							row_tAmazonAuroraInput_16_in.price = null;
						} else {

							if (rs_tAmazonAuroraInput_16_in.getObject(5) != null) {
								row_tAmazonAuroraInput_16_in.price = rs_tAmazonAuroraInput_16_in
										.getFloat(5);
							} else {
								row_tAmazonAuroraInput_16_in.price = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_16_in < 6) {
							row_tAmazonAuroraInput_16_in.securityType = null;
						} else {

							row_tAmazonAuroraInput_16_in.securityType = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_16_in, 6,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_16_in < 7) {
							row_tAmazonAuroraInput_16_in.assetCategory = null;
						} else {

							row_tAmazonAuroraInput_16_in.assetCategory = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_16_in, 7,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_16_in < 8) {
							row_tAmazonAuroraInput_16_in.assetClass = null;
						} else {

							row_tAmazonAuroraInput_16_in.assetClass = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_16_in, 8,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_16_in < 9) {
							row_tAmazonAuroraInput_16_in.subClass = null;
						} else {

							row_tAmazonAuroraInput_16_in.subClass = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_16_in, 9,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_16_in < 10) {
							row_tAmazonAuroraInput_16_in.maturityDate = null;
						} else {

							if (rs_tAmazonAuroraInput_16_in.getString(10) != null) {
								String dateString_tAmazonAuroraInput_16_in = rs_tAmazonAuroraInput_16_in
										.getString(10);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_16_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_16_in)) {
									row_tAmazonAuroraInput_16_in.maturityDate = rs_tAmazonAuroraInput_16_in
											.getTimestamp(10);
								} else {
									row_tAmazonAuroraInput_16_in.maturityDate = (java.util.Date) year0_tAmazonAuroraInput_16_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_16_in.maturityDate = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_16_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_16_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_16";

						currentComponent = "tAmazonAuroraInput_16_in";

						tos_count_tAmazonAuroraInput_16_in++;

						/**
						 * [tAmazonAuroraInput_16_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_16_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_16";

						currentComponent = "tAmazonAuroraInput_16_out";

						row19 = row_tAmazonAuroraInput_16_in;

						tos_count_tAmazonAuroraInput_16_out++;

						/**
						 * [tAmazonAuroraInput_16_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row19 main ] start
						 */

						currentComponent = "tAdvancedHash_row19";

						row19Struct row19_HashRow = new row19Struct();

						row19_HashRow.orionFirmId = row19.orionFirmId;

						row19_HashRow.externalId = row19.externalId;

						row19_HashRow.symbol = row19.symbol;

						row19_HashRow.name = row19.name;

						row19_HashRow.price = row19.price;

						row19_HashRow.securityType = row19.securityType;

						row19_HashRow.assetCategory = row19.assetCategory;

						row19_HashRow.assetClass = row19.assetClass;

						row19_HashRow.subClass = row19.subClass;

						row19_HashRow.maturityDate = row19.maturityDate;

						tHash_Lookup_row19.put(row19_HashRow);

						tos_count_tAdvancedHash_row19++;

						/**
						 * [tAdvancedHash_row19 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_16_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_16";

						currentComponent = "tAmazonAuroraInput_16_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_16_in != null) {
						rs_tAmazonAuroraInput_16_in.close();
					}
					stmt_tAmazonAuroraInput_16_in.close();
					if (conn_tAmazonAuroraInput_16_in != null
							&& !conn_tAmazonAuroraInput_16_in.isClosed()) {

						conn_tAmazonAuroraInput_16_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_16_NB_LINE",
						nb_line_tAmazonAuroraInput_16_in);

				ok_Hash.put("tAmazonAuroraInput_16_in", true);
				end_Hash.put("tAmazonAuroraInput_16_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_16_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_16_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_16";

				currentComponent = "tAmazonAuroraInput_16_out";

				ok_Hash.put("tAmazonAuroraInput_16_out", true);
				end_Hash.put("tAmazonAuroraInput_16_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_16_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row19 end ] start
				 */

				currentComponent = "tAdvancedHash_row19";

				tHash_Lookup_row19.endPut();

				ok_Hash.put("tAdvancedHash_row19", true);
				end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row19 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_16_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_16";

				currentComponent = "tAmazonAuroraInput_16_in";

				/**
				 * [tAmazonAuroraInput_16_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_16_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_16";

				currentComponent = "tAmazonAuroraInput_16_out";

				/**
				 * [tAmazonAuroraInput_16_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row19 finally ] start
				 */

				currentComponent = "tAdvancedHash_row19";

				/**
				 * [tAdvancedHash_row19 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_16_in_SUBPROCESS_STATE", 1);
	}

	public static class row44Struct implements
			routines.system.IPersistableRow<row44Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row44Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOffirm_connection_3Struct implements
			routines.system.IPersistableRow<copyOffirm_connection_3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOffirm_connection_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row43Struct implements
			routines.system.IPersistableRow<row43Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row43Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_27_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_27_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_27_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_27Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_27Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_27_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_27_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_18Process(globalMap);

				row_tAmazonAuroraInput_27_inStruct row_tAmazonAuroraInput_27_in = new row_tAmazonAuroraInput_27_inStruct();
				row_tAmazonAuroraInput_27_inStruct row43 = row_tAmazonAuroraInput_27_in;
				copyOffirm_connection_3Struct copyOffirm_connection_3 = new copyOffirm_connection_3Struct();
				row44Struct row44 = new row44Struct();

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tJavaRow_19 begin ] start
				 */

				ok_Hash.put("tJavaRow_19", false);
				start_Hash.put("tJavaRow_19", System.currentTimeMillis());

				currentComponent = "tJavaRow_19";

				int tos_count_tJavaRow_19 = 0;

				int nb_line_tJavaRow_19 = 0;

				/**
				 * [tJavaRow_19 begin ] stop
				 */

				/**
				 * [tMap_27 begin ] start
				 */

				ok_Hash.put("tMap_27", false);
				start_Hash.put("tMap_27", System.currentTimeMillis());

				currentComponent = "tMap_27";

				int tos_count_tMap_27 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) globalMap
						.get("tHash_Lookup_row42"));

				row42Struct row42HashKey = new row42Struct();
				row42Struct row42Default = new row42Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_27__Struct {
				}
				Var__tMap_27__Struct Var__tMap_27 = new Var__tMap_27__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOffirm_connection_3Struct copyOffirm_connection_3_tmp = new copyOffirm_connection_3Struct();
				// ###############################

				/**
				 * [tMap_27 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_27_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_27_out", false);
				start_Hash.put("tAmazonAuroraInput_27_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_27";

				currentComponent = "tAmazonAuroraInput_27_out";

				int tos_count_tAmazonAuroraInput_27_out = 0;

				/**
				 * [tAmazonAuroraInput_27_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_27_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_27_in", false);
				start_Hash.put("tAmazonAuroraInput_27_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_27";

				currentComponent = "tAmazonAuroraInput_27_in";

				int tos_count_tAmazonAuroraInput_27_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_27_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_27_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_27_in = calendar_tAmazonAuroraInput_27_in
						.getTime();
				int nb_line_tAmazonAuroraInput_27_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_27_in = null;
				String driverClass_tAmazonAuroraInput_27_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_27_in);
				String dbUser_tAmazonAuroraInput_27_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_27_in = context.password;

				String dbPwd_tAmazonAuroraInput_27_in = decryptedPassword_tAmazonAuroraInput_27_in;

				String url_tAmazonAuroraInput_27_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_27_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_27_in,
								dbUser_tAmazonAuroraInput_27_in,
								dbPwd_tAmazonAuroraInput_27_in);

				java.sql.Statement stmt_tAmazonAuroraInput_27_in = conn_tAmazonAuroraInput_27_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_27_in = "SELECT `name` , `server` , `database` FROM `orionEclipseFirm`";

				globalMap.put("tAmazonAuroraInput_27_QUERY",
						dbquery_tAmazonAuroraInput_27_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_27_in = null;
				try {
					rs_tAmazonAuroraInput_27_in = stmt_tAmazonAuroraInput_27_in
							.executeQuery(dbquery_tAmazonAuroraInput_27_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_27_in = rs_tAmazonAuroraInput_27_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_27_in = rsmd_tAmazonAuroraInput_27_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_27_in = null;

					while (rs_tAmazonAuroraInput_27_in.next()) {
						nb_line_tAmazonAuroraInput_27_in++;

						if (colQtyInRs_tAmazonAuroraInput_27_in < 1) {
							row_tAmazonAuroraInput_27_in.name = null;
						} else {

							row_tAmazonAuroraInput_27_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_27_in, 1,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_27_in < 2) {
							row_tAmazonAuroraInput_27_in.server = null;
						} else {

							row_tAmazonAuroraInput_27_in.server = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_27_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_27_in < 3) {
							row_tAmazonAuroraInput_27_in.database = null;
						} else {

							row_tAmazonAuroraInput_27_in.database = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_27_in, 3,
											false);
						}

						/**
						 * [tAmazonAuroraInput_27_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_27_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_27";

						currentComponent = "tAmazonAuroraInput_27_in";

						tos_count_tAmazonAuroraInput_27_in++;

						/**
						 * [tAmazonAuroraInput_27_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_27_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_27";

						currentComponent = "tAmazonAuroraInput_27_out";

						row43 = row_tAmazonAuroraInput_27_in;

						tos_count_tAmazonAuroraInput_27_out++;

						/**
						 * [tAmazonAuroraInput_27_out main ] stop
						 */

						/**
						 * [tMap_27 main ] start
						 */

						currentComponent = "tMap_27";

						boolean hasCasePrimitiveKeyWithNull_tMap_27 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_27 = false;
						boolean mainRowRejected_tMap_27 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row42"
						// /////////////////////////////////////////////

						boolean forceLooprow42 = false;

						row42Struct row42ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_27) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_27 = false;

							row42HashKey.firm = row43.name;

							row42HashKey.hashCodeDirty = true;

							tHash_Lookup_row42.lookup(row42HashKey);

							if (!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_27 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row42 != null
								&& tHash_Lookup_row42.getCount(row42HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row42' and it contains more one result from keys :  row42.firm = '"
							// + row42HashKey.firm + "'");
						} // G 071

						row42Struct row42 = null;

						row42Struct fromLookup_row42 = null;
						row42 = row42Default;

						if (tHash_Lookup_row42 != null
								&& tHash_Lookup_row42.hasNext()) { // G 099

							fromLookup_row42 = tHash_Lookup_row42.next();

						} // G 099

						if (fromLookup_row42 != null) {
							row42 = fromLookup_row42;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_27__Struct Var = Var__tMap_27;// ###############################
							// ###############################
							// # Output tables

							copyOffirm_connection_3 = null;

							if (!rejectedInnerJoin_tMap_27) {

								// # Output table : 'copyOffirm_connection_3'
								copyOffirm_connection_3_tmp.server = row43.server;
								copyOffirm_connection_3_tmp.database = row43.database;
								copyOffirm_connection_3 = copyOffirm_connection_3_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_27 = false;

						tos_count_tMap_27++;

						/**
						 * [tMap_27 main ] stop
						 */
						// Start of branch "copyOffirm_connection_3"
						if (copyOffirm_connection_3 != null) {

							/**
							 * [tJavaRow_19 main ] start
							 */

							currentComponent = "tJavaRow_19";

							context.serverIp = copyOffirm_connection_3.server;
							context.database = copyOffirm_connection_3.database;

							nb_line_tJavaRow_19++;

							tos_count_tJavaRow_19++;

							/**
							 * [tJavaRow_19 main ] stop
							 */

							/**
							 * [tJava_6 main ] start
							 */

							currentComponent = "tJava_6";

							tos_count_tJava_6++;

							/**
							 * [tJava_6 main ] stop
							 */

						} // End of branch "copyOffirm_connection_3"

						/**
						 * [tAmazonAuroraInput_27_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_27";

						currentComponent = "tAmazonAuroraInput_27_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_27_in != null) {
						rs_tAmazonAuroraInput_27_in.close();
					}
					stmt_tAmazonAuroraInput_27_in.close();
					if (conn_tAmazonAuroraInput_27_in != null
							&& !conn_tAmazonAuroraInput_27_in.isClosed()) {

						conn_tAmazonAuroraInput_27_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_27_NB_LINE",
						nb_line_tAmazonAuroraInput_27_in);

				ok_Hash.put("tAmazonAuroraInput_27_in", true);
				end_Hash.put("tAmazonAuroraInput_27_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_27_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_27_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_27";

				currentComponent = "tAmazonAuroraInput_27_out";

				ok_Hash.put("tAmazonAuroraInput_27_out", true);
				end_Hash.put("tAmazonAuroraInput_27_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_27_out end ] stop
				 */

				/**
				 * [tMap_27 end ] start
				 */

				currentComponent = "tMap_27";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row42 != null) {
					tHash_Lookup_row42.endGet();
				}
				globalMap.remove("tHash_Lookup_row42");

				// ###############################

				ok_Hash.put("tMap_27", true);
				end_Hash.put("tMap_27", System.currentTimeMillis());

				/**
				 * [tMap_27 end ] stop
				 */

				/**
				 * [tJavaRow_19 end ] start
				 */

				currentComponent = "tJavaRow_19";

				globalMap.put("tJavaRow_19_NB_LINE", nb_line_tJavaRow_19);

				ok_Hash.put("tJavaRow_19", true);
				end_Hash.put("tJavaRow_19", System.currentTimeMillis());

				/**
				 * [tJavaRow_19 end ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				tAmazonAuroraInput_17_inProcess(globalMap);

				/**
				 * [tJava_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_27"
			globalMap.remove("tHash_Lookup_row42");

			try {

				/**
				 * [tAmazonAuroraInput_27_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_27";

				currentComponent = "tAmazonAuroraInput_27_in";

				/**
				 * [tAmazonAuroraInput_27_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_27_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_27";

				currentComponent = "tAmazonAuroraInput_27_out";

				/**
				 * [tAmazonAuroraInput_27_out finally ] stop
				 */

				/**
				 * [tMap_27 finally ] start
				 */

				currentComponent = "tMap_27";

				/**
				 * [tMap_27 finally ] stop
				 */

				/**
				 * [tJavaRow_19 finally ] start
				 */

				currentComponent = "tJavaRow_19";

				/**
				 * [tJavaRow_19 finally ] stop
				 */

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_27_in_SUBPROCESS_STATE", 1);
	}

	public static class out4Struct implements
			routines.system.IPersistableRow<out4Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		public java.util.Date tradeDate;

		public java.util.Date getTradeDate() {
			return this.tradeDate;
		}

		public Float quantity;

		public Float getQuantity() {
			return this.quantity;
		}

		public Float amount;

		public Float getAmount() {
			return this.amount;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String action;

		public String getAction() {
			return this.action;
		}

		public Float tradeCost;

		public Float getTradeCost() {
			return this.tradeCost;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					this.accountId = readString(dis);

					this.accountNumber = readString(dis);

					this.symbol = readString(dis);

					this.tradeDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantity = null;
					} else {
						this.quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.amount = null;
					} else {
						this.amount = dis.readFloat();
					}

					this.type = readString(dis);

					this.action = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tradeCost = null;
					} else {
						this.tradeCost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.symbol, dos);

				// java.util.Date

				writeDate(this.tradeDate, dos);

				// Float

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.quantity);
				}

				// Float

				if (this.amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.amount);
				}

				// String

				writeString(this.type, dos);

				// String

				writeString(this.action, dos);

				// Float

				if (this.tradeCost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tradeCost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",symbol=" + symbol);
			sb.append(",tradeDate=" + String.valueOf(tradeDate));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",amount=" + String.valueOf(amount));
			sb.append(",type=" + type);
			sb.append(",action=" + action);
			sb.append(",tradeCost=" + String.valueOf(tradeCost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfmainout_1Struct implements
			routines.system.IPersistableRow<copyOfmainout_1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmainout_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfs_2Struct implements
			routines.system.IPersistableRow<copyOfs_2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfs_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_17_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_17_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_17_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_17Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_17Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_17_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_17_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tAmazonAuroraInput_19_inProcess(globalMap);
				tJavaRow_8Process(globalMap);
				tAmazonAuroraInput_18_inProcess(globalMap);

				row_tAmazonAuroraInput_17_inStruct row_tAmazonAuroraInput_17_in = new row_tAmazonAuroraInput_17_inStruct();
				row_tAmazonAuroraInput_17_inStruct row23 = row_tAmazonAuroraInput_17_in;
				copyOfs_2Struct copyOfs_2 = new copyOfs_2Struct();
				copyOfmainout_1Struct copyOfmainout_1 = new copyOfmainout_1Struct();
				out4Struct out4 = new out4Struct();

				/**
				 * [tAmazonMysqlOutput_6 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_6", false);
				start_Hash.put("tAmazonMysqlOutput_6",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_6";

				int tos_count_tAmazonMysqlOutput_6 = 0;

				int nb_line_tAmazonMysqlOutput_6 = 0;
				int nb_line_update_tAmazonMysqlOutput_6 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_6 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_6 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_6 = 0;

				int deletedCount_tAmazonMysqlOutput_6 = 0;
				int updatedCount_tAmazonMysqlOutput_6 = 0;
				int insertedCount_tAmazonMysqlOutput_6 = 0;

				int rejectedCount_tAmazonMysqlOutput_6 = 0;

				String tableName_tAmazonMysqlOutput_6 = "reject_Transaction";
				boolean whetherReject_tAmazonMysqlOutput_6 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_6 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_6.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_6 = calendar_tAmazonMysqlOutput_6
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_6.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_6 = calendar_tAmazonMysqlOutput_6
						.getTime().getTime();
				long date_tAmazonMysqlOutput_6;

				java.sql.Connection conn_tAmazonMysqlOutput_6 = null;
				String dbProperties_tAmazonMysqlOutput_6 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_6 = null;
				if (dbProperties_tAmazonMysqlOutput_6 == null
						|| dbProperties_tAmazonMysqlOutput_6.trim().length() == 0) {
					url_tAmazonMysqlOutput_6 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_6 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_6
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_6 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_6 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_6;
				}
				String dbUser_tAmazonMysqlOutput_6 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_6 = context.password;

				String dbPwd_tAmazonMysqlOutput_6 = decryptedPassword_tAmazonMysqlOutput_6;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_6 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_6,
								dbUser_tAmazonMysqlOutput_6,
								dbPwd_tAmazonMysqlOutput_6);

				resourceMap.put("conn_tAmazonMysqlOutput_6",
						conn_tAmazonMysqlOutput_6);

				conn_tAmazonMysqlOutput_6.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_6 = 1000000;
				int commitCounter_tAmazonMysqlOutput_6 = 0;

				int count_tAmazonMysqlOutput_6 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_6 = conn_tAmazonMysqlOutput_6
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_6 = dbMetaData_tAmazonMysqlOutput_6
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_6 = false;
				while (rsTable_tAmazonMysqlOutput_6.next()) {
					String table_tAmazonMysqlOutput_6 = rsTable_tAmazonMysqlOutput_6
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_6
							.equalsIgnoreCase("reject_Transaction")) {
						whetherExist_tAmazonMysqlOutput_6 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_6.close();
				if (!whetherExist_tAmazonMysqlOutput_6) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_6 = conn_tAmazonMysqlOutput_6
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_6
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_6
									+ "`(`orionFirmId` INT(10)  ,`externalId` INT(10)  ,`accountId` VARCHAR(255)  ,`accountNumber` VARCHAR(100)  ,`symbol` VARCHAR(100)  ,`tradeDate` DATETIME ,`quantity` FLOAT(22,2)  ,`amount` FLOAT(22,2)  ,`type` VARCHAR(50)  ,`action` VARCHAR(10)  ,`tradeCost` FLOAT(22,2)  )");
					stmtCreate_tAmazonMysqlOutput_6.close();
				}

				String insert_tAmazonMysqlOutput_6 = "INSERT INTO `"
						+ "reject_Transaction"
						+ "` (`orionFirmId`,`externalId`,`accountId`,`accountNumber`,`symbol`,`tradeDate`,`quantity`,`amount`,`type`,`action`,`tradeCost`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonMysqlOutput_6 = 100;
				int batchSizeCounter_tAmazonMysqlOutput_6 = 0;

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_6 = conn_tAmazonMysqlOutput_6
						.prepareStatement(insert_tAmazonMysqlOutput_6);

				/**
				 * [tAmazonMysqlOutput_6 begin ] stop
				 */

				/**
				 * [tMap_19 begin ] start
				 */

				ok_Hash.put("tMap_19", false);
				start_Hash.put("tMap_19", System.currentTimeMillis());

				currentComponent = "tMap_19";

				int tos_count_tMap_19 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) globalMap
						.get("tHash_Lookup_row25"));

				row25Struct row25HashKey = new row25Struct();
				row25Struct row25Default = new row25Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_19__Struct {
				}
				Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out4Struct out4_tmp = new out4Struct();
				// ###############################

				/**
				 * [tMap_19 begin ] stop
				 */

				/**
				 * [tMap_18 begin ] start
				 */

				ok_Hash.put("tMap_18", false);
				start_Hash.put("tMap_18", System.currentTimeMillis());

				currentComponent = "tMap_18";

				int tos_count_tMap_18 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9_0Struct> tHash_Lookup_row9_0 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9_0Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9_0Struct>) globalMap
						.get("tHash_Lookup_row9_0"));

				row9_0Struct row9_0HashKey = new row9_0Struct();
				row9_0Struct row9_0Default = new row9_0Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_18__Struct {
				}
				Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfmainout_1Struct copyOfmainout_1_tmp = new copyOfmainout_1Struct();
				// ###############################

				/**
				 * [tMap_18 begin ] stop
				 */

				/**
				 * [tMap_17 begin ] start
				 */

				ok_Hash.put("tMap_17", false);
				start_Hash.put("tMap_17", System.currentTimeMillis());

				currentComponent = "tMap_17";

				int tos_count_tMap_17 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) globalMap
						.get("tHash_Lookup_row24"));

				row24Struct row24HashKey = new row24Struct();
				row24Struct row24Default = new row24Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_17__Struct {
				}
				Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfs_2Struct copyOfs_2_tmp = new copyOfs_2Struct();
				// ###############################

				/**
				 * [tMap_17 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_17_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_17_out", false);
				start_Hash.put("tAmazonAuroraInput_17_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_17";

				currentComponent = "tAmazonAuroraInput_17_out";

				int tos_count_tAmazonAuroraInput_17_out = 0;

				/**
				 * [tAmazonAuroraInput_17_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_17_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_17_in", false);
				start_Hash.put("tAmazonAuroraInput_17_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_17";

				currentComponent = "tAmazonAuroraInput_17_in";

				int tos_count_tAmazonAuroraInput_17_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_17_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_17_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_17_in = calendar_tAmazonAuroraInput_17_in
						.getTime();
				int nb_line_tAmazonAuroraInput_17_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_17_in = null;
				String driverClass_tAmazonAuroraInput_17_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_17_in);
				String dbUser_tAmazonAuroraInput_17_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_17_in = context.password;

				String dbPwd_tAmazonAuroraInput_17_in = decryptedPassword_tAmazonAuroraInput_17_in;

				String url_tAmazonAuroraInput_17_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_17_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_17_in,
								dbUser_tAmazonAuroraInput_17_in,
								dbPwd_tAmazonAuroraInput_17_in);

				java.sql.Statement stmt_tAmazonAuroraInput_17_in = conn_tAmazonAuroraInput_17_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_17_in = "select distinct OrionFirmId from transaction_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_17_QUERY",
						dbquery_tAmazonAuroraInput_17_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_17_in = null;
				try {
					rs_tAmazonAuroraInput_17_in = stmt_tAmazonAuroraInput_17_in
							.executeQuery(dbquery_tAmazonAuroraInput_17_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_17_in = rs_tAmazonAuroraInput_17_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_17_in = rsmd_tAmazonAuroraInput_17_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_17_in = null;

					while (rs_tAmazonAuroraInput_17_in.next()) {
						nb_line_tAmazonAuroraInput_17_in++;

						if (colQtyInRs_tAmazonAuroraInput_17_in < 1) {
							row_tAmazonAuroraInput_17_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_17_in.getObject(1) != null) {
								row_tAmazonAuroraInput_17_in.OrionFirmId = rs_tAmazonAuroraInput_17_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_17_in.OrionFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_17_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_17_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_17";

						currentComponent = "tAmazonAuroraInput_17_in";

						tos_count_tAmazonAuroraInput_17_in++;

						/**
						 * [tAmazonAuroraInput_17_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_17_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_17";

						currentComponent = "tAmazonAuroraInput_17_out";

						row23 = row_tAmazonAuroraInput_17_in;

						tos_count_tAmazonAuroraInput_17_out++;

						/**
						 * [tAmazonAuroraInput_17_out main ] stop
						 */

						/**
						 * [tMap_17 main ] start
						 */

						currentComponent = "tMap_17";

						boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_17 = false;
						boolean mainRowRejected_tMap_17 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row24"
						// /////////////////////////////////////////////

						boolean forceLooprow24 = false;

						row24Struct row24ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_17) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_17 = false;

							row24HashKey.orionConnectFirmId = row23.OrionFirmId;

							row24HashKey.hashCodeDirty = true;

							tHash_Lookup_row24.lookup(row24HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row24 != null
								&& tHash_Lookup_row24.getCount(row24HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row24' and it contains more one result from keys :  row24.orionConnectFirmId = '"
							// + row24HashKey.orionConnectFirmId + "'");
						} // G 071

						row24Struct row24 = null;

						row24Struct fromLookup_row24 = null;
						row24 = row24Default;

						if (tHash_Lookup_row24 != null
								&& tHash_Lookup_row24.hasNext()) { // G 099

							fromLookup_row24 = tHash_Lookup_row24.next();

						} // G 099

						if (fromLookup_row24 != null) {
							row24 = fromLookup_row24;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
							// ###############################
							// # Output tables

							copyOfs_2 = null;

							// # Output table : 'copyOfs_2'
							copyOfs_2_tmp.OrionFirmId = row23.OrionFirmId;
							copyOfs_2_tmp.orionEclipseFirmName = row24.orionEclipseFirmName;
							copyOfs_2 = copyOfs_2_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_17 = false;

						tos_count_tMap_17++;

						/**
						 * [tMap_17 main ] stop
						 */
						// Start of branch "copyOfs_2"
						if (copyOfs_2 != null) {

							/**
							 * [tMap_18 main ] start
							 */

							currentComponent = "tMap_18";

							boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_18 = false;
							boolean mainRowRejected_tMap_18 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row9_0"
							// /////////////////////////////////////////////

							boolean forceLooprow9_0 = false;

							row9_0Struct row9_0ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_18) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_18 = false;

								row9_0HashKey.firm = copyOfs_2.orionEclipseFirmName;

								row9_0HashKey.hashCodeDirty = true;

								tHash_Lookup_row9_0.lookup(row9_0HashKey);

								if (!tHash_Lookup_row9_0.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_18 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row9_0 != null
									&& tHash_Lookup_row9_0
											.getCount(row9_0HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9_0' and it contains more one result from keys :  row9_0.firm = '"
								// + row9_0HashKey.firm + "'");
							} // G 071

							row9_0Struct row9_0 = null;

							row9_0Struct fromLookup_row9_0 = null;
							row9_0 = row9_0Default;

							if (tHash_Lookup_row9_0 != null
									&& tHash_Lookup_row9_0.hasNext()) { // G 099

								fromLookup_row9_0 = tHash_Lookup_row9_0.next();

							} // G 099

							if (fromLookup_row9_0 != null) {
								row9_0 = fromLookup_row9_0;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
								// ###############################
								// # Output tables

								copyOfmainout_1 = null;

								if (!rejectedInnerJoin_tMap_18) {
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'copyOfmainout_1'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_18) {
									copyOfmainout_1_tmp.firm = copyOfs_2.OrionFirmId;
									copyOfmainout_1 = copyOfmainout_1_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_18 = false;

							tos_count_tMap_18++;

							/**
							 * [tMap_18 main ] stop
							 */
							// Start of branch "copyOfmainout_1"
							if (copyOfmainout_1 != null) {

								/**
								 * [tMap_19 main ] start
								 */

								currentComponent = "tMap_19";

								boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_19 = false;
								boolean mainRowRejected_tMap_19 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row25"
								// /////////////////////////////////////////////

								boolean forceLooprow25 = false;

								row25Struct row25ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_19) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_19 = false;

									row25HashKey.orionFirmId = copyOfmainout_1.firm;

									row25HashKey.hashCodeDirty = true;

									tHash_Lookup_row25.lookup(row25HashKey);

									if (!tHash_Lookup_row25.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_19 = true;

										forceLooprow25 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow25 = true;
								} // G 21

								row25Struct row25 = null;

								while ((tHash_Lookup_row25 != null && tHash_Lookup_row25
										.hasNext()) || forceLooprow25) { // G_TM_M_043

									// CALL close loop of lookup 'row25'

									row25Struct fromLookup_row25 = null;
									row25 = row25Default;

									if (!forceLooprow25) { // G 46

										fromLookup_row25 = tHash_Lookup_row25
												.next();

										if (fromLookup_row25 != null) {
											row25 = fromLookup_row25;
										}

									} // G 46

									forceLooprow25 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
										// ###############################
										// # Output tables

										out4 = null;

										if (!rejectedInnerJoin_tMap_19) {

											// # Output table : 'out4'
											out4_tmp.orionFirmId = row25.orionFirmId;
											out4_tmp.externalId = row25.externalId;
											out4_tmp.accountId = row25.accountId;
											out4_tmp.accountNumber = row25.accountNumber;
											out4_tmp.symbol = row25.symbol;
											out4_tmp.tradeDate = row25.tradeDate;
											out4_tmp.quantity = row25.quantity;
											out4_tmp.amount = row25.amount;
											out4_tmp.type = row25.type;
											out4_tmp.action = row25.action;
											out4_tmp.tradeCost = row25.tradeCost;
											out4 = out4_tmp;
										} // closing inner join bracket (2)
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_19 = false;

									tos_count_tMap_19++;

									/**
									 * [tMap_19 main ] stop
									 */
									// Start of branch "out4"
									if (out4 != null) {

										/**
										 * [tAmazonMysqlOutput_6 main ] start
										 */

										currentComponent = "tAmazonMysqlOutput_6";

										whetherReject_tAmazonMysqlOutput_6 = false;
										if (out4.orionFirmId == null) {
											pstmt_tAmazonMysqlOutput_6.setNull(
													1, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_6.setInt(
													1, out4.orionFirmId);
										}

										if (out4.externalId == null) {
											pstmt_tAmazonMysqlOutput_6.setNull(
													2, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_6.setInt(
													2, out4.externalId);
										}

										if (out4.accountId == null) {
											pstmt_tAmazonMysqlOutput_6.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_6
													.setString(3,
															out4.accountId);
										}

										if (out4.accountNumber == null) {
											pstmt_tAmazonMysqlOutput_6.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_6
													.setString(4,
															out4.accountNumber);
										}

										if (out4.symbol == null) {
											pstmt_tAmazonMysqlOutput_6.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_6
													.setString(5, out4.symbol);
										}

										if (out4.tradeDate != null) {
											date_tAmazonMysqlOutput_6 = out4.tradeDate
													.getTime();
											if (date_tAmazonMysqlOutput_6 < year1_tAmazonMysqlOutput_6
													|| date_tAmazonMysqlOutput_6 >= year10000_tAmazonMysqlOutput_6) {
												pstmt_tAmazonMysqlOutput_6
														.setString(6,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonMysqlOutput_6
														.setTimestamp(
																6,
																new java.sql.Timestamp(
																		date_tAmazonMysqlOutput_6));
											}
										} else {
											pstmt_tAmazonMysqlOutput_6.setNull(
													6, java.sql.Types.DATE);
										}

										if (out4.quantity == null) {
											pstmt_tAmazonMysqlOutput_6.setNull(
													7, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_6
													.setFloat(7, out4.quantity);
										}

										if (out4.amount == null) {
											pstmt_tAmazonMysqlOutput_6.setNull(
													8, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_6
													.setFloat(8, out4.amount);
										}

										if (out4.type == null) {
											pstmt_tAmazonMysqlOutput_6.setNull(
													9, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_6
													.setString(9, out4.type);
										}

										if (out4.action == null) {
											pstmt_tAmazonMysqlOutput_6.setNull(
													10, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_6
													.setString(10, out4.action);
										}

										if (out4.tradeCost == null) {
											pstmt_tAmazonMysqlOutput_6.setNull(
													11, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_6
													.setFloat(11,
															out4.tradeCost);
										}

										pstmt_tAmazonMysqlOutput_6.addBatch();
										nb_line_tAmazonMysqlOutput_6++;

										batchSizeCounter_tAmazonMysqlOutput_6++;

										if (batchSize_tAmazonMysqlOutput_6 <= batchSizeCounter_tAmazonMysqlOutput_6) {
											try {
												int countSum_tAmazonMysqlOutput_6 = 0;

												for (int countEach_tAmazonMysqlOutput_6 : pstmt_tAmazonMysqlOutput_6
														.executeBatch()) {
													countSum_tAmazonMysqlOutput_6 += (countEach_tAmazonMysqlOutput_6 < 0 ? 0
															: 1);
												}

												insertedCount_tAmazonMysqlOutput_6 += countSum_tAmazonMysqlOutput_6;

											} catch (java.sql.BatchUpdateException e) {

												int countSum_tAmazonMysqlOutput_6 = 0;
												for (int countEach_tAmazonMysqlOutput_6 : e
														.getUpdateCounts()) {
													countSum_tAmazonMysqlOutput_6 += (countEach_tAmazonMysqlOutput_6 < 0 ? 0
															: countEach_tAmazonMysqlOutput_6);
												}

												insertedCount_tAmazonMysqlOutput_6 += countSum_tAmazonMysqlOutput_6;

												System.err.println(e
														.getMessage());

											}

											batchSizeCounter_tAmazonMysqlOutput_6 = 0;
										}

										commitCounter_tAmazonMysqlOutput_6++;
										if (commitEvery_tAmazonMysqlOutput_6 <= commitCounter_tAmazonMysqlOutput_6) {
											if ((batchSize_tAmazonMysqlOutput_6 > 0)
													&& (batchSizeCounter_tAmazonMysqlOutput_6 > 0)) {
												try {
													int countSum_tAmazonMysqlOutput_6 = 0;

													for (int countEach_tAmazonMysqlOutput_6 : pstmt_tAmazonMysqlOutput_6
															.executeBatch()) {
														countSum_tAmazonMysqlOutput_6 += (countEach_tAmazonMysqlOutput_6 < 0 ? 0
																: 1);
													}

													insertedCount_tAmazonMysqlOutput_6 += countSum_tAmazonMysqlOutput_6;

													batchSizeCounter_tAmazonMysqlOutput_6 = 0;
												} catch (java.sql.BatchUpdateException e) {

													int countSum_tAmazonMysqlOutput_6 = 0;
													for (int countEach_tAmazonMysqlOutput_6 : e
															.getUpdateCounts()) {
														countSum_tAmazonMysqlOutput_6 += (countEach_tAmazonMysqlOutput_6 < 0 ? 0
																: countEach_tAmazonMysqlOutput_6);
													}

													insertedCount_tAmazonMysqlOutput_6 += countSum_tAmazonMysqlOutput_6;

													System.err.println(e
															.getMessage());

												}
											}

											conn_tAmazonMysqlOutput_6.commit();

											commitCounter_tAmazonMysqlOutput_6 = 0;
										}

										tos_count_tAmazonMysqlOutput_6++;

										/**
										 * [tAmazonMysqlOutput_6 main ] stop
										 */

									} // End of branch "out4"

								} // close loop of lookup 'row25' // G_TM_M_043

							} // End of branch "copyOfmainout_1"

						} // End of branch "copyOfs_2"

						/**
						 * [tAmazonAuroraInput_17_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_17";

						currentComponent = "tAmazonAuroraInput_17_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_17_in != null) {
						rs_tAmazonAuroraInput_17_in.close();
					}
					stmt_tAmazonAuroraInput_17_in.close();
					if (conn_tAmazonAuroraInput_17_in != null
							&& !conn_tAmazonAuroraInput_17_in.isClosed()) {

						conn_tAmazonAuroraInput_17_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_17_NB_LINE",
						nb_line_tAmazonAuroraInput_17_in);

				ok_Hash.put("tAmazonAuroraInput_17_in", true);
				end_Hash.put("tAmazonAuroraInput_17_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_17_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_17_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_17";

				currentComponent = "tAmazonAuroraInput_17_out";

				ok_Hash.put("tAmazonAuroraInput_17_out", true);
				end_Hash.put("tAmazonAuroraInput_17_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_17_out end ] stop
				 */

				/**
				 * [tMap_17 end ] start
				 */

				currentComponent = "tMap_17";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row24 != null) {
					tHash_Lookup_row24.endGet();
				}
				globalMap.remove("tHash_Lookup_row24");

				// ###############################

				ok_Hash.put("tMap_17", true);
				end_Hash.put("tMap_17", System.currentTimeMillis());

				/**
				 * [tMap_17 end ] stop
				 */

				/**
				 * [tMap_18 end ] start
				 */

				currentComponent = "tMap_18";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row9_0 != null) {
					tHash_Lookup_row9_0.endGet();
				}
				globalMap.remove("tHash_Lookup_row9_0");

				// ###############################

				ok_Hash.put("tMap_18", true);
				end_Hash.put("tMap_18", System.currentTimeMillis());

				/**
				 * [tMap_18 end ] stop
				 */

				/**
				 * [tMap_19 end ] start
				 */

				currentComponent = "tMap_19";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row25 != null) {
					tHash_Lookup_row25.endGet();
				}
				globalMap.remove("tHash_Lookup_row25");

				// ###############################

				ok_Hash.put("tMap_19", true);
				end_Hash.put("tMap_19", System.currentTimeMillis());

				/**
				 * [tMap_19 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_6 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_6";

				try {
					if (batchSizeCounter_tAmazonMysqlOutput_6 != 0) {
						int countSum_tAmazonMysqlOutput_6 = 0;

						for (int countEach_tAmazonMysqlOutput_6 : pstmt_tAmazonMysqlOutput_6
								.executeBatch()) {
							countSum_tAmazonMysqlOutput_6 += (countEach_tAmazonMysqlOutput_6 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonMysqlOutput_6 += countSum_tAmazonMysqlOutput_6;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonMysqlOutput_6 = 0;
					for (int countEach_tAmazonMysqlOutput_6 : e
							.getUpdateCounts()) {
						countSum_tAmazonMysqlOutput_6 += (countEach_tAmazonMysqlOutput_6 < 0 ? 0
								: countEach_tAmazonMysqlOutput_6);
					}

					insertedCount_tAmazonMysqlOutput_6 += countSum_tAmazonMysqlOutput_6;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonMysqlOutput_6 = 0;

				if (pstmt_tAmazonMysqlOutput_6 != null) {
					pstmt_tAmazonMysqlOutput_6.close();
				}

				if (commitCounter_tAmazonMysqlOutput_6 > 0) {

					conn_tAmazonMysqlOutput_6.commit();

				}

				conn_tAmazonMysqlOutput_6.close();

				resourceMap.put("finish_tAmazonMysqlOutput_6", true);

				nb_line_deleted_tAmazonMysqlOutput_6 = nb_line_deleted_tAmazonMysqlOutput_6
						+ deletedCount_tAmazonMysqlOutput_6;
				nb_line_update_tAmazonMysqlOutput_6 = nb_line_update_tAmazonMysqlOutput_6
						+ updatedCount_tAmazonMysqlOutput_6;
				nb_line_inserted_tAmazonMysqlOutput_6 = nb_line_inserted_tAmazonMysqlOutput_6
						+ insertedCount_tAmazonMysqlOutput_6;
				nb_line_rejected_tAmazonMysqlOutput_6 = nb_line_rejected_tAmazonMysqlOutput_6
						+ rejectedCount_tAmazonMysqlOutput_6;

				globalMap.put("tAmazonMysqlOutput_6_NB_LINE",
						nb_line_tAmazonMysqlOutput_6);
				globalMap.put("tAmazonMysqlOutput_6_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_6);
				globalMap.put("tAmazonMysqlOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_6);
				globalMap.put("tAmazonMysqlOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_6);
				globalMap.put("tAmazonMysqlOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_6);

				ok_Hash.put("tAmazonMysqlOutput_6", true);
				end_Hash.put("tAmazonMysqlOutput_6", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_19"
			globalMap.remove("tHash_Lookup_row25");

			// free memory for "tMap_18"
			globalMap.remove("tHash_Lookup_row9_0");

			// free memory for "tMap_17"
			globalMap.remove("tHash_Lookup_row24");

			try {

				/**
				 * [tAmazonAuroraInput_17_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_17";

				currentComponent = "tAmazonAuroraInput_17_in";

				/**
				 * [tAmazonAuroraInput_17_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_17_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_17";

				currentComponent = "tAmazonAuroraInput_17_out";

				/**
				 * [tAmazonAuroraInput_17_out finally ] stop
				 */

				/**
				 * [tMap_17 finally ] start
				 */

				currentComponent = "tMap_17";

				/**
				 * [tMap_17 finally ] stop
				 */

				/**
				 * [tMap_18 finally ] start
				 */

				currentComponent = "tMap_18";

				/**
				 * [tMap_18 finally ] stop
				 */

				/**
				 * [tMap_19 finally ] start
				 */

				currentComponent = "tMap_19";

				/**
				 * [tMap_19 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_6 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_6";

				if (resourceMap.get("finish_tAmazonMysqlOutput_6") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_6") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_6")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_6) {
							String errorMessage_tAmazonMysqlOutput_6 = "failed to close the connection in tAmazonMysqlOutput_6 :"
									+ sqlEx_tAmazonMysqlOutput_6.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_6);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_17_in_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements
			routines.system.IPersistableComparableLookupRow<row24Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row24Struct other = (row24Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row24Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmName = this.orionEclipseFirmName;

		}

		public void copyKeysDataTo(row24Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orionEclipseFirmName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_18_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_18_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_18_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_18_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_18_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_18_inStruct row_tAmazonAuroraInput_18_in = new row_tAmazonAuroraInput_18_inStruct();
				row_tAmazonAuroraInput_18_inStruct row24 = row_tAmazonAuroraInput_18_in;

				/**
				 * [tAdvancedHash_row24 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row24", false);
				start_Hash.put("tAdvancedHash_row24",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row24";

				int tos_count_tAdvancedHash_row24 = 0;

				// connection name:row24
				// source node:tAmazonAuroraInput_18_out -
				// inputs:(row_tAmazonAuroraInput_18_in) outputs:(row24,row24) |
				// target node:tAdvancedHash_row24 - inputs:(row24) outputs:()
				// linked node: tMap_17 - inputs:(row23,row24)
				// outputs:(copyOfs_2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row24 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row24Struct> getLookup(matchingModeEnum_row24);

				globalMap.put("tHash_Lookup_row24", tHash_Lookup_row24);

				/**
				 * [tAdvancedHash_row24 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_18_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_18_out", false);
				start_Hash.put("tAmazonAuroraInput_18_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_18";

				currentComponent = "tAmazonAuroraInput_18_out";

				int tos_count_tAmazonAuroraInput_18_out = 0;

				/**
				 * [tAmazonAuroraInput_18_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_18_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_18_in", false);
				start_Hash.put("tAmazonAuroraInput_18_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_18";

				currentComponent = "tAmazonAuroraInput_18_in";

				int tos_count_tAmazonAuroraInput_18_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_18_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_18_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_18_in = calendar_tAmazonAuroraInput_18_in
						.getTime();
				int nb_line_tAmazonAuroraInput_18_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_18_in = null;
				String driverClass_tAmazonAuroraInput_18_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_18_in);
				String dbUser_tAmazonAuroraInput_18_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_18_in = context.password;

				String dbPwd_tAmazonAuroraInput_18_in = decryptedPassword_tAmazonAuroraInput_18_in;

				String url_tAmazonAuroraInput_18_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_18_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_18_in,
								dbUser_tAmazonAuroraInput_18_in,
								dbPwd_tAmazonAuroraInput_18_in);

				java.sql.Statement stmt_tAmazonAuroraInput_18_in = conn_tAmazonAuroraInput_18_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_18_in = "select orionConnectFirmId , orionEclipseFirmName from firm";

				globalMap.put("tAmazonAuroraInput_18_QUERY",
						dbquery_tAmazonAuroraInput_18_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_18_in = null;
				try {
					rs_tAmazonAuroraInput_18_in = stmt_tAmazonAuroraInput_18_in
							.executeQuery(dbquery_tAmazonAuroraInput_18_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_18_in = rs_tAmazonAuroraInput_18_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_18_in = rsmd_tAmazonAuroraInput_18_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_18_in = null;

					while (rs_tAmazonAuroraInput_18_in.next()) {
						nb_line_tAmazonAuroraInput_18_in++;

						if (colQtyInRs_tAmazonAuroraInput_18_in < 1) {
							row_tAmazonAuroraInput_18_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_18_in.getObject(1) != null) {
								row_tAmazonAuroraInput_18_in.orionConnectFirmId = rs_tAmazonAuroraInput_18_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_18_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_18_in < 2) {
							row_tAmazonAuroraInput_18_in.orionEclipseFirmName = null;
						} else {

							row_tAmazonAuroraInput_18_in.orionEclipseFirmName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_18_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_18_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_18_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_18";

						currentComponent = "tAmazonAuroraInput_18_in";

						tos_count_tAmazonAuroraInput_18_in++;

						/**
						 * [tAmazonAuroraInput_18_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_18_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_18";

						currentComponent = "tAmazonAuroraInput_18_out";

						row24 = row_tAmazonAuroraInput_18_in;

						tos_count_tAmazonAuroraInput_18_out++;

						/**
						 * [tAmazonAuroraInput_18_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row24 main ] start
						 */

						currentComponent = "tAdvancedHash_row24";

						row24Struct row24_HashRow = new row24Struct();

						row24_HashRow.orionConnectFirmId = row24.orionConnectFirmId;

						row24_HashRow.orionEclipseFirmName = row24.orionEclipseFirmName;

						tHash_Lookup_row24.put(row24_HashRow);

						tos_count_tAdvancedHash_row24++;

						/**
						 * [tAdvancedHash_row24 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_18_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_18";

						currentComponent = "tAmazonAuroraInput_18_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_18_in != null) {
						rs_tAmazonAuroraInput_18_in.close();
					}
					stmt_tAmazonAuroraInput_18_in.close();
					if (conn_tAmazonAuroraInput_18_in != null
							&& !conn_tAmazonAuroraInput_18_in.isClosed()) {

						conn_tAmazonAuroraInput_18_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_18_NB_LINE",
						nb_line_tAmazonAuroraInput_18_in);

				ok_Hash.put("tAmazonAuroraInput_18_in", true);
				end_Hash.put("tAmazonAuroraInput_18_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_18_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_18_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_18";

				currentComponent = "tAmazonAuroraInput_18_out";

				ok_Hash.put("tAmazonAuroraInput_18_out", true);
				end_Hash.put("tAmazonAuroraInput_18_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_18_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row24 end ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				tHash_Lookup_row24.endPut();

				ok_Hash.put("tAdvancedHash_row24", true);
				end_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row24 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_18_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_18";

				currentComponent = "tAmazonAuroraInput_18_in";

				/**
				 * [tAmazonAuroraInput_18_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_18_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_18";

				currentComponent = "tAmazonAuroraInput_18_out";

				/**
				 * [tAmazonAuroraInput_18_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row24 finally ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				/**
				 * [tAdvancedHash_row24 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_18_in_SUBPROCESS_STATE", 1);
	}

	public static class row25Struct implements
			routines.system.IPersistableComparableLookupRow<row25Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		public java.util.Date tradeDate;

		public java.util.Date getTradeDate() {
			return this.tradeDate;
		}

		public Float quantity;

		public Float getQuantity() {
			return this.quantity;
		}

		public Float amount;

		public Float getAmount() {
			return this.amount;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String action;

		public String getAction() {
			return this.action;
		}

		public Float tradeCost;

		public Float getTradeCost() {
			return this.tradeCost;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionFirmId == null) ? 0 : this.orionFirmId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row25Struct other = (row25Struct) obj;

			if (this.orionFirmId == null) {
				if (other.orionFirmId != null)
					return false;

			} else if (!this.orionFirmId.equals(other.orionFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row25Struct other) {

			other.orionFirmId = this.orionFirmId;
			other.externalId = this.externalId;
			other.accountId = this.accountId;
			other.accountNumber = this.accountNumber;
			other.symbol = this.symbol;
			other.tradeDate = this.tradeDate;
			other.quantity = this.quantity;
			other.amount = this.amount;
			other.type = this.type;
			other.action = this.action;
			other.tradeCost = this.tradeCost;

		}

		public void copyKeysDataTo(row25Struct other) {

			other.orionFirmId = this.orionFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.externalId = readInteger(dis, ois);

				this.accountId = readString(dis, ois);

				this.accountNumber = readString(dis, ois);

				this.symbol = readString(dis, ois);

				this.tradeDate = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.quantity = null;
				} else {
					this.quantity = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.amount = null;
				} else {
					this.amount = dis.readFloat();
				}

				this.type = readString(dis, ois);

				this.action = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.tradeCost = null;
				} else {
					this.tradeCost = dis.readFloat();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.externalId, dos, oos);

				writeString(this.accountId, dos, oos);

				writeString(this.accountNumber, dos, oos);

				writeString(this.symbol, dos, oos);

				writeDate(this.tradeDate, dos, oos);

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.quantity);
				}

				if (this.amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.amount);
				}

				writeString(this.type, dos, oos);

				writeString(this.action, dos, oos);

				if (this.tradeCost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tradeCost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",symbol=" + symbol);
			sb.append(",tradeDate=" + String.valueOf(tradeDate));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",amount=" + String.valueOf(amount));
			sb.append(",type=" + type);
			sb.append(",action=" + action);
			sb.append(",tradeCost=" + String.valueOf(tradeCost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionFirmId,
					other.orionFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_19_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_19_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		public java.util.Date tradeDate;

		public java.util.Date getTradeDate() {
			return this.tradeDate;
		}

		public Float quantity;

		public Float getQuantity() {
			return this.quantity;
		}

		public Float amount;

		public Float getAmount() {
			return this.amount;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String action;

		public String getAction() {
			return this.action;
		}

		public Float tradeCost;

		public Float getTradeCost() {
			return this.tradeCost;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					this.accountId = readString(dis);

					this.accountNumber = readString(dis);

					this.symbol = readString(dis);

					this.tradeDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantity = null;
					} else {
						this.quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.amount = null;
					} else {
						this.amount = dis.readFloat();
					}

					this.type = readString(dis);

					this.action = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tradeCost = null;
					} else {
						this.tradeCost = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.accountNumber, dos);

				// String

				writeString(this.symbol, dos);

				// java.util.Date

				writeDate(this.tradeDate, dos);

				// Float

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.quantity);
				}

				// Float

				if (this.amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.amount);
				}

				// String

				writeString(this.type, dos);

				// String

				writeString(this.action, dos);

				// Float

				if (this.tradeCost == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tradeCost);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",accountId=" + accountId);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",symbol=" + symbol);
			sb.append(",tradeDate=" + String.valueOf(tradeDate));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",amount=" + String.valueOf(amount));
			sb.append(",type=" + type);
			sb.append(",action=" + action);
			sb.append(",tradeCost=" + String.valueOf(tradeCost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_19_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_19_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_19_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_19_inStruct row_tAmazonAuroraInput_19_in = new row_tAmazonAuroraInput_19_inStruct();
				row_tAmazonAuroraInput_19_inStruct row25 = row_tAmazonAuroraInput_19_in;

				/**
				 * [tAdvancedHash_row25 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row25", false);
				start_Hash.put("tAdvancedHash_row25",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row25";

				int tos_count_tAdvancedHash_row25 = 0;

				// connection name:row25
				// source node:tAmazonAuroraInput_19_out -
				// inputs:(row_tAmazonAuroraInput_19_in) outputs:(row25,row25) |
				// target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
				// linked node: tMap_19 - inputs:(copyOfmainout_1,row25)
				// outputs:(out4)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row25Struct> getLookup(matchingModeEnum_row25);

				globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);

				/**
				 * [tAdvancedHash_row25 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_19_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_19_out", false);
				start_Hash.put("tAmazonAuroraInput_19_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_19";

				currentComponent = "tAmazonAuroraInput_19_out";

				int tos_count_tAmazonAuroraInput_19_out = 0;

				/**
				 * [tAmazonAuroraInput_19_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_19_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_19_in", false);
				start_Hash.put("tAmazonAuroraInput_19_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_19";

				currentComponent = "tAmazonAuroraInput_19_in";

				int tos_count_tAmazonAuroraInput_19_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_19_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_19_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_19_in = calendar_tAmazonAuroraInput_19_in
						.getTime();
				int nb_line_tAmazonAuroraInput_19_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_19_in = null;
				String driverClass_tAmazonAuroraInput_19_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_19_in);
				String dbUser_tAmazonAuroraInput_19_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_19_in = context.password;

				String dbPwd_tAmazonAuroraInput_19_in = decryptedPassword_tAmazonAuroraInput_19_in;

				String url_tAmazonAuroraInput_19_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_19_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_19_in,
								dbUser_tAmazonAuroraInput_19_in,
								dbPwd_tAmazonAuroraInput_19_in);

				java.sql.Statement stmt_tAmazonAuroraInput_19_in = conn_tAmazonAuroraInput_19_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_19_in = "select * from transaction_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_19_QUERY",
						dbquery_tAmazonAuroraInput_19_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_19_in = null;
				try {
					rs_tAmazonAuroraInput_19_in = stmt_tAmazonAuroraInput_19_in
							.executeQuery(dbquery_tAmazonAuroraInput_19_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_19_in = rs_tAmazonAuroraInput_19_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_19_in = rsmd_tAmazonAuroraInput_19_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_19_in = null;

					while (rs_tAmazonAuroraInput_19_in.next()) {
						nb_line_tAmazonAuroraInput_19_in++;

						if (colQtyInRs_tAmazonAuroraInput_19_in < 1) {
							row_tAmazonAuroraInput_19_in.orionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_19_in.getObject(1) != null) {
								row_tAmazonAuroraInput_19_in.orionFirmId = rs_tAmazonAuroraInput_19_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_19_in.orionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_19_in < 2) {
							row_tAmazonAuroraInput_19_in.externalId = null;
						} else {

							if (rs_tAmazonAuroraInput_19_in.getObject(2) != null) {
								row_tAmazonAuroraInput_19_in.externalId = rs_tAmazonAuroraInput_19_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_19_in.externalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_19_in < 3) {
							row_tAmazonAuroraInput_19_in.accountId = null;
						} else {

							row_tAmazonAuroraInput_19_in.accountId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_19_in, 3,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_19_in < 4) {
							row_tAmazonAuroraInput_19_in.accountNumber = null;
						} else {

							row_tAmazonAuroraInput_19_in.accountNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_19_in, 4,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_19_in < 5) {
							row_tAmazonAuroraInput_19_in.symbol = null;
						} else {

							row_tAmazonAuroraInput_19_in.symbol = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_19_in, 5,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_19_in < 6) {
							row_tAmazonAuroraInput_19_in.tradeDate = null;
						} else {

							if (rs_tAmazonAuroraInput_19_in.getString(6) != null) {
								String dateString_tAmazonAuroraInput_19_in = rs_tAmazonAuroraInput_19_in
										.getString(6);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_19_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_19_in)) {
									row_tAmazonAuroraInput_19_in.tradeDate = rs_tAmazonAuroraInput_19_in
											.getTimestamp(6);
								} else {
									row_tAmazonAuroraInput_19_in.tradeDate = (java.util.Date) year0_tAmazonAuroraInput_19_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_19_in.tradeDate = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_19_in < 7) {
							row_tAmazonAuroraInput_19_in.quantity = null;
						} else {

							if (rs_tAmazonAuroraInput_19_in.getObject(7) != null) {
								row_tAmazonAuroraInput_19_in.quantity = rs_tAmazonAuroraInput_19_in
										.getFloat(7);
							} else {
								row_tAmazonAuroraInput_19_in.quantity = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_19_in < 8) {
							row_tAmazonAuroraInput_19_in.amount = null;
						} else {

							if (rs_tAmazonAuroraInput_19_in.getObject(8) != null) {
								row_tAmazonAuroraInput_19_in.amount = rs_tAmazonAuroraInput_19_in
										.getFloat(8);
							} else {
								row_tAmazonAuroraInput_19_in.amount = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_19_in < 9) {
							row_tAmazonAuroraInput_19_in.type = null;
						} else {

							row_tAmazonAuroraInput_19_in.type = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_19_in, 9,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_19_in < 10) {
							row_tAmazonAuroraInput_19_in.action = null;
						} else {

							row_tAmazonAuroraInput_19_in.action = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_19_in, 10,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_19_in < 11) {
							row_tAmazonAuroraInput_19_in.tradeCost = null;
						} else {

							if (rs_tAmazonAuroraInput_19_in.getObject(11) != null) {
								row_tAmazonAuroraInput_19_in.tradeCost = rs_tAmazonAuroraInput_19_in
										.getFloat(11);
							} else {
								row_tAmazonAuroraInput_19_in.tradeCost = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_19_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_19_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_19";

						currentComponent = "tAmazonAuroraInput_19_in";

						tos_count_tAmazonAuroraInput_19_in++;

						/**
						 * [tAmazonAuroraInput_19_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_19_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_19";

						currentComponent = "tAmazonAuroraInput_19_out";

						row25 = row_tAmazonAuroraInput_19_in;

						tos_count_tAmazonAuroraInput_19_out++;

						/**
						 * [tAmazonAuroraInput_19_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row25 main ] start
						 */

						currentComponent = "tAdvancedHash_row25";

						row25Struct row25_HashRow = new row25Struct();

						row25_HashRow.orionFirmId = row25.orionFirmId;

						row25_HashRow.externalId = row25.externalId;

						row25_HashRow.accountId = row25.accountId;

						row25_HashRow.accountNumber = row25.accountNumber;

						row25_HashRow.symbol = row25.symbol;

						row25_HashRow.tradeDate = row25.tradeDate;

						row25_HashRow.quantity = row25.quantity;

						row25_HashRow.amount = row25.amount;

						row25_HashRow.type = row25.type;

						row25_HashRow.action = row25.action;

						row25_HashRow.tradeCost = row25.tradeCost;

						tHash_Lookup_row25.put(row25_HashRow);

						tos_count_tAdvancedHash_row25++;

						/**
						 * [tAdvancedHash_row25 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_19_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_19";

						currentComponent = "tAmazonAuroraInput_19_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_19_in != null) {
						rs_tAmazonAuroraInput_19_in.close();
					}
					stmt_tAmazonAuroraInput_19_in.close();
					if (conn_tAmazonAuroraInput_19_in != null
							&& !conn_tAmazonAuroraInput_19_in.isClosed()) {

						conn_tAmazonAuroraInput_19_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_19_NB_LINE",
						nb_line_tAmazonAuroraInput_19_in);

				ok_Hash.put("tAmazonAuroraInput_19_in", true);
				end_Hash.put("tAmazonAuroraInput_19_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_19_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_19_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_19";

				currentComponent = "tAmazonAuroraInput_19_out";

				ok_Hash.put("tAmazonAuroraInput_19_out", true);
				end_Hash.put("tAmazonAuroraInput_19_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_19_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row25 end ] start
				 */

				currentComponent = "tAdvancedHash_row25";

				tHash_Lookup_row25.endPut();

				ok_Hash.put("tAdvancedHash_row25", true);
				end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row25 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_19_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_19";

				currentComponent = "tAmazonAuroraInput_19_in";

				/**
				 * [tAmazonAuroraInput_19_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_19_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_19";

				currentComponent = "tAmazonAuroraInput_19_out";

				/**
				 * [tAmazonAuroraInput_19_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row25 finally ] start
				 */

				currentComponent = "tAdvancedHash_row25";

				/**
				 * [tAdvancedHash_row25 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_19_in_SUBPROCESS_STATE", 1);
	}

	public static class row47Struct implements
			routines.system.IPersistableRow<row47Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row47Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOffirm_connection_4Struct implements
			routines.system.IPersistableRow<copyOffirm_connection_4Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOffirm_connection_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row46Struct implements
			routines.system.IPersistableRow<row46Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row46Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_28_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_28_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_28_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_28Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_28Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_28_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_28_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_20Process(globalMap);

				row_tAmazonAuroraInput_28_inStruct row_tAmazonAuroraInput_28_in = new row_tAmazonAuroraInput_28_inStruct();
				row_tAmazonAuroraInput_28_inStruct row46 = row_tAmazonAuroraInput_28_in;
				copyOffirm_connection_4Struct copyOffirm_connection_4 = new copyOffirm_connection_4Struct();
				row47Struct row47 = new row47Struct();

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());

				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				/**
				 * [tJava_7 begin ] stop
				 */

				/**
				 * [tJavaRow_21 begin ] start
				 */

				ok_Hash.put("tJavaRow_21", false);
				start_Hash.put("tJavaRow_21", System.currentTimeMillis());

				currentComponent = "tJavaRow_21";

				int tos_count_tJavaRow_21 = 0;

				int nb_line_tJavaRow_21 = 0;

				/**
				 * [tJavaRow_21 begin ] stop
				 */

				/**
				 * [tMap_28 begin ] start
				 */

				ok_Hash.put("tMap_28", false);
				start_Hash.put("tMap_28", System.currentTimeMillis());

				currentComponent = "tMap_28";

				int tos_count_tMap_28 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) globalMap
						.get("tHash_Lookup_row45"));

				row45Struct row45HashKey = new row45Struct();
				row45Struct row45Default = new row45Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_28__Struct {
				}
				Var__tMap_28__Struct Var__tMap_28 = new Var__tMap_28__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOffirm_connection_4Struct copyOffirm_connection_4_tmp = new copyOffirm_connection_4Struct();
				// ###############################

				/**
				 * [tMap_28 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_28_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_28_out", false);
				start_Hash.put("tAmazonAuroraInput_28_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_28";

				currentComponent = "tAmazonAuroraInput_28_out";

				int tos_count_tAmazonAuroraInput_28_out = 0;

				/**
				 * [tAmazonAuroraInput_28_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_28_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_28_in", false);
				start_Hash.put("tAmazonAuroraInput_28_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_28";

				currentComponent = "tAmazonAuroraInput_28_in";

				int tos_count_tAmazonAuroraInput_28_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_28_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_28_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_28_in = calendar_tAmazonAuroraInput_28_in
						.getTime();
				int nb_line_tAmazonAuroraInput_28_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_28_in = null;
				String driverClass_tAmazonAuroraInput_28_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_28_in);
				String dbUser_tAmazonAuroraInput_28_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_28_in = context.password;

				String dbPwd_tAmazonAuroraInput_28_in = decryptedPassword_tAmazonAuroraInput_28_in;

				String url_tAmazonAuroraInput_28_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_28_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_28_in,
								dbUser_tAmazonAuroraInput_28_in,
								dbPwd_tAmazonAuroraInput_28_in);

				java.sql.Statement stmt_tAmazonAuroraInput_28_in = conn_tAmazonAuroraInput_28_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_28_in = "SELECT `name` , `server` , `database` FROM `orionEclipseFirm`";

				globalMap.put("tAmazonAuroraInput_28_QUERY",
						dbquery_tAmazonAuroraInput_28_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_28_in = null;
				try {
					rs_tAmazonAuroraInput_28_in = stmt_tAmazonAuroraInput_28_in
							.executeQuery(dbquery_tAmazonAuroraInput_28_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_28_in = rs_tAmazonAuroraInput_28_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_28_in = rsmd_tAmazonAuroraInput_28_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_28_in = null;

					while (rs_tAmazonAuroraInput_28_in.next()) {
						nb_line_tAmazonAuroraInput_28_in++;

						if (colQtyInRs_tAmazonAuroraInput_28_in < 1) {
							row_tAmazonAuroraInput_28_in.name = null;
						} else {

							row_tAmazonAuroraInput_28_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_28_in, 1,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_28_in < 2) {
							row_tAmazonAuroraInput_28_in.server = null;
						} else {

							row_tAmazonAuroraInput_28_in.server = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_28_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_28_in < 3) {
							row_tAmazonAuroraInput_28_in.database = null;
						} else {

							row_tAmazonAuroraInput_28_in.database = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_28_in, 3,
											false);
						}

						/**
						 * [tAmazonAuroraInput_28_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_28_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_28";

						currentComponent = "tAmazonAuroraInput_28_in";

						tos_count_tAmazonAuroraInput_28_in++;

						/**
						 * [tAmazonAuroraInput_28_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_28_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_28";

						currentComponent = "tAmazonAuroraInput_28_out";

						row46 = row_tAmazonAuroraInput_28_in;

						tos_count_tAmazonAuroraInput_28_out++;

						/**
						 * [tAmazonAuroraInput_28_out main ] stop
						 */

						/**
						 * [tMap_28 main ] start
						 */

						currentComponent = "tMap_28";

						boolean hasCasePrimitiveKeyWithNull_tMap_28 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_28 = false;
						boolean mainRowRejected_tMap_28 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row45"
						// /////////////////////////////////////////////

						boolean forceLooprow45 = false;

						row45Struct row45ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_28) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_28 = false;

							row45HashKey.firm = row46.name;

							row45HashKey.hashCodeDirty = true;

							tHash_Lookup_row45.lookup(row45HashKey);

							if (!tHash_Lookup_row45.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_28 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row45 != null
								&& tHash_Lookup_row45.getCount(row45HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row45' and it contains more one result from keys :  row45.firm = '"
							// + row45HashKey.firm + "'");
						} // G 071

						row45Struct row45 = null;

						row45Struct fromLookup_row45 = null;
						row45 = row45Default;

						if (tHash_Lookup_row45 != null
								&& tHash_Lookup_row45.hasNext()) { // G 099

							fromLookup_row45 = tHash_Lookup_row45.next();

						} // G 099

						if (fromLookup_row45 != null) {
							row45 = fromLookup_row45;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_28__Struct Var = Var__tMap_28;// ###############################
							// ###############################
							// # Output tables

							copyOffirm_connection_4 = null;

							if (!rejectedInnerJoin_tMap_28) {

								// # Output table : 'copyOffirm_connection_4'
								copyOffirm_connection_4_tmp.server = row46.server;
								copyOffirm_connection_4_tmp.database = row46.database;
								copyOffirm_connection_4 = copyOffirm_connection_4_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_28 = false;

						tos_count_tMap_28++;

						/**
						 * [tMap_28 main ] stop
						 */
						// Start of branch "copyOffirm_connection_4"
						if (copyOffirm_connection_4 != null) {

							/**
							 * [tJavaRow_21 main ] start
							 */

							currentComponent = "tJavaRow_21";

							context.serverIp = copyOffirm_connection_4.server;
							context.database = copyOffirm_connection_4.database;

							nb_line_tJavaRow_21++;

							tos_count_tJavaRow_21++;

							/**
							 * [tJavaRow_21 main ] stop
							 */

							/**
							 * [tJava_7 main ] start
							 */

							currentComponent = "tJava_7";

							tos_count_tJava_7++;

							/**
							 * [tJava_7 main ] stop
							 */

						} // End of branch "copyOffirm_connection_4"

						/**
						 * [tAmazonAuroraInput_28_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_28";

						currentComponent = "tAmazonAuroraInput_28_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_28_in != null) {
						rs_tAmazonAuroraInput_28_in.close();
					}
					stmt_tAmazonAuroraInput_28_in.close();
					if (conn_tAmazonAuroraInput_28_in != null
							&& !conn_tAmazonAuroraInput_28_in.isClosed()) {

						conn_tAmazonAuroraInput_28_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_28_NB_LINE",
						nb_line_tAmazonAuroraInput_28_in);

				ok_Hash.put("tAmazonAuroraInput_28_in", true);
				end_Hash.put("tAmazonAuroraInput_28_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_28_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_28_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_28";

				currentComponent = "tAmazonAuroraInput_28_out";

				ok_Hash.put("tAmazonAuroraInput_28_out", true);
				end_Hash.put("tAmazonAuroraInput_28_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_28_out end ] stop
				 */

				/**
				 * [tMap_28 end ] start
				 */

				currentComponent = "tMap_28";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row45 != null) {
					tHash_Lookup_row45.endGet();
				}
				globalMap.remove("tHash_Lookup_row45");

				// ###############################

				ok_Hash.put("tMap_28", true);
				end_Hash.put("tMap_28", System.currentTimeMillis());

				/**
				 * [tMap_28 end ] stop
				 */

				/**
				 * [tJavaRow_21 end ] start
				 */

				currentComponent = "tJavaRow_21";

				globalMap.put("tJavaRow_21_NB_LINE", nb_line_tJavaRow_21);

				ok_Hash.put("tJavaRow_21", true);
				end_Hash.put("tJavaRow_21", System.currentTimeMillis());

				/**
				 * [tJavaRow_21 end ] stop
				 */

				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				tAmazonAuroraInput_20_inProcess(globalMap);

				/**
				 * [tJava_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_28"
			globalMap.remove("tHash_Lookup_row45");

			try {

				/**
				 * [tAmazonAuroraInput_28_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_28";

				currentComponent = "tAmazonAuroraInput_28_in";

				/**
				 * [tAmazonAuroraInput_28_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_28_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_28";

				currentComponent = "tAmazonAuroraInput_28_out";

				/**
				 * [tAmazonAuroraInput_28_out finally ] stop
				 */

				/**
				 * [tMap_28 finally ] start
				 */

				currentComponent = "tMap_28";

				/**
				 * [tMap_28 finally ] stop
				 */

				/**
				 * [tJavaRow_21 finally ] start
				 */

				currentComponent = "tJavaRow_21";

				/**
				 * [tJavaRow_21 finally ] stop
				 */

				/**
				 * [tJava_7 finally ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_28_in_SUBPROCESS_STATE", 1);
	}

	public static class out5Struct implements
			routines.system.IPersistableRow<out5Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public java.util.Date dateAcquired;

		public java.util.Date getDateAcquired() {
			return this.dateAcquired;
		}

		public Float quantity;

		public Float getQuantity() {
			return this.quantity;
		}

		public Float costAmount;

		public Float getCostAmount() {
			return this.costAmount;
		}

		public Float costPerShare;

		public Float getCostPerShare() {
			return this.costPerShare;
		}

		public Float price;

		public Float getPrice() {
			return this.price;
		}

		public Float marketValue;

		public Float getMarketValue() {
			return this.marketValue;
		}

		public java.util.Date priceDate;

		public java.util.Date getPriceDate() {
			return this.priceDate;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					this.accountId = readString(dis);

					this.symbol = readString(dis);

					this.accountNumber = readString(dis);

					this.dateAcquired = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantity = null;
					} else {
						this.quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.costAmount = null;
					} else {
						this.costAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.costPerShare = null;
					} else {
						this.costPerShare = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.price = null;
					} else {
						this.price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.marketValue = null;
					} else {
						this.marketValue = dis.readFloat();
					}

					this.priceDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.symbol, dos);

				// String

				writeString(this.accountNumber, dos);

				// java.util.Date

				writeDate(this.dateAcquired, dos);

				// Float

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.quantity);
				}

				// Float

				if (this.costAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.costAmount);
				}

				// Float

				if (this.costPerShare == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.costPerShare);
				}

				// Float

				if (this.price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price);
				}

				// Float

				if (this.marketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.marketValue);
				}

				// java.util.Date

				writeDate(this.priceDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",accountId=" + accountId);
			sb.append(",symbol=" + symbol);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",dateAcquired=" + String.valueOf(dateAcquired));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",costAmount=" + String.valueOf(costAmount));
			sb.append(",costPerShare=" + String.valueOf(costPerShare));
			sb.append(",price=" + String.valueOf(price));
			sb.append(",marketValue=" + String.valueOf(marketValue));
			sb.append(",priceDate=" + String.valueOf(priceDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfmainout_2Struct implements
			routines.system.IPersistableRow<copyOfmainout_2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmainout_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfs_3Struct implements
			routines.system.IPersistableRow<copyOfs_3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfs_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_20_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_20_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_20_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_20Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_20Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_20_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_20_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tAmazonAuroraInput_22_inProcess(globalMap);
				tJavaRow_9Process(globalMap);
				tAmazonAuroraInput_21_inProcess(globalMap);

				row_tAmazonAuroraInput_20_inStruct row_tAmazonAuroraInput_20_in = new row_tAmazonAuroraInput_20_inStruct();
				row_tAmazonAuroraInput_20_inStruct row26 = row_tAmazonAuroraInput_20_in;
				copyOfs_3Struct copyOfs_3 = new copyOfs_3Struct();
				copyOfmainout_2Struct copyOfmainout_2 = new copyOfmainout_2Struct();
				out5Struct out5 = new out5Struct();

				/**
				 * [tAmazonMysqlOutput_7 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_7", false);
				start_Hash.put("tAmazonMysqlOutput_7",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_7";

				int tos_count_tAmazonMysqlOutput_7 = 0;

				int nb_line_tAmazonMysqlOutput_7 = 0;
				int nb_line_update_tAmazonMysqlOutput_7 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_7 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_7 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_7 = 0;

				int deletedCount_tAmazonMysqlOutput_7 = 0;
				int updatedCount_tAmazonMysqlOutput_7 = 0;
				int insertedCount_tAmazonMysqlOutput_7 = 0;

				int rejectedCount_tAmazonMysqlOutput_7 = 0;

				String tableName_tAmazonMysqlOutput_7 = "reject_TaxLot";
				boolean whetherReject_tAmazonMysqlOutput_7 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_7 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_7.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_7 = calendar_tAmazonMysqlOutput_7
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_7.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_7 = calendar_tAmazonMysqlOutput_7
						.getTime().getTime();
				long date_tAmazonMysqlOutput_7;

				java.sql.Connection conn_tAmazonMysqlOutput_7 = null;
				String dbProperties_tAmazonMysqlOutput_7 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_7 = null;
				if (dbProperties_tAmazonMysqlOutput_7 == null
						|| dbProperties_tAmazonMysqlOutput_7.trim().length() == 0) {
					url_tAmazonMysqlOutput_7 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_7 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_7
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_7 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_7 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_7;
				}
				String dbUser_tAmazonMysqlOutput_7 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_7 = context.password;

				String dbPwd_tAmazonMysqlOutput_7 = decryptedPassword_tAmazonMysqlOutput_7;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_7 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_7,
								dbUser_tAmazonMysqlOutput_7,
								dbPwd_tAmazonMysqlOutput_7);

				resourceMap.put("conn_tAmazonMysqlOutput_7",
						conn_tAmazonMysqlOutput_7);

				conn_tAmazonMysqlOutput_7.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_7 = 1000000;
				int commitCounter_tAmazonMysqlOutput_7 = 0;

				int count_tAmazonMysqlOutput_7 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_7 = conn_tAmazonMysqlOutput_7
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_7 = dbMetaData_tAmazonMysqlOutput_7
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_7 = false;
				while (rsTable_tAmazonMysqlOutput_7.next()) {
					String table_tAmazonMysqlOutput_7 = rsTable_tAmazonMysqlOutput_7
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_7
							.equalsIgnoreCase("reject_TaxLot")) {
						whetherExist_tAmazonMysqlOutput_7 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_7.close();
				if (!whetherExist_tAmazonMysqlOutput_7) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_7 = conn_tAmazonMysqlOutput_7
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_7
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_7
									+ "`(`orionFirmId` INT(10)  ,`externalId` INT(10)  ,`accountId` VARCHAR(100)  ,`symbol` VARCHAR(100)  ,`accountNumber` VARCHAR(100)  ,`dateAcquired` DATETIME ,`quantity` FLOAT(22,7)  ,`costAmount` FLOAT(22,2)  ,`costPerShare` FLOAT(22,7)  ,`price` FLOAT(22,7)  ,`marketValue` FLOAT(22,7)  ,`priceDate` DATETIME )");
					stmtCreate_tAmazonMysqlOutput_7.close();
				}

				String insert_tAmazonMysqlOutput_7 = "INSERT INTO `"
						+ "reject_TaxLot"
						+ "` (`orionFirmId`,`externalId`,`accountId`,`symbol`,`accountNumber`,`dateAcquired`,`quantity`,`costAmount`,`costPerShare`,`price`,`marketValue`,`priceDate`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonMysqlOutput_7 = 100;
				int batchSizeCounter_tAmazonMysqlOutput_7 = 0;

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_7 = conn_tAmazonMysqlOutput_7
						.prepareStatement(insert_tAmazonMysqlOutput_7);

				/**
				 * [tAmazonMysqlOutput_7 begin ] stop
				 */

				/**
				 * [tMap_22 begin ] start
				 */

				ok_Hash.put("tMap_22", false);
				start_Hash.put("tMap_22", System.currentTimeMillis());

				currentComponent = "tMap_22";

				int tos_count_tMap_22 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) globalMap
						.get("tHash_Lookup_row29"));

				row29Struct row29HashKey = new row29Struct();
				row29Struct row29Default = new row29Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_22__Struct {
				}
				Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out5Struct out5_tmp = new out5Struct();
				// ###############################

				/**
				 * [tMap_22 begin ] stop
				 */

				/**
				 * [tMap_21 begin ] start
				 */

				ok_Hash.put("tMap_21", false);
				start_Hash.put("tMap_21", System.currentTimeMillis());

				currentComponent = "tMap_21";

				int tos_count_tMap_21 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) globalMap
						.get("tHash_Lookup_row28"));

				row28Struct row28HashKey = new row28Struct();
				row28Struct row28Default = new row28Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_21__Struct {
				}
				Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfmainout_2Struct copyOfmainout_2_tmp = new copyOfmainout_2Struct();
				// ###############################

				/**
				 * [tMap_21 begin ] stop
				 */

				/**
				 * [tMap_20 begin ] start
				 */

				ok_Hash.put("tMap_20", false);
				start_Hash.put("tMap_20", System.currentTimeMillis());

				currentComponent = "tMap_20";

				int tos_count_tMap_20 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) globalMap
						.get("tHash_Lookup_row27"));

				row27Struct row27HashKey = new row27Struct();
				row27Struct row27Default = new row27Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_20__Struct {
				}
				Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfs_3Struct copyOfs_3_tmp = new copyOfs_3Struct();
				// ###############################

				/**
				 * [tMap_20 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_20_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_20_out", false);
				start_Hash.put("tAmazonAuroraInput_20_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_20";

				currentComponent = "tAmazonAuroraInput_20_out";

				int tos_count_tAmazonAuroraInput_20_out = 0;

				/**
				 * [tAmazonAuroraInput_20_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_20_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_20_in", false);
				start_Hash.put("tAmazonAuroraInput_20_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_20";

				currentComponent = "tAmazonAuroraInput_20_in";

				int tos_count_tAmazonAuroraInput_20_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_20_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_20_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_20_in = calendar_tAmazonAuroraInput_20_in
						.getTime();
				int nb_line_tAmazonAuroraInput_20_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_20_in = null;
				String driverClass_tAmazonAuroraInput_20_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_20_in);
				String dbUser_tAmazonAuroraInput_20_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_20_in = context.password;

				String dbPwd_tAmazonAuroraInput_20_in = decryptedPassword_tAmazonAuroraInput_20_in;

				String url_tAmazonAuroraInput_20_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_20_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_20_in,
								dbUser_tAmazonAuroraInput_20_in,
								dbPwd_tAmazonAuroraInput_20_in);

				java.sql.Statement stmt_tAmazonAuroraInput_20_in = conn_tAmazonAuroraInput_20_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_20_in = "select distinct OrionFirmId from taxLots_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_20_QUERY",
						dbquery_tAmazonAuroraInput_20_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_20_in = null;
				try {
					rs_tAmazonAuroraInput_20_in = stmt_tAmazonAuroraInput_20_in
							.executeQuery(dbquery_tAmazonAuroraInput_20_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_20_in = rs_tAmazonAuroraInput_20_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_20_in = rsmd_tAmazonAuroraInput_20_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_20_in = null;

					while (rs_tAmazonAuroraInput_20_in.next()) {
						nb_line_tAmazonAuroraInput_20_in++;

						if (colQtyInRs_tAmazonAuroraInput_20_in < 1) {
							row_tAmazonAuroraInput_20_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_20_in.getObject(1) != null) {
								row_tAmazonAuroraInput_20_in.OrionFirmId = rs_tAmazonAuroraInput_20_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_20_in.OrionFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_20_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_20_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_20";

						currentComponent = "tAmazonAuroraInput_20_in";

						tos_count_tAmazonAuroraInput_20_in++;

						/**
						 * [tAmazonAuroraInput_20_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_20_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_20";

						currentComponent = "tAmazonAuroraInput_20_out";

						row26 = row_tAmazonAuroraInput_20_in;

						tos_count_tAmazonAuroraInput_20_out++;

						/**
						 * [tAmazonAuroraInput_20_out main ] stop
						 */

						/**
						 * [tMap_20 main ] start
						 */

						currentComponent = "tMap_20";

						boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_20 = false;
						boolean mainRowRejected_tMap_20 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row27"
						// /////////////////////////////////////////////

						boolean forceLooprow27 = false;

						row27Struct row27ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_20) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_20 = false;

							row27HashKey.orionConnectFirmId = row26.OrionFirmId;

							row27HashKey.hashCodeDirty = true;

							tHash_Lookup_row27.lookup(row27HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row27 != null
								&& tHash_Lookup_row27.getCount(row27HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row27' and it contains more one result from keys :  row27.orionConnectFirmId = '"
							// + row27HashKey.orionConnectFirmId + "'");
						} // G 071

						row27Struct row27 = null;

						row27Struct fromLookup_row27 = null;
						row27 = row27Default;

						if (tHash_Lookup_row27 != null
								&& tHash_Lookup_row27.hasNext()) { // G 099

							fromLookup_row27 = tHash_Lookup_row27.next();

						} // G 099

						if (fromLookup_row27 != null) {
							row27 = fromLookup_row27;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
							// ###############################
							// # Output tables

							copyOfs_3 = null;

							// # Output table : 'copyOfs_3'
							copyOfs_3_tmp.OrionFirmId = row26.OrionFirmId;
							copyOfs_3_tmp.orionEclipseFirmName = row27.orionEclipseFirmName;
							copyOfs_3 = copyOfs_3_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_20 = false;

						tos_count_tMap_20++;

						/**
						 * [tMap_20 main ] stop
						 */
						// Start of branch "copyOfs_3"
						if (copyOfs_3 != null) {

							/**
							 * [tMap_21 main ] start
							 */

							currentComponent = "tMap_21";

							boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_21 = false;
							boolean mainRowRejected_tMap_21 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row28"
							// /////////////////////////////////////////////

							boolean forceLooprow28 = false;

							row28Struct row28ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_21) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_21 = false;

								row28HashKey.firm = copyOfs_3.orionEclipseFirmName;

								row28HashKey.hashCodeDirty = true;

								tHash_Lookup_row28.lookup(row28HashKey);

								if (!tHash_Lookup_row28.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_21 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row28 != null
									&& tHash_Lookup_row28
											.getCount(row28HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row28' and it contains more one result from keys :  row28.firm = '"
								// + row28HashKey.firm + "'");
							} // G 071

							row28Struct row28 = null;

							row28Struct fromLookup_row28 = null;
							row28 = row28Default;

							if (tHash_Lookup_row28 != null
									&& tHash_Lookup_row28.hasNext()) { // G 099

								fromLookup_row28 = tHash_Lookup_row28.next();

							} // G 099

							if (fromLookup_row28 != null) {
								row28 = fromLookup_row28;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
								// ###############################
								// # Output tables

								copyOfmainout_2 = null;

								if (!rejectedInnerJoin_tMap_21) {
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'copyOfmainout_2'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_21) {
									copyOfmainout_2_tmp.firm = copyOfs_3.OrionFirmId;
									copyOfmainout_2 = copyOfmainout_2_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_21 = false;

							tos_count_tMap_21++;

							/**
							 * [tMap_21 main ] stop
							 */
							// Start of branch "copyOfmainout_2"
							if (copyOfmainout_2 != null) {

								/**
								 * [tMap_22 main ] start
								 */

								currentComponent = "tMap_22";

								boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_22 = false;
								boolean mainRowRejected_tMap_22 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row29"
								// /////////////////////////////////////////////

								boolean forceLooprow29 = false;

								row29Struct row29ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_22) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_22 = false;

									row29HashKey.orionFirmId = copyOfmainout_2.firm;

									row29HashKey.hashCodeDirty = true;

									tHash_Lookup_row29.lookup(row29HashKey);

									if (!tHash_Lookup_row29.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_22 = true;

										forceLooprow29 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow29 = true;
								} // G 21

								row29Struct row29 = null;

								while ((tHash_Lookup_row29 != null && tHash_Lookup_row29
										.hasNext()) || forceLooprow29) { // G_TM_M_043

									// CALL close loop of lookup 'row29'

									row29Struct fromLookup_row29 = null;
									row29 = row29Default;

									if (!forceLooprow29) { // G 46

										fromLookup_row29 = tHash_Lookup_row29
												.next();

										if (fromLookup_row29 != null) {
											row29 = fromLookup_row29;
										}

									} // G 46

									forceLooprow29 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
										// ###############################
										// # Output tables

										out5 = null;

										if (!rejectedInnerJoin_tMap_22) {

											// # Output table : 'out5'
											out5_tmp.orionFirmId = row29.orionFirmId;
											out5_tmp.externalId = row29.externalId;
											out5_tmp.accountId = row29.accountId;
											out5_tmp.symbol = row29.symbol;
											out5_tmp.accountNumber = row29.accountNumber;
											out5_tmp.dateAcquired = row29.dateAcquired;
											out5_tmp.quantity = row29.quantity;
											out5_tmp.costAmount = row29.costAmount;
											out5_tmp.costPerShare = row29.costPerShare;
											out5_tmp.price = row29.price;
											out5_tmp.marketValue = row29.marketValue;
											out5_tmp.priceDate = row29.priceDate;
											out5 = out5_tmp;
										} // closing inner join bracket (2)
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_22 = false;

									tos_count_tMap_22++;

									/**
									 * [tMap_22 main ] stop
									 */
									// Start of branch "out5"
									if (out5 != null) {

										/**
										 * [tAmazonMysqlOutput_7 main ] start
										 */

										currentComponent = "tAmazonMysqlOutput_7";

										whetherReject_tAmazonMysqlOutput_7 = false;
										if (out5.orionFirmId == null) {
											pstmt_tAmazonMysqlOutput_7.setNull(
													1, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_7.setInt(
													1, out5.orionFirmId);
										}

										if (out5.externalId == null) {
											pstmt_tAmazonMysqlOutput_7.setNull(
													2, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_7.setInt(
													2, out5.externalId);
										}

										if (out5.accountId == null) {
											pstmt_tAmazonMysqlOutput_7.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_7
													.setString(3,
															out5.accountId);
										}

										if (out5.symbol == null) {
											pstmt_tAmazonMysqlOutput_7.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_7
													.setString(4, out5.symbol);
										}

										if (out5.accountNumber == null) {
											pstmt_tAmazonMysqlOutput_7.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_7
													.setString(5,
															out5.accountNumber);
										}

										if (out5.dateAcquired != null) {
											date_tAmazonMysqlOutput_7 = out5.dateAcquired
													.getTime();
											if (date_tAmazonMysqlOutput_7 < year1_tAmazonMysqlOutput_7
													|| date_tAmazonMysqlOutput_7 >= year10000_tAmazonMysqlOutput_7) {
												pstmt_tAmazonMysqlOutput_7
														.setString(6,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonMysqlOutput_7
														.setTimestamp(
																6,
																new java.sql.Timestamp(
																		date_tAmazonMysqlOutput_7));
											}
										} else {
											pstmt_tAmazonMysqlOutput_7.setNull(
													6, java.sql.Types.DATE);
										}

										if (out5.quantity == null) {
											pstmt_tAmazonMysqlOutput_7.setNull(
													7, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_7
													.setFloat(7, out5.quantity);
										}

										if (out5.costAmount == null) {
											pstmt_tAmazonMysqlOutput_7.setNull(
													8, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_7
													.setFloat(8,
															out5.costAmount);
										}

										if (out5.costPerShare == null) {
											pstmt_tAmazonMysqlOutput_7.setNull(
													9, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_7
													.setFloat(9,
															out5.costPerShare);
										}

										if (out5.price == null) {
											pstmt_tAmazonMysqlOutput_7.setNull(
													10, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_7
													.setFloat(10, out5.price);
										}

										if (out5.marketValue == null) {
											pstmt_tAmazonMysqlOutput_7.setNull(
													11, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_7
													.setFloat(11,
															out5.marketValue);
										}

										if (out5.priceDate != null) {
											date_tAmazonMysqlOutput_7 = out5.priceDate
													.getTime();
											if (date_tAmazonMysqlOutput_7 < year1_tAmazonMysqlOutput_7
													|| date_tAmazonMysqlOutput_7 >= year10000_tAmazonMysqlOutput_7) {
												pstmt_tAmazonMysqlOutput_7
														.setString(12,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonMysqlOutput_7
														.setTimestamp(
																12,
																new java.sql.Timestamp(
																		date_tAmazonMysqlOutput_7));
											}
										} else {
											pstmt_tAmazonMysqlOutput_7.setNull(
													12, java.sql.Types.DATE);
										}

										pstmt_tAmazonMysqlOutput_7.addBatch();
										nb_line_tAmazonMysqlOutput_7++;

										batchSizeCounter_tAmazonMysqlOutput_7++;

										if (batchSize_tAmazonMysqlOutput_7 <= batchSizeCounter_tAmazonMysqlOutput_7) {
											try {
												int countSum_tAmazonMysqlOutput_7 = 0;

												for (int countEach_tAmazonMysqlOutput_7 : pstmt_tAmazonMysqlOutput_7
														.executeBatch()) {
													countSum_tAmazonMysqlOutput_7 += (countEach_tAmazonMysqlOutput_7 < 0 ? 0
															: 1);
												}

												insertedCount_tAmazonMysqlOutput_7 += countSum_tAmazonMysqlOutput_7;

											} catch (java.sql.BatchUpdateException e) {

												int countSum_tAmazonMysqlOutput_7 = 0;
												for (int countEach_tAmazonMysqlOutput_7 : e
														.getUpdateCounts()) {
													countSum_tAmazonMysqlOutput_7 += (countEach_tAmazonMysqlOutput_7 < 0 ? 0
															: countEach_tAmazonMysqlOutput_7);
												}

												insertedCount_tAmazonMysqlOutput_7 += countSum_tAmazonMysqlOutput_7;

												System.err.println(e
														.getMessage());

											}

											batchSizeCounter_tAmazonMysqlOutput_7 = 0;
										}

										commitCounter_tAmazonMysqlOutput_7++;
										if (commitEvery_tAmazonMysqlOutput_7 <= commitCounter_tAmazonMysqlOutput_7) {
											if ((batchSize_tAmazonMysqlOutput_7 > 0)
													&& (batchSizeCounter_tAmazonMysqlOutput_7 > 0)) {
												try {
													int countSum_tAmazonMysqlOutput_7 = 0;

													for (int countEach_tAmazonMysqlOutput_7 : pstmt_tAmazonMysqlOutput_7
															.executeBatch()) {
														countSum_tAmazonMysqlOutput_7 += (countEach_tAmazonMysqlOutput_7 < 0 ? 0
																: 1);
													}

													insertedCount_tAmazonMysqlOutput_7 += countSum_tAmazonMysqlOutput_7;

													batchSizeCounter_tAmazonMysqlOutput_7 = 0;
												} catch (java.sql.BatchUpdateException e) {

													int countSum_tAmazonMysqlOutput_7 = 0;
													for (int countEach_tAmazonMysqlOutput_7 : e
															.getUpdateCounts()) {
														countSum_tAmazonMysqlOutput_7 += (countEach_tAmazonMysqlOutput_7 < 0 ? 0
																: countEach_tAmazonMysqlOutput_7);
													}

													insertedCount_tAmazonMysqlOutput_7 += countSum_tAmazonMysqlOutput_7;

													System.err.println(e
															.getMessage());

												}
											}

											conn_tAmazonMysqlOutput_7.commit();

											commitCounter_tAmazonMysqlOutput_7 = 0;
										}

										tos_count_tAmazonMysqlOutput_7++;

										/**
										 * [tAmazonMysqlOutput_7 main ] stop
										 */

									} // End of branch "out5"

								} // close loop of lookup 'row29' // G_TM_M_043

							} // End of branch "copyOfmainout_2"

						} // End of branch "copyOfs_3"

						/**
						 * [tAmazonAuroraInput_20_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_20";

						currentComponent = "tAmazonAuroraInput_20_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_20_in != null) {
						rs_tAmazonAuroraInput_20_in.close();
					}
					stmt_tAmazonAuroraInput_20_in.close();
					if (conn_tAmazonAuroraInput_20_in != null
							&& !conn_tAmazonAuroraInput_20_in.isClosed()) {

						conn_tAmazonAuroraInput_20_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_20_NB_LINE",
						nb_line_tAmazonAuroraInput_20_in);

				ok_Hash.put("tAmazonAuroraInput_20_in", true);
				end_Hash.put("tAmazonAuroraInput_20_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_20_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_20_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_20";

				currentComponent = "tAmazonAuroraInput_20_out";

				ok_Hash.put("tAmazonAuroraInput_20_out", true);
				end_Hash.put("tAmazonAuroraInput_20_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_20_out end ] stop
				 */

				/**
				 * [tMap_20 end ] start
				 */

				currentComponent = "tMap_20";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row27 != null) {
					tHash_Lookup_row27.endGet();
				}
				globalMap.remove("tHash_Lookup_row27");

				// ###############################

				ok_Hash.put("tMap_20", true);
				end_Hash.put("tMap_20", System.currentTimeMillis());

				/**
				 * [tMap_20 end ] stop
				 */

				/**
				 * [tMap_21 end ] start
				 */

				currentComponent = "tMap_21";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row28 != null) {
					tHash_Lookup_row28.endGet();
				}
				globalMap.remove("tHash_Lookup_row28");

				// ###############################

				ok_Hash.put("tMap_21", true);
				end_Hash.put("tMap_21", System.currentTimeMillis());

				/**
				 * [tMap_21 end ] stop
				 */

				/**
				 * [tMap_22 end ] start
				 */

				currentComponent = "tMap_22";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row29 != null) {
					tHash_Lookup_row29.endGet();
				}
				globalMap.remove("tHash_Lookup_row29");

				// ###############################

				ok_Hash.put("tMap_22", true);
				end_Hash.put("tMap_22", System.currentTimeMillis());

				/**
				 * [tMap_22 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_7 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_7";

				try {
					if (batchSizeCounter_tAmazonMysqlOutput_7 != 0) {
						int countSum_tAmazonMysqlOutput_7 = 0;

						for (int countEach_tAmazonMysqlOutput_7 : pstmt_tAmazonMysqlOutput_7
								.executeBatch()) {
							countSum_tAmazonMysqlOutput_7 += (countEach_tAmazonMysqlOutput_7 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonMysqlOutput_7 += countSum_tAmazonMysqlOutput_7;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonMysqlOutput_7 = 0;
					for (int countEach_tAmazonMysqlOutput_7 : e
							.getUpdateCounts()) {
						countSum_tAmazonMysqlOutput_7 += (countEach_tAmazonMysqlOutput_7 < 0 ? 0
								: countEach_tAmazonMysqlOutput_7);
					}

					insertedCount_tAmazonMysqlOutput_7 += countSum_tAmazonMysqlOutput_7;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonMysqlOutput_7 = 0;

				if (pstmt_tAmazonMysqlOutput_7 != null) {
					pstmt_tAmazonMysqlOutput_7.close();
				}

				if (commitCounter_tAmazonMysqlOutput_7 > 0) {

					conn_tAmazonMysqlOutput_7.commit();

				}

				conn_tAmazonMysqlOutput_7.close();

				resourceMap.put("finish_tAmazonMysqlOutput_7", true);

				nb_line_deleted_tAmazonMysqlOutput_7 = nb_line_deleted_tAmazonMysqlOutput_7
						+ deletedCount_tAmazonMysqlOutput_7;
				nb_line_update_tAmazonMysqlOutput_7 = nb_line_update_tAmazonMysqlOutput_7
						+ updatedCount_tAmazonMysqlOutput_7;
				nb_line_inserted_tAmazonMysqlOutput_7 = nb_line_inserted_tAmazonMysqlOutput_7
						+ insertedCount_tAmazonMysqlOutput_7;
				nb_line_rejected_tAmazonMysqlOutput_7 = nb_line_rejected_tAmazonMysqlOutput_7
						+ rejectedCount_tAmazonMysqlOutput_7;

				globalMap.put("tAmazonMysqlOutput_7_NB_LINE",
						nb_line_tAmazonMysqlOutput_7);
				globalMap.put("tAmazonMysqlOutput_7_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_7);
				globalMap.put("tAmazonMysqlOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_7);
				globalMap.put("tAmazonMysqlOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_7);
				globalMap.put("tAmazonMysqlOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_7);

				ok_Hash.put("tAmazonMysqlOutput_7", true);
				end_Hash.put("tAmazonMysqlOutput_7", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_22"
			globalMap.remove("tHash_Lookup_row29");

			// free memory for "tMap_21"
			globalMap.remove("tHash_Lookup_row28");

			// free memory for "tMap_20"
			globalMap.remove("tHash_Lookup_row27");

			try {

				/**
				 * [tAmazonAuroraInput_20_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_20";

				currentComponent = "tAmazonAuroraInput_20_in";

				/**
				 * [tAmazonAuroraInput_20_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_20_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_20";

				currentComponent = "tAmazonAuroraInput_20_out";

				/**
				 * [tAmazonAuroraInput_20_out finally ] stop
				 */

				/**
				 * [tMap_20 finally ] start
				 */

				currentComponent = "tMap_20";

				/**
				 * [tMap_20 finally ] stop
				 */

				/**
				 * [tMap_21 finally ] start
				 */

				currentComponent = "tMap_21";

				/**
				 * [tMap_21 finally ] stop
				 */

				/**
				 * [tMap_22 finally ] start
				 */

				currentComponent = "tMap_22";

				/**
				 * [tMap_22 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_7 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_7";

				if (resourceMap.get("finish_tAmazonMysqlOutput_7") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_7") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_7")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_7) {
							String errorMessage_tAmazonMysqlOutput_7 = "failed to close the connection in tAmazonMysqlOutput_7 :"
									+ sqlEx_tAmazonMysqlOutput_7.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_7);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_20_in_SUBPROCESS_STATE", 1);
	}

	public static class row27Struct implements
			routines.system.IPersistableComparableLookupRow<row27Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row27Struct other = (row27Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row27Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmName = this.orionEclipseFirmName;

		}

		public void copyKeysDataTo(row27Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orionEclipseFirmName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_21_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_21_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_21_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_21_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_21_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_21_inStruct row_tAmazonAuroraInput_21_in = new row_tAmazonAuroraInput_21_inStruct();
				row_tAmazonAuroraInput_21_inStruct row27 = row_tAmazonAuroraInput_21_in;

				/**
				 * [tAdvancedHash_row27 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row27", false);
				start_Hash.put("tAdvancedHash_row27",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row27";

				int tos_count_tAdvancedHash_row27 = 0;

				// connection name:row27
				// source node:tAmazonAuroraInput_21_out -
				// inputs:(row_tAmazonAuroraInput_21_in) outputs:(row27,row27) |
				// target node:tAdvancedHash_row27 - inputs:(row27) outputs:()
				// linked node: tMap_20 - inputs:(row26,row27)
				// outputs:(copyOfs_3)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row27Struct> getLookup(matchingModeEnum_row27);

				globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);

				/**
				 * [tAdvancedHash_row27 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_21_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_21_out", false);
				start_Hash.put("tAmazonAuroraInput_21_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_21";

				currentComponent = "tAmazonAuroraInput_21_out";

				int tos_count_tAmazonAuroraInput_21_out = 0;

				/**
				 * [tAmazonAuroraInput_21_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_21_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_21_in", false);
				start_Hash.put("tAmazonAuroraInput_21_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_21";

				currentComponent = "tAmazonAuroraInput_21_in";

				int tos_count_tAmazonAuroraInput_21_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_21_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_21_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_21_in = calendar_tAmazonAuroraInput_21_in
						.getTime();
				int nb_line_tAmazonAuroraInput_21_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_21_in = null;
				String driverClass_tAmazonAuroraInput_21_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_21_in);
				String dbUser_tAmazonAuroraInput_21_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_21_in = context.password;

				String dbPwd_tAmazonAuroraInput_21_in = decryptedPassword_tAmazonAuroraInput_21_in;

				String url_tAmazonAuroraInput_21_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_21_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_21_in,
								dbUser_tAmazonAuroraInput_21_in,
								dbPwd_tAmazonAuroraInput_21_in);

				java.sql.Statement stmt_tAmazonAuroraInput_21_in = conn_tAmazonAuroraInput_21_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_21_in = "select orionConnectFirmId , orionEclipseFirmName from firm";

				globalMap.put("tAmazonAuroraInput_21_QUERY",
						dbquery_tAmazonAuroraInput_21_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_21_in = null;
				try {
					rs_tAmazonAuroraInput_21_in = stmt_tAmazonAuroraInput_21_in
							.executeQuery(dbquery_tAmazonAuroraInput_21_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_21_in = rs_tAmazonAuroraInput_21_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_21_in = rsmd_tAmazonAuroraInput_21_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_21_in = null;

					while (rs_tAmazonAuroraInput_21_in.next()) {
						nb_line_tAmazonAuroraInput_21_in++;

						if (colQtyInRs_tAmazonAuroraInput_21_in < 1) {
							row_tAmazonAuroraInput_21_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_21_in.getObject(1) != null) {
								row_tAmazonAuroraInput_21_in.orionConnectFirmId = rs_tAmazonAuroraInput_21_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_21_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_21_in < 2) {
							row_tAmazonAuroraInput_21_in.orionEclipseFirmName = null;
						} else {

							row_tAmazonAuroraInput_21_in.orionEclipseFirmName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_21_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_21_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_21_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_21";

						currentComponent = "tAmazonAuroraInput_21_in";

						tos_count_tAmazonAuroraInput_21_in++;

						/**
						 * [tAmazonAuroraInput_21_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_21_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_21";

						currentComponent = "tAmazonAuroraInput_21_out";

						row27 = row_tAmazonAuroraInput_21_in;

						tos_count_tAmazonAuroraInput_21_out++;

						/**
						 * [tAmazonAuroraInput_21_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row27 main ] start
						 */

						currentComponent = "tAdvancedHash_row27";

						row27Struct row27_HashRow = new row27Struct();

						row27_HashRow.orionConnectFirmId = row27.orionConnectFirmId;

						row27_HashRow.orionEclipseFirmName = row27.orionEclipseFirmName;

						tHash_Lookup_row27.put(row27_HashRow);

						tos_count_tAdvancedHash_row27++;

						/**
						 * [tAdvancedHash_row27 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_21_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_21";

						currentComponent = "tAmazonAuroraInput_21_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_21_in != null) {
						rs_tAmazonAuroraInput_21_in.close();
					}
					stmt_tAmazonAuroraInput_21_in.close();
					if (conn_tAmazonAuroraInput_21_in != null
							&& !conn_tAmazonAuroraInput_21_in.isClosed()) {

						conn_tAmazonAuroraInput_21_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_21_NB_LINE",
						nb_line_tAmazonAuroraInput_21_in);

				ok_Hash.put("tAmazonAuroraInput_21_in", true);
				end_Hash.put("tAmazonAuroraInput_21_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_21_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_21_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_21";

				currentComponent = "tAmazonAuroraInput_21_out";

				ok_Hash.put("tAmazonAuroraInput_21_out", true);
				end_Hash.put("tAmazonAuroraInput_21_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_21_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row27 end ] start
				 */

				currentComponent = "tAdvancedHash_row27";

				tHash_Lookup_row27.endPut();

				ok_Hash.put("tAdvancedHash_row27", true);
				end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row27 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_21_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_21";

				currentComponent = "tAmazonAuroraInput_21_in";

				/**
				 * [tAmazonAuroraInput_21_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_21_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_21";

				currentComponent = "tAmazonAuroraInput_21_out";

				/**
				 * [tAmazonAuroraInput_21_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row27 finally ] start
				 */

				currentComponent = "tAdvancedHash_row27";

				/**
				 * [tAdvancedHash_row27 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_21_in_SUBPROCESS_STATE", 1);
	}

	public static class row29Struct implements
			routines.system.IPersistableComparableLookupRow<row29Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public java.util.Date dateAcquired;

		public java.util.Date getDateAcquired() {
			return this.dateAcquired;
		}

		public Float quantity;

		public Float getQuantity() {
			return this.quantity;
		}

		public Float costAmount;

		public Float getCostAmount() {
			return this.costAmount;
		}

		public Float costPerShare;

		public Float getCostPerShare() {
			return this.costPerShare;
		}

		public Float price;

		public Float getPrice() {
			return this.price;
		}

		public Float marketValue;

		public Float getMarketValue() {
			return this.marketValue;
		}

		public java.util.Date priceDate;

		public java.util.Date getPriceDate() {
			return this.priceDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionFirmId == null) ? 0 : this.orionFirmId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row29Struct other = (row29Struct) obj;

			if (this.orionFirmId == null) {
				if (other.orionFirmId != null)
					return false;

			} else if (!this.orionFirmId.equals(other.orionFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row29Struct other) {

			other.orionFirmId = this.orionFirmId;
			other.externalId = this.externalId;
			other.accountId = this.accountId;
			other.symbol = this.symbol;
			other.accountNumber = this.accountNumber;
			other.dateAcquired = this.dateAcquired;
			other.quantity = this.quantity;
			other.costAmount = this.costAmount;
			other.costPerShare = this.costPerShare;
			other.price = this.price;
			other.marketValue = this.marketValue;
			other.priceDate = this.priceDate;

		}

		public void copyKeysDataTo(row29Struct other) {

			other.orionFirmId = this.orionFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.externalId = readInteger(dis, ois);

				this.accountId = readString(dis, ois);

				this.symbol = readString(dis, ois);

				this.accountNumber = readString(dis, ois);

				this.dateAcquired = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.quantity = null;
				} else {
					this.quantity = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.costAmount = null;
				} else {
					this.costAmount = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.costPerShare = null;
				} else {
					this.costPerShare = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.price = null;
				} else {
					this.price = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.marketValue = null;
				} else {
					this.marketValue = dis.readFloat();
				}

				this.priceDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.externalId, dos, oos);

				writeString(this.accountId, dos, oos);

				writeString(this.symbol, dos, oos);

				writeString(this.accountNumber, dos, oos);

				writeDate(this.dateAcquired, dos, oos);

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.quantity);
				}

				if (this.costAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.costAmount);
				}

				if (this.costPerShare == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.costPerShare);
				}

				if (this.price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price);
				}

				if (this.marketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.marketValue);
				}

				writeDate(this.priceDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",accountId=" + accountId);
			sb.append(",symbol=" + symbol);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",dateAcquired=" + String.valueOf(dateAcquired));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",costAmount=" + String.valueOf(costAmount));
			sb.append(",costPerShare=" + String.valueOf(costPerShare));
			sb.append(",price=" + String.valueOf(price));
			sb.append(",marketValue=" + String.valueOf(marketValue));
			sb.append(",priceDate=" + String.valueOf(priceDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionFirmId,
					other.orionFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_22_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_22_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionFirmId;

		public Integer getOrionFirmId() {
			return this.orionFirmId;
		}

		public Integer externalId;

		public Integer getExternalId() {
			return this.externalId;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		public String accountNumber;

		public String getAccountNumber() {
			return this.accountNumber;
		}

		public java.util.Date dateAcquired;

		public java.util.Date getDateAcquired() {
			return this.dateAcquired;
		}

		public Float quantity;

		public Float getQuantity() {
			return this.quantity;
		}

		public Float costAmount;

		public Float getCostAmount() {
			return this.costAmount;
		}

		public Float costPerShare;

		public Float getCostPerShare() {
			return this.costPerShare;
		}

		public Float price;

		public Float getPrice() {
			return this.price;
		}

		public Float marketValue;

		public Float getMarketValue() {
			return this.marketValue;
		}

		public java.util.Date priceDate;

		public java.util.Date getPriceDate() {
			return this.priceDate;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionFirmId = readInteger(dis);

					this.externalId = readInteger(dis);

					this.accountId = readString(dis);

					this.symbol = readString(dis);

					this.accountNumber = readString(dis);

					this.dateAcquired = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.quantity = null;
					} else {
						this.quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.costAmount = null;
					} else {
						this.costAmount = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.costPerShare = null;
					} else {
						this.costPerShare = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.price = null;
					} else {
						this.price = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.marketValue = null;
					} else {
						this.marketValue = dis.readFloat();
					}

					this.priceDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionFirmId, dos);

				// Integer

				writeInteger(this.externalId, dos);

				// String

				writeString(this.accountId, dos);

				// String

				writeString(this.symbol, dos);

				// String

				writeString(this.accountNumber, dos);

				// java.util.Date

				writeDate(this.dateAcquired, dos);

				// Float

				if (this.quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.quantity);
				}

				// Float

				if (this.costAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.costAmount);
				}

				// Float

				if (this.costPerShare == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.costPerShare);
				}

				// Float

				if (this.price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price);
				}

				// Float

				if (this.marketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.marketValue);
				}

				// java.util.Date

				writeDate(this.priceDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",accountId=" + accountId);
			sb.append(",symbol=" + symbol);
			sb.append(",accountNumber=" + accountNumber);
			sb.append(",dateAcquired=" + String.valueOf(dateAcquired));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",costAmount=" + String.valueOf(costAmount));
			sb.append(",costPerShare=" + String.valueOf(costPerShare));
			sb.append(",price=" + String.valueOf(price));
			sb.append(",marketValue=" + String.valueOf(marketValue));
			sb.append(",priceDate=" + String.valueOf(priceDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_22_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_22_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_22_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_22_inStruct row_tAmazonAuroraInput_22_in = new row_tAmazonAuroraInput_22_inStruct();
				row_tAmazonAuroraInput_22_inStruct row29 = row_tAmazonAuroraInput_22_in;

				/**
				 * [tAdvancedHash_row29 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row29", false);
				start_Hash.put("tAdvancedHash_row29",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row29";

				int tos_count_tAdvancedHash_row29 = 0;

				// connection name:row29
				// source node:tAmazonAuroraInput_22_out -
				// inputs:(row_tAmazonAuroraInput_22_in) outputs:(row29,row29) |
				// target node:tAdvancedHash_row29 - inputs:(row29) outputs:()
				// linked node: tMap_22 - inputs:(copyOfmainout_2,row29)
				// outputs:(out5)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row29 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row29Struct> getLookup(matchingModeEnum_row29);

				globalMap.put("tHash_Lookup_row29", tHash_Lookup_row29);

				/**
				 * [tAdvancedHash_row29 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_22_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_22_out", false);
				start_Hash.put("tAmazonAuroraInput_22_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_22";

				currentComponent = "tAmazonAuroraInput_22_out";

				int tos_count_tAmazonAuroraInput_22_out = 0;

				/**
				 * [tAmazonAuroraInput_22_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_22_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_22_in", false);
				start_Hash.put("tAmazonAuroraInput_22_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_22";

				currentComponent = "tAmazonAuroraInput_22_in";

				int tos_count_tAmazonAuroraInput_22_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_22_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_22_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_22_in = calendar_tAmazonAuroraInput_22_in
						.getTime();
				int nb_line_tAmazonAuroraInput_22_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_22_in = null;
				String driverClass_tAmazonAuroraInput_22_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_22_in);
				String dbUser_tAmazonAuroraInput_22_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_22_in = context.password;

				String dbPwd_tAmazonAuroraInput_22_in = decryptedPassword_tAmazonAuroraInput_22_in;

				String url_tAmazonAuroraInput_22_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_22_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_22_in,
								dbUser_tAmazonAuroraInput_22_in,
								dbPwd_tAmazonAuroraInput_22_in);

				java.sql.Statement stmt_tAmazonAuroraInput_22_in = conn_tAmazonAuroraInput_22_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_22_in = "select OrionFirmId , ExternalId , AccountId , Symbol , AccountNumber , DateAcquired , Quantity , CostAmount , CostPerShare  , Price ,  MarketValue , PriceDate  from taxLots_"
						+ context.firmId
						+ "_"
						+ context.date
						+ " where id >= 1";

				globalMap.put("tAmazonAuroraInput_22_QUERY",
						dbquery_tAmazonAuroraInput_22_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_22_in = null;
				try {
					rs_tAmazonAuroraInput_22_in = stmt_tAmazonAuroraInput_22_in
							.executeQuery(dbquery_tAmazonAuroraInput_22_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_22_in = rs_tAmazonAuroraInput_22_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_22_in = rsmd_tAmazonAuroraInput_22_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_22_in = null;

					while (rs_tAmazonAuroraInput_22_in.next()) {
						nb_line_tAmazonAuroraInput_22_in++;

						if (colQtyInRs_tAmazonAuroraInput_22_in < 1) {
							row_tAmazonAuroraInput_22_in.orionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_22_in.getObject(1) != null) {
								row_tAmazonAuroraInput_22_in.orionFirmId = rs_tAmazonAuroraInput_22_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_22_in.orionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_22_in < 2) {
							row_tAmazonAuroraInput_22_in.externalId = null;
						} else {

							if (rs_tAmazonAuroraInput_22_in.getObject(2) != null) {
								row_tAmazonAuroraInput_22_in.externalId = rs_tAmazonAuroraInput_22_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_22_in.externalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_22_in < 3) {
							row_tAmazonAuroraInput_22_in.accountId = null;
						} else {

							row_tAmazonAuroraInput_22_in.accountId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_22_in, 3,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_22_in < 4) {
							row_tAmazonAuroraInput_22_in.symbol = null;
						} else {

							row_tAmazonAuroraInput_22_in.symbol = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_22_in, 4,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_22_in < 5) {
							row_tAmazonAuroraInput_22_in.accountNumber = null;
						} else {

							row_tAmazonAuroraInput_22_in.accountNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_22_in, 5,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_22_in < 6) {
							row_tAmazonAuroraInput_22_in.dateAcquired = null;
						} else {

							if (rs_tAmazonAuroraInput_22_in.getString(6) != null) {
								String dateString_tAmazonAuroraInput_22_in = rs_tAmazonAuroraInput_22_in
										.getString(6);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_22_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_22_in)) {
									row_tAmazonAuroraInput_22_in.dateAcquired = rs_tAmazonAuroraInput_22_in
											.getTimestamp(6);
								} else {
									row_tAmazonAuroraInput_22_in.dateAcquired = (java.util.Date) year0_tAmazonAuroraInput_22_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_22_in.dateAcquired = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_22_in < 7) {
							row_tAmazonAuroraInput_22_in.quantity = null;
						} else {

							if (rs_tAmazonAuroraInput_22_in.getObject(7) != null) {
								row_tAmazonAuroraInput_22_in.quantity = rs_tAmazonAuroraInput_22_in
										.getFloat(7);
							} else {
								row_tAmazonAuroraInput_22_in.quantity = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_22_in < 8) {
							row_tAmazonAuroraInput_22_in.costAmount = null;
						} else {

							if (rs_tAmazonAuroraInput_22_in.getObject(8) != null) {
								row_tAmazonAuroraInput_22_in.costAmount = rs_tAmazonAuroraInput_22_in
										.getFloat(8);
							} else {
								row_tAmazonAuroraInput_22_in.costAmount = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_22_in < 9) {
							row_tAmazonAuroraInput_22_in.costPerShare = null;
						} else {

							if (rs_tAmazonAuroraInput_22_in.getObject(9) != null) {
								row_tAmazonAuroraInput_22_in.costPerShare = rs_tAmazonAuroraInput_22_in
										.getFloat(9);
							} else {
								row_tAmazonAuroraInput_22_in.costPerShare = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_22_in < 10) {
							row_tAmazonAuroraInput_22_in.price = null;
						} else {

							if (rs_tAmazonAuroraInput_22_in.getObject(10) != null) {
								row_tAmazonAuroraInput_22_in.price = rs_tAmazonAuroraInput_22_in
										.getFloat(10);
							} else {
								row_tAmazonAuroraInput_22_in.price = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_22_in < 11) {
							row_tAmazonAuroraInput_22_in.marketValue = null;
						} else {

							if (rs_tAmazonAuroraInput_22_in.getObject(11) != null) {
								row_tAmazonAuroraInput_22_in.marketValue = rs_tAmazonAuroraInput_22_in
										.getFloat(11);
							} else {
								row_tAmazonAuroraInput_22_in.marketValue = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_22_in < 12) {
							row_tAmazonAuroraInput_22_in.priceDate = null;
						} else {

							if (rs_tAmazonAuroraInput_22_in.getString(12) != null) {
								String dateString_tAmazonAuroraInput_22_in = rs_tAmazonAuroraInput_22_in
										.getString(12);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_22_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_22_in)) {
									row_tAmazonAuroraInput_22_in.priceDate = rs_tAmazonAuroraInput_22_in
											.getTimestamp(12);
								} else {
									row_tAmazonAuroraInput_22_in.priceDate = (java.util.Date) year0_tAmazonAuroraInput_22_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_22_in.priceDate = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_22_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_22_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_22";

						currentComponent = "tAmazonAuroraInput_22_in";

						tos_count_tAmazonAuroraInput_22_in++;

						/**
						 * [tAmazonAuroraInput_22_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_22_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_22";

						currentComponent = "tAmazonAuroraInput_22_out";

						row29 = row_tAmazonAuroraInput_22_in;

						tos_count_tAmazonAuroraInput_22_out++;

						/**
						 * [tAmazonAuroraInput_22_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row29 main ] start
						 */

						currentComponent = "tAdvancedHash_row29";

						row29Struct row29_HashRow = new row29Struct();

						row29_HashRow.orionFirmId = row29.orionFirmId;

						row29_HashRow.externalId = row29.externalId;

						row29_HashRow.accountId = row29.accountId;

						row29_HashRow.symbol = row29.symbol;

						row29_HashRow.accountNumber = row29.accountNumber;

						row29_HashRow.dateAcquired = row29.dateAcquired;

						row29_HashRow.quantity = row29.quantity;

						row29_HashRow.costAmount = row29.costAmount;

						row29_HashRow.costPerShare = row29.costPerShare;

						row29_HashRow.price = row29.price;

						row29_HashRow.marketValue = row29.marketValue;

						row29_HashRow.priceDate = row29.priceDate;

						tHash_Lookup_row29.put(row29_HashRow);

						tos_count_tAdvancedHash_row29++;

						/**
						 * [tAdvancedHash_row29 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_22_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_22";

						currentComponent = "tAmazonAuroraInput_22_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_22_in != null) {
						rs_tAmazonAuroraInput_22_in.close();
					}
					stmt_tAmazonAuroraInput_22_in.close();
					if (conn_tAmazonAuroraInput_22_in != null
							&& !conn_tAmazonAuroraInput_22_in.isClosed()) {

						conn_tAmazonAuroraInput_22_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_22_NB_LINE",
						nb_line_tAmazonAuroraInput_22_in);

				ok_Hash.put("tAmazonAuroraInput_22_in", true);
				end_Hash.put("tAmazonAuroraInput_22_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_22_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_22_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_22";

				currentComponent = "tAmazonAuroraInput_22_out";

				ok_Hash.put("tAmazonAuroraInput_22_out", true);
				end_Hash.put("tAmazonAuroraInput_22_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_22_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row29 end ] start
				 */

				currentComponent = "tAdvancedHash_row29";

				tHash_Lookup_row29.endPut();

				ok_Hash.put("tAdvancedHash_row29", true);
				end_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row29 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_22_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_22";

				currentComponent = "tAmazonAuroraInput_22_in";

				/**
				 * [tAmazonAuroraInput_22_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_22_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_22";

				currentComponent = "tAmazonAuroraInput_22_out";

				/**
				 * [tAmazonAuroraInput_22_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row29 finally ] start
				 */

				currentComponent = "tAdvancedHash_row29";

				/**
				 * [tAdvancedHash_row29 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_22_in_SUBPROCESS_STATE", 1);
	}

	public static class row50Struct implements
			routines.system.IPersistableRow<row50Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row50Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOffirm_connection_4Struct
			implements
			routines.system.IPersistableRow<copyOfcopyOffirm_connection_4Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOffirm_connection_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row49Struct implements
			routines.system.IPersistableRow<row49Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row49Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_29_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_29_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_29_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_29Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_29Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_29_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_29_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_22Process(globalMap);

				row_tAmazonAuroraInput_29_inStruct row_tAmazonAuroraInput_29_in = new row_tAmazonAuroraInput_29_inStruct();
				row_tAmazonAuroraInput_29_inStruct row49 = row_tAmazonAuroraInput_29_in;
				copyOfcopyOffirm_connection_4Struct copyOfcopyOffirm_connection_4 = new copyOfcopyOffirm_connection_4Struct();
				row50Struct row50 = new row50Struct();

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());

				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				/**
				 * [tJava_8 begin ] stop
				 */

				/**
				 * [tJavaRow_23 begin ] start
				 */

				ok_Hash.put("tJavaRow_23", false);
				start_Hash.put("tJavaRow_23", System.currentTimeMillis());

				currentComponent = "tJavaRow_23";

				int tos_count_tJavaRow_23 = 0;

				int nb_line_tJavaRow_23 = 0;

				/**
				 * [tJavaRow_23 begin ] stop
				 */

				/**
				 * [tMap_29 begin ] start
				 */

				ok_Hash.put("tMap_29", false);
				start_Hash.put("tMap_29", System.currentTimeMillis());

				currentComponent = "tMap_29";

				int tos_count_tMap_29 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct> tHash_Lookup_row48 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row48Struct>) globalMap
						.get("tHash_Lookup_row48"));

				row48Struct row48HashKey = new row48Struct();
				row48Struct row48Default = new row48Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_29__Struct {
				}
				Var__tMap_29__Struct Var__tMap_29 = new Var__tMap_29__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfcopyOffirm_connection_4Struct copyOfcopyOffirm_connection_4_tmp = new copyOfcopyOffirm_connection_4Struct();
				// ###############################

				/**
				 * [tMap_29 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_29_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_29_out", false);
				start_Hash.put("tAmazonAuroraInput_29_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_29";

				currentComponent = "tAmazonAuroraInput_29_out";

				int tos_count_tAmazonAuroraInput_29_out = 0;

				/**
				 * [tAmazonAuroraInput_29_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_29_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_29_in", false);
				start_Hash.put("tAmazonAuroraInput_29_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_29";

				currentComponent = "tAmazonAuroraInput_29_in";

				int tos_count_tAmazonAuroraInput_29_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_29_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_29_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_29_in = calendar_tAmazonAuroraInput_29_in
						.getTime();
				int nb_line_tAmazonAuroraInput_29_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_29_in = null;
				String driverClass_tAmazonAuroraInput_29_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_29_in);
				String dbUser_tAmazonAuroraInput_29_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_29_in = context.password;

				String dbPwd_tAmazonAuroraInput_29_in = decryptedPassword_tAmazonAuroraInput_29_in;

				String url_tAmazonAuroraInput_29_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_29_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_29_in,
								dbUser_tAmazonAuroraInput_29_in,
								dbPwd_tAmazonAuroraInput_29_in);

				java.sql.Statement stmt_tAmazonAuroraInput_29_in = conn_tAmazonAuroraInput_29_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_29_in = "SELECT `name` , `server` , `database` FROM `orionEclipseFirm`";

				globalMap.put("tAmazonAuroraInput_29_QUERY",
						dbquery_tAmazonAuroraInput_29_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_29_in = null;
				try {
					rs_tAmazonAuroraInput_29_in = stmt_tAmazonAuroraInput_29_in
							.executeQuery(dbquery_tAmazonAuroraInput_29_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_29_in = rs_tAmazonAuroraInput_29_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_29_in = rsmd_tAmazonAuroraInput_29_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_29_in = null;

					while (rs_tAmazonAuroraInput_29_in.next()) {
						nb_line_tAmazonAuroraInput_29_in++;

						if (colQtyInRs_tAmazonAuroraInput_29_in < 1) {
							row_tAmazonAuroraInput_29_in.name = null;
						} else {

							row_tAmazonAuroraInput_29_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_29_in, 1,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_29_in < 2) {
							row_tAmazonAuroraInput_29_in.server = null;
						} else {

							row_tAmazonAuroraInput_29_in.server = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_29_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_29_in < 3) {
							row_tAmazonAuroraInput_29_in.database = null;
						} else {

							row_tAmazonAuroraInput_29_in.database = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_29_in, 3,
											false);
						}

						/**
						 * [tAmazonAuroraInput_29_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_29_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_29";

						currentComponent = "tAmazonAuroraInput_29_in";

						tos_count_tAmazonAuroraInput_29_in++;

						/**
						 * [tAmazonAuroraInput_29_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_29_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_29";

						currentComponent = "tAmazonAuroraInput_29_out";

						row49 = row_tAmazonAuroraInput_29_in;

						tos_count_tAmazonAuroraInput_29_out++;

						/**
						 * [tAmazonAuroraInput_29_out main ] stop
						 */

						/**
						 * [tMap_29 main ] start
						 */

						currentComponent = "tMap_29";

						boolean hasCasePrimitiveKeyWithNull_tMap_29 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_29 = false;
						boolean mainRowRejected_tMap_29 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row48"
						// /////////////////////////////////////////////

						boolean forceLooprow48 = false;

						row48Struct row48ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_29) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_29 = false;

							row48HashKey.firm = row49.name;

							row48HashKey.hashCodeDirty = true;

							tHash_Lookup_row48.lookup(row48HashKey);

							if (!tHash_Lookup_row48.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_29 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row48 != null
								&& tHash_Lookup_row48.getCount(row48HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row48' and it contains more one result from keys :  row48.firm = '"
							// + row48HashKey.firm + "'");
						} // G 071

						row48Struct row48 = null;

						row48Struct fromLookup_row48 = null;
						row48 = row48Default;

						if (tHash_Lookup_row48 != null
								&& tHash_Lookup_row48.hasNext()) { // G 099

							fromLookup_row48 = tHash_Lookup_row48.next();

						} // G 099

						if (fromLookup_row48 != null) {
							row48 = fromLookup_row48;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_29__Struct Var = Var__tMap_29;// ###############################
							// ###############################
							// # Output tables

							copyOfcopyOffirm_connection_4 = null;

							if (!rejectedInnerJoin_tMap_29) {

								// # Output table :
								// 'copyOfcopyOffirm_connection_4'
								copyOfcopyOffirm_connection_4_tmp.server = row49.server;
								copyOfcopyOffirm_connection_4_tmp.database = row49.database;
								copyOfcopyOffirm_connection_4 = copyOfcopyOffirm_connection_4_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_29 = false;

						tos_count_tMap_29++;

						/**
						 * [tMap_29 main ] stop
						 */
						// Start of branch "copyOfcopyOffirm_connection_4"
						if (copyOfcopyOffirm_connection_4 != null) {

							/**
							 * [tJavaRow_23 main ] start
							 */

							currentComponent = "tJavaRow_23";

							context.serverIp = copyOfcopyOffirm_connection_4.server;
							context.database = copyOfcopyOffirm_connection_4.database;

							nb_line_tJavaRow_23++;

							tos_count_tJavaRow_23++;

							/**
							 * [tJavaRow_23 main ] stop
							 */

							/**
							 * [tJava_8 main ] start
							 */

							currentComponent = "tJava_8";

							tos_count_tJava_8++;

							/**
							 * [tJava_8 main ] stop
							 */

						} // End of branch "copyOfcopyOffirm_connection_4"

						/**
						 * [tAmazonAuroraInput_29_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_29";

						currentComponent = "tAmazonAuroraInput_29_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_29_in != null) {
						rs_tAmazonAuroraInput_29_in.close();
					}
					stmt_tAmazonAuroraInput_29_in.close();
					if (conn_tAmazonAuroraInput_29_in != null
							&& !conn_tAmazonAuroraInput_29_in.isClosed()) {

						conn_tAmazonAuroraInput_29_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_29_NB_LINE",
						nb_line_tAmazonAuroraInput_29_in);

				ok_Hash.put("tAmazonAuroraInput_29_in", true);
				end_Hash.put("tAmazonAuroraInput_29_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_29_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_29_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_29";

				currentComponent = "tAmazonAuroraInput_29_out";

				ok_Hash.put("tAmazonAuroraInput_29_out", true);
				end_Hash.put("tAmazonAuroraInput_29_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_29_out end ] stop
				 */

				/**
				 * [tMap_29 end ] start
				 */

				currentComponent = "tMap_29";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row48 != null) {
					tHash_Lookup_row48.endGet();
				}
				globalMap.remove("tHash_Lookup_row48");

				// ###############################

				ok_Hash.put("tMap_29", true);
				end_Hash.put("tMap_29", System.currentTimeMillis());

				/**
				 * [tMap_29 end ] stop
				 */

				/**
				 * [tJavaRow_23 end ] start
				 */

				currentComponent = "tJavaRow_23";

				globalMap.put("tJavaRow_23_NB_LINE", nb_line_tJavaRow_23);

				ok_Hash.put("tJavaRow_23", true);
				end_Hash.put("tJavaRow_23", System.currentTimeMillis());

				/**
				 * [tJavaRow_23 end ] stop
				 */

				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				tAmazonAuroraInput_33_inProcess(globalMap);

				/**
				 * [tJava_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_29"
			globalMap.remove("tHash_Lookup_row48");

			try {

				/**
				 * [tAmazonAuroraInput_29_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_29";

				currentComponent = "tAmazonAuroraInput_29_in";

				/**
				 * [tAmazonAuroraInput_29_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_29_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_29";

				currentComponent = "tAmazonAuroraInput_29_out";

				/**
				 * [tAmazonAuroraInput_29_out finally ] stop
				 */

				/**
				 * [tMap_29 finally ] start
				 */

				currentComponent = "tMap_29";

				/**
				 * [tMap_29 finally ] stop
				 */

				/**
				 * [tJavaRow_23 finally ] start
				 */

				currentComponent = "tJavaRow_23";

				/**
				 * [tJavaRow_23 finally ] stop
				 */

				/**
				 * [tJava_8 finally ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_29_in_SUBPROCESS_STATE", 1);
	}

	public static class out6Struct implements
			routines.system.IPersistableRow<out6Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public Double GrossProceeds;

		public Double getGrossProceeds() {
			return this.GrossProceeds;
		}

		public Double NetProceeds;

		public Double getNetProceeds() {
			return this.NetProceeds;
		}

		public Float CostAmount;

		public Float getCostAmount() {
			return this.CostAmount;
		}

		public java.util.Date DateAquired;

		public java.util.Date getDateAquired() {
			return this.DateAquired;
		}

		public java.util.Date SellDate;

		public java.util.Date getSellDate() {
			return this.SellDate;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Boolean LongTerm;

		public Boolean getLongTerm() {
			return this.LongTerm;
		}

		public String SellMethod;

		public String getSellMethod() {
			return this.SellMethod;
		}

		public Float TotalGains;

		public Float getTotalGains() {
			return this.TotalGains;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.GrossProceeds = null;
					} else {
						this.GrossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetProceeds = null;
					} else {
						this.NetProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CostAmount = null;
					} else {
						this.CostAmount = dis.readFloat();
					}

					this.DateAquired = readDate(dis);

					this.SellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.LongTerm = null;
					} else {
						this.LongTerm = dis.readBoolean();
					}

					this.SellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalGains = null;
					} else {
						this.TotalGains = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// Double

				if (this.GrossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.GrossProceeds);
				}

				// Double

				if (this.NetProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.NetProceeds);
				}

				// Float

				if (this.CostAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CostAmount);
				}

				// java.util.Date

				writeDate(this.DateAquired, dos);

				// java.util.Date

				writeDate(this.SellDate, dos);

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Boolean

				if (this.LongTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.LongTerm);
				}

				// String

				writeString(this.SellMethod, dos);

				// Float

				if (this.TotalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalGains);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",GrossProceeds=" + String.valueOf(GrossProceeds));
			sb.append(",NetProceeds=" + String.valueOf(NetProceeds));
			sb.append(",CostAmount=" + String.valueOf(CostAmount));
			sb.append(",DateAquired=" + String.valueOf(DateAquired));
			sb.append(",SellDate=" + String.valueOf(SellDate));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",LongTerm=" + String.valueOf(LongTerm));
			sb.append(",SellMethod=" + SellMethod);
			sb.append(",TotalGains=" + String.valueOf(TotalGains));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfmainout_3Struct implements
			routines.system.IPersistableRow<copyOfmainout_3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer firm;

		public Integer getFirm() {
			return this.firm;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.firm = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + String.valueOf(firm));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfmainout_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfs_4Struct implements
			routines.system.IPersistableRow<copyOfs_4Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfs_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row55Struct implements
			routines.system.IPersistableRow<row55Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row55Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_33_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_33_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_33_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_33Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_33Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_33_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_33_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tAmazonAuroraInput_35_inProcess(globalMap);
				tJavaRow_25Process(globalMap);
				tAmazonAuroraInput_34_inProcess(globalMap);

				row_tAmazonAuroraInput_33_inStruct row_tAmazonAuroraInput_33_in = new row_tAmazonAuroraInput_33_inStruct();
				row_tAmazonAuroraInput_33_inStruct row55 = row_tAmazonAuroraInput_33_in;
				copyOfs_4Struct copyOfs_4 = new copyOfs_4Struct();
				copyOfmainout_3Struct copyOfmainout_3 = new copyOfmainout_3Struct();
				out6Struct out6 = new out6Struct();

				/**
				 * [tAmazonMysqlOutput_8 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_8", false);
				start_Hash.put("tAmazonMysqlOutput_8",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_8";

				int tos_count_tAmazonMysqlOutput_8 = 0;

				int nb_line_tAmazonMysqlOutput_8 = 0;
				int nb_line_update_tAmazonMysqlOutput_8 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_8 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_8 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_8 = 0;

				int deletedCount_tAmazonMysqlOutput_8 = 0;
				int updatedCount_tAmazonMysqlOutput_8 = 0;
				int insertedCount_tAmazonMysqlOutput_8 = 0;

				int rejectedCount_tAmazonMysqlOutput_8 = 0;

				String tableName_tAmazonMysqlOutput_8 = "reject_ReliazedGainLoss";
				boolean whetherReject_tAmazonMysqlOutput_8 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_8 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_8.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_8 = calendar_tAmazonMysqlOutput_8
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_8.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_8 = calendar_tAmazonMysqlOutput_8
						.getTime().getTime();
				long date_tAmazonMysqlOutput_8;

				java.sql.Connection conn_tAmazonMysqlOutput_8 = null;
				String dbProperties_tAmazonMysqlOutput_8 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_8 = null;
				if (dbProperties_tAmazonMysqlOutput_8 == null
						|| dbProperties_tAmazonMysqlOutput_8.trim().length() == 0) {
					url_tAmazonMysqlOutput_8 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_8 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_8
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_8 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_8 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_8;
				}
				String dbUser_tAmazonMysqlOutput_8 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_8 = context.password;

				String dbPwd_tAmazonMysqlOutput_8 = decryptedPassword_tAmazonMysqlOutput_8;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_8 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_8,
								dbUser_tAmazonMysqlOutput_8,
								dbPwd_tAmazonMysqlOutput_8);

				resourceMap.put("conn_tAmazonMysqlOutput_8",
						conn_tAmazonMysqlOutput_8);

				conn_tAmazonMysqlOutput_8.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_8 = 1000000;
				int commitCounter_tAmazonMysqlOutput_8 = 0;

				int count_tAmazonMysqlOutput_8 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_8 = conn_tAmazonMysqlOutput_8
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_8 = dbMetaData_tAmazonMysqlOutput_8
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_8 = false;
				while (rsTable_tAmazonMysqlOutput_8.next()) {
					String table_tAmazonMysqlOutput_8 = rsTable_tAmazonMysqlOutput_8
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_8
							.equalsIgnoreCase("reject_ReliazedGainLoss")) {
						whetherExist_tAmazonMysqlOutput_8 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_8.close();
				if (!whetherExist_tAmazonMysqlOutput_8) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_8 = conn_tAmazonMysqlOutput_8
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_8
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_8
									+ "`(`OrionFirmId` INT(11)  ,`ExternalId` INT(11)  ,`Symbol` VARCHAR(100)  ,`AccountId` VARCHAR(255)  ,`AccountNumber` VARCHAR(255)  ,`GrossProceeds` DOUBLE(22,2)  ,`NetProceeds` DOUBLE(22,2)  ,`CostAmount` FLOAT(22,2)  ,`DateAquired` DATETIME ,`SellDate` DATETIME ,`Quantity` FLOAT(22,7)  ,`LongTerm` BIT(0)  ,`SellMethod` VARCHAR(255)  ,`TotalGains` FLOAT(22,2)  )");
					stmtCreate_tAmazonMysqlOutput_8.close();
				}

				String insert_tAmazonMysqlOutput_8 = "INSERT INTO `"
						+ "reject_ReliazedGainLoss"
						+ "` (`OrionFirmId`,`ExternalId`,`Symbol`,`AccountId`,`AccountNumber`,`GrossProceeds`,`NetProceeds`,`CostAmount`,`DateAquired`,`SellDate`,`Quantity`,`LongTerm`,`SellMethod`,`TotalGains`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonMysqlOutput_8 = 100;
				int batchSizeCounter_tAmazonMysqlOutput_8 = 0;

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_8 = conn_tAmazonMysqlOutput_8
						.prepareStatement(insert_tAmazonMysqlOutput_8);

				/**
				 * [tAmazonMysqlOutput_8 begin ] stop
				 */

				/**
				 * [tMap_35 begin ] start
				 */

				ok_Hash.put("tMap_35", false);
				start_Hash.put("tMap_35", System.currentTimeMillis());

				currentComponent = "tMap_35";

				int tos_count_tMap_35 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row58Struct> tHash_Lookup_row58 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row58Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row58Struct>) globalMap
						.get("tHash_Lookup_row58"));

				row58Struct row58HashKey = new row58Struct();
				row58Struct row58Default = new row58Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_35__Struct {
				}
				Var__tMap_35__Struct Var__tMap_35 = new Var__tMap_35__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out6Struct out6_tmp = new out6Struct();
				// ###############################

				/**
				 * [tMap_35 begin ] stop
				 */

				/**
				 * [tMap_34 begin ] start
				 */

				ok_Hash.put("tMap_34", false);
				start_Hash.put("tMap_34", System.currentTimeMillis());

				currentComponent = "tMap_34";

				int tos_count_tMap_34 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row57Struct> tHash_Lookup_row57 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row57Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row57Struct>) globalMap
						.get("tHash_Lookup_row57"));

				row57Struct row57HashKey = new row57Struct();
				row57Struct row57Default = new row57Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_34__Struct {
				}
				Var__tMap_34__Struct Var__tMap_34 = new Var__tMap_34__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfmainout_3Struct copyOfmainout_3_tmp = new copyOfmainout_3Struct();
				// ###############################

				/**
				 * [tMap_34 begin ] stop
				 */

				/**
				 * [tMap_33 begin ] start
				 */

				ok_Hash.put("tMap_33", false);
				start_Hash.put("tMap_33", System.currentTimeMillis());

				currentComponent = "tMap_33";

				int tos_count_tMap_33 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row56Struct> tHash_Lookup_row56 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row56Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row56Struct>) globalMap
						.get("tHash_Lookup_row56"));

				row56Struct row56HashKey = new row56Struct();
				row56Struct row56Default = new row56Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_33__Struct {
				}
				Var__tMap_33__Struct Var__tMap_33 = new Var__tMap_33__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfs_4Struct copyOfs_4_tmp = new copyOfs_4Struct();
				// ###############################

				/**
				 * [tMap_33 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_33_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_33_out", false);
				start_Hash.put("tAmazonAuroraInput_33_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_33";

				currentComponent = "tAmazonAuroraInput_33_out";

				int tos_count_tAmazonAuroraInput_33_out = 0;

				/**
				 * [tAmazonAuroraInput_33_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_33_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_33_in", false);
				start_Hash.put("tAmazonAuroraInput_33_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_33";

				currentComponent = "tAmazonAuroraInput_33_in";

				int tos_count_tAmazonAuroraInput_33_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_33_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_33_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_33_in = calendar_tAmazonAuroraInput_33_in
						.getTime();
				int nb_line_tAmazonAuroraInput_33_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_33_in = null;
				String driverClass_tAmazonAuroraInput_33_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_33_in);
				String dbUser_tAmazonAuroraInput_33_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_33_in = context.password;

				String dbPwd_tAmazonAuroraInput_33_in = decryptedPassword_tAmazonAuroraInput_33_in;

				String url_tAmazonAuroraInput_33_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_33_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_33_in,
								dbUser_tAmazonAuroraInput_33_in,
								dbPwd_tAmazonAuroraInput_33_in);

				java.sql.Statement stmt_tAmazonAuroraInput_33_in = conn_tAmazonAuroraInput_33_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_33_in = "select distinct OrionFirmId from realizedgainloss_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_33_QUERY",
						dbquery_tAmazonAuroraInput_33_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_33_in = null;
				try {
					rs_tAmazonAuroraInput_33_in = stmt_tAmazonAuroraInput_33_in
							.executeQuery(dbquery_tAmazonAuroraInput_33_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_33_in = rs_tAmazonAuroraInput_33_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_33_in = rsmd_tAmazonAuroraInput_33_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_33_in = null;

					while (rs_tAmazonAuroraInput_33_in.next()) {
						nb_line_tAmazonAuroraInput_33_in++;

						if (colQtyInRs_tAmazonAuroraInput_33_in < 1) {
							row_tAmazonAuroraInput_33_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_33_in.getObject(1) != null) {
								row_tAmazonAuroraInput_33_in.OrionFirmId = rs_tAmazonAuroraInput_33_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_33_in.OrionFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_33_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_33_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_33";

						currentComponent = "tAmazonAuroraInput_33_in";

						tos_count_tAmazonAuroraInput_33_in++;

						/**
						 * [tAmazonAuroraInput_33_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_33_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_33";

						currentComponent = "tAmazonAuroraInput_33_out";

						row55 = row_tAmazonAuroraInput_33_in;

						tos_count_tAmazonAuroraInput_33_out++;

						/**
						 * [tAmazonAuroraInput_33_out main ] stop
						 */

						/**
						 * [tMap_33 main ] start
						 */

						currentComponent = "tMap_33";

						boolean hasCasePrimitiveKeyWithNull_tMap_33 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_33 = false;
						boolean mainRowRejected_tMap_33 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row56"
						// /////////////////////////////////////////////

						boolean forceLooprow56 = false;

						row56Struct row56ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_33) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_33 = false;

							row56HashKey.orionConnectFirmId = row55.OrionFirmId;

							row56HashKey.hashCodeDirty = true;

							tHash_Lookup_row56.lookup(row56HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row56 != null
								&& tHash_Lookup_row56.getCount(row56HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row56' and it contains more one result from keys :  row56.orionConnectFirmId = '"
							// + row56HashKey.orionConnectFirmId + "'");
						} // G 071

						row56Struct row56 = null;

						row56Struct fromLookup_row56 = null;
						row56 = row56Default;

						if (tHash_Lookup_row56 != null
								&& tHash_Lookup_row56.hasNext()) { // G 099

							fromLookup_row56 = tHash_Lookup_row56.next();

						} // G 099

						if (fromLookup_row56 != null) {
							row56 = fromLookup_row56;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_33__Struct Var = Var__tMap_33;// ###############################
							// ###############################
							// # Output tables

							copyOfs_4 = null;

							// # Output table : 'copyOfs_4'
							copyOfs_4_tmp.OrionFirmId = row55.OrionFirmId;
							copyOfs_4_tmp.orionEclipseFirmName = row56.orionEclipseFirmName;
							copyOfs_4 = copyOfs_4_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_33 = false;

						tos_count_tMap_33++;

						/**
						 * [tMap_33 main ] stop
						 */
						// Start of branch "copyOfs_4"
						if (copyOfs_4 != null) {

							/**
							 * [tMap_34 main ] start
							 */

							currentComponent = "tMap_34";

							boolean hasCasePrimitiveKeyWithNull_tMap_34 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_34 = false;
							boolean mainRowRejected_tMap_34 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row57"
							// /////////////////////////////////////////////

							boolean forceLooprow57 = false;

							row57Struct row57ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_34) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_34 = false;

								row57HashKey.firm = copyOfs_4.orionEclipseFirmName;

								row57HashKey.hashCodeDirty = true;

								tHash_Lookup_row57.lookup(row57HashKey);

								if (!tHash_Lookup_row57.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_34 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row57 != null
									&& tHash_Lookup_row57
											.getCount(row57HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row57' and it contains more one result from keys :  row57.firm = '"
								// + row57HashKey.firm + "'");
							} // G 071

							row57Struct row57 = null;

							row57Struct fromLookup_row57 = null;
							row57 = row57Default;

							if (tHash_Lookup_row57 != null
									&& tHash_Lookup_row57.hasNext()) { // G 099

								fromLookup_row57 = tHash_Lookup_row57.next();

							} // G 099

							if (fromLookup_row57 != null) {
								row57 = fromLookup_row57;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_34__Struct Var = Var__tMap_34;// ###############################
								// ###############################
								// # Output tables

								copyOfmainout_3 = null;

								if (!rejectedInnerJoin_tMap_34) {
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'copyOfmainout_3'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_34) {
									copyOfmainout_3_tmp.firm = copyOfs_4.OrionFirmId;
									copyOfmainout_3 = copyOfmainout_3_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_34 = false;

							tos_count_tMap_34++;

							/**
							 * [tMap_34 main ] stop
							 */
							// Start of branch "copyOfmainout_3"
							if (copyOfmainout_3 != null) {

								/**
								 * [tMap_35 main ] start
								 */

								currentComponent = "tMap_35";

								boolean hasCasePrimitiveKeyWithNull_tMap_35 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_35 = false;
								boolean mainRowRejected_tMap_35 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row58"
								// /////////////////////////////////////////////

								boolean forceLooprow58 = false;

								row58Struct row58ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_35) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_35 = false;

									row58HashKey.OrionFirmId = copyOfmainout_3.firm;

									row58HashKey.hashCodeDirty = true;

									tHash_Lookup_row58.lookup(row58HashKey);

									if (!tHash_Lookup_row58.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_35 = true;

										forceLooprow58 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow58 = true;
								} // G 21

								row58Struct row58 = null;

								while ((tHash_Lookup_row58 != null && tHash_Lookup_row58
										.hasNext()) || forceLooprow58) { // G_TM_M_043

									// CALL close loop of lookup 'row58'

									row58Struct fromLookup_row58 = null;
									row58 = row58Default;

									if (!forceLooprow58) { // G 46

										fromLookup_row58 = tHash_Lookup_row58
												.next();

										if (fromLookup_row58 != null) {
											row58 = fromLookup_row58;
										}

									} // G 46

									forceLooprow58 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_35__Struct Var = Var__tMap_35;// ###############################
										// ###############################
										// # Output tables

										out6 = null;

										if (!rejectedInnerJoin_tMap_35) {

											// # Output table : 'out6'
											out6_tmp.OrionFirmId = row58.OrionFirmId;
											out6_tmp.ExternalId = row58.ExternalId;
											out6_tmp.Symbol = row58.Symbol;
											out6_tmp.AccountId = row58.AccountId;
											out6_tmp.AccountNumber = row58.AccountNumber;
											out6_tmp.GrossProceeds = row58.GrossProceeds;
											out6_tmp.NetProceeds = row58.NetProceeds;
											out6_tmp.CostAmount = row58.CostAmount;
											out6_tmp.DateAquired = row58.DateAquired;
											out6_tmp.SellDate = row58.SellDate;
											out6_tmp.Quantity = row58.Quantity;
											out6_tmp.LongTerm = row58.LongTerm;
											out6_tmp.SellMethod = row58.SellMethod;
											out6_tmp.TotalGains = row58.TotalGains;
											out6 = out6_tmp;
										} // closing inner join bracket (2)
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_35 = false;

									tos_count_tMap_35++;

									/**
									 * [tMap_35 main ] stop
									 */
									// Start of branch "out6"
									if (out6 != null) {

										/**
										 * [tAmazonMysqlOutput_8 main ] start
										 */

										currentComponent = "tAmazonMysqlOutput_8";

										whetherReject_tAmazonMysqlOutput_8 = false;
										if (out6.OrionFirmId == null) {
											pstmt_tAmazonMysqlOutput_8.setNull(
													1, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_8.setInt(
													1, out6.OrionFirmId);
										}

										if (out6.ExternalId == null) {
											pstmt_tAmazonMysqlOutput_8.setNull(
													2, java.sql.Types.INTEGER);
										} else {
											pstmt_tAmazonMysqlOutput_8.setInt(
													2, out6.ExternalId);
										}

										if (out6.Symbol == null) {
											pstmt_tAmazonMysqlOutput_8.setNull(
													3, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_8
													.setString(3, out6.Symbol);
										}

										if (out6.AccountId == null) {
											pstmt_tAmazonMysqlOutput_8.setNull(
													4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_8
													.setString(4,
															out6.AccountId);
										}

										if (out6.AccountNumber == null) {
											pstmt_tAmazonMysqlOutput_8.setNull(
													5, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_8
													.setString(5,
															out6.AccountNumber);
										}

										if (out6.GrossProceeds == null) {
											pstmt_tAmazonMysqlOutput_8.setNull(
													6, java.sql.Types.DOUBLE);
										} else {
											pstmt_tAmazonMysqlOutput_8
													.setDouble(6,
															out6.GrossProceeds);
										}

										if (out6.NetProceeds == null) {
											pstmt_tAmazonMysqlOutput_8.setNull(
													7, java.sql.Types.DOUBLE);
										} else {
											pstmt_tAmazonMysqlOutput_8
													.setDouble(7,
															out6.NetProceeds);
										}

										if (out6.CostAmount == null) {
											pstmt_tAmazonMysqlOutput_8.setNull(
													8, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_8
													.setFloat(8,
															out6.CostAmount);
										}

										if (out6.DateAquired != null) {
											date_tAmazonMysqlOutput_8 = out6.DateAquired
													.getTime();
											if (date_tAmazonMysqlOutput_8 < year1_tAmazonMysqlOutput_8
													|| date_tAmazonMysqlOutput_8 >= year10000_tAmazonMysqlOutput_8) {
												pstmt_tAmazonMysqlOutput_8
														.setString(9,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonMysqlOutput_8
														.setTimestamp(
																9,
																new java.sql.Timestamp(
																		date_tAmazonMysqlOutput_8));
											}
										} else {
											pstmt_tAmazonMysqlOutput_8.setNull(
													9, java.sql.Types.DATE);
										}

										if (out6.SellDate != null) {
											date_tAmazonMysqlOutput_8 = out6.SellDate
													.getTime();
											if (date_tAmazonMysqlOutput_8 < year1_tAmazonMysqlOutput_8
													|| date_tAmazonMysqlOutput_8 >= year10000_tAmazonMysqlOutput_8) {
												pstmt_tAmazonMysqlOutput_8
														.setString(10,
																"0000-00-00 00:00:00");
											} else {
												pstmt_tAmazonMysqlOutput_8
														.setTimestamp(
																10,
																new java.sql.Timestamp(
																		date_tAmazonMysqlOutput_8));
											}
										} else {
											pstmt_tAmazonMysqlOutput_8.setNull(
													10, java.sql.Types.DATE);
										}

										if (out6.Quantity == null) {
											pstmt_tAmazonMysqlOutput_8.setNull(
													11, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_8
													.setFloat(11, out6.Quantity);
										}

										if (out6.LongTerm == null) {
											pstmt_tAmazonMysqlOutput_8.setNull(
													12, java.sql.Types.BOOLEAN);
										} else {
											pstmt_tAmazonMysqlOutput_8
													.setBoolean(12,
															out6.LongTerm);
										}

										if (out6.SellMethod == null) {
											pstmt_tAmazonMysqlOutput_8.setNull(
													13, java.sql.Types.VARCHAR);
										} else {
											pstmt_tAmazonMysqlOutput_8
													.setString(13,
															out6.SellMethod);
										}

										if (out6.TotalGains == null) {
											pstmt_tAmazonMysqlOutput_8.setNull(
													14, java.sql.Types.FLOAT);
										} else {
											pstmt_tAmazonMysqlOutput_8
													.setFloat(14,
															out6.TotalGains);
										}

										pstmt_tAmazonMysqlOutput_8.addBatch();
										nb_line_tAmazonMysqlOutput_8++;

										batchSizeCounter_tAmazonMysqlOutput_8++;

										if (batchSize_tAmazonMysqlOutput_8 <= batchSizeCounter_tAmazonMysqlOutput_8) {
											try {
												int countSum_tAmazonMysqlOutput_8 = 0;

												for (int countEach_tAmazonMysqlOutput_8 : pstmt_tAmazonMysqlOutput_8
														.executeBatch()) {
													countSum_tAmazonMysqlOutput_8 += (countEach_tAmazonMysqlOutput_8 < 0 ? 0
															: 1);
												}

												insertedCount_tAmazonMysqlOutput_8 += countSum_tAmazonMysqlOutput_8;

											} catch (java.sql.BatchUpdateException e) {

												int countSum_tAmazonMysqlOutput_8 = 0;
												for (int countEach_tAmazonMysqlOutput_8 : e
														.getUpdateCounts()) {
													countSum_tAmazonMysqlOutput_8 += (countEach_tAmazonMysqlOutput_8 < 0 ? 0
															: countEach_tAmazonMysqlOutput_8);
												}

												insertedCount_tAmazonMysqlOutput_8 += countSum_tAmazonMysqlOutput_8;

												System.err.println(e
														.getMessage());

											}

											batchSizeCounter_tAmazonMysqlOutput_8 = 0;
										}

										commitCounter_tAmazonMysqlOutput_8++;
										if (commitEvery_tAmazonMysqlOutput_8 <= commitCounter_tAmazonMysqlOutput_8) {
											if ((batchSize_tAmazonMysqlOutput_8 > 0)
													&& (batchSizeCounter_tAmazonMysqlOutput_8 > 0)) {
												try {
													int countSum_tAmazonMysqlOutput_8 = 0;

													for (int countEach_tAmazonMysqlOutput_8 : pstmt_tAmazonMysqlOutput_8
															.executeBatch()) {
														countSum_tAmazonMysqlOutput_8 += (countEach_tAmazonMysqlOutput_8 < 0 ? 0
																: 1);
													}

													insertedCount_tAmazonMysqlOutput_8 += countSum_tAmazonMysqlOutput_8;

													batchSizeCounter_tAmazonMysqlOutput_8 = 0;
												} catch (java.sql.BatchUpdateException e) {

													int countSum_tAmazonMysqlOutput_8 = 0;
													for (int countEach_tAmazonMysqlOutput_8 : e
															.getUpdateCounts()) {
														countSum_tAmazonMysqlOutput_8 += (countEach_tAmazonMysqlOutput_8 < 0 ? 0
																: countEach_tAmazonMysqlOutput_8);
													}

													insertedCount_tAmazonMysqlOutput_8 += countSum_tAmazonMysqlOutput_8;

													System.err.println(e
															.getMessage());

												}
											}

											conn_tAmazonMysqlOutput_8.commit();

											commitCounter_tAmazonMysqlOutput_8 = 0;
										}

										tos_count_tAmazonMysqlOutput_8++;

										/**
										 * [tAmazonMysqlOutput_8 main ] stop
										 */

									} // End of branch "out6"

								} // close loop of lookup 'row58' // G_TM_M_043

							} // End of branch "copyOfmainout_3"

						} // End of branch "copyOfs_4"

						/**
						 * [tAmazonAuroraInput_33_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_33";

						currentComponent = "tAmazonAuroraInput_33_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_33_in != null) {
						rs_tAmazonAuroraInput_33_in.close();
					}
					stmt_tAmazonAuroraInput_33_in.close();
					if (conn_tAmazonAuroraInput_33_in != null
							&& !conn_tAmazonAuroraInput_33_in.isClosed()) {

						conn_tAmazonAuroraInput_33_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_33_NB_LINE",
						nb_line_tAmazonAuroraInput_33_in);

				ok_Hash.put("tAmazonAuroraInput_33_in", true);
				end_Hash.put("tAmazonAuroraInput_33_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_33_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_33_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_33";

				currentComponent = "tAmazonAuroraInput_33_out";

				ok_Hash.put("tAmazonAuroraInput_33_out", true);
				end_Hash.put("tAmazonAuroraInput_33_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_33_out end ] stop
				 */

				/**
				 * [tMap_33 end ] start
				 */

				currentComponent = "tMap_33";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row56 != null) {
					tHash_Lookup_row56.endGet();
				}
				globalMap.remove("tHash_Lookup_row56");

				// ###############################

				ok_Hash.put("tMap_33", true);
				end_Hash.put("tMap_33", System.currentTimeMillis());

				/**
				 * [tMap_33 end ] stop
				 */

				/**
				 * [tMap_34 end ] start
				 */

				currentComponent = "tMap_34";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row57 != null) {
					tHash_Lookup_row57.endGet();
				}
				globalMap.remove("tHash_Lookup_row57");

				// ###############################

				ok_Hash.put("tMap_34", true);
				end_Hash.put("tMap_34", System.currentTimeMillis());

				/**
				 * [tMap_34 end ] stop
				 */

				/**
				 * [tMap_35 end ] start
				 */

				currentComponent = "tMap_35";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row58 != null) {
					tHash_Lookup_row58.endGet();
				}
				globalMap.remove("tHash_Lookup_row58");

				// ###############################

				ok_Hash.put("tMap_35", true);
				end_Hash.put("tMap_35", System.currentTimeMillis());

				/**
				 * [tMap_35 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_8 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_8";

				try {
					if (batchSizeCounter_tAmazonMysqlOutput_8 != 0) {
						int countSum_tAmazonMysqlOutput_8 = 0;

						for (int countEach_tAmazonMysqlOutput_8 : pstmt_tAmazonMysqlOutput_8
								.executeBatch()) {
							countSum_tAmazonMysqlOutput_8 += (countEach_tAmazonMysqlOutput_8 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonMysqlOutput_8 += countSum_tAmazonMysqlOutput_8;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonMysqlOutput_8 = 0;
					for (int countEach_tAmazonMysqlOutput_8 : e
							.getUpdateCounts()) {
						countSum_tAmazonMysqlOutput_8 += (countEach_tAmazonMysqlOutput_8 < 0 ? 0
								: countEach_tAmazonMysqlOutput_8);
					}

					insertedCount_tAmazonMysqlOutput_8 += countSum_tAmazonMysqlOutput_8;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonMysqlOutput_8 = 0;

				if (pstmt_tAmazonMysqlOutput_8 != null) {
					pstmt_tAmazonMysqlOutput_8.close();
				}

				if (commitCounter_tAmazonMysqlOutput_8 > 0) {

					conn_tAmazonMysqlOutput_8.commit();

				}

				conn_tAmazonMysqlOutput_8.close();

				resourceMap.put("finish_tAmazonMysqlOutput_8", true);

				nb_line_deleted_tAmazonMysqlOutput_8 = nb_line_deleted_tAmazonMysqlOutput_8
						+ deletedCount_tAmazonMysqlOutput_8;
				nb_line_update_tAmazonMysqlOutput_8 = nb_line_update_tAmazonMysqlOutput_8
						+ updatedCount_tAmazonMysqlOutput_8;
				nb_line_inserted_tAmazonMysqlOutput_8 = nb_line_inserted_tAmazonMysqlOutput_8
						+ insertedCount_tAmazonMysqlOutput_8;
				nb_line_rejected_tAmazonMysqlOutput_8 = nb_line_rejected_tAmazonMysqlOutput_8
						+ rejectedCount_tAmazonMysqlOutput_8;

				globalMap.put("tAmazonMysqlOutput_8_NB_LINE",
						nb_line_tAmazonMysqlOutput_8);
				globalMap.put("tAmazonMysqlOutput_8_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_8);
				globalMap.put("tAmazonMysqlOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_8);
				globalMap.put("tAmazonMysqlOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_8);
				globalMap.put("tAmazonMysqlOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_8);

				ok_Hash.put("tAmazonMysqlOutput_8", true);
				end_Hash.put("tAmazonMysqlOutput_8", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_35"
			globalMap.remove("tHash_Lookup_row58");

			// free memory for "tMap_34"
			globalMap.remove("tHash_Lookup_row57");

			// free memory for "tMap_33"
			globalMap.remove("tHash_Lookup_row56");

			try {

				/**
				 * [tAmazonAuroraInput_33_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_33";

				currentComponent = "tAmazonAuroraInput_33_in";

				/**
				 * [tAmazonAuroraInput_33_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_33_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_33";

				currentComponent = "tAmazonAuroraInput_33_out";

				/**
				 * [tAmazonAuroraInput_33_out finally ] stop
				 */

				/**
				 * [tMap_33 finally ] start
				 */

				currentComponent = "tMap_33";

				/**
				 * [tMap_33 finally ] stop
				 */

				/**
				 * [tMap_34 finally ] start
				 */

				currentComponent = "tMap_34";

				/**
				 * [tMap_34 finally ] stop
				 */

				/**
				 * [tMap_35 finally ] start
				 */

				currentComponent = "tMap_35";

				/**
				 * [tMap_35 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_8 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_8";

				if (resourceMap.get("finish_tAmazonMysqlOutput_8") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_8") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_8")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_8) {
							String errorMessage_tAmazonMysqlOutput_8 = "failed to close the connection in tAmazonMysqlOutput_8 :"
									+ sqlEx_tAmazonMysqlOutput_8.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_8);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_33_in_SUBPROCESS_STATE", 1);
	}

	public static class row56Struct implements
			routines.system.IPersistableComparableLookupRow<row56Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row56Struct other = (row56Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row56Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmName = this.orionEclipseFirmName;

		}

		public void copyKeysDataTo(row56Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmName = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.orionEclipseFirmName, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row56Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_34_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_34_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public String orionEclipseFirmName;

		public String getOrionEclipseFirmName() {
			return this.orionEclipseFirmName;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// String

				writeString(this.orionEclipseFirmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmName=" + orionEclipseFirmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_34_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_34_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_34_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_34_inStruct row_tAmazonAuroraInput_34_in = new row_tAmazonAuroraInput_34_inStruct();
				row_tAmazonAuroraInput_34_inStruct row56 = row_tAmazonAuroraInput_34_in;

				/**
				 * [tAdvancedHash_row56 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row56", false);
				start_Hash.put("tAdvancedHash_row56",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row56";

				int tos_count_tAdvancedHash_row56 = 0;

				// connection name:row56
				// source node:tAmazonAuroraInput_34_out -
				// inputs:(row_tAmazonAuroraInput_34_in) outputs:(row56,row56) |
				// target node:tAdvancedHash_row56 - inputs:(row56) outputs:()
				// linked node: tMap_33 - inputs:(row55,row56)
				// outputs:(copyOfs_4)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row56 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row56Struct> tHash_Lookup_row56 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row56Struct> getLookup(matchingModeEnum_row56);

				globalMap.put("tHash_Lookup_row56", tHash_Lookup_row56);

				/**
				 * [tAdvancedHash_row56 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_34_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_34_out", false);
				start_Hash.put("tAmazonAuroraInput_34_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_34";

				currentComponent = "tAmazonAuroraInput_34_out";

				int tos_count_tAmazonAuroraInput_34_out = 0;

				/**
				 * [tAmazonAuroraInput_34_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_34_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_34_in", false);
				start_Hash.put("tAmazonAuroraInput_34_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_34";

				currentComponent = "tAmazonAuroraInput_34_in";

				int tos_count_tAmazonAuroraInput_34_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_34_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_34_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_34_in = calendar_tAmazonAuroraInput_34_in
						.getTime();
				int nb_line_tAmazonAuroraInput_34_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_34_in = null;
				String driverClass_tAmazonAuroraInput_34_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_34_in);
				String dbUser_tAmazonAuroraInput_34_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_34_in = context.password;

				String dbPwd_tAmazonAuroraInput_34_in = decryptedPassword_tAmazonAuroraInput_34_in;

				String url_tAmazonAuroraInput_34_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_34_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_34_in,
								dbUser_tAmazonAuroraInput_34_in,
								dbPwd_tAmazonAuroraInput_34_in);

				java.sql.Statement stmt_tAmazonAuroraInput_34_in = conn_tAmazonAuroraInput_34_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_34_in = "select orionConnectFirmId , orionEclipseFirmName from firm";

				globalMap.put("tAmazonAuroraInput_34_QUERY",
						dbquery_tAmazonAuroraInput_34_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_34_in = null;
				try {
					rs_tAmazonAuroraInput_34_in = stmt_tAmazonAuroraInput_34_in
							.executeQuery(dbquery_tAmazonAuroraInput_34_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_34_in = rs_tAmazonAuroraInput_34_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_34_in = rsmd_tAmazonAuroraInput_34_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_34_in = null;

					while (rs_tAmazonAuroraInput_34_in.next()) {
						nb_line_tAmazonAuroraInput_34_in++;

						if (colQtyInRs_tAmazonAuroraInput_34_in < 1) {
							row_tAmazonAuroraInput_34_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_34_in.getObject(1) != null) {
								row_tAmazonAuroraInput_34_in.orionConnectFirmId = rs_tAmazonAuroraInput_34_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_34_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_34_in < 2) {
							row_tAmazonAuroraInput_34_in.orionEclipseFirmName = null;
						} else {

							row_tAmazonAuroraInput_34_in.orionEclipseFirmName = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_34_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_34_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_34_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_34";

						currentComponent = "tAmazonAuroraInput_34_in";

						tos_count_tAmazonAuroraInput_34_in++;

						/**
						 * [tAmazonAuroraInput_34_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_34_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_34";

						currentComponent = "tAmazonAuroraInput_34_out";

						row56 = row_tAmazonAuroraInput_34_in;

						tos_count_tAmazonAuroraInput_34_out++;

						/**
						 * [tAmazonAuroraInput_34_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row56 main ] start
						 */

						currentComponent = "tAdvancedHash_row56";

						row56Struct row56_HashRow = new row56Struct();

						row56_HashRow.orionConnectFirmId = row56.orionConnectFirmId;

						row56_HashRow.orionEclipseFirmName = row56.orionEclipseFirmName;

						tHash_Lookup_row56.put(row56_HashRow);

						tos_count_tAdvancedHash_row56++;

						/**
						 * [tAdvancedHash_row56 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_34_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_34";

						currentComponent = "tAmazonAuroraInput_34_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_34_in != null) {
						rs_tAmazonAuroraInput_34_in.close();
					}
					stmt_tAmazonAuroraInput_34_in.close();
					if (conn_tAmazonAuroraInput_34_in != null
							&& !conn_tAmazonAuroraInput_34_in.isClosed()) {

						conn_tAmazonAuroraInput_34_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_34_NB_LINE",
						nb_line_tAmazonAuroraInput_34_in);

				ok_Hash.put("tAmazonAuroraInput_34_in", true);
				end_Hash.put("tAmazonAuroraInput_34_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_34_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_34_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_34";

				currentComponent = "tAmazonAuroraInput_34_out";

				ok_Hash.put("tAmazonAuroraInput_34_out", true);
				end_Hash.put("tAmazonAuroraInput_34_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_34_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row56 end ] start
				 */

				currentComponent = "tAdvancedHash_row56";

				tHash_Lookup_row56.endPut();

				ok_Hash.put("tAdvancedHash_row56", true);
				end_Hash.put("tAdvancedHash_row56", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row56 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_34_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_34";

				currentComponent = "tAmazonAuroraInput_34_in";

				/**
				 * [tAmazonAuroraInput_34_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_34_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_34";

				currentComponent = "tAmazonAuroraInput_34_out";

				/**
				 * [tAmazonAuroraInput_34_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row56 finally ] start
				 */

				currentComponent = "tAdvancedHash_row56";

				/**
				 * [tAdvancedHash_row56 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_34_in_SUBPROCESS_STATE", 1);
	}

	public static class row58Struct implements
			routines.system.IPersistableComparableLookupRow<row58Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public Double GrossProceeds;

		public Double getGrossProceeds() {
			return this.GrossProceeds;
		}

		public Double NetProceeds;

		public Double getNetProceeds() {
			return this.NetProceeds;
		}

		public Float CostAmount;

		public Float getCostAmount() {
			return this.CostAmount;
		}

		public java.util.Date DateAquired;

		public java.util.Date getDateAquired() {
			return this.DateAquired;
		}

		public java.util.Date SellDate;

		public java.util.Date getSellDate() {
			return this.SellDate;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Boolean LongTerm;

		public Boolean getLongTerm() {
			return this.LongTerm;
		}

		public String SellMethod;

		public String getSellMethod() {
			return this.SellMethod;
		}

		public Float TotalGains;

		public Float getTotalGains() {
			return this.TotalGains;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OrionFirmId == null) ? 0 : this.OrionFirmId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row58Struct other = (row58Struct) obj;

			if (this.OrionFirmId == null) {
				if (other.OrionFirmId != null)
					return false;

			} else if (!this.OrionFirmId.equals(other.OrionFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row58Struct other) {

			other.OrionFirmId = this.OrionFirmId;
			other.ExternalId = this.ExternalId;
			other.Symbol = this.Symbol;
			other.AccountId = this.AccountId;
			other.AccountNumber = this.AccountNumber;
			other.GrossProceeds = this.GrossProceeds;
			other.NetProceeds = this.NetProceeds;
			other.CostAmount = this.CostAmount;
			other.DateAquired = this.DateAquired;
			other.SellDate = this.SellDate;
			other.Quantity = this.Quantity;
			other.LongTerm = this.LongTerm;
			other.SellMethod = this.SellMethod;
			other.TotalGains = this.TotalGains;

		}

		public void copyKeysDataTo(row58Struct other) {

			other.OrionFirmId = this.OrionFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ExternalId = readInteger(dis, ois);

				this.Symbol = readString(dis, ois);

				this.AccountId = readString(dis, ois);

				this.AccountNumber = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.GrossProceeds = null;
				} else {
					this.GrossProceeds = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.NetProceeds = null;
				} else {
					this.NetProceeds = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.CostAmount = null;
				} else {
					this.CostAmount = dis.readFloat();
				}

				this.DateAquired = readDate(dis, ois);

				this.SellDate = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Quantity = null;
				} else {
					this.Quantity = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.LongTerm = null;
				} else {
					this.LongTerm = dis.readBoolean();
				}

				this.SellMethod = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.TotalGains = null;
				} else {
					this.TotalGains = dis.readFloat();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.ExternalId, dos, oos);

				writeString(this.Symbol, dos, oos);

				writeString(this.AccountId, dos, oos);

				writeString(this.AccountNumber, dos, oos);

				if (this.GrossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.GrossProceeds);
				}

				if (this.NetProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.NetProceeds);
				}

				if (this.CostAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CostAmount);
				}

				writeDate(this.DateAquired, dos, oos);

				writeDate(this.SellDate, dos, oos);

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				if (this.LongTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.LongTerm);
				}

				writeString(this.SellMethod, dos, oos);

				if (this.TotalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalGains);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",GrossProceeds=" + String.valueOf(GrossProceeds));
			sb.append(",NetProceeds=" + String.valueOf(NetProceeds));
			sb.append(",CostAmount=" + String.valueOf(CostAmount));
			sb.append(",DateAquired=" + String.valueOf(DateAquired));
			sb.append(",SellDate=" + String.valueOf(SellDate));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",LongTerm=" + String.valueOf(LongTerm));
			sb.append(",SellMethod=" + SellMethod);
			sb.append(",TotalGains=" + String.valueOf(TotalGains));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row58Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OrionFirmId,
					other.OrionFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_35_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_35_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public Double GrossProceeds;

		public Double getGrossProceeds() {
			return this.GrossProceeds;
		}

		public Double NetProceeds;

		public Double getNetProceeds() {
			return this.NetProceeds;
		}

		public Float CostAmount;

		public Float getCostAmount() {
			return this.CostAmount;
		}

		public java.util.Date DateAquired;

		public java.util.Date getDateAquired() {
			return this.DateAquired;
		}

		public java.util.Date SellDate;

		public java.util.Date getSellDate() {
			return this.SellDate;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Boolean LongTerm;

		public Boolean getLongTerm() {
			return this.LongTerm;
		}

		public String SellMethod;

		public String getSellMethod() {
			return this.SellMethod;
		}

		public Float TotalGains;

		public Float getTotalGains() {
			return this.TotalGains;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_Rejected_rows_catch_for_non_permitted_orionConnectId) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					this.AccountId = readString(dis);

					this.AccountNumber = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.GrossProceeds = null;
					} else {
						this.GrossProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetProceeds = null;
					} else {
						this.NetProceeds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CostAmount = null;
					} else {
						this.CostAmount = dis.readFloat();
					}

					this.DateAquired = readDate(dis);

					this.SellDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.LongTerm = null;
					} else {
						this.LongTerm = dis.readBoolean();
					}

					this.SellMethod = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalGains = null;
					} else {
						this.TotalGains = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.AccountNumber, dos);

				// Double

				if (this.GrossProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.GrossProceeds);
				}

				// Double

				if (this.NetProceeds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.NetProceeds);
				}

				// Float

				if (this.CostAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CostAmount);
				}

				// java.util.Date

				writeDate(this.DateAquired, dos);

				// java.util.Date

				writeDate(this.SellDate, dos);

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Boolean

				if (this.LongTerm == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.LongTerm);
				}

				// String

				writeString(this.SellMethod, dos);

				// Float

				if (this.TotalGains == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.TotalGains);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",AccountId=" + AccountId);
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",GrossProceeds=" + String.valueOf(GrossProceeds));
			sb.append(",NetProceeds=" + String.valueOf(NetProceeds));
			sb.append(",CostAmount=" + String.valueOf(CostAmount));
			sb.append(",DateAquired=" + String.valueOf(DateAquired));
			sb.append(",SellDate=" + String.valueOf(SellDate));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",LongTerm=" + String.valueOf(LongTerm));
			sb.append(",SellMethod=" + SellMethod);
			sb.append(",TotalGains=" + String.valueOf(TotalGains));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_35_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_35_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_35_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_35_inStruct row_tAmazonAuroraInput_35_in = new row_tAmazonAuroraInput_35_inStruct();
				row_tAmazonAuroraInput_35_inStruct row58 = row_tAmazonAuroraInput_35_in;

				/**
				 * [tAdvancedHash_row58 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row58", false);
				start_Hash.put("tAdvancedHash_row58",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row58";

				int tos_count_tAdvancedHash_row58 = 0;

				// connection name:row58
				// source node:tAmazonAuroraInput_35_out -
				// inputs:(row_tAmazonAuroraInput_35_in) outputs:(row58,row58) |
				// target node:tAdvancedHash_row58 - inputs:(row58) outputs:()
				// linked node: tMap_35 - inputs:(copyOfmainout_3,row58)
				// outputs:(out6)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row58 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row58Struct> tHash_Lookup_row58 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row58Struct> getLookup(matchingModeEnum_row58);

				globalMap.put("tHash_Lookup_row58", tHash_Lookup_row58);

				/**
				 * [tAdvancedHash_row58 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_35_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_35_out", false);
				start_Hash.put("tAmazonAuroraInput_35_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_35";

				currentComponent = "tAmazonAuroraInput_35_out";

				int tos_count_tAmazonAuroraInput_35_out = 0;

				/**
				 * [tAmazonAuroraInput_35_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_35_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_35_in", false);
				start_Hash.put("tAmazonAuroraInput_35_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_35";

				currentComponent = "tAmazonAuroraInput_35_in";

				int tos_count_tAmazonAuroraInput_35_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_35_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_35_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_35_in = calendar_tAmazonAuroraInput_35_in
						.getTime();
				int nb_line_tAmazonAuroraInput_35_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_35_in = null;
				String driverClass_tAmazonAuroraInput_35_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_35_in);
				String dbUser_tAmazonAuroraInput_35_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_35_in = context.password;

				String dbPwd_tAmazonAuroraInput_35_in = decryptedPassword_tAmazonAuroraInput_35_in;

				String url_tAmazonAuroraInput_35_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.stagingdb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_35_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_35_in,
								dbUser_tAmazonAuroraInput_35_in,
								dbPwd_tAmazonAuroraInput_35_in);

				java.sql.Statement stmt_tAmazonAuroraInput_35_in = conn_tAmazonAuroraInput_35_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_35_in = "select * from realizedgainloss_"
						+ context.firmId + "_" + context.date;

				globalMap.put("tAmazonAuroraInput_35_QUERY",
						dbquery_tAmazonAuroraInput_35_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_35_in = null;
				try {
					rs_tAmazonAuroraInput_35_in = stmt_tAmazonAuroraInput_35_in
							.executeQuery(dbquery_tAmazonAuroraInput_35_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_35_in = rs_tAmazonAuroraInput_35_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_35_in = rsmd_tAmazonAuroraInput_35_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_35_in = null;

					while (rs_tAmazonAuroraInput_35_in.next()) {
						nb_line_tAmazonAuroraInput_35_in++;

						if (colQtyInRs_tAmazonAuroraInput_35_in < 1) {
							row_tAmazonAuroraInput_35_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_35_in.getObject(1) != null) {
								row_tAmazonAuroraInput_35_in.OrionFirmId = rs_tAmazonAuroraInput_35_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_35_in.OrionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_35_in < 2) {
							row_tAmazonAuroraInput_35_in.ExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_35_in.getObject(2) != null) {
								row_tAmazonAuroraInput_35_in.ExternalId = rs_tAmazonAuroraInput_35_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_35_in.ExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_35_in < 3) {
							row_tAmazonAuroraInput_35_in.Symbol = null;
						} else {

							row_tAmazonAuroraInput_35_in.Symbol = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_35_in, 3,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_35_in < 4) {
							row_tAmazonAuroraInput_35_in.AccountId = null;
						} else {

							row_tAmazonAuroraInput_35_in.AccountId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_35_in, 4,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_35_in < 5) {
							row_tAmazonAuroraInput_35_in.AccountNumber = null;
						} else {

							row_tAmazonAuroraInput_35_in.AccountNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_35_in, 5,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_35_in < 6) {
							row_tAmazonAuroraInput_35_in.GrossProceeds = null;
						} else {

							if (rs_tAmazonAuroraInput_35_in.getObject(6) != null) {
								row_tAmazonAuroraInput_35_in.GrossProceeds = rs_tAmazonAuroraInput_35_in
										.getDouble(6);
							} else {
								row_tAmazonAuroraInput_35_in.GrossProceeds = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_35_in < 7) {
							row_tAmazonAuroraInput_35_in.NetProceeds = null;
						} else {

							if (rs_tAmazonAuroraInput_35_in.getObject(7) != null) {
								row_tAmazonAuroraInput_35_in.NetProceeds = rs_tAmazonAuroraInput_35_in
										.getDouble(7);
							} else {
								row_tAmazonAuroraInput_35_in.NetProceeds = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_35_in < 8) {
							row_tAmazonAuroraInput_35_in.CostAmount = null;
						} else {

							if (rs_tAmazonAuroraInput_35_in.getObject(8) != null) {
								row_tAmazonAuroraInput_35_in.CostAmount = rs_tAmazonAuroraInput_35_in
										.getFloat(8);
							} else {
								row_tAmazonAuroraInput_35_in.CostAmount = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_35_in < 9) {
							row_tAmazonAuroraInput_35_in.DateAquired = null;
						} else {

							if (rs_tAmazonAuroraInput_35_in.getString(9) != null) {
								String dateString_tAmazonAuroraInput_35_in = rs_tAmazonAuroraInput_35_in
										.getString(9);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_35_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_35_in)) {
									row_tAmazonAuroraInput_35_in.DateAquired = rs_tAmazonAuroraInput_35_in
											.getTimestamp(9);
								} else {
									row_tAmazonAuroraInput_35_in.DateAquired = (java.util.Date) year0_tAmazonAuroraInput_35_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_35_in.DateAquired = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_35_in < 10) {
							row_tAmazonAuroraInput_35_in.SellDate = null;
						} else {

							if (rs_tAmazonAuroraInput_35_in.getString(10) != null) {
								String dateString_tAmazonAuroraInput_35_in = rs_tAmazonAuroraInput_35_in
										.getString(10);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_35_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_35_in)) {
									row_tAmazonAuroraInput_35_in.SellDate = rs_tAmazonAuroraInput_35_in
											.getTimestamp(10);
								} else {
									row_tAmazonAuroraInput_35_in.SellDate = (java.util.Date) year0_tAmazonAuroraInput_35_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_35_in.SellDate = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_35_in < 11) {
							row_tAmazonAuroraInput_35_in.Quantity = null;
						} else {

							if (rs_tAmazonAuroraInput_35_in.getObject(11) != null) {
								row_tAmazonAuroraInput_35_in.Quantity = rs_tAmazonAuroraInput_35_in
										.getFloat(11);
							} else {
								row_tAmazonAuroraInput_35_in.Quantity = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_35_in < 12) {
							row_tAmazonAuroraInput_35_in.LongTerm = null;
						} else {

							if (rs_tAmazonAuroraInput_35_in.getObject(12) != null) {
								row_tAmazonAuroraInput_35_in.LongTerm = rs_tAmazonAuroraInput_35_in
										.getBoolean(12);
							} else {
								row_tAmazonAuroraInput_35_in.LongTerm = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_35_in < 13) {
							row_tAmazonAuroraInput_35_in.SellMethod = null;
						} else {

							row_tAmazonAuroraInput_35_in.SellMethod = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_35_in, 13,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_35_in < 14) {
							row_tAmazonAuroraInput_35_in.TotalGains = null;
						} else {

							if (rs_tAmazonAuroraInput_35_in.getObject(14) != null) {
								row_tAmazonAuroraInput_35_in.TotalGains = rs_tAmazonAuroraInput_35_in
										.getFloat(14);
							} else {
								row_tAmazonAuroraInput_35_in.TotalGains = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_35_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_35_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_35";

						currentComponent = "tAmazonAuroraInput_35_in";

						tos_count_tAmazonAuroraInput_35_in++;

						/**
						 * [tAmazonAuroraInput_35_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_35_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_35";

						currentComponent = "tAmazonAuroraInput_35_out";

						row58 = row_tAmazonAuroraInput_35_in;

						tos_count_tAmazonAuroraInput_35_out++;

						/**
						 * [tAmazonAuroraInput_35_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row58 main ] start
						 */

						currentComponent = "tAdvancedHash_row58";

						row58Struct row58_HashRow = new row58Struct();

						row58_HashRow.OrionFirmId = row58.OrionFirmId;

						row58_HashRow.ExternalId = row58.ExternalId;

						row58_HashRow.Symbol = row58.Symbol;

						row58_HashRow.AccountId = row58.AccountId;

						row58_HashRow.AccountNumber = row58.AccountNumber;

						row58_HashRow.GrossProceeds = row58.GrossProceeds;

						row58_HashRow.NetProceeds = row58.NetProceeds;

						row58_HashRow.CostAmount = row58.CostAmount;

						row58_HashRow.DateAquired = row58.DateAquired;

						row58_HashRow.SellDate = row58.SellDate;

						row58_HashRow.Quantity = row58.Quantity;

						row58_HashRow.LongTerm = row58.LongTerm;

						row58_HashRow.SellMethod = row58.SellMethod;

						row58_HashRow.TotalGains = row58.TotalGains;

						tHash_Lookup_row58.put(row58_HashRow);

						tos_count_tAdvancedHash_row58++;

						/**
						 * [tAdvancedHash_row58 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_35_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_35";

						currentComponent = "tAmazonAuroraInput_35_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_35_in != null) {
						rs_tAmazonAuroraInput_35_in.close();
					}
					stmt_tAmazonAuroraInput_35_in.close();
					if (conn_tAmazonAuroraInput_35_in != null
							&& !conn_tAmazonAuroraInput_35_in.isClosed()) {

						conn_tAmazonAuroraInput_35_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_35_NB_LINE",
						nb_line_tAmazonAuroraInput_35_in);

				ok_Hash.put("tAmazonAuroraInput_35_in", true);
				end_Hash.put("tAmazonAuroraInput_35_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_35_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_35_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_35";

				currentComponent = "tAmazonAuroraInput_35_out";

				ok_Hash.put("tAmazonAuroraInput_35_out", true);
				end_Hash.put("tAmazonAuroraInput_35_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_35_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row58 end ] start
				 */

				currentComponent = "tAdvancedHash_row58";

				tHash_Lookup_row58.endPut();

				ok_Hash.put("tAdvancedHash_row58", true);
				end_Hash.put("tAdvancedHash_row58", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row58 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_35_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_35";

				currentComponent = "tAmazonAuroraInput_35_in";

				/**
				 * [tAmazonAuroraInput_35_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_35_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_35";

				currentComponent = "tAmazonAuroraInput_35_out";

				/**
				 * [tAmazonAuroraInput_35_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row58 finally ] start
				 */

				currentComponent = "tAdvancedHash_row58";

				/**
				 * [tAdvancedHash_row58 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_35_in_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Rejected_rows_catch_for_non_permitted_orionConnectId Rejected_rows_catch_for_non_permitted_orionConnectIdClass = new Rejected_rows_catch_for_non_permitted_orionConnectId();

		int exitCode = Rejected_rows_catch_for_non_permitted_orionConnectIdClass
				.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Rejected_rows_catch_for_non_permitted_orionConnectId.class
					.getClassLoader()
					.getResourceAsStream(
							"reliazedgainloss/rejected_rows_catch_for_non_permitted_orionconnectid_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.serverIp = (String) context.getProperty("serverIp");
			context.database = (String) context.getProperty("database");
			context.filepath_advisor = (String) context
					.getProperty("filepath_advisor");
			context.positionpath = (String) context.getProperty("positionpath");
			context.custodianpath = (String) context
					.getProperty("custodianpath");
			context.taxlotpath = (String) context.getProperty("taxlotpath");
			context.transactionpath = (String) context
					.getProperty("transactionpath");
			context.securitypath = (String) context.getProperty("securitypath");
			context.accountpath = (String) context.getProperty("accountpath");
			context.inputDir = (String) context.getProperty("inputDir");
			context.username = (String) context.getProperty("username");
			context.password = (String) context.getProperty("password");
			context.contextDir = (String) context.getProperty("contextDir");
			context.stagingdb = (String) context.getProperty("stagingdb");
			context.commondb = (String) context.getProperty("commondb");
			context.localpath = (String) context.getProperty("localpath");
			context.port = (String) context.getProperty("port");
			context.host = (String) context.getProperty("host");
			context.teamPreferenceOption = (String) context
					.getProperty("teamPreferenceOption");
			try {
				context.rowCountTSV = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountTSV"));
			} catch (NumberFormatException e) {
				context.rowCountTSV = null;
			}
			try {
				context.rowCountStaging = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountStaging"));
			} catch (NumberFormatException e) {
				context.rowCountStaging = null;
			}
			try {
				context.rowCountFirm = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountFirm"));
			} catch (NumberFormatException e) {
				context.rowCountFirm = null;
			}
			context.firm = (String) context.getProperty("firm");
			try {
				context.rowCountUpdated = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountUpdated"));
			} catch (NumberFormatException e) {
				context.rowCountUpdated = null;
			}
			try {
				context.rowCountRejectedFirm = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("rowCountRejectedFirm"));
			} catch (NumberFormatException e) {
				context.rowCountRejectedFirm = null;
			}
			context.firmId = (String) context.getProperty("firmId");
			context.date = (String) context.getProperty("date");
			context.filestorage = (String) context.getProperty("filestorage");
			context.filestorage2 = (String) context.getProperty("filestorage2");
			context.pathforlocal = (String) context.getProperty("pathforlocal");
			try {
				context.a = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("a"));
			} catch (NumberFormatException e) {
				context.a = null;
			}
			try {
				context.b = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("b"));
			} catch (NumberFormatException e) {
				context.b = null;
			}
			try {
				context.c = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("c"));
			} catch (NumberFormatException e) {
				context.c = null;
			}
			try {
				context.d = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("d"));
			} catch (NumberFormatException e) {
				context.d = null;
			}
			try {
				context.e = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("e"));
			} catch (NumberFormatException e) {
				context.e = null;
			}
			try {
				context.f = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("f"));
			} catch (NumberFormatException e) {
				context.f = null;
			}
			try {
				context.g = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("g"));
			} catch (NumberFormatException e) {
				context.g = null;
			}
			context.firmint3 = (String) context.getProperty("firmint3");
			try {
				context.firmids = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("firmids"));
			} catch (NumberFormatException e) {
				context.firmids = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("serverIp")) {
				context.serverIp = (String) parentContextMap.get("serverIp");
			}
			if (parentContextMap.containsKey("database")) {
				context.database = (String) parentContextMap.get("database");
			}
			if (parentContextMap.containsKey("filepath_advisor")) {
				context.filepath_advisor = (String) parentContextMap
						.get("filepath_advisor");
			}
			if (parentContextMap.containsKey("positionpath")) {
				context.positionpath = (String) parentContextMap
						.get("positionpath");
			}
			if (parentContextMap.containsKey("custodianpath")) {
				context.custodianpath = (String) parentContextMap
						.get("custodianpath");
			}
			if (parentContextMap.containsKey("taxlotpath")) {
				context.taxlotpath = (String) parentContextMap
						.get("taxlotpath");
			}
			if (parentContextMap.containsKey("transactionpath")) {
				context.transactionpath = (String) parentContextMap
						.get("transactionpath");
			}
			if (parentContextMap.containsKey("securitypath")) {
				context.securitypath = (String) parentContextMap
						.get("securitypath");
			}
			if (parentContextMap.containsKey("accountpath")) {
				context.accountpath = (String) parentContextMap
						.get("accountpath");
			}
			if (parentContextMap.containsKey("inputDir")) {
				context.inputDir = (String) parentContextMap.get("inputDir");
			}
			if (parentContextMap.containsKey("username")) {
				context.username = (String) parentContextMap.get("username");
			}
			if (parentContextMap.containsKey("password")) {
				context.password = (String) parentContextMap.get("password");
			}
			if (parentContextMap.containsKey("contextDir")) {
				context.contextDir = (String) parentContextMap
						.get("contextDir");
			}
			if (parentContextMap.containsKey("stagingdb")) {
				context.stagingdb = (String) parentContextMap.get("stagingdb");
			}
			if (parentContextMap.containsKey("commondb")) {
				context.commondb = (String) parentContextMap.get("commondb");
			}
			if (parentContextMap.containsKey("localpath")) {
				context.localpath = (String) parentContextMap.get("localpath");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (String) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("host")) {
				context.host = (String) parentContextMap.get("host");
			}
			if (parentContextMap.containsKey("teamPreferenceOption")) {
				context.teamPreferenceOption = (String) parentContextMap
						.get("teamPreferenceOption");
			}
			if (parentContextMap.containsKey("rowCountTSV")) {
				context.rowCountTSV = (Integer) parentContextMap
						.get("rowCountTSV");
			}
			if (parentContextMap.containsKey("rowCountStaging")) {
				context.rowCountStaging = (Integer) parentContextMap
						.get("rowCountStaging");
			}
			if (parentContextMap.containsKey("rowCountFirm")) {
				context.rowCountFirm = (Integer) parentContextMap
						.get("rowCountFirm");
			}
			if (parentContextMap.containsKey("firm")) {
				context.firm = (String) parentContextMap.get("firm");
			}
			if (parentContextMap.containsKey("rowCountUpdated")) {
				context.rowCountUpdated = (Integer) parentContextMap
						.get("rowCountUpdated");
			}
			if (parentContextMap.containsKey("rowCountRejectedFirm")) {
				context.rowCountRejectedFirm = (Integer) parentContextMap
						.get("rowCountRejectedFirm");
			}
			if (parentContextMap.containsKey("firmId")) {
				context.firmId = (String) parentContextMap.get("firmId");
			}
			if (parentContextMap.containsKey("date")) {
				context.date = (String) parentContextMap.get("date");
			}
			if (parentContextMap.containsKey("filestorage")) {
				context.filestorage = (String) parentContextMap
						.get("filestorage");
			}
			if (parentContextMap.containsKey("filestorage2")) {
				context.filestorage2 = (String) parentContextMap
						.get("filestorage2");
			}
			if (parentContextMap.containsKey("pathforlocal")) {
				context.pathforlocal = (String) parentContextMap
						.get("pathforlocal");
			}
			if (parentContextMap.containsKey("a")) {
				context.a = (Boolean) parentContextMap.get("a");
			}
			if (parentContextMap.containsKey("b")) {
				context.b = (Boolean) parentContextMap.get("b");
			}
			if (parentContextMap.containsKey("c")) {
				context.c = (Boolean) parentContextMap.get("c");
			}
			if (parentContextMap.containsKey("d")) {
				context.d = (Boolean) parentContextMap.get("d");
			}
			if (parentContextMap.containsKey("e")) {
				context.e = (Boolean) parentContextMap.get("e");
			}
			if (parentContextMap.containsKey("f")) {
				context.f = (Boolean) parentContextMap.get("f");
			}
			if (parentContextMap.containsKey("g")) {
				context.g = (Boolean) parentContextMap.get("g");
			}
			if (parentContextMap.containsKey("firmint3")) {
				context.firmint3 = (String) parentContextMap.get("firmint3");
			}
			if (parentContextMap.containsKey("firmids")) {
				context.firmids = (Integer) parentContextMap.get("firmids");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tAmazonAuroraInput_4_inProcess(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tAmazonAuroraInput_4_in) {
					globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_4_in.printStackTrace();

				} catch (java.lang.Error e_tAmazonAuroraInput_4_in) {
					globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_4_in.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tAmazonAuroraInput_23_inProcess(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tAmazonAuroraInput_23_in) {
					globalMap.put("tAmazonAuroraInput_23_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_23_in.printStackTrace();

				} catch (java.lang.Error e_tAmazonAuroraInput_23_in) {
					globalMap.put("tAmazonAuroraInput_23_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_23_in.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tAmazonAuroraInput_24_inProcess(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tAmazonAuroraInput_24_in) {
					globalMap.put("tAmazonAuroraInput_24_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_24_in.printStackTrace();

				} catch (java.lang.Error e_tAmazonAuroraInput_24_in) {
					globalMap.put("tAmazonAuroraInput_24_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_24_in.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tAmazonAuroraInput_25_inProcess(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tAmazonAuroraInput_25_in) {
					globalMap.put("tAmazonAuroraInput_25_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_25_in.printStackTrace();

				} catch (java.lang.Error e_tAmazonAuroraInput_25_in) {
					globalMap.put("tAmazonAuroraInput_25_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_25_in.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tAmazonAuroraInput_26_inProcess(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tAmazonAuroraInput_26_in) {
					globalMap.put("tAmazonAuroraInput_26_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_26_in.printStackTrace();

				} catch (java.lang.Error e_tAmazonAuroraInput_26_in) {
					globalMap.put("tAmazonAuroraInput_26_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_26_in.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tAmazonAuroraInput_27_inProcess(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tAmazonAuroraInput_27_in) {
					globalMap.put("tAmazonAuroraInput_27_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_27_in.printStackTrace();

				} catch (java.lang.Error e_tAmazonAuroraInput_27_in) {
					globalMap.put("tAmazonAuroraInput_27_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_27_in.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tAmazonAuroraInput_28_inProcess(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tAmazonAuroraInput_28_in) {
					globalMap.put("tAmazonAuroraInput_28_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_28_in.printStackTrace();

				} catch (java.lang.Error e_tAmazonAuroraInput_28_in) {
					globalMap.put("tAmazonAuroraInput_28_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_28_in.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tAmazonAuroraInput_29_inProcess(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tAmazonAuroraInput_29_in) {
					globalMap.put("tAmazonAuroraInput_29_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_29_in.printStackTrace();

				} catch (java.lang.Error e_tAmazonAuroraInput_29_in) {
					globalMap.put("tAmazonAuroraInput_29_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_29_in.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Rejected_rows_catch_for_non_permitted_orionConnectId");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1532706 characters generated by Talend Open Studio for Data Integration on
 * the October 24, 2016 5:34:34 PM IST
 ************************************************************************************************/
