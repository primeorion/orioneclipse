// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package reliazedgainloss.orionetljobv2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJava_11
//import java.util.List;

//the import part of tJava_10
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJavaRow_8
//import java.util.List;

//the import part of tJava_13
//import java.util.List;

//the import part of tJava_12
//import java.util.List;

//the import part of tJavaRow_10
//import java.util.List;

//the import part of tJava_14
//import java.util.List;

//the import part of tJavaRow_9
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: orionETLjobV2 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.0.20160510_1709
 * @status 
 */
public class orionETLjobV2 implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (serverIp != null) {

				this.setProperty("serverIp", serverIp.toString());

			}

			if (database != null) {

				this.setProperty("database", database.toString());

			}

			if (filepath_advisor != null) {

				this.setProperty("filepath_advisor",
						filepath_advisor.toString());

			}

			if (positionpath != null) {

				this.setProperty("positionpath", positionpath.toString());

			}

			if (custodianpath != null) {

				this.setProperty("custodianpath", custodianpath.toString());

			}

			if (taxlotpath != null) {

				this.setProperty("taxlotpath", taxlotpath.toString());

			}

			if (transactionpath != null) {

				this.setProperty("transactionpath", transactionpath.toString());

			}

			if (securitypath != null) {

				this.setProperty("securitypath", securitypath.toString());

			}

			if (accountpath != null) {

				this.setProperty("accountpath", accountpath.toString());

			}

			if (inputDir != null) {

				this.setProperty("inputDir", inputDir.toString());

			}

			if (username != null) {

				this.setProperty("username", username.toString());

			}

			if (password != null) {

				this.setProperty("password", password.toString());

			}

			if (contextDir != null) {

				this.setProperty("contextDir", contextDir.toString());

			}

			if (stagingdb != null) {

				this.setProperty("stagingdb", stagingdb.toString());

			}

			if (commondb != null) {

				this.setProperty("commondb", commondb.toString());

			}

			if (localpath != null) {

				this.setProperty("localpath", localpath.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (host != null) {

				this.setProperty("host", host.toString());

			}

			if (rowCountRejectedFirm != null) {

				this.setProperty("rowCountRejectedFirm",
						rowCountRejectedFirm.toString());

			}

			if (firm != null) {

				this.setProperty("firm", firm.toString());

			}

			if (rowCountFirm != null) {

				this.setProperty("rowCountFirm", rowCountFirm.toString());

			}

			if (rowCountStaging != null) {

				this.setProperty("rowCountStaging", rowCountStaging.toString());

			}

			if (rowCountTSV != null) {

				this.setProperty("rowCountTSV", rowCountTSV.toString());

			}

			if (rowCountUpdated != null) {

				this.setProperty("rowCountUpdated", rowCountUpdated.toString());

			}

			if (teamPreferenceOption != null) {

				this.setProperty("teamPreferenceOption",
						teamPreferenceOption.toString());

			}

			if (date != null) {

				this.setProperty("date", date.toString());

			}

			if (firmId != null) {

				this.setProperty("firmId", firmId.toString());

			}

			if (pathforlocal != null) {

				this.setProperty("pathforlocal", pathforlocal.toString());

			}

			if (filestorage != null) {

				this.setProperty("filestorage", filestorage.toString());

			}

			if (filestorage2 != null) {

				this.setProperty("filestorage2", filestorage2.toString());

			}

			if (firmint != null) {

				this.setProperty("firmint", firmint.toString());

			}

			if (firmint2 != null) {

				this.setProperty("firmint2", firmint2.toString());

			}

			if (a != null) {

				this.setProperty("a", a.toString());

			}

			if (b != null) {

				this.setProperty("b", b.toString());

			}

			if (c != null) {

				this.setProperty("c", c.toString());

			}

			if (d != null) {

				this.setProperty("d", d.toString());

			}

			if (e != null) {

				this.setProperty("e", e.toString());

			}

			if (f != null) {

				this.setProperty("f", f.toString());

			}

			if (g != null) {

				this.setProperty("g", g.toString());

			}

			if (firmint3 != null) {

				this.setProperty("firmint3", firmint3.toString());

			}

			if (firmids != null) {

				this.setProperty("firmids", firmids.toString());

			}

			if (RealizedGainLossPath != null) {

				this.setProperty("RealizedGainLossPath",
						RealizedGainLossPath.toString());

			}

			if (h != null) {

				this.setProperty("h", h.toString());

			}

			if (bucket != null) {

				this.setProperty("bucket", bucket.toString());

			}

			if (loadType != null) {

				this.setProperty("loadType", loadType.toString());

			}

		}

		public String serverIp;

		public String getServerIp() {
			return this.serverIp;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		public String filepath_advisor;

		public String getFilepath_advisor() {
			return this.filepath_advisor;
		}

		public String positionpath;

		public String getPositionpath() {
			return this.positionpath;
		}

		public String custodianpath;

		public String getCustodianpath() {
			return this.custodianpath;
		}

		public String taxlotpath;

		public String getTaxlotpath() {
			return this.taxlotpath;
		}

		public String transactionpath;

		public String getTransactionpath() {
			return this.transactionpath;
		}

		public String securitypath;

		public String getSecuritypath() {
			return this.securitypath;
		}

		public String accountpath;

		public String getAccountpath() {
			return this.accountpath;
		}

		public String inputDir;

		public String getInputDir() {
			return this.inputDir;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String contextDir;

		public String getContextDir() {
			return this.contextDir;
		}

		public String stagingdb;

		public String getStagingdb() {
			return this.stagingdb;
		}

		public String commondb;

		public String getCommondb() {
			return this.commondb;
		}

		public String localpath;

		public String getLocalpath() {
			return this.localpath;
		}

		public String port;

		public String getPort() {
			return this.port;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public Integer rowCountRejectedFirm;

		public Integer getRowCountRejectedFirm() {
			return this.rowCountRejectedFirm;
		}

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		public Integer rowCountFirm;

		public Integer getRowCountFirm() {
			return this.rowCountFirm;
		}

		public Integer rowCountStaging;

		public Integer getRowCountStaging() {
			return this.rowCountStaging;
		}

		public Integer rowCountTSV;

		public Integer getRowCountTSV() {
			return this.rowCountTSV;
		}

		public Integer rowCountUpdated;

		public Integer getRowCountUpdated() {
			return this.rowCountUpdated;
		}

		public String teamPreferenceOption;

		public String getTeamPreferenceOption() {
			return this.teamPreferenceOption;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String firmId;

		public String getFirmId() {
			return this.firmId;
		}

		public String pathforlocal;

		public String getPathforlocal() {
			return this.pathforlocal;
		}

		public String filestorage;

		public String getFilestorage() {
			return this.filestorage;
		}

		public String filestorage2;

		public String getFilestorage2() {
			return this.filestorage2;
		}

		public String firmint;

		public String getFirmint() {
			return this.firmint;
		}

		public String firmint2;

		public String getFirmint2() {
			return this.firmint2;
		}

		public Boolean a;

		public Boolean getA() {
			return this.a;
		}

		public Boolean b;

		public Boolean getB() {
			return this.b;
		}

		public Boolean c;

		public Boolean getC() {
			return this.c;
		}

		public Boolean d;

		public Boolean getD() {
			return this.d;
		}

		public Boolean e;

		public Boolean getE() {
			return this.e;
		}

		public Boolean f;

		public Boolean getF() {
			return this.f;
		}

		public Boolean g;

		public Boolean getG() {
			return this.g;
		}

		public String firmint3;

		public String getFirmint3() {
			return this.firmint3;
		}

		public Integer firmids;

		public Integer getFirmids() {
			return this.firmids;
		}

		public String RealizedGainLossPath;

		public String getRealizedGainLossPath() {
			return this.RealizedGainLossPath;
		}

		public Boolean h;

		public Boolean getH() {
			return this.h;
		}

		public String bucket;

		public String getBucket() {
			return this.bucket;
		}

		public String loadType;

		public String getLoadType() {
			return this.loadType;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "orionETLjobV2";
	private final String projectName = "RELIAZEDGAINLOSS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					orionETLjobV2.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(orionETLjobV2.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tContextLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Connection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3BucketExist_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3BucketExist_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3List_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3List_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMysqlConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlCommit_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlCommit_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlConnection_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlCommit_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Get_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaRow_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tIterateToFlow_1_ITFO_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tIterateToFlow_1_AI_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3List_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAmazonAuroraInput_1_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_1_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_1_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Connection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3BucketExist_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3List_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3List_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_18_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlRow_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlRow_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlCommit_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlConnection_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlRow_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlCommit_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaRow_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tIterateToFlow_1_AI_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_1_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());

				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				globalMap.put("generalContextFile", context.contextDir + "/"
						+ contextStr + ".General.cfg");

				/**
				 * [tJava_8 begin ] stop
				 */

				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */

				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				/**
				 * [tJava_8 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_8:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileExist_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_8 finally ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_1 begin ] start
				 */

				ok_Hash.put("tFileExist_1", false);
				start_Hash.put("tFileExist_1", System.currentTimeMillis());

				currentComponent = "tFileExist_1";

				int tos_count_tFileExist_1 = 0;

				/**
				 * [tFileExist_1 begin ] stop
				 */

				/**
				 * [tFileExist_1 main ] start
				 */

				currentComponent = "tFileExist_1";

				java.io.File file_tFileExist_1 = new java.io.File(
						(String) globalMap.get("generalContextFile"));
				if (!file_tFileExist_1.exists()) {
					globalMap.put("tFileExist_1_EXISTS", false);
				} else {
					globalMap.put("tFileExist_1_EXISTS", true);
				}

				globalMap.put("tFileExist_1_FILENAME",
						(String) globalMap.get("generalContextFile"));

				tos_count_tFileExist_1++;

				/**
				 * [tFileExist_1 main ] stop
				 */

				/**
				 * [tFileExist_1 end ] start
				 */

				currentComponent = "tFileExist_1";

				ok_Hash.put("tFileExist_1", true);
				end_Hash.put("tFileExist_1", System.currentTimeMillis());

				if (!(Boolean) globalMap.get("tFileExist_1_EXISTS")) {

					tDie_1Process(globalMap);
				}

				if ((Boolean) globalMap.get("tFileExist_1_EXISTS")) {

					tJava_9Process(globalMap);
				}

				/**
				 * [tFileExist_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_1 finally ] start
				 */

				currentComponent = "tFileExist_1";

				/**
				 * [tFileExist_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				globalMap.put("tDie_1_DIE_PRIORITY", 5);
				System.err.println(jobName + ": cannot open file "
						+ (String) globalMap.get("generalContextFile"));

				globalMap.put(
						"tDie_1_DIE_MESSAGE",
						jobName + ": cannot open file "
								+ (String) globalMap.get("generalContextFile"));
				globalMap.put(
						"tDie_1_DIE_MESSAGES",
						jobName + ": cannot open file "
								+ (String) globalMap.get("generalContextFile"));
				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());

				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				System.out.println(jobName + ": loading Context file "
						+ (String) globalMap.get("generalContextFile"));

				/**
				 * [tJava_9 begin ] stop
				 */

				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */

				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				/**
				 * [tJava_9 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_9:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_9 finally ] start
				 */

				currentComponent = "tJava_9";

				/**
				 * [tJava_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				currentComponent = "tContextLoad_1";

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = (String) globalMap
							.get("generalContextFile");
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								(String) globalMap.get("generalContextFile"),
								"ISO-8859-15", "=", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row15 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row15 = new row15Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row15.key = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row15.value = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row15 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row15"
						if (row15 != null) {

							/**
							 * [tContextLoad_1 main ] start
							 */

							currentComponent = "tContextLoad_1";

							// ////////////////////////
							String tmp_key_tContextLoad_1 = null;
							String key_tContextLoad_1 = null;
							if (row15.key != null) {
								tmp_key_tContextLoad_1 = row15.key.trim();
								if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
										.startsWith("!"))) {
									tmp_key_tContextLoad_1 = null;
								} else {
									row15.key = tmp_key_tContextLoad_1;
								}
							}
							if (row15.key != null) {
								key_tContextLoad_1 = row15.key;
							}
							String value_tContextLoad_1 = null;
							if (row15.value != null) {
								value_tContextLoad_1 = row15.value;
							}

							if (tmp_key_tContextLoad_1 != null) {
								try {
									if (key_tContextLoad_1 != null
											&& "serverIp"
													.equals(key_tContextLoad_1)) {
										context.serverIp = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "database"
													.equals(key_tContextLoad_1)) {
										context.database = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "filepath_advisor"
													.equals(key_tContextLoad_1)) {
										context.filepath_advisor = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "positionpath"
													.equals(key_tContextLoad_1)) {
										context.positionpath = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "custodianpath"
													.equals(key_tContextLoad_1)) {
										context.custodianpath = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "taxlotpath"
													.equals(key_tContextLoad_1)) {
										context.taxlotpath = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "transactionpath"
													.equals(key_tContextLoad_1)) {
										context.transactionpath = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "securitypath"
													.equals(key_tContextLoad_1)) {
										context.securitypath = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "accountpath"
													.equals(key_tContextLoad_1)) {
										context.accountpath = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "inputDir"
													.equals(key_tContextLoad_1)) {
										context.inputDir = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "username"
													.equals(key_tContextLoad_1)) {
										context.username = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "password"
													.equals(key_tContextLoad_1)) {
										context.password = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "contextDir"
													.equals(key_tContextLoad_1)) {
										context.contextDir = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "stagingdb"
													.equals(key_tContextLoad_1)) {
										context.stagingdb = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "commondb"
													.equals(key_tContextLoad_1)) {
										context.commondb = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "localpath"
													.equals(key_tContextLoad_1)) {
										context.localpath = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "port"
													.equals(key_tContextLoad_1)) {
										context.port = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "host"
													.equals(key_tContextLoad_1)) {
										context.host = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "rowCountRejectedFirm"
													.equals(key_tContextLoad_1)) {

										context.rowCountRejectedFirm = Integer
												.parseInt(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "firm"
													.equals(key_tContextLoad_1)) {
										context.firm = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "rowCountFirm"
													.equals(key_tContextLoad_1)) {

										context.rowCountFirm = Integer
												.parseInt(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "rowCountStaging"
													.equals(key_tContextLoad_1)) {

										context.rowCountStaging = Integer
												.parseInt(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "rowCountTSV"
													.equals(key_tContextLoad_1)) {

										context.rowCountTSV = Integer
												.parseInt(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "rowCountUpdated"
													.equals(key_tContextLoad_1)) {

										context.rowCountUpdated = Integer
												.parseInt(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "teamPreferenceOption"
													.equals(key_tContextLoad_1)) {
										context.teamPreferenceOption = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "date"
													.equals(key_tContextLoad_1)) {
										context.date = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "firmId"
													.equals(key_tContextLoad_1)) {
										context.firmId = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "pathforlocal"
													.equals(key_tContextLoad_1)) {
										context.pathforlocal = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "filestorage"
													.equals(key_tContextLoad_1)) {
										context.filestorage = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "filestorage2"
													.equals(key_tContextLoad_1)) {
										context.filestorage2 = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "firmint"
													.equals(key_tContextLoad_1)) {
										context.firmint = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "firmint2"
													.equals(key_tContextLoad_1)) {
										context.firmint2 = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "a".equals(key_tContextLoad_1)) {

										context.a = Boolean
												.parseBoolean(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "b".equals(key_tContextLoad_1)) {

										context.b = Boolean
												.parseBoolean(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "c".equals(key_tContextLoad_1)) {

										context.c = Boolean
												.parseBoolean(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "d".equals(key_tContextLoad_1)) {

										context.d = Boolean
												.parseBoolean(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "e".equals(key_tContextLoad_1)) {

										context.e = Boolean
												.parseBoolean(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "f".equals(key_tContextLoad_1)) {

										context.f = Boolean
												.parseBoolean(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "g".equals(key_tContextLoad_1)) {

										context.g = Boolean
												.parseBoolean(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "firmint3"
													.equals(key_tContextLoad_1)) {
										context.firmint3 = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "firmids"
													.equals(key_tContextLoad_1)) {

										context.firmids = Integer
												.parseInt(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "RealizedGainLossPath"
													.equals(key_tContextLoad_1)) {
										context.RealizedGainLossPath = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "h".equals(key_tContextLoad_1)) {

										context.h = Boolean
												.parseBoolean(value_tContextLoad_1);

									}

									if (key_tContextLoad_1 != null
											&& "bucket"
													.equals(key_tContextLoad_1)) {
										context.bucket = value_tContextLoad_1;
									}

									if (key_tContextLoad_1 != null
											&& "loadType"
													.equals(key_tContextLoad_1)) {
										context.loadType = value_tContextLoad_1;
									}

									if (context.getProperty(key_tContextLoad_1) != null) {
										assignList_tContextLoad_1
												.add(key_tContextLoad_1);
									} else {
										newPropertyList_tContextLoad_1
												.add(key_tContextLoad_1);
									}
									if (value_tContextLoad_1 == null) {
										context.setProperty(key_tContextLoad_1,
												"");
									} else {
										context.setProperty(key_tContextLoad_1,
												value_tContextLoad_1);
									}
								} catch (java.lang.Exception e) {
									System.err
											.println("Setting a value for the key \""
													+ key_tContextLoad_1
													+ "\" has failed. Error message: "
													+ e.getMessage());
								}
								nb_line_tContextLoad_1++;
							}
							// ////////////////////////

							tos_count_tContextLoad_1++;

							/**
							 * [tContextLoad_1 main ] stop
							 */

						} // End of branch "row15"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ((String) globalMap
							.get("generalContextFile")) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_tContextLoad_1));

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_11 begin ] start
				 */

				ok_Hash.put("tJava_11", false);
				start_Hash.put("tJava_11", System.currentTimeMillis());

				currentComponent = "tJava_11";

				int tos_count_tJava_11 = 0;

				Boolean missingGeneralContext = false;
				if (context.inputDir == null || "".equals(context.inputDir)
						|| "null".equals(context.inputDir)) {
					missingGeneralContext = true;
					System.err.println(jobName
							+ ": context.inputDir not defined in "
							+ (String) globalMap.get("generalContextFile"));
				}

				/**
				 * [tJava_11 begin ] stop
				 */

				/**
				 * [tJava_11 main ] start
				 */

				currentComponent = "tJava_11";

				tos_count_tJava_11++;

				/**
				 * [tJava_11 main ] stop
				 */

				/**
				 * [tJava_11 end ] start
				 */

				currentComponent = "tJava_11";

				ok_Hash.put("tJava_11", true);
				end_Hash.put("tJava_11", System.currentTimeMillis());

				if (missingGeneralContext) {

					tDie_2Process(globalMap);
				}

				/**
				 * [tJava_11 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_11:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_11 finally ] start
				 */

				currentComponent = "tJava_11";

				/**
				 * [tJava_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}

	public void tDie_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_2 begin ] start
				 */

				ok_Hash.put("tDie_2", false);
				start_Hash.put("tDie_2", System.currentTimeMillis());

				currentComponent = "tDie_2";

				int tos_count_tDie_2 = 0;

				/**
				 * [tDie_2 begin ] stop
				 */

				/**
				 * [tDie_2 main ] start
				 */

				currentComponent = "tDie_2";

				globalMap.put("tDie_2_DIE_PRIORITY", 5);
				System.err.println(jobName + ": missing Context for "
						+ (String) globalMap.get("generalContextFile"));

				globalMap.put(
						"tDie_2_DIE_MESSAGE",
						jobName + ": missing Context for "
								+ (String) globalMap.get("generalContextFile"));
				globalMap.put(
						"tDie_2_DIE_MESSAGES",
						jobName + ": missing Context for "
								+ (String) globalMap.get("generalContextFile"));
				currentComponent = "tDie_2";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_2_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_2++;

				/**
				 * [tDie_2 main ] stop
				 */

				/**
				 * [tDie_2 end ] start
				 */

				currentComponent = "tDie_2";

				ok_Hash.put("tDie_2", true);
				end_Hash.put("tDie_2", System.currentTimeMillis());

				/**
				 * [tDie_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_2 finally ] start
				 */

				currentComponent = "tDie_2";

				/**
				 * [tDie_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_10 begin ] start
				 */

				ok_Hash.put("tJava_10", false);
				start_Hash.put("tJava_10", System.currentTimeMillis());

				currentComponent = "tJava_10";

				int tos_count_tJava_10 = 0;

				System.out.println(jobName + ": inputDir: " + context.inputDir);
				System.out.println(jobName + ": username: " + context.username);
				System.out.println(jobName + ": password: " + context.password);
				System.out.println(jobName + ": host: " + context.host);
				System.out.println(jobName + ": port: " + context.port);
				System.out.println(jobName + ": stagingdb: "
						+ context.stagingdb);
				System.out.println(jobName + ": commondb: " + context.commondb);
				System.out.println(jobName + ": localpath: "
						+ context.localpath);
				System.out.println(jobName + ": bucket: " + context.bucket);
				String abc[] = (context.inputDir).toString().split("/");

				context.firmId = ("Firm_" + abc[abc.length - 4]);

				context.firmint = abc[abc.length - 4];
				context.date = abc[abc.length - 3] + "_" + abc[abc.length - 2]
						+ "_" + abc[abc.length - 1];

				System.out.println("FirmId" + ": :  " + context.firmId);
				System.out.println("date " + ": : " + context.date);

				System.out.println("firmint" + ": : " + context.firmint);

				/**
				 * [tJava_10 begin ] stop
				 */

				/**
				 * [tJava_10 main ] start
				 */

				currentComponent = "tJava_10";

				tos_count_tJava_10++;

				/**
				 * [tJava_10 main ] stop
				 */

				/**
				 * [tJava_10 end ] start
				 */

				currentComponent = "tJava_10";

				ok_Hash.put("tJava_10", true);
				end_Hash.put("tJava_10", System.currentTimeMillis());

				tS3Connection_1Process(globalMap);

				/**
				 * [tJava_10 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_10 finally ] start
				 */

				currentComponent = "tJava_10";

				/**
				 * [tJava_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}

	public void tS3Connection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tS3Connection_1 begin ] start
				 */

				ok_Hash.put("tS3Connection_1", false);
				start_Hash.put("tS3Connection_1", System.currentTimeMillis());

				currentComponent = "tS3Connection_1";

				int tos_count_tS3Connection_1 = 0;

				final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("dcd07c160804939105b21c534bd91e490afd42d1eba1f2b42e29646a1b1432576a837335bb71f676f4f7aba1746784ea");

				com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials(
						"AKIAJGVS4663WQJQURLQ",
						decryptedPassword_tS3Connection_1);

				com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = new com.amazonaws.services.s3.AmazonS3Client(
						credentials_tS3Connection_1);

				globalMap
						.put("conn_" + "tS3Connection_1", conn_tS3Connection_1);

				/**
				 * [tS3Connection_1 begin ] stop
				 */

				/**
				 * [tS3Connection_1 main ] start
				 */

				currentComponent = "tS3Connection_1";

				tos_count_tS3Connection_1++;

				/**
				 * [tS3Connection_1 main ] stop
				 */

				/**
				 * [tS3Connection_1 end ] start
				 */

				currentComponent = "tS3Connection_1";

				ok_Hash.put("tS3Connection_1", true);
				end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				/**
				 * [tS3Connection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tS3Connection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tS3BucketExist_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tS3Connection_1 finally ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}

	public void tS3BucketExist_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tS3BucketExist_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tS3BucketExist_1 begin ] start
				 */

				ok_Hash.put("tS3BucketExist_1", false);
				start_Hash.put("tS3BucketExist_1", System.currentTimeMillis());

				currentComponent = "tS3BucketExist_1";

				int tos_count_tS3BucketExist_1 = 0;

				/**
				 * [tS3BucketExist_1 begin ] stop
				 */

				/**
				 * [tS3BucketExist_1 main ] start
				 */

				currentComponent = "tS3BucketExist_1";

				com.amazonaws.services.s3.AmazonS3Client conn_tS3BucketExist_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
						.get("conn_tS3Connection_1");

				boolean bucketExist_tS3BucketExist_1 = false;
				try {
					bucketExist_tS3BucketExist_1 = conn_tS3BucketExist_1
							.doesBucketExist(context.bucket + "/"
									+ context.inputDir);

				} catch (java.lang.Exception e_tS3BucketExist_1) {

					System.err.println(e_tS3BucketExist_1.getMessage());

				}
				globalMap.put("tS3BucketExist_1_BUCKET_NAME", context.bucket
						+ "/" + context.inputDir);
				globalMap.put("tS3BucketExist_1_BUCKET_EXIST",
						bucketExist_tS3BucketExist_1);

				tos_count_tS3BucketExist_1++;

				/**
				 * [tS3BucketExist_1 main ] stop
				 */

				/**
				 * [tS3BucketExist_1 end ] start
				 */

				currentComponent = "tS3BucketExist_1";

				ok_Hash.put("tS3BucketExist_1", true);
				end_Hash.put("tS3BucketExist_1", System.currentTimeMillis());

				/**
				 * [tS3BucketExist_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tS3BucketExist_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tS3List_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tS3BucketExist_1 finally ] start
				 */

				currentComponent = "tS3BucketExist_1";

				/**
				 * [tS3BucketExist_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3BucketExist_1_SUBPROCESS_STATE", 1);
	}

	public static class OnSubjobOkStructtIterateToFlow_1 implements
			routines.system.IPersistableRow<OnSubjobOkStructtIterateToFlow_1> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnSubjobOkStructtIterateToFlow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tS3List_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tS3List_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tS3List_2 begin ] start
				 */

				int NB_ITERATE_tIterateToFlow_1_ITFO = 0; // for statistics

				ok_Hash.put("tS3List_2", false);
				start_Hash.put("tS3List_2", System.currentTimeMillis());

				currentComponent = "tS3List_2";

				int tos_count_tS3List_2 = 0;

				com.amazonaws.services.s3.AmazonS3Client conn_tS3List_2 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
						.get("conn_tS3Connection_1");

				int nb_bucket_tS3List_2 = 0;
				int nb_bucket_object_tS3List_2 = 0;
				try {

					java.util.List<java.util.Map<String, String>> buckets_map_list_tS3List_2 = new java.util.ArrayList<java.util.Map<String, String>>();
					java.util.Map<String, String> bucket_prefix_map_tS3List_2 = null;
					String object_prefix_tS3List_2 = "";

					object_prefix_tS3List_2 = context.inputDir;

					bucket_prefix_map_tS3List_2 = new java.util.HashMap<String, String>();
					bucket_prefix_map_tS3List_2.put(context.bucket,
							object_prefix_tS3List_2);
					buckets_map_list_tS3List_2.add(bucket_prefix_map_tS3List_2);
					object_prefix_tS3List_2 = "";

					for (java.util.Map<String, String> bucketMap_tS3List_2 : buckets_map_list_tS3List_2) {
						String currentBucketName_tS3List_2 = "";
						String currentPrefix_tS3List_2 = "";
						for (java.util.Map.Entry<String, String> entry_tS3List_2 : bucketMap_tS3List_2
								.entrySet()) {
							currentBucketName_tS3List_2 = entry_tS3List_2
									.getKey();
							currentPrefix_tS3List_2 = entry_tS3List_2
									.getValue();
						}
						com.amazonaws.services.s3.model.ObjectListing objects_tS3List_2 = null;
						try {

							objects_tS3List_2 = conn_tS3List_2.listObjects(
									currentBucketName_tS3List_2,
									currentPrefix_tS3List_2);
						} catch (com.amazonaws.AmazonClientException e_tS3List_2) {

							System.err
									.println("WARNING: [tS3List_2] failed to list objects from bucket "
											+ currentBucketName_tS3List_2);
							System.err.println("WARNING: [tS3List_2] "
									+ e_tS3List_2.getMessage());

							continue;
						}

						while (true) {
							java.util.List<com.amazonaws.services.s3.model.S3ObjectSummary> list_objects_tS3List_2 = objects_tS3List_2
									.getObjectSummaries();
							if (list_objects_tS3List_2.size() > 0) {
								nb_bucket_tS3List_2++;
							}
							for (com.amazonaws.services.s3.model.S3ObjectSummary objectSummary_tS3List_2 : list_objects_tS3List_2) {
								nb_bucket_object_tS3List_2++;
								globalMap.put("tS3List_2_CURRENT_BUCKET",
										currentBucketName_tS3List_2);
								globalMap.put("tS3List_2_CURRENT_KEY",
										objectSummary_tS3List_2.getKey());

								/**
								 * [tS3List_2 begin ] stop
								 */

								/**
								 * [tS3List_2 main ] start
								 */

								currentComponent = "tS3List_2";

								tos_count_tS3List_2++;

								/**
								 * [tS3List_2 main ] stop
								 */
								NB_ITERATE_tIterateToFlow_1_ITFO++;

								/**
								 * [tIterateToFlow_1_ITFO begin ] start
								 */

								ok_Hash.put("tIterateToFlow_1_ITFO", false);
								start_Hash.put("tIterateToFlow_1_ITFO",
										System.currentTimeMillis());

								currentVirtualComponent = "tIterateToFlow_1";

								currentComponent = "tIterateToFlow_1_ITFO";

								int tos_count_tIterateToFlow_1_ITFO = 0;

								OnSubjobOkStructtIterateToFlow_1 struct_tIterateToFlow_1_ITFO = new OnSubjobOkStructtIterateToFlow_1();
								struct_tIterateToFlow_1_ITFO.filename = ((String) globalMap
										.get("tS3List_2_CURRENT_KEY"));

								if (globalMap.get("tIterateToFlow_1") != null) {
									java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_ITFO = (java.util.List<OnSubjobOkStructtIterateToFlow_1>) globalMap
											.get("tIterateToFlow_1");
									list_tIterateToFlow_1_ITFO
											.add(struct_tIterateToFlow_1_ITFO);
								} else {
									java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_ITFO = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_1>();
									list_tIterateToFlow_1_ITFO
											.add(struct_tIterateToFlow_1_ITFO);
									globalMap.put("tIterateToFlow_1",
											list_tIterateToFlow_1_ITFO);
								}

								/**
								 * [tIterateToFlow_1_ITFO begin ] stop
								 */

								/**
								 * [tIterateToFlow_1_ITFO main ] start
								 */

								currentVirtualComponent = "tIterateToFlow_1";

								currentComponent = "tIterateToFlow_1_ITFO";

								tos_count_tIterateToFlow_1_ITFO++;

								/**
								 * [tIterateToFlow_1_ITFO main ] stop
								 */

								/**
								 * [tIterateToFlow_1_ITFO end ] start
								 */

								currentVirtualComponent = "tIterateToFlow_1";

								currentComponent = "tIterateToFlow_1_ITFO";

								ok_Hash.put("tIterateToFlow_1_ITFO", true);
								end_Hash.put("tIterateToFlow_1_ITFO",
										System.currentTimeMillis());

								/**
								 * [tIterateToFlow_1_ITFO end ] stop
								 */

								/**
								 * [tS3List_2 end ] start
								 */

								currentComponent = "tS3List_2";

							}
							if (!objects_tS3List_2.isTruncated()) {
								break;
							}
							objects_tS3List_2 = conn_tS3List_2
									.listNextBatchOfObjects(objects_tS3List_2);
						}
					}

				} catch (com.amazonaws.AmazonClientException e_tS3List_2) {

					System.err.println(e_tS3List_2.getMessage());

				}
				globalMap.put("tS3List_2_NB_BUCKET", nb_bucket_tS3List_2);
				globalMap.put("tS3List_2_NB_BUCKET_OBJECT",
						nb_bucket_object_tS3List_2);

				ok_Hash.put("tS3List_2", true);
				end_Hash.put("tS3List_2", System.currentTimeMillis());

				/**
				 * [tS3List_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tS3List_2:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tIterateToFlow_1_AIProcess(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tS3List_2:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_12Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tS3List_2 finally ] start
				 */

				currentComponent = "tS3List_2";

				/**
				 * [tS3List_2 finally ] stop
				 */

				/**
				 * [tIterateToFlow_1_ITFO finally ] start
				 */

				currentVirtualComponent = "tIterateToFlow_1";

				currentComponent = "tIterateToFlow_1_ITFO";

				/**
				 * [tIterateToFlow_1_ITFO finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3List_2_SUBPROCESS_STATE", 1);
	}

	public void tDie_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_9 begin ] start
				 */

				ok_Hash.put("tDie_9", false);
				start_Hash.put("tDie_9", System.currentTimeMillis());

				currentComponent = "tDie_9";

				int tos_count_tDie_9 = 0;

				/**
				 * [tDie_9 begin ] stop
				 */

				/**
				 * [tDie_9 main ] start
				 */

				currentComponent = "tDie_9";

				globalMap.put("tDie_9_DIE_PRIORITY", 5);
				System.err.println(context.firmId
						+ ": contains more than one advisor files");

				globalMap.put("tDie_9_DIE_MESSAGE", context.firmId
						+ ": contains more than one advisor files");
				globalMap.put("tDie_9_DIE_MESSAGES", context.firmId
						+ ": contains more than one advisor files");
				currentComponent = "tDie_9";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_9_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_9++;

				/**
				 * [tDie_9 main ] stop
				 */

				/**
				 * [tDie_9 end ] start
				 */

				currentComponent = "tDie_9";

				ok_Hash.put("tDie_9", true);
				end_Hash.put("tDie_9", System.currentTimeMillis());

				/**
				 * [tDie_9 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_9 finally ] start
				 */

				currentComponent = "tDie_9";

				/**
				 * [tDie_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_9_SUBPROCESS_STATE", 1);
	}

	public void tDie_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_10 begin ] start
				 */

				ok_Hash.put("tDie_10", false);
				start_Hash.put("tDie_10", System.currentTimeMillis());

				currentComponent = "tDie_10";

				int tos_count_tDie_10 = 0;

				/**
				 * [tDie_10 begin ] stop
				 */

				/**
				 * [tDie_10 main ] start
				 */

				currentComponent = "tDie_10";

				globalMap.put("tDie_10_DIE_PRIORITY", 5);
				System.err.println(context.firmId
						+ ": contains more than one position files");

				globalMap.put("tDie_10_DIE_MESSAGE", context.firmId
						+ ": contains more than one position files");
				globalMap.put("tDie_10_DIE_MESSAGES", context.firmId
						+ ": contains more than one position files");
				currentComponent = "tDie_10";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_10_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_10++;

				/**
				 * [tDie_10 main ] stop
				 */

				/**
				 * [tDie_10 end ] start
				 */

				currentComponent = "tDie_10";

				ok_Hash.put("tDie_10", true);
				end_Hash.put("tDie_10", System.currentTimeMillis());

				/**
				 * [tDie_10 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_10 finally ] start
				 */

				currentComponent = "tDie_10";

				/**
				 * [tDie_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_10_SUBPROCESS_STATE", 1);
	}

	public void tDie_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_8 begin ] start
				 */

				ok_Hash.put("tDie_8", false);
				start_Hash.put("tDie_8", System.currentTimeMillis());

				currentComponent = "tDie_8";

				int tos_count_tDie_8 = 0;

				/**
				 * [tDie_8 begin ] stop
				 */

				/**
				 * [tDie_8 main ] start
				 */

				currentComponent = "tDie_8";

				globalMap.put("tDie_8_DIE_PRIORITY", 5);
				System.err.println(context.firmId
						+ ": contains more than one custodian files");

				globalMap.put("tDie_8_DIE_MESSAGE", context.firmId
						+ ": contains more than one custodian files");
				globalMap.put("tDie_8_DIE_MESSAGES", context.firmId
						+ ": contains more than one custodian files");
				currentComponent = "tDie_8";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_8_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_8++;

				/**
				 * [tDie_8 main ] stop
				 */

				/**
				 * [tDie_8 end ] start
				 */

				currentComponent = "tDie_8";

				ok_Hash.put("tDie_8", true);
				end_Hash.put("tDie_8", System.currentTimeMillis());

				/**
				 * [tDie_8 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_8 finally ] start
				 */

				currentComponent = "tDie_8";

				/**
				 * [tDie_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_8_SUBPROCESS_STATE", 1);
	}

	public void tDie_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_7 begin ] start
				 */

				ok_Hash.put("tDie_7", false);
				start_Hash.put("tDie_7", System.currentTimeMillis());

				currentComponent = "tDie_7";

				int tos_count_tDie_7 = 0;

				/**
				 * [tDie_7 begin ] stop
				 */

				/**
				 * [tDie_7 main ] start
				 */

				currentComponent = "tDie_7";

				globalMap.put("tDie_7_DIE_PRIORITY", 5);
				System.err.println(context.firmId
						+ ": contains more than one taxLot files");

				globalMap.put("tDie_7_DIE_MESSAGE", context.firmId
						+ ": contains more than one taxLot files");
				globalMap.put("tDie_7_DIE_MESSAGES", context.firmId
						+ ": contains more than one taxLot files");
				currentComponent = "tDie_7";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_7_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_7++;

				/**
				 * [tDie_7 main ] stop
				 */

				/**
				 * [tDie_7 end ] start
				 */

				currentComponent = "tDie_7";

				ok_Hash.put("tDie_7", true);
				end_Hash.put("tDie_7", System.currentTimeMillis());

				/**
				 * [tDie_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_7 finally ] start
				 */

				currentComponent = "tDie_7";

				/**
				 * [tDie_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_7_SUBPROCESS_STATE", 1);
	}

	public void tDie_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_5 begin ] start
				 */

				ok_Hash.put("tDie_5", false);
				start_Hash.put("tDie_5", System.currentTimeMillis());

				currentComponent = "tDie_5";

				int tos_count_tDie_5 = 0;

				/**
				 * [tDie_5 begin ] stop
				 */

				/**
				 * [tDie_5 main ] start
				 */

				currentComponent = "tDie_5";

				globalMap.put("tDie_5_DIE_PRIORITY", 5);
				System.err.println(context.firmId
						+ ": contains more than one transaction files");

				globalMap.put("tDie_5_DIE_MESSAGE", context.firmId
						+ ": contains more than one transaction files");
				globalMap.put("tDie_5_DIE_MESSAGES", context.firmId
						+ ": contains more than one transaction files");
				currentComponent = "tDie_5";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_5_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_5++;

				/**
				 * [tDie_5 main ] stop
				 */

				/**
				 * [tDie_5 end ] start
				 */

				currentComponent = "tDie_5";

				ok_Hash.put("tDie_5", true);
				end_Hash.put("tDie_5", System.currentTimeMillis());

				/**
				 * [tDie_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_5 finally ] start
				 */

				currentComponent = "tDie_5";

				/**
				 * [tDie_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_5_SUBPROCESS_STATE", 1);
	}

	public void tDie_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_4 begin ] start
				 */

				ok_Hash.put("tDie_4", false);
				start_Hash.put("tDie_4", System.currentTimeMillis());

				currentComponent = "tDie_4";

				int tos_count_tDie_4 = 0;

				/**
				 * [tDie_4 begin ] stop
				 */

				/**
				 * [tDie_4 main ] start
				 */

				currentComponent = "tDie_4";

				globalMap.put("tDie_4_DIE_PRIORITY", 5);
				System.err.println(context.firmId
						+ ": contains more than one security files");

				globalMap.put("tDie_4_DIE_MESSAGE", context.firmId
						+ ": contains more than one security files");
				globalMap.put("tDie_4_DIE_MESSAGES", context.firmId
						+ ": contains more than one security files");
				currentComponent = "tDie_4";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_4_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_4++;

				/**
				 * [tDie_4 main ] stop
				 */

				/**
				 * [tDie_4 end ] start
				 */

				currentComponent = "tDie_4";

				ok_Hash.put("tDie_4", true);
				end_Hash.put("tDie_4", System.currentTimeMillis());

				/**
				 * [tDie_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_4 finally ] start
				 */

				currentComponent = "tDie_4";

				/**
				 * [tDie_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_4_SUBPROCESS_STATE", 1);
	}

	public void tDie_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_6 begin ] start
				 */

				ok_Hash.put("tDie_6", false);
				start_Hash.put("tDie_6", System.currentTimeMillis());

				currentComponent = "tDie_6";

				int tos_count_tDie_6 = 0;

				/**
				 * [tDie_6 begin ] stop
				 */

				/**
				 * [tDie_6 main ] start
				 */

				currentComponent = "tDie_6";

				globalMap.put("tDie_6_DIE_PRIORITY", 5);
				System.err.println(context.firmId
						+ ": contains more than one account files");

				globalMap.put("tDie_6_DIE_MESSAGE", context.firmId
						+ ": contains more than one account files");
				globalMap.put("tDie_6_DIE_MESSAGES", context.firmId
						+ ": contains more than one account files");
				currentComponent = "tDie_6";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_6_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_6++;

				/**
				 * [tDie_6 main ] stop
				 */

				/**
				 * [tDie_6 end ] start
				 */

				currentComponent = "tDie_6";

				ok_Hash.put("tDie_6", true);
				end_Hash.put("tDie_6", System.currentTimeMillis());

				/**
				 * [tDie_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_6 finally ] start
				 */

				currentComponent = "tDie_6";

				/**
				 * [tDie_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_6_SUBPROCESS_STATE", 1);
	}

	public void tDie_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_11 begin ] start
				 */

				ok_Hash.put("tDie_11", false);
				start_Hash.put("tDie_11", System.currentTimeMillis());

				currentComponent = "tDie_11";

				int tos_count_tDie_11 = 0;

				/**
				 * [tDie_11 begin ] stop
				 */

				/**
				 * [tDie_11 main ] start
				 */

				currentComponent = "tDie_11";

				globalMap.put("tDie_11_DIE_PRIORITY", 5);
				System.err.println(context.firmId
						+ ": contains more than one RealizedGainLoss  files");

				globalMap.put("tDie_11_DIE_MESSAGE", context.firmId
						+ ": contains more than one RealizedGainLoss  files");
				globalMap.put("tDie_11_DIE_MESSAGES", context.firmId
						+ ": contains more than one RealizedGainLoss  files");
				currentComponent = "tDie_11";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_11_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_11++;

				/**
				 * [tDie_11 main ] stop
				 */

				/**
				 * [tDie_11 end ] start
				 */

				currentComponent = "tDie_11";

				ok_Hash.put("tDie_11", true);
				end_Hash.put("tDie_11", System.currentTimeMillis());

				/**
				 * [tDie_11 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_11 finally ] start
				 */

				currentComponent = "tDie_11";

				/**
				 * [tDie_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_11_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());

				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				System.out.println(jobName + ": accountpath: "
						+ context.accountpath);
				Boolean missingGeneralContext = false;
				int n = context.accountpath.lastIndexOf("/");
				int m = context.accountpath.lastIndexOf("_");
				context.firmint2 = context.accountpath.substring(n + 1, m);

				System.out.println(jobName + ": firmint2: " + context.firmint2);
				if (!(context.firmint2).equals(context.firmint)) {
					missingGeneralContext = true;
					System.err
							.println(jobName
									+ ": Firm folder name and file name are different ");
				}

				context.firmint3 = context.firmint2;
				System.out.println("Firm to be used: " + context.firmint3);

				/**
				 * [tJava_12 begin ] stop
				 */

				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */

				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				if (missingGeneralContext) {

					tDie_3Process(globalMap);
				}

				/**
				 * [tJava_12 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_12:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tS3List_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_12 finally ] start
				 */

				currentComponent = "tJava_12";

				/**
				 * [tJava_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public void tDie_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_3 begin ] start
				 */

				ok_Hash.put("tDie_3", false);
				start_Hash.put("tDie_3", System.currentTimeMillis());

				currentComponent = "tDie_3";

				int tos_count_tDie_3 = 0;

				/**
				 * [tDie_3 begin ] stop
				 */

				/**
				 * [tDie_3 main ] start
				 */

				currentComponent = "tDie_3";

				globalMap.put("tDie_3_DIE_PRIORITY", 5);
				System.err.println(jobName
						+ ":  Firm folder name and file name are different ");

				globalMap.put("tDie_3_DIE_MESSAGE", jobName
						+ ":  Firm folder name and file name are different ");
				globalMap.put("tDie_3_DIE_MESSAGES", jobName
						+ ":  Firm folder name and file name are different ");
				currentComponent = "tDie_3";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_3_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_3++;

				/**
				 * [tDie_3 main ] stop
				 */

				/**
				 * [tDie_3 end ] start
				 */

				currentComponent = "tDie_3";

				ok_Hash.put("tDie_3", true);
				end_Hash.put("tDie_3", System.currentTimeMillis());

				/**
				 * [tDie_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_3 finally ] start
				 */

				currentComponent = "tDie_3";

				/**
				 * [tDie_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_3_SUBPROCESS_STATE", 1);
	}

	public void tS3List_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tS3List_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tS3List_1 begin ] start
				 */

				int NB_ITERATE_tS3Get_1 = 0; // for statistics

				ok_Hash.put("tS3List_1", false);
				start_Hash.put("tS3List_1", System.currentTimeMillis());

				currentComponent = "tS3List_1";

				int tos_count_tS3List_1 = 0;

				com.amazonaws.services.s3.AmazonS3Client conn_tS3List_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
						.get("conn_tS3Connection_1");

				int nb_bucket_tS3List_1 = 0;
				int nb_bucket_object_tS3List_1 = 0;
				try {

					java.util.List<java.util.Map<String, String>> buckets_map_list_tS3List_1 = new java.util.ArrayList<java.util.Map<String, String>>();
					java.util.Map<String, String> bucket_prefix_map_tS3List_1 = null;
					String object_prefix_tS3List_1 = "";

					object_prefix_tS3List_1 = context.inputDir;

					bucket_prefix_map_tS3List_1 = new java.util.HashMap<String, String>();
					bucket_prefix_map_tS3List_1.put(context.bucket,
							object_prefix_tS3List_1);
					buckets_map_list_tS3List_1.add(bucket_prefix_map_tS3List_1);
					object_prefix_tS3List_1 = "";

					for (java.util.Map<String, String> bucketMap_tS3List_1 : buckets_map_list_tS3List_1) {
						String currentBucketName_tS3List_1 = "";
						String currentPrefix_tS3List_1 = "";
						for (java.util.Map.Entry<String, String> entry_tS3List_1 : bucketMap_tS3List_1
								.entrySet()) {
							currentBucketName_tS3List_1 = entry_tS3List_1
									.getKey();
							currentPrefix_tS3List_1 = entry_tS3List_1
									.getValue();
						}
						com.amazonaws.services.s3.model.ObjectListing objects_tS3List_1 = null;
						try {

							objects_tS3List_1 = conn_tS3List_1.listObjects(
									currentBucketName_tS3List_1,
									currentPrefix_tS3List_1);
						} catch (com.amazonaws.AmazonClientException e_tS3List_1) {

							System.err
									.println("WARNING: [tS3List_1] failed to list objects from bucket "
											+ currentBucketName_tS3List_1);
							System.err.println("WARNING: [tS3List_1] "
									+ e_tS3List_1.getMessage());

							continue;
						}

						while (true) {
							java.util.List<com.amazonaws.services.s3.model.S3ObjectSummary> list_objects_tS3List_1 = objects_tS3List_1
									.getObjectSummaries();
							if (list_objects_tS3List_1.size() > 0) {
								nb_bucket_tS3List_1++;
							}
							for (com.amazonaws.services.s3.model.S3ObjectSummary objectSummary_tS3List_1 : list_objects_tS3List_1) {
								nb_bucket_object_tS3List_1++;
								globalMap.put("tS3List_1_CURRENT_BUCKET",
										currentBucketName_tS3List_1);
								globalMap.put("tS3List_1_CURRENT_KEY",
										objectSummary_tS3List_1.getKey());

								/**
								 * [tS3List_1 begin ] stop
								 */

								/**
								 * [tS3List_1 main ] start
								 */

								currentComponent = "tS3List_1";

								tos_count_tS3List_1++;

								/**
								 * [tS3List_1 main ] stop
								 */
								NB_ITERATE_tS3Get_1++;

								/**
								 * [tS3Get_1 begin ] start
								 */

								ok_Hash.put("tS3Get_1", false);
								start_Hash.put("tS3Get_1",
										System.currentTimeMillis());

								currentComponent = "tS3Get_1";

								int tos_count_tS3Get_1 = 0;

								com.amazonaws.services.s3.AmazonS3Client conn_tS3Get_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
										.get("conn_tS3Connection_1");

								try {

									conn_tS3Get_1
											.getObject(
													new com.amazonaws.services.s3.model.GetObjectRequest(
															context.bucket,
															((String) globalMap
																	.get("tS3List_1_CURRENT_KEY"))),
													new java.io.File(
															context.localpath
																	+ ((String) globalMap
																			.get("tS3List_1_CURRENT_KEY"))));

								} catch (java.lang.Exception e_tS3Get_1) {

									System.err.println(e_tS3Get_1.getMessage());

								}

								/**
								 * [tS3Get_1 begin ] stop
								 */

								/**
								 * [tS3Get_1 main ] start
								 */

								currentComponent = "tS3Get_1";

								tos_count_tS3Get_1++;

								/**
								 * [tS3Get_1 main ] stop
								 */

								/**
								 * [tS3Get_1 end ] start
								 */

								currentComponent = "tS3Get_1";

								ok_Hash.put("tS3Get_1", true);
								end_Hash.put("tS3Get_1",
										System.currentTimeMillis());

								/**
								 * [tS3Get_1 end ] stop
								 */

								/**
								 * [tS3List_1 end ] start
								 */

								currentComponent = "tS3List_1";

							}
							if (!objects_tS3List_1.isTruncated()) {
								break;
							}
							objects_tS3List_1 = conn_tS3List_1
									.listNextBatchOfObjects(objects_tS3List_1);
						}
					}

				} catch (com.amazonaws.AmazonClientException e_tS3List_1) {

					System.err.println(e_tS3List_1.getMessage());

				}
				globalMap.put("tS3List_1_NB_BUCKET", nb_bucket_tS3List_1);
				globalMap.put("tS3List_1_NB_BUCKET_OBJECT",
						nb_bucket_object_tS3List_1);

				ok_Hash.put("tS3List_1", true);
				end_Hash.put("tS3List_1", System.currentTimeMillis());

				/**
				 * [tS3List_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tS3List_1:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRunJob_10Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tS3List_1:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRunJob_18Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tS3List_1:OnSubjobOk3",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRunJob_2Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tS3List_1:OnSubjobOk4",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRunJob_12Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tS3List_1 finally ] start
				 */

				currentComponent = "tS3List_1";

				/**
				 * [tS3List_1 finally ] stop
				 */

				/**
				 * [tS3Get_1 finally ] start
				 */

				currentComponent = "tS3Get_1";

				/**
				 * [tS3Get_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3List_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_10 begin ] start
				 */

				ok_Hash.put("tRunJob_10", false);
				start_Hash.put("tRunJob_10", System.currentTimeMillis());

				currentComponent = "tRunJob_10";

				int tos_count_tRunJob_10 = 0;

				/**
				 * [tRunJob_10 begin ] stop
				 */

				/**
				 * [tRunJob_10 main ] start
				 */

				currentComponent = "tRunJob_10";

				java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();

				paraList_tRunJob_10.add("--father_pid=" + pid);

				paraList_tRunJob_10.add("--root_pid=" + rootPid);

				paraList_tRunJob_10.add("--father_node=tRunJob_10");

				paraList_tRunJob_10.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_10.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_10.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_10 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_10 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_10".equals(tRunJobName_tRunJob_10)
						&& childResumePath_tRunJob_10 != null) {
					paraList_tRunJob_10
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_10.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_10");

				java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_10 = context
						.propertyNames();
				while (propertyNames_tRunJob_10.hasMoreElements()) {
					String key_tRunJob_10 = (String) propertyNames_tRunJob_10
							.nextElement();
					Object value_tRunJob_10 = (Object) context
							.get(key_tRunJob_10);
					paraList_tRunJob_10.add("--context_param " + key_tRunJob_10
							+ "=" + value_tRunJob_10);
				}

				parentContextMap_tRunJob_10.put("serverIp", context.serverIp);

				parentContextMap_tRunJob_10.put("database", context.database);

				parentContextMap_tRunJob_10.put("filepath_advisor",
						context.filepath_advisor);

				parentContextMap_tRunJob_10.put("positionpath",
						context.positionpath);

				parentContextMap_tRunJob_10.put("custodianpath",
						context.custodianpath);

				parentContextMap_tRunJob_10.put("taxlotpath",
						context.taxlotpath);

				parentContextMap_tRunJob_10.put("transactionpath",
						context.transactionpath);

				parentContextMap_tRunJob_10.put("securitypath",
						context.securitypath);

				parentContextMap_tRunJob_10.put("accountpath",
						context.accountpath);

				parentContextMap_tRunJob_10.put("inputDir", context.inputDir);

				parentContextMap_tRunJob_10.put("username", context.username);

				parentContextMap_tRunJob_10.put("password", context.password);

				parentContextMap_tRunJob_10.put("contextDir",
						context.contextDir);

				parentContextMap_tRunJob_10.put("stagingdb", context.stagingdb);

				parentContextMap_tRunJob_10.put("commondb", context.commondb);

				parentContextMap_tRunJob_10.put("localpath", context.localpath);

				parentContextMap_tRunJob_10.put("port", context.port);

				parentContextMap_tRunJob_10.put("host", context.host);

				parentContextMap_tRunJob_10.put("rowCountRejectedFirm",
						context.rowCountRejectedFirm);

				parentContextMap_tRunJob_10.put("firm", context.firm);

				parentContextMap_tRunJob_10.put("rowCountFirm",
						context.rowCountFirm);

				parentContextMap_tRunJob_10.put("rowCountStaging",
						context.rowCountStaging);

				parentContextMap_tRunJob_10.put("rowCountTSV",
						context.rowCountTSV);

				parentContextMap_tRunJob_10.put("rowCountUpdated",
						context.rowCountUpdated);

				parentContextMap_tRunJob_10.put("teamPreferenceOption",
						context.teamPreferenceOption);

				parentContextMap_tRunJob_10.put("date", context.date);

				parentContextMap_tRunJob_10.put("firmId", context.firmId);

				parentContextMap_tRunJob_10.put("pathforlocal",
						context.pathforlocal);

				parentContextMap_tRunJob_10.put("filestorage",
						context.filestorage);

				parentContextMap_tRunJob_10.put("filestorage2",
						context.filestorage2);

				parentContextMap_tRunJob_10.put("firmint", context.firmint);

				parentContextMap_tRunJob_10.put("firmint2", context.firmint2);

				parentContextMap_tRunJob_10.put("a", context.a);

				parentContextMap_tRunJob_10.put("b", context.b);

				parentContextMap_tRunJob_10.put("c", context.c);

				parentContextMap_tRunJob_10.put("d", context.d);

				parentContextMap_tRunJob_10.put("e", context.e);

				parentContextMap_tRunJob_10.put("f", context.f);

				parentContextMap_tRunJob_10.put("g", context.g);

				parentContextMap_tRunJob_10.put("firmint3", context.firmint3);

				parentContextMap_tRunJob_10.put("firmids", context.firmids);

				parentContextMap_tRunJob_10.put("RealizedGainLossPath",
						context.RealizedGainLossPath);

				parentContextMap_tRunJob_10.put("h", context.h);

				parentContextMap_tRunJob_10.put("bucket", context.bucket);

				parentContextMap_tRunJob_10.put("loadType", context.loadType);

				Object obj_tRunJob_10 = null;

				reliazedgainloss.s3_to_staging_0_1.S3_to_staging childJob_tRunJob_10 = new reliazedgainloss.s3_to_staging_0_1.S3_to_staging();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_10) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_10 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_10 : talendDataSources_tRunJob_10
							.entrySet()) {
						dataSources_tRunJob_10.put(
								talendDataSourceEntry_tRunJob_10.getKey(),
								talendDataSourceEntry_tRunJob_10.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_10.setDataSources(dataSources_tRunJob_10);
				}

				childJob_tRunJob_10.parentContextMap = parentContextMap_tRunJob_10;

				String[][] childReturn_tRunJob_10 = childJob_tRunJob_10
						.runJob((String[]) paraList_tRunJob_10
								.toArray(new String[paraList_tRunJob_10.size()]));

				errorCode = childJob_tRunJob_10.getErrorCode();

				if (childJob_tRunJob_10.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_10_CHILD_RETURN_CODE",
							childJob_tRunJob_10.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_10
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_10_CHILD_RETURN_CODE",
							childJob_tRunJob_10.getErrorCode());
				}
				if (childJob_tRunJob_10.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_10_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_10.getExceptionStackTrace());
				}

				if (childJob_tRunJob_10.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_10.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_10++;

				/**
				 * [tRunJob_10 main ] stop
				 */

				/**
				 * [tRunJob_10 end ] start
				 */

				currentComponent = "tRunJob_10";

				ok_Hash.put("tRunJob_10", true);
				end_Hash.put("tRunJob_10", System.currentTimeMillis());

				/**
				 * [tRunJob_10 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_10 finally ] start
				 */

				currentComponent = "tRunJob_10";

				/**
				 * [tRunJob_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_18Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_18 begin ] start
				 */

				ok_Hash.put("tRunJob_18", false);
				start_Hash.put("tRunJob_18", System.currentTimeMillis());

				currentComponent = "tRunJob_18";

				int tos_count_tRunJob_18 = 0;

				/**
				 * [tRunJob_18 begin ] stop
				 */

				/**
				 * [tRunJob_18 main ] start
				 */

				currentComponent = "tRunJob_18";

				java.util.List<String> paraList_tRunJob_18 = new java.util.ArrayList<String>();

				paraList_tRunJob_18.add("--father_pid=" + pid);

				paraList_tRunJob_18.add("--root_pid=" + rootPid);

				paraList_tRunJob_18.add("--father_node=tRunJob_18");

				paraList_tRunJob_18.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_18.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_18.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_18 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_18 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_18".equals(tRunJobName_tRunJob_18)
						&& childResumePath_tRunJob_18 != null) {
					paraList_tRunJob_18
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_18.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_18");

				java.util.Map<String, Object> parentContextMap_tRunJob_18 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_18 = context
						.propertyNames();
				while (propertyNames_tRunJob_18.hasMoreElements()) {
					String key_tRunJob_18 = (String) propertyNames_tRunJob_18
							.nextElement();
					Object value_tRunJob_18 = (Object) context
							.get(key_tRunJob_18);
					paraList_tRunJob_18.add("--context_param " + key_tRunJob_18
							+ "=" + value_tRunJob_18);
				}

				parentContextMap_tRunJob_18.put("serverIp", context.serverIp);

				parentContextMap_tRunJob_18.put("database", context.database);

				parentContextMap_tRunJob_18.put("filepath_advisor",
						context.filepath_advisor);

				parentContextMap_tRunJob_18.put("positionpath",
						context.positionpath);

				parentContextMap_tRunJob_18.put("custodianpath",
						context.custodianpath);

				parentContextMap_tRunJob_18.put("taxlotpath",
						context.taxlotpath);

				parentContextMap_tRunJob_18.put("transactionpath",
						context.transactionpath);

				parentContextMap_tRunJob_18.put("securitypath",
						context.securitypath);

				parentContextMap_tRunJob_18.put("accountpath",
						context.accountpath);

				parentContextMap_tRunJob_18.put("inputDir", context.inputDir);

				parentContextMap_tRunJob_18.put("username", context.username);

				parentContextMap_tRunJob_18.put("password", context.password);

				parentContextMap_tRunJob_18.put("contextDir",
						context.contextDir);

				parentContextMap_tRunJob_18.put("stagingdb", context.stagingdb);

				parentContextMap_tRunJob_18.put("commondb", context.commondb);

				parentContextMap_tRunJob_18.put("localpath", context.localpath);

				parentContextMap_tRunJob_18.put("port", context.port);

				parentContextMap_tRunJob_18.put("host", context.host);

				parentContextMap_tRunJob_18.put("rowCountRejectedFirm",
						context.rowCountRejectedFirm);

				parentContextMap_tRunJob_18.put("firm", context.firm);

				parentContextMap_tRunJob_18.put("rowCountFirm",
						context.rowCountFirm);

				parentContextMap_tRunJob_18.put("rowCountStaging",
						context.rowCountStaging);

				parentContextMap_tRunJob_18.put("rowCountTSV",
						context.rowCountTSV);

				parentContextMap_tRunJob_18.put("rowCountUpdated",
						context.rowCountUpdated);

				parentContextMap_tRunJob_18.put("teamPreferenceOption",
						context.teamPreferenceOption);

				parentContextMap_tRunJob_18.put("date", context.date);

				parentContextMap_tRunJob_18.put("firmId", context.firmId);

				parentContextMap_tRunJob_18.put("pathforlocal",
						context.pathforlocal);

				parentContextMap_tRunJob_18.put("filestorage",
						context.filestorage);

				parentContextMap_tRunJob_18.put("filestorage2",
						context.filestorage2);

				parentContextMap_tRunJob_18.put("firmint", context.firmint);

				parentContextMap_tRunJob_18.put("firmint2", context.firmint2);

				parentContextMap_tRunJob_18.put("a", context.a);

				parentContextMap_tRunJob_18.put("b", context.b);

				parentContextMap_tRunJob_18.put("c", context.c);

				parentContextMap_tRunJob_18.put("d", context.d);

				parentContextMap_tRunJob_18.put("e", context.e);

				parentContextMap_tRunJob_18.put("f", context.f);

				parentContextMap_tRunJob_18.put("g", context.g);

				parentContextMap_tRunJob_18.put("firmint3", context.firmint3);

				parentContextMap_tRunJob_18.put("firmids", context.firmids);

				parentContextMap_tRunJob_18.put("RealizedGainLossPath",
						context.RealizedGainLossPath);

				parentContextMap_tRunJob_18.put("h", context.h);

				parentContextMap_tRunJob_18.put("bucket", context.bucket);

				parentContextMap_tRunJob_18.put("loadType", context.loadType);

				Object obj_tRunJob_18 = null;

				reliazedgainloss.advisor_custodian_account_staging_to_firm_0_1.advisor_custodian_account_staging_to_firm childJob_tRunJob_18 = new reliazedgainloss.advisor_custodian_account_staging_to_firm_0_1.advisor_custodian_account_staging_to_firm();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_18 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_18) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_18 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_18 : talendDataSources_tRunJob_18
							.entrySet()) {
						dataSources_tRunJob_18.put(
								talendDataSourceEntry_tRunJob_18.getKey(),
								talendDataSourceEntry_tRunJob_18.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_18.setDataSources(dataSources_tRunJob_18);
				}

				childJob_tRunJob_18.parentContextMap = parentContextMap_tRunJob_18;

				String[][] childReturn_tRunJob_18 = childJob_tRunJob_18
						.runJob((String[]) paraList_tRunJob_18
								.toArray(new String[paraList_tRunJob_18.size()]));

				errorCode = childJob_tRunJob_18.getErrorCode();

				if (childJob_tRunJob_18.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_18_CHILD_RETURN_CODE",
							childJob_tRunJob_18.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_18
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_18_CHILD_RETURN_CODE",
							childJob_tRunJob_18.getErrorCode());
				}
				if (childJob_tRunJob_18.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_18_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_18.getExceptionStackTrace());
				}

				if (childJob_tRunJob_18.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_18.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_18++;

				/**
				 * [tRunJob_18 main ] stop
				 */

				/**
				 * [tRunJob_18 end ] start
				 */

				currentComponent = "tRunJob_18";

				ok_Hash.put("tRunJob_18", true);
				end_Hash.put("tRunJob_18", System.currentTimeMillis());

				/**
				 * [tRunJob_18 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_18 finally ] start
				 */

				currentComponent = "tRunJob_18";

				/**
				 * [tRunJob_18 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_18_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_2 = context
						.propertyNames();
				while (propertyNames_tRunJob_2.hasMoreElements()) {
					String key_tRunJob_2 = (String) propertyNames_tRunJob_2
							.nextElement();
					Object value_tRunJob_2 = (Object) context
							.get(key_tRunJob_2);
					paraList_tRunJob_2.add("--context_param " + key_tRunJob_2
							+ "=" + value_tRunJob_2);
				}

				parentContextMap_tRunJob_2.put("serverIp", context.serverIp);

				parentContextMap_tRunJob_2.put("database", context.database);

				parentContextMap_tRunJob_2.put("filepath_advisor",
						context.filepath_advisor);

				parentContextMap_tRunJob_2.put("positionpath",
						context.positionpath);

				parentContextMap_tRunJob_2.put("custodianpath",
						context.custodianpath);

				parentContextMap_tRunJob_2
						.put("taxlotpath", context.taxlotpath);

				parentContextMap_tRunJob_2.put("transactionpath",
						context.transactionpath);

				parentContextMap_tRunJob_2.put("securitypath",
						context.securitypath);

				parentContextMap_tRunJob_2.put("accountpath",
						context.accountpath);

				parentContextMap_tRunJob_2.put("inputDir", context.inputDir);

				parentContextMap_tRunJob_2.put("username", context.username);

				parentContextMap_tRunJob_2.put("password", context.password);

				parentContextMap_tRunJob_2
						.put("contextDir", context.contextDir);

				parentContextMap_tRunJob_2.put("stagingdb", context.stagingdb);

				parentContextMap_tRunJob_2.put("commondb", context.commondb);

				parentContextMap_tRunJob_2.put("localpath", context.localpath);

				parentContextMap_tRunJob_2.put("port", context.port);

				parentContextMap_tRunJob_2.put("host", context.host);

				parentContextMap_tRunJob_2.put("rowCountRejectedFirm",
						context.rowCountRejectedFirm);

				parentContextMap_tRunJob_2.put("firm", context.firm);

				parentContextMap_tRunJob_2.put("rowCountFirm",
						context.rowCountFirm);

				parentContextMap_tRunJob_2.put("rowCountStaging",
						context.rowCountStaging);

				parentContextMap_tRunJob_2.put("rowCountTSV",
						context.rowCountTSV);

				parentContextMap_tRunJob_2.put("rowCountUpdated",
						context.rowCountUpdated);

				parentContextMap_tRunJob_2.put("teamPreferenceOption",
						context.teamPreferenceOption);

				parentContextMap_tRunJob_2.put("date", context.date);

				parentContextMap_tRunJob_2.put("firmId", context.firmId);

				parentContextMap_tRunJob_2.put("pathforlocal",
						context.pathforlocal);

				parentContextMap_tRunJob_2.put("filestorage",
						context.filestorage);

				parentContextMap_tRunJob_2.put("filestorage2",
						context.filestorage2);

				parentContextMap_tRunJob_2.put("firmint", context.firmint);

				parentContextMap_tRunJob_2.put("firmint2", context.firmint2);

				parentContextMap_tRunJob_2.put("a", context.a);

				parentContextMap_tRunJob_2.put("b", context.b);

				parentContextMap_tRunJob_2.put("c", context.c);

				parentContextMap_tRunJob_2.put("d", context.d);

				parentContextMap_tRunJob_2.put("e", context.e);

				parentContextMap_tRunJob_2.put("f", context.f);

				parentContextMap_tRunJob_2.put("g", context.g);

				parentContextMap_tRunJob_2.put("firmint3", context.firmint3);

				parentContextMap_tRunJob_2.put("firmids", context.firmids);

				parentContextMap_tRunJob_2.put("RealizedGainLossPath",
						context.RealizedGainLossPath);

				parentContextMap_tRunJob_2.put("h", context.h);

				parentContextMap_tRunJob_2.put("bucket", context.bucket);

				parentContextMap_tRunJob_2.put("loadType", context.loadType);

				Object obj_tRunJob_2 = null;

				reliazedgainloss.prefirmsecurityimport_0_1.PreFirmSecurityImport childJob_tRunJob_2 = new reliazedgainloss.prefirmsecurityimport_0_1.PreFirmSecurityImport();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(
								talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}

				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));

				errorCode = childJob_tRunJob_2.getErrorCode();

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_2
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_2.getExceptionStackTrace());
				}

				if (childJob_tRunJob_2.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_2.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				tRunJob_4Process(globalMap);

				/**
				 * [tRunJob_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_4 begin ] start
				 */

				ok_Hash.put("tRunJob_4", false);
				start_Hash.put("tRunJob_4", System.currentTimeMillis());

				currentComponent = "tRunJob_4";

				int tos_count_tRunJob_4 = 0;

				/**
				 * [tRunJob_4 begin ] stop
				 */

				/**
				 * [tRunJob_4 main ] start
				 */

				currentComponent = "tRunJob_4";

				java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();

				paraList_tRunJob_4.add("--father_pid=" + pid);

				paraList_tRunJob_4.add("--root_pid=" + rootPid);

				paraList_tRunJob_4.add("--father_node=tRunJob_4");

				paraList_tRunJob_4.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_4.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_4.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_4 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_4 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_4".equals(tRunJobName_tRunJob_4)
						&& childResumePath_tRunJob_4 != null) {
					paraList_tRunJob_4
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_4");

				java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_4 = context
						.propertyNames();
				while (propertyNames_tRunJob_4.hasMoreElements()) {
					String key_tRunJob_4 = (String) propertyNames_tRunJob_4
							.nextElement();
					Object value_tRunJob_4 = (Object) context
							.get(key_tRunJob_4);
					paraList_tRunJob_4.add("--context_param " + key_tRunJob_4
							+ "=" + value_tRunJob_4);
				}

				parentContextMap_tRunJob_4.put("serverIp", context.serverIp);

				parentContextMap_tRunJob_4.put("database", context.database);

				parentContextMap_tRunJob_4.put("filepath_advisor",
						context.filepath_advisor);

				parentContextMap_tRunJob_4.put("positionpath",
						context.positionpath);

				parentContextMap_tRunJob_4.put("custodianpath",
						context.custodianpath);

				parentContextMap_tRunJob_4
						.put("taxlotpath", context.taxlotpath);

				parentContextMap_tRunJob_4.put("transactionpath",
						context.transactionpath);

				parentContextMap_tRunJob_4.put("securitypath",
						context.securitypath);

				parentContextMap_tRunJob_4.put("accountpath",
						context.accountpath);

				parentContextMap_tRunJob_4.put("inputDir", context.inputDir);

				parentContextMap_tRunJob_4.put("username", context.username);

				parentContextMap_tRunJob_4.put("password", context.password);

				parentContextMap_tRunJob_4
						.put("contextDir", context.contextDir);

				parentContextMap_tRunJob_4.put("stagingdb", context.stagingdb);

				parentContextMap_tRunJob_4.put("commondb", context.commondb);

				parentContextMap_tRunJob_4.put("localpath", context.localpath);

				parentContextMap_tRunJob_4.put("port", context.port);

				parentContextMap_tRunJob_4.put("host", context.host);

				parentContextMap_tRunJob_4.put("rowCountRejectedFirm",
						context.rowCountRejectedFirm);

				parentContextMap_tRunJob_4.put("firm", context.firm);

				parentContextMap_tRunJob_4.put("rowCountFirm",
						context.rowCountFirm);

				parentContextMap_tRunJob_4.put("rowCountStaging",
						context.rowCountStaging);

				parentContextMap_tRunJob_4.put("rowCountTSV",
						context.rowCountTSV);

				parentContextMap_tRunJob_4.put("rowCountUpdated",
						context.rowCountUpdated);

				parentContextMap_tRunJob_4.put("teamPreferenceOption",
						context.teamPreferenceOption);

				parentContextMap_tRunJob_4.put("date", context.date);

				parentContextMap_tRunJob_4.put("firmId", context.firmId);

				parentContextMap_tRunJob_4.put("pathforlocal",
						context.pathforlocal);

				parentContextMap_tRunJob_4.put("filestorage",
						context.filestorage);

				parentContextMap_tRunJob_4.put("filestorage2",
						context.filestorage2);

				parentContextMap_tRunJob_4.put("firmint", context.firmint);

				parentContextMap_tRunJob_4.put("firmint2", context.firmint2);

				parentContextMap_tRunJob_4.put("a", context.a);

				parentContextMap_tRunJob_4.put("b", context.b);

				parentContextMap_tRunJob_4.put("c", context.c);

				parentContextMap_tRunJob_4.put("d", context.d);

				parentContextMap_tRunJob_4.put("e", context.e);

				parentContextMap_tRunJob_4.put("f", context.f);

				parentContextMap_tRunJob_4.put("g", context.g);

				parentContextMap_tRunJob_4.put("firmint3", context.firmint3);

				parentContextMap_tRunJob_4.put("firmids", context.firmids);

				parentContextMap_tRunJob_4.put("RealizedGainLossPath",
						context.RealizedGainLossPath);

				parentContextMap_tRunJob_4.put("h", context.h);

				parentContextMap_tRunJob_4.put("bucket", context.bucket);

				parentContextMap_tRunJob_4.put("loadType", context.loadType);

				Object obj_tRunJob_4 = null;

				reliazedgainloss.firmsecurityimport_0_1.FirmSecurityImport childJob_tRunJob_4 = new reliazedgainloss.firmsecurityimport_0_1.FirmSecurityImport();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_4) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
							.entrySet()) {
						dataSources_tRunJob_4.put(
								talendDataSourceEntry_tRunJob_4.getKey(),
								talendDataSourceEntry_tRunJob_4.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
				}

				childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;

				String[][] childReturn_tRunJob_4 = childJob_tRunJob_4
						.runJob((String[]) paraList_tRunJob_4
								.toArray(new String[paraList_tRunJob_4.size()]));

				errorCode = childJob_tRunJob_4.getErrorCode();

				if (childJob_tRunJob_4.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_4
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getErrorCode());
				}
				if (childJob_tRunJob_4.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_4.getExceptionStackTrace());
				}

				if (childJob_tRunJob_4.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_4.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_4++;

				/**
				 * [tRunJob_4 main ] stop
				 */

				/**
				 * [tRunJob_4 end ] start
				 */

				currentComponent = "tRunJob_4";

				ok_Hash.put("tRunJob_4", true);
				end_Hash.put("tRunJob_4", System.currentTimeMillis());

				/**
				 * [tRunJob_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_4 finally ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_12 begin ] start
				 */

				ok_Hash.put("tRunJob_12", false);
				start_Hash.put("tRunJob_12", System.currentTimeMillis());

				currentComponent = "tRunJob_12";

				int tos_count_tRunJob_12 = 0;

				/**
				 * [tRunJob_12 begin ] stop
				 */

				/**
				 * [tRunJob_12 main ] start
				 */

				currentComponent = "tRunJob_12";

				java.util.List<String> paraList_tRunJob_12 = new java.util.ArrayList<String>();

				paraList_tRunJob_12.add("--father_pid=" + pid);

				paraList_tRunJob_12.add("--root_pid=" + rootPid);

				paraList_tRunJob_12.add("--father_node=tRunJob_12");

				paraList_tRunJob_12.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_12.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_12.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_12 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_12 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_12".equals(tRunJobName_tRunJob_12)
						&& childResumePath_tRunJob_12 != null) {
					paraList_tRunJob_12
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_12.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_12");

				java.util.Map<String, Object> parentContextMap_tRunJob_12 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_12 = context
						.propertyNames();
				while (propertyNames_tRunJob_12.hasMoreElements()) {
					String key_tRunJob_12 = (String) propertyNames_tRunJob_12
							.nextElement();
					Object value_tRunJob_12 = (Object) context
							.get(key_tRunJob_12);
					paraList_tRunJob_12.add("--context_param " + key_tRunJob_12
							+ "=" + value_tRunJob_12);
				}

				parentContextMap_tRunJob_12.put("serverIp", context.serverIp);

				parentContextMap_tRunJob_12.put("database", context.database);

				parentContextMap_tRunJob_12.put("filepath_advisor",
						context.filepath_advisor);

				parentContextMap_tRunJob_12.put("positionpath",
						context.positionpath);

				parentContextMap_tRunJob_12.put("custodianpath",
						context.custodianpath);

				parentContextMap_tRunJob_12.put("taxlotpath",
						context.taxlotpath);

				parentContextMap_tRunJob_12.put("transactionpath",
						context.transactionpath);

				parentContextMap_tRunJob_12.put("securitypath",
						context.securitypath);

				parentContextMap_tRunJob_12.put("accountpath",
						context.accountpath);

				parentContextMap_tRunJob_12.put("inputDir", context.inputDir);

				parentContextMap_tRunJob_12.put("username", context.username);

				parentContextMap_tRunJob_12.put("password", context.password);

				parentContextMap_tRunJob_12.put("contextDir",
						context.contextDir);

				parentContextMap_tRunJob_12.put("stagingdb", context.stagingdb);

				parentContextMap_tRunJob_12.put("commondb", context.commondb);

				parentContextMap_tRunJob_12.put("localpath", context.localpath);

				parentContextMap_tRunJob_12.put("port", context.port);

				parentContextMap_tRunJob_12.put("host", context.host);

				parentContextMap_tRunJob_12.put("rowCountRejectedFirm",
						context.rowCountRejectedFirm);

				parentContextMap_tRunJob_12.put("firm", context.firm);

				parentContextMap_tRunJob_12.put("rowCountFirm",
						context.rowCountFirm);

				parentContextMap_tRunJob_12.put("rowCountStaging",
						context.rowCountStaging);

				parentContextMap_tRunJob_12.put("rowCountTSV",
						context.rowCountTSV);

				parentContextMap_tRunJob_12.put("rowCountUpdated",
						context.rowCountUpdated);

				parentContextMap_tRunJob_12.put("teamPreferenceOption",
						context.teamPreferenceOption);

				parentContextMap_tRunJob_12.put("date", context.date);

				parentContextMap_tRunJob_12.put("firmId", context.firmId);

				parentContextMap_tRunJob_12.put("pathforlocal",
						context.pathforlocal);

				parentContextMap_tRunJob_12.put("filestorage",
						context.filestorage);

				parentContextMap_tRunJob_12.put("filestorage2",
						context.filestorage2);

				parentContextMap_tRunJob_12.put("firmint", context.firmint);

				parentContextMap_tRunJob_12.put("firmint2", context.firmint2);

				parentContextMap_tRunJob_12.put("a", context.a);

				parentContextMap_tRunJob_12.put("b", context.b);

				parentContextMap_tRunJob_12.put("c", context.c);

				parentContextMap_tRunJob_12.put("d", context.d);

				parentContextMap_tRunJob_12.put("e", context.e);

				parentContextMap_tRunJob_12.put("f", context.f);

				parentContextMap_tRunJob_12.put("g", context.g);

				parentContextMap_tRunJob_12.put("firmint3", context.firmint3);

				parentContextMap_tRunJob_12.put("firmids", context.firmids);

				parentContextMap_tRunJob_12.put("RealizedGainLossPath",
						context.RealizedGainLossPath);

				parentContextMap_tRunJob_12.put("h", context.h);

				parentContextMap_tRunJob_12.put("bucket", context.bucket);

				parentContextMap_tRunJob_12.put("loadType", context.loadType);

				Object obj_tRunJob_12 = null;

				reliazedgainloss.position_staging_to_firm_0_1.Position_staging_to_firm childJob_tRunJob_12 = new reliazedgainloss.position_staging_to_firm_0_1.Position_staging_to_firm();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_12 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_12) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_12 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_12 : talendDataSources_tRunJob_12
							.entrySet()) {
						dataSources_tRunJob_12.put(
								talendDataSourceEntry_tRunJob_12.getKey(),
								talendDataSourceEntry_tRunJob_12.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_12.setDataSources(dataSources_tRunJob_12);
				}

				childJob_tRunJob_12.parentContextMap = parentContextMap_tRunJob_12;

				String[][] childReturn_tRunJob_12 = childJob_tRunJob_12
						.runJob((String[]) paraList_tRunJob_12
								.toArray(new String[paraList_tRunJob_12.size()]));

				errorCode = childJob_tRunJob_12.getErrorCode();

				if (childJob_tRunJob_12.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_12_CHILD_RETURN_CODE",
							childJob_tRunJob_12.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_12
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_12_CHILD_RETURN_CODE",
							childJob_tRunJob_12.getErrorCode());
				}
				if (childJob_tRunJob_12.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_12_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_12.getExceptionStackTrace());
				}

				if (childJob_tRunJob_12.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_12.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_12++;

				/**
				 * [tRunJob_12 main ] stop
				 */

				/**
				 * [tRunJob_12 end ] start
				 */

				currentComponent = "tRunJob_12";

				ok_Hash.put("tRunJob_12", true);
				end_Hash.put("tRunJob_12", System.currentTimeMillis());

				if (context.loadType.equals("full")) {

					tRunJob_1Process(globalMap);
				}

				if (context.loadType.equals("partial")) {

					tRunJob_6Process(globalMap);
				}

				/**
				 * [tRunJob_12 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_12 finally ] start
				 */

				currentComponent = "tRunJob_12";

				/**
				 * [tRunJob_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}

				parentContextMap_tRunJob_1.put("serverIp", context.serverIp);

				parentContextMap_tRunJob_1.put("database", context.database);

				parentContextMap_tRunJob_1.put("filepath_advisor",
						context.filepath_advisor);

				parentContextMap_tRunJob_1.put("positionpath",
						context.positionpath);

				parentContextMap_tRunJob_1.put("custodianpath",
						context.custodianpath);

				parentContextMap_tRunJob_1
						.put("taxlotpath", context.taxlotpath);

				parentContextMap_tRunJob_1.put("transactionpath",
						context.transactionpath);

				parentContextMap_tRunJob_1.put("securitypath",
						context.securitypath);

				parentContextMap_tRunJob_1.put("accountpath",
						context.accountpath);

				parentContextMap_tRunJob_1.put("inputDir", context.inputDir);

				parentContextMap_tRunJob_1.put("username", context.username);

				parentContextMap_tRunJob_1.put("password", context.password);

				parentContextMap_tRunJob_1
						.put("contextDir", context.contextDir);

				parentContextMap_tRunJob_1.put("stagingdb", context.stagingdb);

				parentContextMap_tRunJob_1.put("commondb", context.commondb);

				parentContextMap_tRunJob_1.put("localpath", context.localpath);

				parentContextMap_tRunJob_1.put("port", context.port);

				parentContextMap_tRunJob_1.put("host", context.host);

				parentContextMap_tRunJob_1.put("rowCountRejectedFirm",
						context.rowCountRejectedFirm);

				parentContextMap_tRunJob_1.put("firm", context.firm);

				parentContextMap_tRunJob_1.put("rowCountFirm",
						context.rowCountFirm);

				parentContextMap_tRunJob_1.put("rowCountStaging",
						context.rowCountStaging);

				parentContextMap_tRunJob_1.put("rowCountTSV",
						context.rowCountTSV);

				parentContextMap_tRunJob_1.put("rowCountUpdated",
						context.rowCountUpdated);

				parentContextMap_tRunJob_1.put("teamPreferenceOption",
						context.teamPreferenceOption);

				parentContextMap_tRunJob_1.put("date", context.date);

				parentContextMap_tRunJob_1.put("firmId", context.firmId);

				parentContextMap_tRunJob_1.put("pathforlocal",
						context.pathforlocal);

				parentContextMap_tRunJob_1.put("filestorage",
						context.filestorage);

				parentContextMap_tRunJob_1.put("filestorage2",
						context.filestorage2);

				parentContextMap_tRunJob_1.put("firmint", context.firmint);

				parentContextMap_tRunJob_1.put("firmint2", context.firmint2);

				parentContextMap_tRunJob_1.put("a", context.a);

				parentContextMap_tRunJob_1.put("b", context.b);

				parentContextMap_tRunJob_1.put("c", context.c);

				parentContextMap_tRunJob_1.put("d", context.d);

				parentContextMap_tRunJob_1.put("e", context.e);

				parentContextMap_tRunJob_1.put("f", context.f);

				parentContextMap_tRunJob_1.put("g", context.g);

				parentContextMap_tRunJob_1.put("firmint3", context.firmint3);

				parentContextMap_tRunJob_1.put("firmids", context.firmids);

				parentContextMap_tRunJob_1.put("RealizedGainLossPath",
						context.RealizedGainLossPath);

				parentContextMap_tRunJob_1.put("h", context.h);

				parentContextMap_tRunJob_1.put("bucket", context.bucket);

				parentContextMap_tRunJob_1.put("loadType", context.loadType);

				Object obj_tRunJob_1 = null;

				reliazedgainloss.taxlot_transaction_staging_to_firm_0_1.TaxLot_transaction_staging_to_firm childJob_tRunJob_1 = new reliazedgainloss.taxlot_transaction_staging_to_firm_0_1.TaxLot_transaction_staging_to_firm();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_5 begin ] start
				 */

				ok_Hash.put("tRunJob_5", false);
				start_Hash.put("tRunJob_5", System.currentTimeMillis());

				currentComponent = "tRunJob_5";

				int tos_count_tRunJob_5 = 0;

				/**
				 * [tRunJob_5 begin ] stop
				 */

				/**
				 * [tRunJob_5 main ] start
				 */

				currentComponent = "tRunJob_5";

				java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();

				paraList_tRunJob_5.add("--father_pid=" + pid);

				paraList_tRunJob_5.add("--root_pid=" + rootPid);

				paraList_tRunJob_5.add("--father_node=tRunJob_5");

				paraList_tRunJob_5.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_5.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_5.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_5 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_5 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_5".equals(tRunJobName_tRunJob_5)
						&& childResumePath_tRunJob_5 != null) {
					paraList_tRunJob_5
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_5");

				java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_5 = context
						.propertyNames();
				while (propertyNames_tRunJob_5.hasMoreElements()) {
					String key_tRunJob_5 = (String) propertyNames_tRunJob_5
							.nextElement();
					Object value_tRunJob_5 = (Object) context
							.get(key_tRunJob_5);
					paraList_tRunJob_5.add("--context_param " + key_tRunJob_5
							+ "=" + value_tRunJob_5);
				}

				parentContextMap_tRunJob_5.put("serverIp", context.serverIp);

				parentContextMap_tRunJob_5.put("database", context.database);

				parentContextMap_tRunJob_5.put("filepath_advisor",
						context.filepath_advisor);

				parentContextMap_tRunJob_5.put("positionpath",
						context.positionpath);

				parentContextMap_tRunJob_5.put("custodianpath",
						context.custodianpath);

				parentContextMap_tRunJob_5
						.put("taxlotpath", context.taxlotpath);

				parentContextMap_tRunJob_5.put("transactionpath",
						context.transactionpath);

				parentContextMap_tRunJob_5.put("securitypath",
						context.securitypath);

				parentContextMap_tRunJob_5.put("accountpath",
						context.accountpath);

				parentContextMap_tRunJob_5.put("inputDir", context.inputDir);

				parentContextMap_tRunJob_5.put("username", context.username);

				parentContextMap_tRunJob_5.put("password", context.password);

				parentContextMap_tRunJob_5
						.put("contextDir", context.contextDir);

				parentContextMap_tRunJob_5.put("stagingdb", context.stagingdb);

				parentContextMap_tRunJob_5.put("commondb", context.commondb);

				parentContextMap_tRunJob_5.put("localpath", context.localpath);

				parentContextMap_tRunJob_5.put("port", context.port);

				parentContextMap_tRunJob_5.put("host", context.host);

				parentContextMap_tRunJob_5.put("rowCountRejectedFirm",
						context.rowCountRejectedFirm);

				parentContextMap_tRunJob_5.put("firm", context.firm);

				parentContextMap_tRunJob_5.put("rowCountFirm",
						context.rowCountFirm);

				parentContextMap_tRunJob_5.put("rowCountStaging",
						context.rowCountStaging);

				parentContextMap_tRunJob_5.put("rowCountTSV",
						context.rowCountTSV);

				parentContextMap_tRunJob_5.put("rowCountUpdated",
						context.rowCountUpdated);

				parentContextMap_tRunJob_5.put("teamPreferenceOption",
						context.teamPreferenceOption);

				parentContextMap_tRunJob_5.put("date", context.date);

				parentContextMap_tRunJob_5.put("firmId", context.firmId);

				parentContextMap_tRunJob_5.put("pathforlocal",
						context.pathforlocal);

				parentContextMap_tRunJob_5.put("filestorage",
						context.filestorage);

				parentContextMap_tRunJob_5.put("filestorage2",
						context.filestorage2);

				parentContextMap_tRunJob_5.put("firmint", context.firmint);

				parentContextMap_tRunJob_5.put("firmint2", context.firmint2);

				parentContextMap_tRunJob_5.put("a", context.a);

				parentContextMap_tRunJob_5.put("b", context.b);

				parentContextMap_tRunJob_5.put("c", context.c);

				parentContextMap_tRunJob_5.put("d", context.d);

				parentContextMap_tRunJob_5.put("e", context.e);

				parentContextMap_tRunJob_5.put("f", context.f);

				parentContextMap_tRunJob_5.put("g", context.g);

				parentContextMap_tRunJob_5.put("firmint3", context.firmint3);

				parentContextMap_tRunJob_5.put("firmids", context.firmids);

				parentContextMap_tRunJob_5.put("RealizedGainLossPath",
						context.RealizedGainLossPath);

				parentContextMap_tRunJob_5.put("h", context.h);

				parentContextMap_tRunJob_5.put("bucket", context.bucket);

				parentContextMap_tRunJob_5.put("loadType", context.loadType);

				Object obj_tRunJob_5 = null;

				reliazedgainloss.realizedgainstagingtofirm_0_1.RealizedGainStagingToFirm childJob_tRunJob_5 = new reliazedgainloss.realizedgainstagingtofirm_0_1.RealizedGainStagingToFirm();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_5) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
							.entrySet()) {
						dataSources_tRunJob_5.put(
								talendDataSourceEntry_tRunJob_5.getKey(),
								talendDataSourceEntry_tRunJob_5.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
				}

				childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;

				String[][] childReturn_tRunJob_5 = childJob_tRunJob_5
						.runJob((String[]) paraList_tRunJob_5
								.toArray(new String[paraList_tRunJob_5.size()]));

				errorCode = childJob_tRunJob_5.getErrorCode();

				if (childJob_tRunJob_5.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_5_CHILD_RETURN_CODE",
							childJob_tRunJob_5.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_5
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_5_CHILD_RETURN_CODE",
							childJob_tRunJob_5.getErrorCode());
				}
				if (childJob_tRunJob_5.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_5.getExceptionStackTrace());
				}

				if (childJob_tRunJob_5.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_5.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_5++;

				/**
				 * [tRunJob_5 main ] stop
				 */

				/**
				 * [tRunJob_5 end ] start
				 */

				currentComponent = "tRunJob_5";

				ok_Hash.put("tRunJob_5", true);
				end_Hash.put("tRunJob_5", System.currentTimeMillis());

				/**
				 * [tRunJob_5 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_5:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_5 finally ] start
				 */

				currentComponent = "tRunJob_5";

				/**
				 * [tRunJob_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
						&& childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_3 = context
						.propertyNames();
				while (propertyNames_tRunJob_3.hasMoreElements()) {
					String key_tRunJob_3 = (String) propertyNames_tRunJob_3
							.nextElement();
					Object value_tRunJob_3 = (Object) context
							.get(key_tRunJob_3);
					paraList_tRunJob_3.add("--context_param " + key_tRunJob_3
							+ "=" + value_tRunJob_3);
				}

				parentContextMap_tRunJob_3.put("serverIp", context.serverIp);

				parentContextMap_tRunJob_3.put("database", context.database);

				parentContextMap_tRunJob_3.put("filepath_advisor",
						context.filepath_advisor);

				parentContextMap_tRunJob_3.put("positionpath",
						context.positionpath);

				parentContextMap_tRunJob_3.put("custodianpath",
						context.custodianpath);

				parentContextMap_tRunJob_3
						.put("taxlotpath", context.taxlotpath);

				parentContextMap_tRunJob_3.put("transactionpath",
						context.transactionpath);

				parentContextMap_tRunJob_3.put("securitypath",
						context.securitypath);

				parentContextMap_tRunJob_3.put("accountpath",
						context.accountpath);

				parentContextMap_tRunJob_3.put("inputDir", context.inputDir);

				parentContextMap_tRunJob_3.put("username", context.username);

				parentContextMap_tRunJob_3.put("password", context.password);

				parentContextMap_tRunJob_3
						.put("contextDir", context.contextDir);

				parentContextMap_tRunJob_3.put("stagingdb", context.stagingdb);

				parentContextMap_tRunJob_3.put("commondb", context.commondb);

				parentContextMap_tRunJob_3.put("localpath", context.localpath);

				parentContextMap_tRunJob_3.put("port", context.port);

				parentContextMap_tRunJob_3.put("host", context.host);

				parentContextMap_tRunJob_3.put("rowCountRejectedFirm",
						context.rowCountRejectedFirm);

				parentContextMap_tRunJob_3.put("firm", context.firm);

				parentContextMap_tRunJob_3.put("rowCountFirm",
						context.rowCountFirm);

				parentContextMap_tRunJob_3.put("rowCountStaging",
						context.rowCountStaging);

				parentContextMap_tRunJob_3.put("rowCountTSV",
						context.rowCountTSV);

				parentContextMap_tRunJob_3.put("rowCountUpdated",
						context.rowCountUpdated);

				parentContextMap_tRunJob_3.put("teamPreferenceOption",
						context.teamPreferenceOption);

				parentContextMap_tRunJob_3.put("date", context.date);

				parentContextMap_tRunJob_3.put("firmId", context.firmId);

				parentContextMap_tRunJob_3.put("pathforlocal",
						context.pathforlocal);

				parentContextMap_tRunJob_3.put("filestorage",
						context.filestorage);

				parentContextMap_tRunJob_3.put("filestorage2",
						context.filestorage2);

				parentContextMap_tRunJob_3.put("firmint", context.firmint);

				parentContextMap_tRunJob_3.put("firmint2", context.firmint2);

				parentContextMap_tRunJob_3.put("a", context.a);

				parentContextMap_tRunJob_3.put("b", context.b);

				parentContextMap_tRunJob_3.put("c", context.c);

				parentContextMap_tRunJob_3.put("d", context.d);

				parentContextMap_tRunJob_3.put("e", context.e);

				parentContextMap_tRunJob_3.put("f", context.f);

				parentContextMap_tRunJob_3.put("g", context.g);

				parentContextMap_tRunJob_3.put("firmint3", context.firmint3);

				parentContextMap_tRunJob_3.put("firmids", context.firmids);

				parentContextMap_tRunJob_3.put("RealizedGainLossPath",
						context.RealizedGainLossPath);

				parentContextMap_tRunJob_3.put("h", context.h);

				parentContextMap_tRunJob_3.put("bucket", context.bucket);

				parentContextMap_tRunJob_3.put("loadType", context.loadType);

				Object obj_tRunJob_3 = null;

				reliazedgainloss.rejected_rows_catch_for_non_permitted_orionconnectid_0_1.Rejected_rows_catch_for_non_permitted_orionConnectId childJob_tRunJob_3 = new reliazedgainloss.rejected_rows_catch_for_non_permitted_orionconnectid_0_1.Rejected_rows_catch_for_non_permitted_orionConnectId();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(
								talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}

				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3
								.toArray(new String[paraList_tRunJob_3.size()]));

				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_3
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_3.getExceptionStackTrace());
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tAmazonAuroraInput_1_inProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tMysqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlConnection_1 begin ] start
				 */

				ok_Hash.put("tMysqlConnection_1", false);
				start_Hash
						.put("tMysqlConnection_1", System.currentTimeMillis());

				currentComponent = "tMysqlConnection_1";

				int tos_count_tMysqlConnection_1 = 0;

				String properties_tMysqlConnection_1 = "allowMultiQueries=true";
				if (properties_tMysqlConnection_1 == null
						|| properties_tMysqlConnection_1.trim().length() == 0) {
					properties_tMysqlConnection_1 += "rewriteBatchedStatements=true";
				} else if (properties_tMysqlConnection_1 != null
						&& !properties_tMysqlConnection_1
								.contains("rewriteBatchedStatements")) {
					properties_tMysqlConnection_1 += "&rewriteBatchedStatements=true";
				}

				String url_tMysqlConnection_1 = "jdbc:mysql://" + context.host
						+ ":" + context.port + "/" + context.database + "?"
						+ properties_tMysqlConnection_1;

				String dbUser_tMysqlConnection_1 = context.username;

				final String decryptedPassword_tMysqlConnection_1 = context.password;
				String dbPwd_tMysqlConnection_1 = decryptedPassword_tMysqlConnection_1;

				java.sql.Connection conn_tMysqlConnection_1 = null;

				String driverClass_tMysqlConnection_1 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlConnection_1);

				conn_tMysqlConnection_1 = java.sql.DriverManager.getConnection(
						url_tMysqlConnection_1, dbUser_tMysqlConnection_1,
						dbPwd_tMysqlConnection_1);

				globalMap.put("conn_tMysqlConnection_1",
						conn_tMysqlConnection_1);
				if (null != conn_tMysqlConnection_1) {

					conn_tMysqlConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tMysqlConnection_1",
						conn_tMysqlConnection_1);

				globalMap.put("db_tMysqlConnection_1", context.database);

				/**
				 * [tMysqlConnection_1 begin ] stop
				 */

				/**
				 * [tMysqlConnection_1 main ] start
				 */

				currentComponent = "tMysqlConnection_1";

				tos_count_tMysqlConnection_1++;

				/**
				 * [tMysqlConnection_1 main ] stop
				 */

				/**
				 * [tMysqlConnection_1 end ] start
				 */

				currentComponent = "tMysqlConnection_1";

				ok_Hash.put("tMysqlConnection_1", true);
				end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());

				/**
				 * [tMysqlConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tMysqlConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tMysqlRow_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlConnection_1 finally ] start
				 */

				currentComponent = "tMysqlConnection_1";

				/**
				 * [tMysqlConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tMysqlRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlRow_2 begin ] start
				 */

				ok_Hash.put("tMysqlRow_2", false);
				start_Hash.put("tMysqlRow_2", System.currentTimeMillis());

				currentComponent = "tMysqlRow_2";

				int tos_count_tMysqlRow_2 = 0;

				java.sql.Connection conn_tMysqlRow_2 = null;
				String query_tMysqlRow_2 = "";
				boolean whetherReject_tMysqlRow_2 = false;
				conn_tMysqlRow_2 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");

				java.sql.Statement stmt_tMysqlRow_2 = conn_tMysqlRow_2
						.createStatement();

				/**
				 * [tMysqlRow_2 begin ] stop
				 */

				/**
				 * [tMysqlRow_2 main ] start
				 */

				currentComponent = "tMysqlRow_2";

				query_tMysqlRow_2 = "UPDATE account SET isDisabled = 1 , disabledReason = ' Portfolio : importError ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM importError_Portfolio);\nUPDATE account SET isDisabled = 1 , disabledReason = ' Portfolio : noDataFound ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM noDataFound_Portfolio);\nUPDATE account SET isDisabled = 1 , disabledReason = ' Position : reject ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM reject_Position);\nUPDATE account SET isDisabled = 1 , disabledReason = ' Position : importError ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM importError_Position);\nUPDATE account SET isDisabled = 1 , disabledReason = ' Position : noDataFound ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM noDataFound_Position);\nUPDATE account SET isDisabled = 1 , disabledReason = ' TaxLot : reject ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM reject_TaxLot);\nUPDATE account SET isDisabled = 1 , disabledReason = ' TaxLot : importError ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM importError_TaxLot);\nUPDATE account SET isDisabled = 1 , disabledReason = ' TaxLot : noDataFound ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM noDataFound_TaxLot);\nUPDATE account SET isDisabled = 1 , disabledReason = ' Transaction : reject ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM reject_Transaction);\nUPDATE account SET isDisabled = 1 , disabledReason = ' Transaction : importError ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM importError_Transaction);\nUPDATE account SET isDisabled = 1 , disabledReason = ' Transaction : noDataFound ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM noDataFound_Transaction);\nUPDATE account SET isDisabled = 1 , disabledReason = ' RealizedGainLo : reject ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM reject_ReliazedGainLoss);\nUPDATE account SET isDisabled = 1 , disabledReason = ' RealizedGainLo : importError ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM importError_ReliazedGainLoss);\nUPDATE account SET isDisabled = 1 , disabledReason = ' RealizedGainLo : noDataFound ' WHERE accountId IN  ( SELECT DISTINCT accountId FROM noDataFound_ReliazedGainLoss);";
				whetherReject_tMysqlRow_2 = false;
				globalMap.put("tMysqlRow_2_QUERY", query_tMysqlRow_2);
				try {
					stmt_tMysqlRow_2.execute(query_tMysqlRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tMysqlRow_2 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tMysqlRow_2) {

				}

				tos_count_tMysqlRow_2++;

				/**
				 * [tMysqlRow_2 main ] stop
				 */

				/**
				 * [tMysqlRow_2 end ] start
				 */

				currentComponent = "tMysqlRow_2";

				stmt_tMysqlRow_2.close();

				ok_Hash.put("tMysqlRow_2", true);
				end_Hash.put("tMysqlRow_2", System.currentTimeMillis());

				/**
				 * [tMysqlRow_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlRow_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlRow_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlRow_2 finally ] start
				 */

				currentComponent = "tMysqlRow_2";

				/**
				 * [tMysqlRow_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlRow_2_SUBPROCESS_STATE", 1);
	}

	public void tMysqlRow_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlRow_3 begin ] start
				 */

				ok_Hash.put("tMysqlRow_3", false);
				start_Hash.put("tMysqlRow_3", System.currentTimeMillis());

				currentComponent = "tMysqlRow_3";

				int tos_count_tMysqlRow_3 = 0;

				java.sql.Connection conn_tMysqlRow_3 = null;
				String query_tMysqlRow_3 = "";
				boolean whetherReject_tMysqlRow_3 = false;
				conn_tMysqlRow_3 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");

				java.sql.Statement stmt_tMysqlRow_3 = conn_tMysqlRow_3
						.createStatement();

				/**
				 * [tMysqlRow_3 begin ] stop
				 */

				/**
				 * [tMysqlRow_3 main ] start
				 */

				currentComponent = "tMysqlRow_3";

				query_tMysqlRow_3 = "UPDATE portfolio SET isDisabled = 1 , disabledReason = ' one or more account is disabled ' WHERE id IN  ( SELECT DISTINCT portfolioId FROM account WHERE isDisabled =1);";
				whetherReject_tMysqlRow_3 = false;
				globalMap.put("tMysqlRow_3_QUERY", query_tMysqlRow_3);
				try {
					stmt_tMysqlRow_3.execute(query_tMysqlRow_3);

				} catch (java.lang.Exception e) {
					whetherReject_tMysqlRow_3 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tMysqlRow_3) {

				}

				tos_count_tMysqlRow_3++;

				/**
				 * [tMysqlRow_3 main ] stop
				 */

				/**
				 * [tMysqlRow_3 end ] start
				 */

				currentComponent = "tMysqlRow_3";

				stmt_tMysqlRow_3.close();

				ok_Hash.put("tMysqlRow_3", true);
				end_Hash.put("tMysqlRow_3", System.currentTimeMillis());

				/**
				 * [tMysqlRow_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlRow_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlCommit_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlRow_3 finally ] start
				 */

				currentComponent = "tMysqlRow_3";

				/**
				 * [tMysqlRow_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlRow_3_SUBPROCESS_STATE", 1);
	}

	public void tMysqlCommit_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlCommit_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlCommit_2 begin ] start
				 */

				ok_Hash.put("tMysqlCommit_2", false);
				start_Hash.put("tMysqlCommit_2", System.currentTimeMillis());

				currentComponent = "tMysqlCommit_2";

				int tos_count_tMysqlCommit_2 = 0;

				/**
				 * [tMysqlCommit_2 begin ] stop
				 */

				/**
				 * [tMysqlCommit_2 main ] start
				 */

				currentComponent = "tMysqlCommit_2";

				java.sql.Connection conn_tMysqlCommit_2 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");

				if (conn_tMysqlCommit_2 != null
						&& !conn_tMysqlCommit_2.isClosed()) {

					conn_tMysqlCommit_2.commit();

				}

				tos_count_tMysqlCommit_2++;

				/**
				 * [tMysqlCommit_2 main ] stop
				 */

				/**
				 * [tMysqlCommit_2 end ] start
				 */

				currentComponent = "tMysqlCommit_2";

				ok_Hash.put("tMysqlCommit_2", true);
				end_Hash.put("tMysqlCommit_2", System.currentTimeMillis());

				/**
				 * [tMysqlCommit_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlCommit_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlConnection_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlCommit_2 finally ] start
				 */

				currentComponent = "tMysqlCommit_2";

				/**
				 * [tMysqlCommit_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlCommit_2_SUBPROCESS_STATE", 1);
	}

	public void tMysqlConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlConnection_2 begin ] start
				 */

				ok_Hash.put("tMysqlConnection_2", false);
				start_Hash
						.put("tMysqlConnection_2", System.currentTimeMillis());

				currentComponent = "tMysqlConnection_2";

				int tos_count_tMysqlConnection_2 = 0;

				String properties_tMysqlConnection_2 = "allowMultiQueries=true";
				if (properties_tMysqlConnection_2 == null
						|| properties_tMysqlConnection_2.trim().length() == 0) {
					properties_tMysqlConnection_2 += "rewriteBatchedStatements=true";
				} else if (properties_tMysqlConnection_2 != null
						&& !properties_tMysqlConnection_2
								.contains("rewriteBatchedStatements")) {
					properties_tMysqlConnection_2 += "&rewriteBatchedStatements=true";
				}

				String url_tMysqlConnection_2 = "jdbc:mysql://" + context.host
						+ ":" + context.port + "/" + context.stagingdb + "?"
						+ properties_tMysqlConnection_2;

				String dbUser_tMysqlConnection_2 = context.username;

				final String decryptedPassword_tMysqlConnection_2 = context.password;
				String dbPwd_tMysqlConnection_2 = decryptedPassword_tMysqlConnection_2;

				java.sql.Connection conn_tMysqlConnection_2 = null;

				String driverClass_tMysqlConnection_2 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlConnection_2);

				conn_tMysqlConnection_2 = java.sql.DriverManager.getConnection(
						url_tMysqlConnection_2, dbUser_tMysqlConnection_2,
						dbPwd_tMysqlConnection_2);

				globalMap.put("conn_tMysqlConnection_2",
						conn_tMysqlConnection_2);
				if (null != conn_tMysqlConnection_2) {

					conn_tMysqlConnection_2.setAutoCommit(false);
				}

				globalMap.put("conn_tMysqlConnection_2",
						conn_tMysqlConnection_2);

				globalMap.put("db_tMysqlConnection_2", context.stagingdb);

				/**
				 * [tMysqlConnection_2 begin ] stop
				 */

				/**
				 * [tMysqlConnection_2 main ] start
				 */

				currentComponent = "tMysqlConnection_2";

				tos_count_tMysqlConnection_2++;

				/**
				 * [tMysqlConnection_2 main ] stop
				 */

				/**
				 * [tMysqlConnection_2 end ] start
				 */

				currentComponent = "tMysqlConnection_2";

				ok_Hash.put("tMysqlConnection_2", true);
				end_Hash.put("tMysqlConnection_2", System.currentTimeMillis());

				/**
				 * [tMysqlConnection_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tMysqlConnection_2:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tMysqlRow_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlConnection_2 finally ] start
				 */

				currentComponent = "tMysqlConnection_2";

				/**
				 * [tMysqlConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tMysqlRow_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlRow_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlRow_4 begin ] start
				 */

				ok_Hash.put("tMysqlRow_4", false);
				start_Hash.put("tMysqlRow_4", System.currentTimeMillis());

				currentComponent = "tMysqlRow_4";

				int tos_count_tMysqlRow_4 = 0;

				java.sql.Connection conn_tMysqlRow_4 = null;
				String query_tMysqlRow_4 = "";
				boolean whetherReject_tMysqlRow_4 = false;
				conn_tMysqlRow_4 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_2");

				java.sql.Statement stmt_tMysqlRow_4 = conn_tMysqlRow_4
						.createStatement();

				/**
				 * [tMysqlRow_4 begin ] stop
				 */

				/**
				 * [tMysqlRow_4 main ] start
				 */

				currentComponent = "tMysqlRow_4";

				query_tMysqlRow_4 = "drop table advisor_" + context.firmId
						+ "_" + context.date + ";drop table custodian_"
						+ context.firmId + "_" + context.date
						+ ";drop table account_" + context.firmId + "_"
						+ context.date + ";drop table position_"
						+ context.firmId + "_" + context.date
						+ ";drop table security_" + context.firmId + "_"
						+ context.date + ";drop table taxLots_"
						+ context.firmId + "_" + context.date
						+ ";drop table transaction_" + context.firmId + "_"
						+ context.date + ";drop table realizedgainloss_"
						+ context.firmId + "_" + context.date + ";";
				whetherReject_tMysqlRow_4 = false;
				globalMap.put("tMysqlRow_4_QUERY", query_tMysqlRow_4);
				try {
					stmt_tMysqlRow_4.execute(query_tMysqlRow_4);

				} catch (java.lang.Exception e) {
					whetherReject_tMysqlRow_4 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tMysqlRow_4) {

				}

				tos_count_tMysqlRow_4++;

				/**
				 * [tMysqlRow_4 main ] stop
				 */

				/**
				 * [tMysqlRow_4 end ] start
				 */

				currentComponent = "tMysqlRow_4";

				stmt_tMysqlRow_4.close();

				ok_Hash.put("tMysqlRow_4", true);
				end_Hash.put("tMysqlRow_4", System.currentTimeMillis());

				/**
				 * [tMysqlRow_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMysqlRow_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlCommit_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlRow_4 finally ] start
				 */

				currentComponent = "tMysqlRow_4";

				/**
				 * [tMysqlRow_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlRow_4_SUBPROCESS_STATE", 1);
	}

	public void tMysqlCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlCommit_1 begin ] start
				 */

				ok_Hash.put("tMysqlCommit_1", false);
				start_Hash.put("tMysqlCommit_1", System.currentTimeMillis());

				currentComponent = "tMysqlCommit_1";

				int tos_count_tMysqlCommit_1 = 0;

				/**
				 * [tMysqlCommit_1 begin ] stop
				 */

				/**
				 * [tMysqlCommit_1 main ] start
				 */

				currentComponent = "tMysqlCommit_1";

				java.sql.Connection conn_tMysqlCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_2");

				if (conn_tMysqlCommit_1 != null
						&& !conn_tMysqlCommit_1.isClosed()) {

					try {

						conn_tMysqlCommit_1.commit();

					} finally {

						conn_tMysqlCommit_1.close();

					}

				}

				tos_count_tMysqlCommit_1++;

				/**
				 * [tMysqlCommit_1 main ] stop
				 */

				/**
				 * [tMysqlCommit_1 end ] start
				 */

				currentComponent = "tMysqlCommit_1";

				ok_Hash.put("tMysqlCommit_1", true);
				end_Hash.put("tMysqlCommit_1", System.currentTimeMillis());

				/**
				 * [tMysqlCommit_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlCommit_1 finally ] start
				 */

				currentComponent = "tMysqlCommit_1";

				/**
				 * [tMysqlCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_6 begin ] start
				 */

				ok_Hash.put("tRunJob_6", false);
				start_Hash.put("tRunJob_6", System.currentTimeMillis());

				currentComponent = "tRunJob_6";

				int tos_count_tRunJob_6 = 0;

				/**
				 * [tRunJob_6 begin ] stop
				 */

				/**
				 * [tRunJob_6 main ] start
				 */

				currentComponent = "tRunJob_6";

				java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();

				paraList_tRunJob_6.add("--father_pid=" + pid);

				paraList_tRunJob_6.add("--root_pid=" + rootPid);

				paraList_tRunJob_6.add("--father_node=tRunJob_6");

				paraList_tRunJob_6.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_6.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_6.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_6 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_6 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_6".equals(tRunJobName_tRunJob_6)
						&& childResumePath_tRunJob_6 != null) {
					paraList_tRunJob_6
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_6");

				java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_6 = context
						.propertyNames();
				while (propertyNames_tRunJob_6.hasMoreElements()) {
					String key_tRunJob_6 = (String) propertyNames_tRunJob_6
							.nextElement();
					Object value_tRunJob_6 = (Object) context
							.get(key_tRunJob_6);
					paraList_tRunJob_6.add("--context_param " + key_tRunJob_6
							+ "=" + value_tRunJob_6);
				}

				parentContextMap_tRunJob_6.put("serverIp", context.serverIp);

				parentContextMap_tRunJob_6.put("database", context.database);

				parentContextMap_tRunJob_6.put("filepath_advisor",
						context.filepath_advisor);

				parentContextMap_tRunJob_6.put("positionpath",
						context.positionpath);

				parentContextMap_tRunJob_6.put("custodianpath",
						context.custodianpath);

				parentContextMap_tRunJob_6
						.put("taxlotpath", context.taxlotpath);

				parentContextMap_tRunJob_6.put("transactionpath",
						context.transactionpath);

				parentContextMap_tRunJob_6.put("securitypath",
						context.securitypath);

				parentContextMap_tRunJob_6.put("accountpath",
						context.accountpath);

				parentContextMap_tRunJob_6.put("inputDir", context.inputDir);

				parentContextMap_tRunJob_6.put("username", context.username);

				parentContextMap_tRunJob_6.put("password", context.password);

				parentContextMap_tRunJob_6
						.put("contextDir", context.contextDir);

				parentContextMap_tRunJob_6.put("stagingdb", context.stagingdb);

				parentContextMap_tRunJob_6.put("commondb", context.commondb);

				parentContextMap_tRunJob_6.put("localpath", context.localpath);

				parentContextMap_tRunJob_6.put("port", context.port);

				parentContextMap_tRunJob_6.put("host", context.host);

				parentContextMap_tRunJob_6.put("rowCountRejectedFirm",
						context.rowCountRejectedFirm);

				parentContextMap_tRunJob_6.put("firm", context.firm);

				parentContextMap_tRunJob_6.put("rowCountFirm",
						context.rowCountFirm);

				parentContextMap_tRunJob_6.put("rowCountStaging",
						context.rowCountStaging);

				parentContextMap_tRunJob_6.put("rowCountTSV",
						context.rowCountTSV);

				parentContextMap_tRunJob_6.put("rowCountUpdated",
						context.rowCountUpdated);

				parentContextMap_tRunJob_6.put("teamPreferenceOption",
						context.teamPreferenceOption);

				parentContextMap_tRunJob_6.put("date", context.date);

				parentContextMap_tRunJob_6.put("firmId", context.firmId);

				parentContextMap_tRunJob_6.put("pathforlocal",
						context.pathforlocal);

				parentContextMap_tRunJob_6.put("filestorage",
						context.filestorage);

				parentContextMap_tRunJob_6.put("filestorage2",
						context.filestorage2);

				parentContextMap_tRunJob_6.put("firmint", context.firmint);

				parentContextMap_tRunJob_6.put("firmint2", context.firmint2);

				parentContextMap_tRunJob_6.put("a", context.a);

				parentContextMap_tRunJob_6.put("b", context.b);

				parentContextMap_tRunJob_6.put("c", context.c);

				parentContextMap_tRunJob_6.put("d", context.d);

				parentContextMap_tRunJob_6.put("e", context.e);

				parentContextMap_tRunJob_6.put("f", context.f);

				parentContextMap_tRunJob_6.put("g", context.g);

				parentContextMap_tRunJob_6.put("firmint3", context.firmint3);

				parentContextMap_tRunJob_6.put("firmids", context.firmids);

				parentContextMap_tRunJob_6.put("RealizedGainLossPath",
						context.RealizedGainLossPath);

				parentContextMap_tRunJob_6.put("h", context.h);

				parentContextMap_tRunJob_6.put("bucket", context.bucket);

				parentContextMap_tRunJob_6.put("loadType", context.loadType);

				Object obj_tRunJob_6 = null;

				reliazedgainloss.taxlotpartialload_0_1.taxLotPartialLoad childJob_tRunJob_6 = new reliazedgainloss.taxlotpartialload_0_1.taxLotPartialLoad();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_6) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
							.entrySet()) {
						dataSources_tRunJob_6.put(
								talendDataSourceEntry_tRunJob_6.getKey(),
								talendDataSourceEntry_tRunJob_6.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
				}

				childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;

				String[][] childReturn_tRunJob_6 = childJob_tRunJob_6
						.runJob((String[]) paraList_tRunJob_6
								.toArray(new String[paraList_tRunJob_6.size()]));

				errorCode = childJob_tRunJob_6.getErrorCode();

				if (childJob_tRunJob_6.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_6_CHILD_RETURN_CODE",
							childJob_tRunJob_6.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_6
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_6_CHILD_RETURN_CODE",
							childJob_tRunJob_6.getErrorCode());
				}
				if (childJob_tRunJob_6.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_6.getExceptionStackTrace());
				}

				if (childJob_tRunJob_6.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_6.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_6++;

				/**
				 * [tRunJob_6 main ] stop
				 */

				/**
				 * [tRunJob_6 end ] start
				 */

				currentComponent = "tRunJob_6";

				ok_Hash.put("tRunJob_6", true);
				end_Hash.put("tRunJob_6", System.currentTimeMillis());

				/**
				 * [tRunJob_6 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_6:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_6 finally ] start
				 */

				currentComponent = "tRunJob_6";

				/**
				 * [tRunJob_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_8 begin ] start
				 */

				ok_Hash.put("tRunJob_8", false);
				start_Hash.put("tRunJob_8", System.currentTimeMillis());

				currentComponent = "tRunJob_8";

				int tos_count_tRunJob_8 = 0;

				/**
				 * [tRunJob_8 begin ] stop
				 */

				/**
				 * [tRunJob_8 main ] start
				 */

				currentComponent = "tRunJob_8";

				java.util.List<String> paraList_tRunJob_8 = new java.util.ArrayList<String>();

				paraList_tRunJob_8.add("--father_pid=" + pid);

				paraList_tRunJob_8.add("--root_pid=" + rootPid);

				paraList_tRunJob_8.add("--father_node=tRunJob_8");

				paraList_tRunJob_8.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_8.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_8.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_8 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_8 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_8".equals(tRunJobName_tRunJob_8)
						&& childResumePath_tRunJob_8 != null) {
					paraList_tRunJob_8
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_8.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_8");

				java.util.Map<String, Object> parentContextMap_tRunJob_8 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_8 = context
						.propertyNames();
				while (propertyNames_tRunJob_8.hasMoreElements()) {
					String key_tRunJob_8 = (String) propertyNames_tRunJob_8
							.nextElement();
					Object value_tRunJob_8 = (Object) context
							.get(key_tRunJob_8);
					paraList_tRunJob_8.add("--context_param " + key_tRunJob_8
							+ "=" + value_tRunJob_8);
				}

				parentContextMap_tRunJob_8.put("serverIp", context.serverIp);

				parentContextMap_tRunJob_8.put("database", context.database);

				parentContextMap_tRunJob_8.put("filepath_advisor",
						context.filepath_advisor);

				parentContextMap_tRunJob_8.put("positionpath",
						context.positionpath);

				parentContextMap_tRunJob_8.put("custodianpath",
						context.custodianpath);

				parentContextMap_tRunJob_8
						.put("taxlotpath", context.taxlotpath);

				parentContextMap_tRunJob_8.put("transactionpath",
						context.transactionpath);

				parentContextMap_tRunJob_8.put("securitypath",
						context.securitypath);

				parentContextMap_tRunJob_8.put("accountpath",
						context.accountpath);

				parentContextMap_tRunJob_8.put("inputDir", context.inputDir);

				parentContextMap_tRunJob_8.put("username", context.username);

				parentContextMap_tRunJob_8.put("password", context.password);

				parentContextMap_tRunJob_8
						.put("contextDir", context.contextDir);

				parentContextMap_tRunJob_8.put("stagingdb", context.stagingdb);

				parentContextMap_tRunJob_8.put("commondb", context.commondb);

				parentContextMap_tRunJob_8.put("localpath", context.localpath);

				parentContextMap_tRunJob_8.put("port", context.port);

				parentContextMap_tRunJob_8.put("host", context.host);

				parentContextMap_tRunJob_8.put("rowCountRejectedFirm",
						context.rowCountRejectedFirm);

				parentContextMap_tRunJob_8.put("firm", context.firm);

				parentContextMap_tRunJob_8.put("rowCountFirm",
						context.rowCountFirm);

				parentContextMap_tRunJob_8.put("rowCountStaging",
						context.rowCountStaging);

				parentContextMap_tRunJob_8.put("rowCountTSV",
						context.rowCountTSV);

				parentContextMap_tRunJob_8.put("rowCountUpdated",
						context.rowCountUpdated);

				parentContextMap_tRunJob_8.put("teamPreferenceOption",
						context.teamPreferenceOption);

				parentContextMap_tRunJob_8.put("date", context.date);

				parentContextMap_tRunJob_8.put("firmId", context.firmId);

				parentContextMap_tRunJob_8.put("pathforlocal",
						context.pathforlocal);

				parentContextMap_tRunJob_8.put("filestorage",
						context.filestorage);

				parentContextMap_tRunJob_8.put("filestorage2",
						context.filestorage2);

				parentContextMap_tRunJob_8.put("firmint", context.firmint);

				parentContextMap_tRunJob_8.put("firmint2", context.firmint2);

				parentContextMap_tRunJob_8.put("a", context.a);

				parentContextMap_tRunJob_8.put("b", context.b);

				parentContextMap_tRunJob_8.put("c", context.c);

				parentContextMap_tRunJob_8.put("d", context.d);

				parentContextMap_tRunJob_8.put("e", context.e);

				parentContextMap_tRunJob_8.put("f", context.f);

				parentContextMap_tRunJob_8.put("g", context.g);

				parentContextMap_tRunJob_8.put("firmint3", context.firmint3);

				parentContextMap_tRunJob_8.put("firmids", context.firmids);

				parentContextMap_tRunJob_8.put("RealizedGainLossPath",
						context.RealizedGainLossPath);

				parentContextMap_tRunJob_8.put("h", context.h);

				parentContextMap_tRunJob_8.put("bucket", context.bucket);

				parentContextMap_tRunJob_8.put("loadType", context.loadType);

				Object obj_tRunJob_8 = null;

				reliazedgainloss.transactionpartialload_0_1.transactionPartialLoad childJob_tRunJob_8 = new reliazedgainloss.transactionpartialload_0_1.transactionPartialLoad();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_8) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_8 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_8 : talendDataSources_tRunJob_8
							.entrySet()) {
						dataSources_tRunJob_8.put(
								talendDataSourceEntry_tRunJob_8.getKey(),
								talendDataSourceEntry_tRunJob_8.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_8.setDataSources(dataSources_tRunJob_8);
				}

				childJob_tRunJob_8.parentContextMap = parentContextMap_tRunJob_8;

				String[][] childReturn_tRunJob_8 = childJob_tRunJob_8
						.runJob((String[]) paraList_tRunJob_8
								.toArray(new String[paraList_tRunJob_8.size()]));

				errorCode = childJob_tRunJob_8.getErrorCode();

				if (childJob_tRunJob_8.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_8_CHILD_RETURN_CODE",
							childJob_tRunJob_8.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_8
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_8_CHILD_RETURN_CODE",
							childJob_tRunJob_8.getErrorCode());
				}
				if (childJob_tRunJob_8.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_8_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_8.getExceptionStackTrace());
				}

				tos_count_tRunJob_8++;

				/**
				 * [tRunJob_8 main ] stop
				 */

				/**
				 * [tRunJob_8 end ] start
				 */

				currentComponent = "tRunJob_8";

				ok_Hash.put("tRunJob_8", true);
				end_Hash.put("tRunJob_8", System.currentTimeMillis());

				/**
				 * [tRunJob_8 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_8:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_8 finally ] start
				 */

				currentComponent = "tRunJob_8";

				/**
				 * [tRunJob_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_7 begin ] start
				 */

				ok_Hash.put("tRunJob_7", false);
				start_Hash.put("tRunJob_7", System.currentTimeMillis());

				currentComponent = "tRunJob_7";

				int tos_count_tRunJob_7 = 0;

				/**
				 * [tRunJob_7 begin ] stop
				 */

				/**
				 * [tRunJob_7 main ] start
				 */

				currentComponent = "tRunJob_7";

				java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();

				paraList_tRunJob_7.add("--father_pid=" + pid);

				paraList_tRunJob_7.add("--root_pid=" + rootPid);

				paraList_tRunJob_7.add("--father_node=tRunJob_7");

				paraList_tRunJob_7.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_7.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_7.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_7 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_7 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_7".equals(tRunJobName_tRunJob_7)
						&& childResumePath_tRunJob_7 != null) {
					paraList_tRunJob_7
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_7.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_7");

				java.util.Map<String, Object> parentContextMap_tRunJob_7 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_7 = context
						.propertyNames();
				while (propertyNames_tRunJob_7.hasMoreElements()) {
					String key_tRunJob_7 = (String) propertyNames_tRunJob_7
							.nextElement();
					Object value_tRunJob_7 = (Object) context
							.get(key_tRunJob_7);
					paraList_tRunJob_7.add("--context_param " + key_tRunJob_7
							+ "=" + value_tRunJob_7);
				}

				parentContextMap_tRunJob_7.put("serverIp", context.serverIp);

				parentContextMap_tRunJob_7.put("database", context.database);

				parentContextMap_tRunJob_7.put("filepath_advisor",
						context.filepath_advisor);

				parentContextMap_tRunJob_7.put("positionpath",
						context.positionpath);

				parentContextMap_tRunJob_7.put("custodianpath",
						context.custodianpath);

				parentContextMap_tRunJob_7
						.put("taxlotpath", context.taxlotpath);

				parentContextMap_tRunJob_7.put("transactionpath",
						context.transactionpath);

				parentContextMap_tRunJob_7.put("securitypath",
						context.securitypath);

				parentContextMap_tRunJob_7.put("accountpath",
						context.accountpath);

				parentContextMap_tRunJob_7.put("inputDir", context.inputDir);

				parentContextMap_tRunJob_7.put("username", context.username);

				parentContextMap_tRunJob_7.put("password", context.password);

				parentContextMap_tRunJob_7
						.put("contextDir", context.contextDir);

				parentContextMap_tRunJob_7.put("stagingdb", context.stagingdb);

				parentContextMap_tRunJob_7.put("commondb", context.commondb);

				parentContextMap_tRunJob_7.put("localpath", context.localpath);

				parentContextMap_tRunJob_7.put("port", context.port);

				parentContextMap_tRunJob_7.put("host", context.host);

				parentContextMap_tRunJob_7.put("rowCountRejectedFirm",
						context.rowCountRejectedFirm);

				parentContextMap_tRunJob_7.put("firm", context.firm);

				parentContextMap_tRunJob_7.put("rowCountFirm",
						context.rowCountFirm);

				parentContextMap_tRunJob_7.put("rowCountStaging",
						context.rowCountStaging);

				parentContextMap_tRunJob_7.put("rowCountTSV",
						context.rowCountTSV);

				parentContextMap_tRunJob_7.put("rowCountUpdated",
						context.rowCountUpdated);

				parentContextMap_tRunJob_7.put("teamPreferenceOption",
						context.teamPreferenceOption);

				parentContextMap_tRunJob_7.put("date", context.date);

				parentContextMap_tRunJob_7.put("firmId", context.firmId);

				parentContextMap_tRunJob_7.put("pathforlocal",
						context.pathforlocal);

				parentContextMap_tRunJob_7.put("filestorage",
						context.filestorage);

				parentContextMap_tRunJob_7.put("filestorage2",
						context.filestorage2);

				parentContextMap_tRunJob_7.put("firmint", context.firmint);

				parentContextMap_tRunJob_7.put("firmint2", context.firmint2);

				parentContextMap_tRunJob_7.put("a", context.a);

				parentContextMap_tRunJob_7.put("b", context.b);

				parentContextMap_tRunJob_7.put("c", context.c);

				parentContextMap_tRunJob_7.put("d", context.d);

				parentContextMap_tRunJob_7.put("e", context.e);

				parentContextMap_tRunJob_7.put("f", context.f);

				parentContextMap_tRunJob_7.put("g", context.g);

				parentContextMap_tRunJob_7.put("firmint3", context.firmint3);

				parentContextMap_tRunJob_7.put("firmids", context.firmids);

				parentContextMap_tRunJob_7.put("RealizedGainLossPath",
						context.RealizedGainLossPath);

				parentContextMap_tRunJob_7.put("h", context.h);

				parentContextMap_tRunJob_7.put("bucket", context.bucket);

				parentContextMap_tRunJob_7.put("loadType", context.loadType);

				Object obj_tRunJob_7 = null;

				reliazedgainloss.partialloadallcomponentsaftertranactionpartialload_0_1.PartialLoadallcomponentsAfterTranactionPartialLoad childJob_tRunJob_7 = new reliazedgainloss.partialloadallcomponentsaftertranactionpartialload_0_1.PartialLoadallcomponentsAfterTranactionPartialLoad();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_7) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_7 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_7 : talendDataSources_tRunJob_7
							.entrySet()) {
						dataSources_tRunJob_7.put(
								talendDataSourceEntry_tRunJob_7.getKey(),
								talendDataSourceEntry_tRunJob_7.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_7.setDataSources(dataSources_tRunJob_7);
				}

				childJob_tRunJob_7.parentContextMap = parentContextMap_tRunJob_7;

				String[][] childReturn_tRunJob_7 = childJob_tRunJob_7
						.runJob((String[]) paraList_tRunJob_7
								.toArray(new String[paraList_tRunJob_7.size()]));

				errorCode = childJob_tRunJob_7.getErrorCode();

				if (childJob_tRunJob_7.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_7_CHILD_RETURN_CODE",
							childJob_tRunJob_7.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_7
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_7_CHILD_RETURN_CODE",
							childJob_tRunJob_7.getErrorCode());
				}
				if (childJob_tRunJob_7.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_7.getExceptionStackTrace());
				}

				if (childJob_tRunJob_7.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_7.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_7++;

				/**
				 * [tRunJob_7 main ] stop
				 */

				/**
				 * [tRunJob_7 end ] start
				 */

				currentComponent = "tRunJob_7";

				ok_Hash.put("tRunJob_7", true);
				end_Hash.put("tRunJob_7", System.currentTimeMillis());

				/**
				 * [tRunJob_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_7 finally ] start
				 */

				currentComponent = "tRunJob_7";

				/**
				 * [tRunJob_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.firm == null) ? 0 : this.firm.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.firm == null) {
				if (other.firm != null)
					return false;

			} else if (!this.firm.equals(other.firm))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.firm = this.firm;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.firm = this.firm;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.firm = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.firm, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("firm=" + firm);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.firm, other.firm);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaRow_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaRow_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tJavaRow_9 - inputs:(after_tAmazonAuroraInput_1)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 -
				// inputs:(row3) outputs:()
				// linked node: tMap_2 - inputs:(row4,row3)
				// outputs:(firm_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct> getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tJavaRow_9 begin ] start
				 */

				ok_Hash.put("tJavaRow_9", false);
				start_Hash.put("tJavaRow_9", System.currentTimeMillis());

				currentComponent = "tJavaRow_9";

				int tos_count_tJavaRow_9 = 0;

				int nb_line_tJavaRow_9 = 0;

				/**
				 * [tJavaRow_9 begin ] stop
				 */

				/**
				 * [tJavaRow_9 main ] start
				 */

				currentComponent = "tJavaRow_9";

				row3.firm = context.firmint3;

				nb_line_tJavaRow_9++;

				tos_count_tJavaRow_9++;

				/**
				 * [tJavaRow_9 main ] stop
				 */

				/**
				 * [tAdvancedHash_row3 main ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				row3Struct row3_HashRow = new row3Struct();

				row3_HashRow.firm = row3.firm;

				tHash_Lookup_row3.put(row3_HashRow);

				tos_count_tAdvancedHash_row3++;

				/**
				 * [tAdvancedHash_row3 main ] stop
				 */

				/**
				 * [tJavaRow_9 end ] start
				 */

				currentComponent = "tJavaRow_9";

				globalMap.put("tJavaRow_9_NB_LINE", nb_line_tJavaRow_9);

				ok_Hash.put("tJavaRow_9", true);
				end_Hash.put("tJavaRow_9", System.currentTimeMillis());

				/**
				 * [tJavaRow_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaRow_9 finally ] start
				 */

				currentComponent = "tJavaRow_9";

				/**
				 * [tJavaRow_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaRow_9_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class PrintfilepathforAccountStruct implements
			routines.system.IPersistableRow<PrintfilepathforAccountStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(PrintfilepathforAccountStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filepathforAccountintocontextvariableStruct
			implements
			routines.system.IPersistableRow<filepathforAccountintocontextvariableStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filepathforAccountintocontextvariableStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class PrintfilepathforSecurityStruct implements
			routines.system.IPersistableRow<PrintfilepathforSecurityStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(PrintfilepathforSecurityStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filepathforSecurityintocontextvariableStruct
			implements
			routines.system.IPersistableRow<filepathforSecurityintocontextvariableStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filepathforSecurityintocontextvariableStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class PrintfilepathforTransactionStruct implements
			routines.system.IPersistableRow<PrintfilepathforTransactionStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(PrintfilepathforTransactionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filepathforTransactionintocontextvariableStruct
			implements
			routines.system.IPersistableRow<filepathforTransactionintocontextvariableStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(
				filepathforTransactionintocontextvariableStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class PrintfilepathforTaxLotStruct implements
			routines.system.IPersistableRow<PrintfilepathforTaxLotStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(PrintfilepathforTaxLotStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filepathforTaxLotintocontextvariableStruct
			implements
			routines.system.IPersistableRow<filepathforTaxLotintocontextvariableStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filepathforTaxLotintocontextvariableStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class PrintfilepathforCustodianStruct implements
			routines.system.IPersistableRow<PrintfilepathforCustodianStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(PrintfilepathforCustodianStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filepathforCustodianintocontextvariableStruct
			implements
			routines.system.IPersistableRow<filepathforCustodianintocontextvariableStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filepathforCustodianintocontextvariableStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class PrintfilepathforHoldingStruct implements
			routines.system.IPersistableRow<PrintfilepathforHoldingStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(PrintfilepathforHoldingStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filepathforHoldingintocontextvariableStruct
			implements
			routines.system.IPersistableRow<filepathforHoldingintocontextvariableStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filepathforHoldingintocontextvariableStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class PrintfilepathforAdvisorStruct implements
			routines.system.IPersistableRow<PrintfilepathforAdvisorStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(PrintfilepathforAdvisorStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filepathforAdvisorintocontextvariableStruct
			implements
			routines.system.IPersistableRow<filepathforAdvisorintocontextvariableStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filepathforAdvisorintocontextvariableStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filenameforAdvisorStruct implements
			routines.system.IPersistableRow<filenameforAdvisorStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filenameforAdvisorStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filenameforHoldingStruct implements
			routines.system.IPersistableRow<filenameforHoldingStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filenameforHoldingStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filenameforCustodianStruct implements
			routines.system.IPersistableRow<filenameforCustodianStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filenameforCustodianStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filenameforTaxlotStruct implements
			routines.system.IPersistableRow<filenameforTaxlotStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filenameforTaxlotStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filenameforTransactionStruct implements
			routines.system.IPersistableRow<filenameforTransactionStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filenameforTransactionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filenameforSecurityStruct implements
			routines.system.IPersistableRow<filenameforSecurityStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filenameforSecurityStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filenameforAccountStruct implements
			routines.system.IPersistableRow<filenameforAccountStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filenameforAccountStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filenameForRealizedGainLossStruct implements
			routines.system.IPersistableRow<filenameForRealizedGainLossStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filenameForRealizedGainLossStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ListifFilesfromS3Struct implements
			routines.system.IPersistableRow<ListifFilesfromS3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ListifFilesfromS3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ListofFilesfromS3Struct implements
			routines.system.IPersistableRow<ListofFilesfromS3Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ListofFilesfromS3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tIterateToFlow_1_AIProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tIterateToFlow_1_AI_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				ListofFilesfromS3Struct ListofFilesfromS3 = new ListofFilesfromS3Struct();
				ListofFilesfromS3Struct ListifFilesfromS3 = ListofFilesfromS3;
				filenameforAdvisorStruct filenameforAdvisor = new filenameforAdvisorStruct();
				filepathforAdvisorintocontextvariableStruct filepathforAdvisorintocontextvariable = new filepathforAdvisorintocontextvariableStruct();
				PrintfilepathforAdvisorStruct PrintfilepathforAdvisor = new PrintfilepathforAdvisorStruct();
				filenameforHoldingStruct filenameforHolding = new filenameforHoldingStruct();
				filepathforHoldingintocontextvariableStruct filepathforHoldingintocontextvariable = new filepathforHoldingintocontextvariableStruct();
				PrintfilepathforHoldingStruct PrintfilepathforHolding = new PrintfilepathforHoldingStruct();
				filenameforCustodianStruct filenameforCustodian = new filenameforCustodianStruct();
				filepathforCustodianintocontextvariableStruct filepathforCustodianintocontextvariable = new filepathforCustodianintocontextvariableStruct();
				PrintfilepathforCustodianStruct PrintfilepathforCustodian = new PrintfilepathforCustodianStruct();
				filenameforTaxlotStruct filenameforTaxlot = new filenameforTaxlotStruct();
				filepathforTaxLotintocontextvariableStruct filepathforTaxLotintocontextvariable = new filepathforTaxLotintocontextvariableStruct();
				PrintfilepathforTaxLotStruct PrintfilepathforTaxLot = new PrintfilepathforTaxLotStruct();
				filenameforTransactionStruct filenameforTransaction = new filenameforTransactionStruct();
				filepathforTransactionintocontextvariableStruct filepathforTransactionintocontextvariable = new filepathforTransactionintocontextvariableStruct();
				PrintfilepathforTransactionStruct PrintfilepathforTransaction = new PrintfilepathforTransactionStruct();
				filenameforSecurityStruct filenameforSecurity = new filenameforSecurityStruct();
				filepathforSecurityintocontextvariableStruct filepathforSecurityintocontextvariable = new filepathforSecurityintocontextvariableStruct();
				PrintfilepathforSecurityStruct PrintfilepathforSecurity = new PrintfilepathforSecurityStruct();
				filenameforAccountStruct filenameforAccount = new filenameforAccountStruct();
				filepathforAccountintocontextvariableStruct filepathforAccountintocontextvariable = new filepathforAccountintocontextvariableStruct();
				PrintfilepathforAccountStruct PrintfilepathforAccount = new PrintfilepathforAccountStruct();
				filenameForRealizedGainLossStruct filenameForRealizedGainLoss = new filenameForRealizedGainLossStruct();
				row2Struct row2 = new row2Struct();
				row1Struct row1 = new row1Struct();

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				System.out.println(context.filepath_advisor);

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tFilterRow_4 begin ] start
				 */

				ok_Hash.put("tFilterRow_4", false);
				start_Hash.put("tFilterRow_4", System.currentTimeMillis());

				currentComponent = "tFilterRow_4";

				int tos_count_tFilterRow_4 = 0;

				int nb_line_tFilterRow_4 = 0;
				int nb_line_ok_tFilterRow_4 = 0;
				int nb_line_reject_tFilterRow_4 = 0;

				class Operator_tFilterRow_4 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_4(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_4 begin ] stop
				 */

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				System.out.println(context.positionpath);

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tJavaRow_7 begin ] start
				 */

				ok_Hash.put("tJavaRow_7", false);
				start_Hash.put("tJavaRow_7", System.currentTimeMillis());

				currentComponent = "tJavaRow_7";

				int tos_count_tJavaRow_7 = 0;

				int nb_line_tJavaRow_7 = 0;

				/**
				 * [tJavaRow_7 begin ] stop
				 */

				/**
				 * [tFilterRow_7 begin ] start
				 */

				ok_Hash.put("tFilterRow_7", false);
				start_Hash.put("tFilterRow_7", System.currentTimeMillis());

				currentComponent = "tFilterRow_7";

				int tos_count_tFilterRow_7 = 0;

				int nb_line_tFilterRow_7 = 0;
				int nb_line_ok_tFilterRow_7 = 0;
				int nb_line_reject_tFilterRow_7 = 0;

				class Operator_tFilterRow_7 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_7(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_7 begin ] stop
				 */

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());

				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				System.out.println(context.custodianpath);

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tFilterRow_5 begin ] start
				 */

				ok_Hash.put("tFilterRow_5", false);
				start_Hash.put("tFilterRow_5", System.currentTimeMillis());

				currentComponent = "tFilterRow_5";

				int tos_count_tFilterRow_5 = 0;

				int nb_line_tFilterRow_5 = 0;
				int nb_line_ok_tFilterRow_5 = 0;
				int nb_line_reject_tFilterRow_5 = 0;

				class Operator_tFilterRow_5 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_5(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_5 begin ] stop
				 */

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());

				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				System.out.println(context.taxlotpath);

				/**
				 * [tJava_7 begin ] stop
				 */

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());

				currentComponent = "tJavaRow_6";

				int tos_count_tJavaRow_6 = 0;

				int nb_line_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tFilterRow_6 begin ] start
				 */

				ok_Hash.put("tFilterRow_6", false);
				start_Hash.put("tFilterRow_6", System.currentTimeMillis());

				currentComponent = "tFilterRow_6";

				int tos_count_tFilterRow_6 = 0;

				int nb_line_tFilterRow_6 = 0;
				int nb_line_ok_tFilterRow_6 = 0;
				int nb_line_reject_tFilterRow_6 = 0;

				class Operator_tFilterRow_6 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_6(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_6 begin ] stop
				 */

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println(context.transactionpath);

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println(context.securitypath);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				System.out.println(context.accountpath);

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tFilterRow_3 begin ] start
				 */

				ok_Hash.put("tFilterRow_3", false);
				start_Hash.put("tFilterRow_3", System.currentTimeMillis());

				currentComponent = "tFilterRow_3";

				int tos_count_tFilterRow_3 = 0;

				int nb_line_tFilterRow_3 = 0;
				int nb_line_ok_tFilterRow_3 = 0;
				int nb_line_reject_tFilterRow_3 = 0;

				class Operator_tFilterRow_3 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_3(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_3 begin ] stop
				 */

				/**
				 * [tJava_13 begin ] start
				 */

				ok_Hash.put("tJava_13", false);
				start_Hash.put("tJava_13", System.currentTimeMillis());

				currentComponent = "tJava_13";

				int tos_count_tJava_13 = 0;

				System.out.println(context.RealizedGainLossPath);

				/**
				 * [tJava_13 begin ] stop
				 */

				/**
				 * [tJavaRow_8 begin ] start
				 */

				ok_Hash.put("tJavaRow_8", false);
				start_Hash.put("tJavaRow_8", System.currentTimeMillis());

				currentComponent = "tJavaRow_8";

				int tos_count_tJavaRow_8 = 0;

				int nb_line_tJavaRow_8 = 0;

				/**
				 * [tJavaRow_8 begin ] stop
				 */

				/**
				 * [tFilterRow_8 begin ] start
				 */

				ok_Hash.put("tFilterRow_8", false);
				start_Hash.put("tFilterRow_8", System.currentTimeMillis());

				currentComponent = "tFilterRow_8";

				int tos_count_tFilterRow_8 = 0;

				int nb_line_tFilterRow_8 = 0;
				int nb_line_ok_tFilterRow_8 = 0;
				int nb_line_reject_tFilterRow_8 = 0;

				class Operator_tFilterRow_8 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_8(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_8 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				filenameforAdvisorStruct filenameforAdvisor_tmp = new filenameforAdvisorStruct();
				filenameforHoldingStruct filenameforHolding_tmp = new filenameforHoldingStruct();
				filenameforCustodianStruct filenameforCustodian_tmp = new filenameforCustodianStruct();
				filenameforTaxlotStruct filenameforTaxlot_tmp = new filenameforTaxlotStruct();
				filenameforTransactionStruct filenameforTransaction_tmp = new filenameforTransactionStruct();
				filenameforSecurityStruct filenameforSecurity_tmp = new filenameforSecurityStruct();
				filenameforAccountStruct filenameforAccount_tmp = new filenameforAccountStruct();
				filenameForRealizedGainLossStruct filenameForRealizedGainLoss_tmp = new filenameForRealizedGainLossStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[1];

					public void addRow(String[] row) {

						for (int i = 0; i < 1; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 0 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);

						// last column
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() - fillChars[1].length()
								+ 2; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "filename", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tIterateToFlow_1_AI begin ] start
				 */

				ok_Hash.put("tIterateToFlow_1_AI", false);
				start_Hash.put("tIterateToFlow_1_AI",
						System.currentTimeMillis());

				currentVirtualComponent = "tIterateToFlow_1";

				currentComponent = "tIterateToFlow_1_AI";

				int tos_count_tIterateToFlow_1_AI = 0;

				int nb_line_tIterateToFlow_1_AI = 0;
				java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_AI = (java.util.List<OnSubjobOkStructtIterateToFlow_1>) globalMap
						.get("tIterateToFlow_1");
				if (list_tIterateToFlow_1_AI == null) {
					list_tIterateToFlow_1_AI = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_1>();
				}
				for (OnSubjobOkStructtIterateToFlow_1 row_tIterateToFlow_1_AI : list_tIterateToFlow_1_AI) {

					ListofFilesfromS3.filename = row_tIterateToFlow_1_AI.filename;

					/**
					 * [tIterateToFlow_1_AI begin ] stop
					 */

					/**
					 * [tIterateToFlow_1_AI main ] start
					 */

					currentVirtualComponent = "tIterateToFlow_1";

					currentComponent = "tIterateToFlow_1_AI";

					tos_count_tIterateToFlow_1_AI++;

					/**
					 * [tIterateToFlow_1_AI main ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// /////////////////////

					String[] row_tLogRow_1 = new String[1];

					if (ListofFilesfromS3.filename != null) { //
						row_tLogRow_1[0] = String
								.valueOf(ListofFilesfromS3.filename);

					} //

					util_tLogRow_1.addRow(row_tLogRow_1);
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					ListifFilesfromS3 = ListofFilesfromS3;

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						filenameforAdvisor = null;
						filenameforHolding = null;
						filenameforCustodian = null;
						filenameforTaxlot = null;
						filenameforTransaction = null;
						filenameforSecurity = null;
						filenameforAccount = null;
						filenameForRealizedGainLoss = null;

						// # Output table : 'filenameforAdvisor'
						filenameforAdvisor_tmp.filename = ListifFilesfromS3.filename;
						filenameforAdvisor = filenameforAdvisor_tmp;

						// # Output table : 'filenameforHolding'
						filenameforHolding_tmp.filename = ListifFilesfromS3.filename;
						filenameforHolding = filenameforHolding_tmp;

						// # Output table : 'filenameforCustodian'
						filenameforCustodian_tmp.filename = ListifFilesfromS3.filename;
						filenameforCustodian = filenameforCustodian_tmp;

						// # Output table : 'filenameforTaxlot'
						filenameforTaxlot_tmp.filename = ListifFilesfromS3.filename;
						filenameforTaxlot = filenameforTaxlot_tmp;

						// # Output table : 'filenameforTransaction'
						filenameforTransaction_tmp.filename = ListifFilesfromS3.filename;
						filenameforTransaction = filenameforTransaction_tmp;

						// # Output table : 'filenameforSecurity'
						filenameforSecurity_tmp.filename = ListifFilesfromS3.filename;
						filenameforSecurity = filenameforSecurity_tmp;

						// # Output table : 'filenameforAccount'
						filenameforAccount_tmp.filename = ListifFilesfromS3.filename;
						filenameforAccount = filenameforAccount_tmp;

						// # Output table : 'filenameForRealizedGainLoss'
						filenameForRealizedGainLoss_tmp.filename = ListifFilesfromS3.filename;
						filenameForRealizedGainLoss = filenameForRealizedGainLoss_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "filenameforAdvisor"
					if (filenameforAdvisor != null) {

						/**
						 * [tFilterRow_4 main ] start
						 */

						currentComponent = "tFilterRow_4";

						filepathforAdvisorintocontextvariable = null;
						Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4(
								"&&");
						ope_tFilterRow_4
								.matches(
										(// code sample : use filenameforAdvisor
											// to define the condition.
										// filenameforAdvisor.columnName1.equals("foo")
										// ||!(filenameforAdvisor.columnName2.equals("bar"))
										// replace the following expression by
										// your own filter condition
										filenameforAdvisor.filename
												.contains("Advisor")),
										"advanced condition failed");

						if (ope_tFilterRow_4.getMatchFlag()) {
							if (filepathforAdvisorintocontextvariable == null) {
								filepathforAdvisorintocontextvariable = new filepathforAdvisorintocontextvariableStruct();
							}
							filepathforAdvisorintocontextvariable.filename = filenameforAdvisor.filename;
							nb_line_ok_tFilterRow_4++;
						} else {
							nb_line_reject_tFilterRow_4++;
						}

						nb_line_tFilterRow_4++;

						tos_count_tFilterRow_4++;

						/**
						 * [tFilterRow_4 main ] stop
						 */
						// Start of branch
						// "filepathforAdvisorintocontextvariable"
						if (filepathforAdvisorintocontextvariable != null) {

							/**
							 * [tJavaRow_4 main ] start
							 */

							currentComponent = "tJavaRow_4";

							context.f = false;
							int counter = 0;
							for (OnSubjobOkStructtIterateToFlow_1 row_ToFlow_1_AI_5 : list_tIterateToFlow_1_AI) {
								if (row_ToFlow_1_AI_5.filename
										.contains("Advisor")) {
									counter++;
								}
							}
							if (counter <= 1) {

								context.filepath_advisor = filepathforAdvisorintocontextvariable.filename;

							}

							else {
								context.f = true;

							}

							nb_line_tJavaRow_4++;

							tos_count_tJavaRow_4++;

							/**
							 * [tJavaRow_4 main ] stop
							 */

							/**
							 * [tJava_3 main ] start
							 */

							currentComponent = "tJava_3";

							tos_count_tJava_3++;

							/**
							 * [tJava_3 main ] stop
							 */

						} // End of branch
							// "filepathforAdvisorintocontextvariable"

					} // End of branch "filenameforAdvisor"

					// Start of branch "filenameforHolding"
					if (filenameforHolding != null) {

						/**
						 * [tFilterRow_7 main ] start
						 */

						currentComponent = "tFilterRow_7";

						filepathforHoldingintocontextvariable = null;
						Operator_tFilterRow_7 ope_tFilterRow_7 = new Operator_tFilterRow_7(
								"&&");
						ope_tFilterRow_7
								.matches(
										(// code sample : use filenameforHolding
											// to define the condition.
										// filenameforHolding.columnName1.equals("foo")
										// ||!(filenameforHolding.columnName2.equals("bar"))
										// replace the following expression by
										// your own filter condition
										filenameforHolding.filename
												.contains("Holding")),
										"advanced condition failed");

						if (ope_tFilterRow_7.getMatchFlag()) {
							if (filepathforHoldingintocontextvariable == null) {
								filepathforHoldingintocontextvariable = new filepathforHoldingintocontextvariableStruct();
							}
							filepathforHoldingintocontextvariable.filename = filenameforHolding.filename;
							nb_line_ok_tFilterRow_7++;
						} else {
							nb_line_reject_tFilterRow_7++;
						}

						nb_line_tFilterRow_7++;

						tos_count_tFilterRow_7++;

						/**
						 * [tFilterRow_7 main ] stop
						 */
						// Start of branch
						// "filepathforHoldingintocontextvariable"
						if (filepathforHoldingintocontextvariable != null) {

							/**
							 * [tJavaRow_7 main ] start
							 */

							currentComponent = "tJavaRow_7";

							context.g = false;
							int counter = 0;
							for (OnSubjobOkStructtIterateToFlow_1 row_ToFlow_1_AI_6 : list_tIterateToFlow_1_AI) {
								if (row_ToFlow_1_AI_6.filename
										.contains("Holding")) {
									counter++;
								}
							}
							if (counter <= 1) {

								context.positionpath = filepathforHoldingintocontextvariable.filename;

							}

							else {
								context.g = true;

							}

							nb_line_tJavaRow_7++;

							tos_count_tJavaRow_7++;

							/**
							 * [tJavaRow_7 main ] stop
							 */

							/**
							 * [tJava_6 main ] start
							 */

							currentComponent = "tJava_6";

							tos_count_tJava_6++;

							/**
							 * [tJava_6 main ] stop
							 */

						} // End of branch
							// "filepathforHoldingintocontextvariable"

					} // End of branch "filenameforHolding"

					// Start of branch "filenameforCustodian"
					if (filenameforCustodian != null) {

						/**
						 * [tFilterRow_5 main ] start
						 */

						currentComponent = "tFilterRow_5";

						filepathforCustodianintocontextvariable = null;
						Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5(
								"&&");
						ope_tFilterRow_5.matches(
								(// code sample : use filenameforCustodian to
									// define the condition.
								// filenameforCustodian.columnName1.equals("foo")
								// ||!(filenameforCustodian.columnName2.equals("bar"))
								// replace the following expression by your own
								// filter condition
								filenameforCustodian.filename
										.contains("Custodian")),
								"advanced condition failed");

						if (ope_tFilterRow_5.getMatchFlag()) {
							if (filepathforCustodianintocontextvariable == null) {
								filepathforCustodianintocontextvariable = new filepathforCustodianintocontextvariableStruct();
							}
							filepathforCustodianintocontextvariable.filename = filenameforCustodian.filename;
							nb_line_ok_tFilterRow_5++;
						} else {
							nb_line_reject_tFilterRow_5++;
						}

						nb_line_tFilterRow_5++;

						tos_count_tFilterRow_5++;

						/**
						 * [tFilterRow_5 main ] stop
						 */
						// Start of branch
						// "filepathforCustodianintocontextvariable"
						if (filepathforCustodianintocontextvariable != null) {

							/**
							 * [tJavaRow_5 main ] start
							 */

							currentComponent = "tJavaRow_5";

							context.e = false;
							int counter = 0;
							for (OnSubjobOkStructtIterateToFlow_1 row_ToFlow_1_AI_4 : list_tIterateToFlow_1_AI) {
								if (row_ToFlow_1_AI_4.filename
										.contains("Custodian")) {
									counter++;
								}
							}
							if (counter <= 1) {

								context.custodianpath = filepathforCustodianintocontextvariable.filename;

							}

							else {
								context.e = true;

							}

							nb_line_tJavaRow_5++;

							tos_count_tJavaRow_5++;

							/**
							 * [tJavaRow_5 main ] stop
							 */

							/**
							 * [tJava_5 main ] start
							 */

							currentComponent = "tJava_5";

							tos_count_tJava_5++;

							/**
							 * [tJava_5 main ] stop
							 */

						} // End of branch
							// "filepathforCustodianintocontextvariable"

					} // End of branch "filenameforCustodian"

					// Start of branch "filenameforTaxlot"
					if (filenameforTaxlot != null) {

						/**
						 * [tFilterRow_6 main ] start
						 */

						currentComponent = "tFilterRow_6";

						filepathforTaxLotintocontextvariable = null;
						Operator_tFilterRow_6 ope_tFilterRow_6 = new Operator_tFilterRow_6(
								"&&");
						ope_tFilterRow_6.matches(
								(// code sample : use filenameforTaxlot to
									// define the condition.
								// filenameforTaxlot.columnName1.equals("foo")
								// ||!(filenameforTaxlot.columnName2.equals("bar"))
								// replace the following expression by your own
								// filter condition
								filenameforTaxlot.filename.contains("TaxLot")),
								"advanced condition failed");

						if (ope_tFilterRow_6.getMatchFlag()) {
							if (filepathforTaxLotintocontextvariable == null) {
								filepathforTaxLotintocontextvariable = new filepathforTaxLotintocontextvariableStruct();
							}
							filepathforTaxLotintocontextvariable.filename = filenameforTaxlot.filename;
							nb_line_ok_tFilterRow_6++;
						} else {
							nb_line_reject_tFilterRow_6++;
						}

						nb_line_tFilterRow_6++;

						tos_count_tFilterRow_6++;

						/**
						 * [tFilterRow_6 main ] stop
						 */
						// Start of branch
						// "filepathforTaxLotintocontextvariable"
						if (filepathforTaxLotintocontextvariable != null) {

							/**
							 * [tJavaRow_6 main ] start
							 */

							currentComponent = "tJavaRow_6";

							context.d = false;
							int counter = 0;
							for (OnSubjobOkStructtIterateToFlow_1 row_ToFlow_1_AI_3 : list_tIterateToFlow_1_AI) {
								if (row_ToFlow_1_AI_3.filename
										.contains("TaxLot")) {
									counter++;
								}
							}
							if (counter <= 1) {

								context.taxlotpath = filepathforTaxLotintocontextvariable.filename;

							}

							else {
								context.d = true;

							}

							nb_line_tJavaRow_6++;

							tos_count_tJavaRow_6++;

							/**
							 * [tJavaRow_6 main ] stop
							 */

							/**
							 * [tJava_7 main ] start
							 */

							currentComponent = "tJava_7";

							tos_count_tJava_7++;

							/**
							 * [tJava_7 main ] stop
							 */

						} // End of branch
							// "filepathforTaxLotintocontextvariable"

					} // End of branch "filenameforTaxlot"

					// Start of branch "filenameforTransaction"
					if (filenameforTransaction != null) {

						/**
						 * [tFilterRow_2 main ] start
						 */

						currentComponent = "tFilterRow_2";

						filepathforTransactionintocontextvariable = null;
						Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2(
								"&&");
						ope_tFilterRow_2.matches(
								(// code sample : use filenameforTransaction to
									// define the condition.
								// filenameforTransaction.columnName1.equals("foo")
								// ||!(filenameforTransaction.columnName2.equals("bar"))
								// replace the following expression by your own
								// filter condition
								filenameforTransaction.filename
										.contains("Transaction")),
								"advanced condition failed");

						if (ope_tFilterRow_2.getMatchFlag()) {
							if (filepathforTransactionintocontextvariable == null) {
								filepathforTransactionintocontextvariable = new filepathforTransactionintocontextvariableStruct();
							}
							filepathforTransactionintocontextvariable.filename = filenameforTransaction.filename;
							nb_line_ok_tFilterRow_2++;
						} else {
							nb_line_reject_tFilterRow_2++;
						}

						nb_line_tFilterRow_2++;

						tos_count_tFilterRow_2++;

						/**
						 * [tFilterRow_2 main ] stop
						 */
						// Start of branch
						// "filepathforTransactionintocontextvariable"
						if (filepathforTransactionintocontextvariable != null) {

							/**
							 * [tJavaRow_2 main ] start
							 */

							currentComponent = "tJavaRow_2";

							context.b = false;
							int counter = 0;
							for (OnSubjobOkStructtIterateToFlow_1 row_ToFlow_1_AI_1 : list_tIterateToFlow_1_AI) {
								if (row_ToFlow_1_AI_1.filename
										.contains("Transaction")) {
									counter++;
								}
							}
							if (counter <= 1) {

								context.transactionpath = filepathforTransactionintocontextvariable.filename;

							}

							else {
								context.b = true;

							}

							nb_line_tJavaRow_2++;

							tos_count_tJavaRow_2++;

							/**
							 * [tJavaRow_2 main ] stop
							 */

							/**
							 * [tJava_2 main ] start
							 */

							currentComponent = "tJava_2";

							tos_count_tJava_2++;

							/**
							 * [tJava_2 main ] stop
							 */

						} // End of branch
							// "filepathforTransactionintocontextvariable"

					} // End of branch "filenameforTransaction"

					// Start of branch "filenameforSecurity"
					if (filenameforSecurity != null) {

						/**
						 * [tFilterRow_1 main ] start
						 */

						currentComponent = "tFilterRow_1";

						filepathforSecurityintocontextvariable = null;
						Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
								"&&");
						ope_tFilterRow_1.matches((// code sample : use
													// filenameforSecurity to
													// define the condition.
								// filenameforSecurity.columnName1.equals("foo")
								// ||!(filenameforSecurity.columnName2.equals("bar"))
								// replace the following expression by your own
								// filter condition

								filenameforSecurity.filename
										.contains("Security")

								), "advanced condition failed");

						if (ope_tFilterRow_1.getMatchFlag()) {
							if (filepathforSecurityintocontextvariable == null) {
								filepathforSecurityintocontextvariable = new filepathforSecurityintocontextvariableStruct();
							}
							filepathforSecurityintocontextvariable.filename = filenameforSecurity.filename;
							nb_line_ok_tFilterRow_1++;
						} else {
							nb_line_reject_tFilterRow_1++;
						}

						nb_line_tFilterRow_1++;

						tos_count_tFilterRow_1++;

						/**
						 * [tFilterRow_1 main ] stop
						 */
						// Start of branch
						// "filepathforSecurityintocontextvariable"
						if (filepathforSecurityintocontextvariable != null) {

							/**
							 * [tJavaRow_1 main ] start
							 */

							currentComponent = "tJavaRow_1";

							context.a = false;
							int counter = 0;
							for (OnSubjobOkStructtIterateToFlow_1 row_ToFlow_1_AI : list_tIterateToFlow_1_AI) {
								if (row_ToFlow_1_AI.filename
										.contains("Security")) {
									counter++;
								}
							}
							if (counter == 1) {

								context.securitypath = filepathforSecurityintocontextvariable.filename;

							}

							else {
								context.a = true;

							}
							nb_line_tJavaRow_1++;

							tos_count_tJavaRow_1++;

							/**
							 * [tJavaRow_1 main ] stop
							 */

							/**
							 * [tJava_1 main ] start
							 */

							currentComponent = "tJava_1";

							tos_count_tJava_1++;

							/**
							 * [tJava_1 main ] stop
							 */

						} // End of branch
							// "filepathforSecurityintocontextvariable"

					} // End of branch "filenameforSecurity"

					// Start of branch "filenameforAccount"
					if (filenameforAccount != null) {

						/**
						 * [tFilterRow_3 main ] start
						 */

						currentComponent = "tFilterRow_3";

						filepathforAccountintocontextvariable = null;
						Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3(
								"&&");
						ope_tFilterRow_3
								.matches(
										(// code sample : use filenameforAccount
											// to define the condition.
										// filenameforAccount.columnName1.equals("foo")
										// ||!(filenameforAccount.columnName2.equals("bar"))
										// replace the following expression by
										// your own filter condition
										filenameforAccount.filename
												.contains("Account")),
										"advanced condition failed");

						if (ope_tFilterRow_3.getMatchFlag()) {
							if (filepathforAccountintocontextvariable == null) {
								filepathforAccountintocontextvariable = new filepathforAccountintocontextvariableStruct();
							}
							filepathforAccountintocontextvariable.filename = filenameforAccount.filename;
							nb_line_ok_tFilterRow_3++;
						} else {
							nb_line_reject_tFilterRow_3++;
						}

						nb_line_tFilterRow_3++;

						tos_count_tFilterRow_3++;

						/**
						 * [tFilterRow_3 main ] stop
						 */
						// Start of branch
						// "filepathforAccountintocontextvariable"
						if (filepathforAccountintocontextvariable != null) {

							/**
							 * [tJavaRow_3 main ] start
							 */

							currentComponent = "tJavaRow_3";

							context.c = false;
							int counter = 0;
							for (OnSubjobOkStructtIterateToFlow_1 row_ToFlow_1_AI_2 : list_tIterateToFlow_1_AI) {
								if (row_ToFlow_1_AI_2.filename
										.contains("Account")) {
									counter++;
								}
							}
							if (counter <= 1) {

								context.accountpath = filepathforAccountintocontextvariable.filename;

							}

							else {
								context.c = true;

							}

							nb_line_tJavaRow_3++;

							tos_count_tJavaRow_3++;

							/**
							 * [tJavaRow_3 main ] stop
							 */

							/**
							 * [tJava_4 main ] start
							 */

							currentComponent = "tJava_4";

							tos_count_tJava_4++;

							/**
							 * [tJava_4 main ] stop
							 */

						} // End of branch
							// "filepathforAccountintocontextvariable"

					} // End of branch "filenameforAccount"

					// Start of branch "filenameForRealizedGainLoss"
					if (filenameForRealizedGainLoss != null) {

						/**
						 * [tFilterRow_8 main ] start
						 */

						currentComponent = "tFilterRow_8";

						row2 = null;
						Operator_tFilterRow_8 ope_tFilterRow_8 = new Operator_tFilterRow_8(
								"&&");
						ope_tFilterRow_8.matches((// code sample : use
													// filenameForRealizedGainLoss
													// to define the condition.
								// filenameForRealizedGainLoss.columnName1.equals("foo")
								// ||!(filenameForRealizedGainLoss.columnName2.equals("bar"))
								// replace the following expression by your own
								// filter condition

								filenameForRealizedGainLoss.filename
										.contains("RealizedGainLoss")

								), "advanced condition failed");

						if (ope_tFilterRow_8.getMatchFlag()) {
							if (row2 == null) {
								row2 = new row2Struct();
							}
							row2.filename = filenameForRealizedGainLoss.filename;
							nb_line_ok_tFilterRow_8++;
						} else {
							nb_line_reject_tFilterRow_8++;
						}

						nb_line_tFilterRow_8++;

						tos_count_tFilterRow_8++;

						/**
						 * [tFilterRow_8 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tJavaRow_8 main ] start
							 */

							currentComponent = "tJavaRow_8";

							context.a = false;
							int counter = 0;
							for (OnSubjobOkStructtIterateToFlow_1 row_ToFlow_1_AI : list_tIterateToFlow_1_AI) {
								if (row_ToFlow_1_AI.filename
										.contains("RealizedGainLoss")) {
									counter++;
								}
							}
							if (counter == 1) {

								context.RealizedGainLossPath = row2.filename;

							}

							else {
								context.h = true;

							}
							nb_line_tJavaRow_8++;

							tos_count_tJavaRow_8++;

							/**
							 * [tJavaRow_8 main ] stop
							 */

							/**
							 * [tJava_13 main ] start
							 */

							currentComponent = "tJava_13";

							tos_count_tJava_13++;

							/**
							 * [tJava_13 main ] stop
							 */

						} // End of branch "row2"

					} // End of branch "filenameForRealizedGainLoss"

					/**
					 * [tIterateToFlow_1_AI end ] start
					 */

					currentVirtualComponent = "tIterateToFlow_1";

					currentComponent = "tIterateToFlow_1_AI";

					nb_line_tIterateToFlow_1_AI++;
				}
				globalMap.put("tIterateToFlow_1_AI_NB_LINE",
						nb_line_tIterateToFlow_1_AI);

				ok_Hash.put("tIterateToFlow_1_AI", true);
				end_Hash.put("tIterateToFlow_1_AI", System.currentTimeMillis());

				/**
				 * [tIterateToFlow_1_AI end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1
						.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFilterRow_4 end ] start
				 */

				currentComponent = "tFilterRow_4";

				globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_OK",
						nb_line_ok_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_4);

				ok_Hash.put("tFilterRow_4", true);
				end_Hash.put("tFilterRow_4", System.currentTimeMillis());

				/**
				 * [tFilterRow_4 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				if (context.f) {

					tDie_9Process(globalMap);
				}

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

				/**
				 * [tFilterRow_7 end ] start
				 */

				currentComponent = "tFilterRow_7";

				globalMap.put("tFilterRow_7_NB_LINE", nb_line_tFilterRow_7);
				globalMap.put("tFilterRow_7_NB_LINE_OK",
						nb_line_ok_tFilterRow_7);
				globalMap.put("tFilterRow_7_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_7);

				ok_Hash.put("tFilterRow_7", true);
				end_Hash.put("tFilterRow_7", System.currentTimeMillis());

				/**
				 * [tFilterRow_7 end ] stop
				 */

				/**
				 * [tJavaRow_7 end ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

				ok_Hash.put("tJavaRow_7", true);
				end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				if (context.g) {

					tDie_10Process(globalMap);
				}

				/**
				 * [tJavaRow_7 end ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */

				/**
				 * [tFilterRow_5 end ] start
				 */

				currentComponent = "tFilterRow_5";

				globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
				globalMap.put("tFilterRow_5_NB_LINE_OK",
						nb_line_ok_tFilterRow_5);
				globalMap.put("tFilterRow_5_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_5);

				ok_Hash.put("tFilterRow_5", true);
				end_Hash.put("tFilterRow_5", System.currentTimeMillis());

				/**
				 * [tFilterRow_5 end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				if (context.e) {

					tDie_8Process(globalMap);
				}

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */

				/**
				 * [tFilterRow_6 end ] start
				 */

				currentComponent = "tFilterRow_6";

				globalMap.put("tFilterRow_6_NB_LINE", nb_line_tFilterRow_6);
				globalMap.put("tFilterRow_6_NB_LINE_OK",
						nb_line_ok_tFilterRow_6);
				globalMap.put("tFilterRow_6_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_6);

				ok_Hash.put("tFilterRow_6", true);
				end_Hash.put("tFilterRow_6", System.currentTimeMillis());

				/**
				 * [tFilterRow_6 end ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				if (context.d) {

					tDie_7Process(globalMap);
				}

				/**
				 * [tJavaRow_6 end ] stop
				 */

				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK",
						nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_2);

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if (context.b) {

					tDie_5Process(globalMap);
				}

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if (context.a) {

					tDie_4Process(globalMap);
				}

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

				/**
				 * [tFilterRow_3 end ] start
				 */

				currentComponent = "tFilterRow_3";

				globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_OK",
						nb_line_ok_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_3);

				ok_Hash.put("tFilterRow_3", true);
				end_Hash.put("tFilterRow_3", System.currentTimeMillis());

				/**
				 * [tFilterRow_3 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				if (context.c) {

					tDie_6Process(globalMap);
				}

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */

				/**
				 * [tFilterRow_8 end ] start
				 */

				currentComponent = "tFilterRow_8";

				globalMap.put("tFilterRow_8_NB_LINE", nb_line_tFilterRow_8);
				globalMap.put("tFilterRow_8_NB_LINE_OK",
						nb_line_ok_tFilterRow_8);
				globalMap.put("tFilterRow_8_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_8);

				ok_Hash.put("tFilterRow_8", true);
				end_Hash.put("tFilterRow_8", System.currentTimeMillis());

				/**
				 * [tFilterRow_8 end ] stop
				 */

				/**
				 * [tJavaRow_8 end ] start
				 */

				currentComponent = "tJavaRow_8";

				globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);

				ok_Hash.put("tJavaRow_8", true);
				end_Hash.put("tJavaRow_8", System.currentTimeMillis());

				if (context.h) {

					tDie_11Process(globalMap);
				}

				/**
				 * [tJavaRow_8 end ] stop
				 */

				/**
				 * [tJava_13 end ] start
				 */

				currentComponent = "tJava_13";

				ok_Hash.put("tJava_13", true);
				end_Hash.put("tJava_13", System.currentTimeMillis());

				/**
				 * [tJava_13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tIterateToFlow_1_AI"
			globalMap.remove("tIterateToFlow_1");

			try {

				/**
				 * [tIterateToFlow_1_AI finally ] start
				 */

				currentVirtualComponent = "tIterateToFlow_1";

				currentComponent = "tIterateToFlow_1_AI";

				/**
				 * [tIterateToFlow_1_AI finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFilterRow_4 finally ] start
				 */

				currentComponent = "tFilterRow_4";

				/**
				 * [tFilterRow_4 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */

				/**
				 * [tFilterRow_7 finally ] start
				 */

				currentComponent = "tFilterRow_7";

				/**
				 * [tFilterRow_7 finally ] stop
				 */

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */

				/**
				 * [tFilterRow_5 finally ] start
				 */

				currentComponent = "tFilterRow_5";

				/**
				 * [tFilterRow_5 finally ] stop
				 */

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */

				/**
				 * [tFilterRow_6 finally ] start
				 */

				currentComponent = "tFilterRow_6";

				/**
				 * [tFilterRow_6 finally ] stop
				 */

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

				/**
				 * [tJava_7 finally ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */

				/**
				 * [tFilterRow_8 finally ] start
				 */

				currentComponent = "tFilterRow_8";

				/**
				 * [tFilterRow_8 finally ] stop
				 */

				/**
				 * [tJavaRow_8 finally ] start
				 */

				currentComponent = "tJavaRow_8";

				/**
				 * [tJavaRow_8 finally ] stop
				 */

				/**
				 * [tJava_13 finally ] start
				 */

				currentComponent = "tJava_13";

				/**
				 * [tJava_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tIterateToFlow_1_AI_SUBPROCESS_STATE", 1);
	}

	public static class row3_0Struct implements
			routines.system.IPersistableRow<row3_0Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class firm_connectionStruct implements
			routines.system.IPersistableRow<firm_connectionStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(firm_connectionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_1_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_1_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_1_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_1Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String server;

		public String getServer() {
			return this.server;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_orionETLjobV2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_orionETLjobV2) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.server = readString(dis);

					this.database = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.server, dos);

				// String

				writeString(this.database, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",server=" + server);
			sb.append(",database=" + database);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_1_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJavaRow_9Process(globalMap);

				row_tAmazonAuroraInput_1_inStruct row_tAmazonAuroraInput_1_in = new row_tAmazonAuroraInput_1_inStruct();
				row_tAmazonAuroraInput_1_inStruct row4 = row_tAmazonAuroraInput_1_in;
				firm_connectionStruct firm_connection = new firm_connectionStruct();
				row3_0Struct row3_0 = new row3_0Struct();

				/**
				 * [tJava_14 begin ] start
				 */

				ok_Hash.put("tJava_14", false);
				start_Hash.put("tJava_14", System.currentTimeMillis());

				currentComponent = "tJava_14";

				int tos_count_tJava_14 = 0;

				/**
				 * [tJava_14 begin ] stop
				 */

				/**
				 * [tJavaRow_10 begin ] start
				 */

				ok_Hash.put("tJavaRow_10", false);
				start_Hash.put("tJavaRow_10", System.currentTimeMillis());

				currentComponent = "tJavaRow_10";

				int tos_count_tJavaRow_10 = 0;

				int nb_line_tJavaRow_10 = 0;

				/**
				 * [tJavaRow_10 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				firm_connectionStruct firm_connection_tmp = new firm_connectionStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_out", false);
				start_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				int tos_count_tAmazonAuroraInput_1_out = 0;

				/**
				 * [tAmazonAuroraInput_1_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_in", false);
				start_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				int tos_count_tAmazonAuroraInput_1_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_1_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_1_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_1_in = calendar_tAmazonAuroraInput_1_in
						.getTime();
				int nb_line_tAmazonAuroraInput_1_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_1_in = null;
				String driverClass_tAmazonAuroraInput_1_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_1_in);
				String dbUser_tAmazonAuroraInput_1_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_1_in = context.password;

				String dbPwd_tAmazonAuroraInput_1_in = decryptedPassword_tAmazonAuroraInput_1_in;

				String url_tAmazonAuroraInput_1_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_1_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_1_in,
								dbUser_tAmazonAuroraInput_1_in,
								dbPwd_tAmazonAuroraInput_1_in);

				java.sql.Statement stmt_tAmazonAuroraInput_1_in = conn_tAmazonAuroraInput_1_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_1_in = "SELECT `name` , `server` , `database` FROM `orionEclipseFirm`";

				globalMap.put("tAmazonAuroraInput_1_QUERY",
						dbquery_tAmazonAuroraInput_1_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_1_in = null;
				try {
					rs_tAmazonAuroraInput_1_in = stmt_tAmazonAuroraInput_1_in
							.executeQuery(dbquery_tAmazonAuroraInput_1_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_1_in = rs_tAmazonAuroraInput_1_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_1_in = rsmd_tAmazonAuroraInput_1_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_1_in = null;

					while (rs_tAmazonAuroraInput_1_in.next()) {
						nb_line_tAmazonAuroraInput_1_in++;

						if (colQtyInRs_tAmazonAuroraInput_1_in < 1) {
							row_tAmazonAuroraInput_1_in.name = null;
						} else {

							row_tAmazonAuroraInput_1_in.name = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 1,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 2) {
							row_tAmazonAuroraInput_1_in.server = null;
						} else {

							row_tAmazonAuroraInput_1_in.server = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 2,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 3) {
							row_tAmazonAuroraInput_1_in.database = null;
						} else {

							row_tAmazonAuroraInput_1_in.database = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 3,
											false);
						}

						/**
						 * [tAmazonAuroraInput_1_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

						tos_count_tAmazonAuroraInput_1_in++;

						/**
						 * [tAmazonAuroraInput_1_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_out";

						row4 = row_tAmazonAuroraInput_1_in;

						tos_count_tAmazonAuroraInput_1_out++;

						/**
						 * [tAmazonAuroraInput_1_out main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row3"
						// /////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row3HashKey.firm = row4.name;

							row3HashKey.hashCodeDirty = true;

							tHash_Lookup_row3.lookup(row3HashKey);

							if (!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_2 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.firm = '"
							// + row3HashKey.firm + "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							firm_connection = null;

							if (!rejectedInnerJoin_tMap_2) {

								// # Output table : 'firm_connection'
								firm_connection_tmp.server = row4.server;
								firm_connection_tmp.database = row4.database;
								firm_connection = firm_connection_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "firm_connection"
						if (firm_connection != null) {

							/**
							 * [tJavaRow_10 main ] start
							 */

							currentComponent = "tJavaRow_10";

							context.serverIp = firm_connection.server;
							context.database = firm_connection.database;

							nb_line_tJavaRow_10++;

							tos_count_tJavaRow_10++;

							/**
							 * [tJavaRow_10 main ] stop
							 */

							/**
							 * [tJava_14 main ] start
							 */

							currentComponent = "tJava_14";

							tos_count_tJava_14++;

							/**
							 * [tJava_14 main ] stop
							 */

						} // End of branch "firm_connection"

						/**
						 * [tAmazonAuroraInput_1_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_1_in != null) {
						rs_tAmazonAuroraInput_1_in.close();
					}
					stmt_tAmazonAuroraInput_1_in.close();
					if (conn_tAmazonAuroraInput_1_in != null
							&& !conn_tAmazonAuroraInput_1_in.isClosed()) {

						conn_tAmazonAuroraInput_1_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_1_NB_LINE",
						nb_line_tAmazonAuroraInput_1_in);

				ok_Hash.put("tAmazonAuroraInput_1_in", true);
				end_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				ok_Hash.put("tAmazonAuroraInput_1_out", true);
				end_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_out end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tJavaRow_10 end ] start
				 */

				currentComponent = "tJavaRow_10";

				globalMap.put("tJavaRow_10_NB_LINE", nb_line_tJavaRow_10);

				ok_Hash.put("tJavaRow_10", true);
				end_Hash.put("tJavaRow_10", System.currentTimeMillis());

				/**
				 * [tJavaRow_10 end ] stop
				 */

				/**
				 * [tJava_14 end ] start
				 */

				currentComponent = "tJava_14";

				ok_Hash.put("tJava_14", true);
				end_Hash.put("tJava_14", System.currentTimeMillis());

				tMysqlConnection_1Process(globalMap);

				/**
				 * [tJava_14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row3");

			try {

				/**
				 * [tAmazonAuroraInput_1_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				/**
				 * [tAmazonAuroraInput_1_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				/**
				 * [tAmazonAuroraInput_1_out finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tJavaRow_10 finally ] start
				 */

				currentComponent = "tJavaRow_10";

				/**
				 * [tJavaRow_10 finally ] stop
				 */

				/**
				 * [tJava_14 finally ] start
				 */

				currentComponent = "tJava_14";

				/**
				 * [tJava_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final orionETLjobV2 orionETLjobV2Class = new orionETLjobV2();

		int exitCode = orionETLjobV2Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = orionETLjobV2.class
					.getClassLoader().getResourceAsStream(
							"reliazedgainloss/orionetljobv2_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.serverIp = (String) context.getProperty("serverIp");
			context.database = (String) context.getProperty("database");
			context.filepath_advisor = (String) context
					.getProperty("filepath_advisor");
			context.positionpath = (String) context.getProperty("positionpath");
			context.custodianpath = (String) context
					.getProperty("custodianpath");
			context.taxlotpath = (String) context.getProperty("taxlotpath");
			context.transactionpath = (String) context
					.getProperty("transactionpath");
			context.securitypath = (String) context.getProperty("securitypath");
			context.accountpath = (String) context.getProperty("accountpath");
			context.inputDir = (String) context.getProperty("inputDir");
			context.username = (String) context.getProperty("username");
			context.password = (String) context.getProperty("password");
			context.contextDir = (String) context.getProperty("contextDir");
			context.stagingdb = (String) context.getProperty("stagingdb");
			context.commondb = (String) context.getProperty("commondb");
			context.localpath = (String) context.getProperty("localpath");
			context.port = (String) context.getProperty("port");
			context.host = (String) context.getProperty("host");
			try {
				context.rowCountRejectedFirm = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("rowCountRejectedFirm"));
			} catch (NumberFormatException e) {
				context.rowCountRejectedFirm = null;
			}
			context.firm = (String) context.getProperty("firm");
			try {
				context.rowCountFirm = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountFirm"));
			} catch (NumberFormatException e) {
				context.rowCountFirm = null;
			}
			try {
				context.rowCountStaging = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountStaging"));
			} catch (NumberFormatException e) {
				context.rowCountStaging = null;
			}
			try {
				context.rowCountTSV = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountTSV"));
			} catch (NumberFormatException e) {
				context.rowCountTSV = null;
			}
			try {
				context.rowCountUpdated = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountUpdated"));
			} catch (NumberFormatException e) {
				context.rowCountUpdated = null;
			}
			context.teamPreferenceOption = (String) context
					.getProperty("teamPreferenceOption");
			context.date = (String) context.getProperty("date");
			context.firmId = (String) context.getProperty("firmId");
			context.pathforlocal = (String) context.getProperty("pathforlocal");
			context.filestorage = (String) context.getProperty("filestorage");
			context.filestorage2 = (String) context.getProperty("filestorage2");
			context.firmint = (String) context.getProperty("firmint");
			context.firmint2 = (String) context.getProperty("firmint2");
			try {
				context.a = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("a"));
			} catch (NumberFormatException e) {
				context.a = null;
			}
			try {
				context.b = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("b"));
			} catch (NumberFormatException e) {
				context.b = null;
			}
			try {
				context.c = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("c"));
			} catch (NumberFormatException e) {
				context.c = null;
			}
			try {
				context.d = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("d"));
			} catch (NumberFormatException e) {
				context.d = null;
			}
			try {
				context.e = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("e"));
			} catch (NumberFormatException e) {
				context.e = null;
			}
			try {
				context.f = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("f"));
			} catch (NumberFormatException e) {
				context.f = null;
			}
			try {
				context.g = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("g"));
			} catch (NumberFormatException e) {
				context.g = null;
			}
			context.firmint3 = (String) context.getProperty("firmint3");
			try {
				context.firmids = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("firmids"));
			} catch (NumberFormatException e) {
				context.firmids = null;
			}
			context.RealizedGainLossPath = (String) context
					.getProperty("RealizedGainLossPath");
			try {
				context.h = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("h"));
			} catch (NumberFormatException e) {
				context.h = null;
			}
			context.bucket = (String) context.getProperty("bucket");
			context.loadType = (String) context.getProperty("loadType");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("serverIp")) {
				context.serverIp = (String) parentContextMap.get("serverIp");
			}
			if (parentContextMap.containsKey("database")) {
				context.database = (String) parentContextMap.get("database");
			}
			if (parentContextMap.containsKey("filepath_advisor")) {
				context.filepath_advisor = (String) parentContextMap
						.get("filepath_advisor");
			}
			if (parentContextMap.containsKey("positionpath")) {
				context.positionpath = (String) parentContextMap
						.get("positionpath");
			}
			if (parentContextMap.containsKey("custodianpath")) {
				context.custodianpath = (String) parentContextMap
						.get("custodianpath");
			}
			if (parentContextMap.containsKey("taxlotpath")) {
				context.taxlotpath = (String) parentContextMap
						.get("taxlotpath");
			}
			if (parentContextMap.containsKey("transactionpath")) {
				context.transactionpath = (String) parentContextMap
						.get("transactionpath");
			}
			if (parentContextMap.containsKey("securitypath")) {
				context.securitypath = (String) parentContextMap
						.get("securitypath");
			}
			if (parentContextMap.containsKey("accountpath")) {
				context.accountpath = (String) parentContextMap
						.get("accountpath");
			}
			if (parentContextMap.containsKey("inputDir")) {
				context.inputDir = (String) parentContextMap.get("inputDir");
			}
			if (parentContextMap.containsKey("username")) {
				context.username = (String) parentContextMap.get("username");
			}
			if (parentContextMap.containsKey("password")) {
				context.password = (String) parentContextMap.get("password");
			}
			if (parentContextMap.containsKey("contextDir")) {
				context.contextDir = (String) parentContextMap
						.get("contextDir");
			}
			if (parentContextMap.containsKey("stagingdb")) {
				context.stagingdb = (String) parentContextMap.get("stagingdb");
			}
			if (parentContextMap.containsKey("commondb")) {
				context.commondb = (String) parentContextMap.get("commondb");
			}
			if (parentContextMap.containsKey("localpath")) {
				context.localpath = (String) parentContextMap.get("localpath");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (String) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("host")) {
				context.host = (String) parentContextMap.get("host");
			}
			if (parentContextMap.containsKey("rowCountRejectedFirm")) {
				context.rowCountRejectedFirm = (Integer) parentContextMap
						.get("rowCountRejectedFirm");
			}
			if (parentContextMap.containsKey("firm")) {
				context.firm = (String) parentContextMap.get("firm");
			}
			if (parentContextMap.containsKey("rowCountFirm")) {
				context.rowCountFirm = (Integer) parentContextMap
						.get("rowCountFirm");
			}
			if (parentContextMap.containsKey("rowCountStaging")) {
				context.rowCountStaging = (Integer) parentContextMap
						.get("rowCountStaging");
			}
			if (parentContextMap.containsKey("rowCountTSV")) {
				context.rowCountTSV = (Integer) parentContextMap
						.get("rowCountTSV");
			}
			if (parentContextMap.containsKey("rowCountUpdated")) {
				context.rowCountUpdated = (Integer) parentContextMap
						.get("rowCountUpdated");
			}
			if (parentContextMap.containsKey("teamPreferenceOption")) {
				context.teamPreferenceOption = (String) parentContextMap
						.get("teamPreferenceOption");
			}
			if (parentContextMap.containsKey("date")) {
				context.date = (String) parentContextMap.get("date");
			}
			if (parentContextMap.containsKey("firmId")) {
				context.firmId = (String) parentContextMap.get("firmId");
			}
			if (parentContextMap.containsKey("pathforlocal")) {
				context.pathforlocal = (String) parentContextMap
						.get("pathforlocal");
			}
			if (parentContextMap.containsKey("filestorage")) {
				context.filestorage = (String) parentContextMap
						.get("filestorage");
			}
			if (parentContextMap.containsKey("filestorage2")) {
				context.filestorage2 = (String) parentContextMap
						.get("filestorage2");
			}
			if (parentContextMap.containsKey("firmint")) {
				context.firmint = (String) parentContextMap.get("firmint");
			}
			if (parentContextMap.containsKey("firmint2")) {
				context.firmint2 = (String) parentContextMap.get("firmint2");
			}
			if (parentContextMap.containsKey("a")) {
				context.a = (Boolean) parentContextMap.get("a");
			}
			if (parentContextMap.containsKey("b")) {
				context.b = (Boolean) parentContextMap.get("b");
			}
			if (parentContextMap.containsKey("c")) {
				context.c = (Boolean) parentContextMap.get("c");
			}
			if (parentContextMap.containsKey("d")) {
				context.d = (Boolean) parentContextMap.get("d");
			}
			if (parentContextMap.containsKey("e")) {
				context.e = (Boolean) parentContextMap.get("e");
			}
			if (parentContextMap.containsKey("f")) {
				context.f = (Boolean) parentContextMap.get("f");
			}
			if (parentContextMap.containsKey("g")) {
				context.g = (Boolean) parentContextMap.get("g");
			}
			if (parentContextMap.containsKey("firmint3")) {
				context.firmint3 = (String) parentContextMap.get("firmint3");
			}
			if (parentContextMap.containsKey("firmids")) {
				context.firmids = (Integer) parentContextMap.get("firmids");
			}
			if (parentContextMap.containsKey("RealizedGainLossPath")) {
				context.RealizedGainLossPath = (String) parentContextMap
						.get("RealizedGainLossPath");
			}
			if (parentContextMap.containsKey("h")) {
				context.h = (Boolean) parentContextMap.get("h");
			}
			if (parentContextMap.containsKey("bucket")) {
				context.bucket = (String) parentContextMap.get("bucket");
			}
			if (parentContextMap.containsKey("loadType")) {
				context.loadType = (String) parentContextMap.get("loadType");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_8) {
			globalMap.put("tJava_8_SUBPROCESS_STATE", -1);

			e_tJava_8.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : orionETLjobV2");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();
		closeS3Connections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tMysqlConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tMysqlConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private void closeS3Connections() {
		try {
			com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
					.get("conn_tS3Connection_1");
			if (conn_tS3Connection_1 != null) {
				conn_tS3Connection_1.shutdown();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tMysqlConnection_1",
				globalMap.get("conn_tMysqlConnection_1"));
		connections.put("conn_tMysqlConnection_2",
				globalMap.get("conn_tMysqlConnection_2"));

		connections.put("conn_tS3Connection_1",
				globalMap.get("conn_tS3Connection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 474568 characters generated by Talend Open Studio for Data Integration on the
 * October 24, 2016 5:34:42 PM IST
 ************************************************************************************************/
