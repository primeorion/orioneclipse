// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package reliazedgainloss.position_parallel_stagingtofirm_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: position_parallel_stagingtofirm Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.0.20160510_1709
 * @status 
 */
public class position_parallel_stagingtofirm implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (serverIp != null) {

				this.setProperty("serverIp", serverIp.toString());

			}

			if (database != null) {

				this.setProperty("database", database.toString());

			}

			if (filepath_advisor != null) {

				this.setProperty("filepath_advisor",
						filepath_advisor.toString());

			}

			if (positionpath != null) {

				this.setProperty("positionpath", positionpath.toString());

			}

			if (custodianpath != null) {

				this.setProperty("custodianpath", custodianpath.toString());

			}

			if (taxlotpath != null) {

				this.setProperty("taxlotpath", taxlotpath.toString());

			}

			if (transactionpath != null) {

				this.setProperty("transactionpath", transactionpath.toString());

			}

			if (securitypath != null) {

				this.setProperty("securitypath", securitypath.toString());

			}

			if (accountpath != null) {

				this.setProperty("accountpath", accountpath.toString());

			}

			if (inputDir != null) {

				this.setProperty("inputDir", inputDir.toString());

			}

			if (username != null) {

				this.setProperty("username", username.toString());

			}

			if (password != null) {

				this.setProperty("password", password.toString());

			}

			if (contextDir != null) {

				this.setProperty("contextDir", contextDir.toString());

			}

			if (stagingdb != null) {

				this.setProperty("stagingdb", stagingdb.toString());

			}

			if (commondb != null) {

				this.setProperty("commondb", commondb.toString());

			}

			if (localpath != null) {

				this.setProperty("localpath", localpath.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (host != null) {

				this.setProperty("host", host.toString());

			}

			if (teamPreferenceOption != null) {

				this.setProperty("teamPreferenceOption",
						teamPreferenceOption.toString());

			}

			if (rowCountTSV != null) {

				this.setProperty("rowCountTSV", rowCountTSV.toString());

			}

			if (rowCountStaging != null) {

				this.setProperty("rowCountStaging", rowCountStaging.toString());

			}

			if (rowCountFirm != null) {

				this.setProperty("rowCountFirm", rowCountFirm.toString());

			}

			if (firm != null) {

				this.setProperty("firm", firm.toString());

			}

			if (rowCountUpdated != null) {

				this.setProperty("rowCountUpdated", rowCountUpdated.toString());

			}

			if (rowCountRejectedFirm != null) {

				this.setProperty("rowCountRejectedFirm",
						rowCountRejectedFirm.toString());

			}

			if (firmId != null) {

				this.setProperty("firmId", firmId.toString());

			}

			if (date != null) {

				this.setProperty("date", date.toString());

			}

			if (filestorage != null) {

				this.setProperty("filestorage", filestorage.toString());

			}

			if (filestorage2 != null) {

				this.setProperty("filestorage2", filestorage2.toString());

			}

			if (pathforlocal != null) {

				this.setProperty("pathforlocal", pathforlocal.toString());

			}

			if (firmint3 != null) {

				this.setProperty("firmint3", firmint3.toString());

			}

			if (a != null) {

				this.setProperty("a", a.toString());

			}

			if (b != null) {

				this.setProperty("b", b.toString());

			}

			if (c != null) {

				this.setProperty("c", c.toString());

			}

			if (d != null) {

				this.setProperty("d", d.toString());

			}

			if (e != null) {

				this.setProperty("e", e.toString());

			}

			if (f != null) {

				this.setProperty("f", f.toString());

			}

			if (g != null) {

				this.setProperty("g", g.toString());

			}

		}

		public String serverIp;

		public String getServerIp() {
			return this.serverIp;
		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		public String filepath_advisor;

		public String getFilepath_advisor() {
			return this.filepath_advisor;
		}

		public String positionpath;

		public String getPositionpath() {
			return this.positionpath;
		}

		public String custodianpath;

		public String getCustodianpath() {
			return this.custodianpath;
		}

		public String taxlotpath;

		public String getTaxlotpath() {
			return this.taxlotpath;
		}

		public String transactionpath;

		public String getTransactionpath() {
			return this.transactionpath;
		}

		public String securitypath;

		public String getSecuritypath() {
			return this.securitypath;
		}

		public String accountpath;

		public String getAccountpath() {
			return this.accountpath;
		}

		public String inputDir;

		public String getInputDir() {
			return this.inputDir;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		public String contextDir;

		public String getContextDir() {
			return this.contextDir;
		}

		public String stagingdb;

		public String getStagingdb() {
			return this.stagingdb;
		}

		public String commondb;

		public String getCommondb() {
			return this.commondb;
		}

		public String localpath;

		public String getLocalpath() {
			return this.localpath;
		}

		public String port;

		public String getPort() {
			return this.port;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public String teamPreferenceOption;

		public String getTeamPreferenceOption() {
			return this.teamPreferenceOption;
		}

		public Integer rowCountTSV;

		public Integer getRowCountTSV() {
			return this.rowCountTSV;
		}

		public Integer rowCountStaging;

		public Integer getRowCountStaging() {
			return this.rowCountStaging;
		}

		public Integer rowCountFirm;

		public Integer getRowCountFirm() {
			return this.rowCountFirm;
		}

		public String firm;

		public String getFirm() {
			return this.firm;
		}

		public Integer rowCountUpdated;

		public Integer getRowCountUpdated() {
			return this.rowCountUpdated;
		}

		public Integer rowCountRejectedFirm;

		public Integer getRowCountRejectedFirm() {
			return this.rowCountRejectedFirm;
		}

		public String firmId;

		public String getFirmId() {
			return this.firmId;
		}

		public String date;

		public String getDate() {
			return this.date;
		}

		public String filestorage;

		public String getFilestorage() {
			return this.filestorage;
		}

		public String filestorage2;

		public String getFilestorage2() {
			return this.filestorage2;
		}

		public String pathforlocal;

		public String getPathforlocal() {
			return this.pathforlocal;
		}

		public String firmint3;

		public String getFirmint3() {
			return this.firmint3;
		}

		public Boolean a;

		public Boolean getA() {
			return this.a;
		}

		public Boolean b;

		public Boolean getB() {
			return this.b;
		}

		public Boolean c;

		public Boolean getC() {
			return this.c;
		}

		public Boolean d;

		public Boolean getD() {
			return this.d;
		}

		public Boolean e;

		public Boolean getE() {
			return this.e;
		}

		public Boolean f;

		public Boolean getF() {
			return this.f;
		}

		public Boolean g;

		public Boolean getG() {
			return this.g;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "position_parallel_stagingtofirm";
	private final String projectName = "RELIAZEDGAINLOSS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_b8LGYFSIEeaZ25PjpwnslQ", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					position_parallel_stagingtofirm.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(position_parallel_stagingtofirm.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonMysqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tStatCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row31_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row39_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row32_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_1_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_1_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_1_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_1_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_2_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_2_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_2_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_2_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_3_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_3_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_3_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_3_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraInput_4_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraInput_4_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraInput_4_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tAmazonAuroraInput_4_in_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAmazonAuroraOutput_1_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_1_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_1_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAmazonAuroraOutput_2_in_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAmazonAuroraOutput_2_out_error(exception, errorComponent, globalMap);

	}

	public void tAmazonAuroraOutput_2_out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_1_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_2_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_3_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tAmazonAuroraInput_4_in_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row_tAmazonAuroraOutput_1_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_1_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_1_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class statCatcherOutputStruct implements
			routines.system.IPersistableRow<statCatcherOutputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(statCatcherOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();
				statCatcherOutputStruct statCatcherOutput = new statCatcherOutputStruct();
				statCatcherOutputStruct row_tAmazonAuroraOutput_1_in = statCatcherOutput;

				/**
				 * [tAmazonAuroraOutput_1_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_1_out", false);
				start_Hash.put("tAmazonAuroraOutput_1_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_out";

				int tos_count_tAmazonAuroraOutput_1_out = 0;

				int nb_line_tAmazonAuroraOutput_1 = 0;
				int nb_line_update_tAmazonAuroraOutput_1 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_1 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_1 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_1 = 0;

				int deletedCount_tAmazonAuroraOutput_1 = 0;
				int updatedCount_tAmazonAuroraOutput_1 = 0;
				int insertedCount_tAmazonAuroraOutput_1 = 0;

				int rejectedCount_tAmazonAuroraOutput_1 = 0;

				String tableName_tAmazonAuroraOutput_1 = "statcatcher";
				boolean whetherReject_tAmazonAuroraOutput_1 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_1 = calendar_tAmazonAuroraOutput_1
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_1 = calendar_tAmazonAuroraOutput_1
						.getTime().getTime();
				long date_tAmazonAuroraOutput_1;

				java.sql.Connection conn_tAmazonAuroraOutput_1 = null;
				String dbProperties_tAmazonAuroraOutput_1 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_1 = null;
				if (dbProperties_tAmazonAuroraOutput_1 == null
						|| dbProperties_tAmazonAuroraOutput_1.trim().length() == 0) {
					url_tAmazonAuroraOutput_1 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_1 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ properties_tAmazonAuroraOutput_1;
				}
				String driverClass_tAmazonAuroraOutput_1 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_1 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_1 = context.password;

				String dbPwd_tAmazonAuroraOutput_1 = decryptedPassword_tAmazonAuroraOutput_1;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_1);

				conn_tAmazonAuroraOutput_1 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_1,
								dbUser_tAmazonAuroraOutput_1,
								dbPwd_tAmazonAuroraOutput_1);

				resourceMap.put("conn_tAmazonAuroraOutput_1",
						conn_tAmazonAuroraOutput_1);
				conn_tAmazonAuroraOutput_1.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_1 = 10000;
				int commitCounter_tAmazonAuroraOutput_1 = 0;

				int count_tAmazonAuroraOutput_1 = 0;

				String insert_tAmazonAuroraOutput_1 = "INSERT INTO `"
						+ "statcatcher"
						+ "` (`moment`,`project`,`job`,`job_version`,`context`,`message_type`,`message`,`duration`,`firmName`) VALUES (?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_1 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_1 = conn_tAmazonAuroraOutput_1
						.prepareStatement(insert_tAmazonAuroraOutput_1);

				/**
				 * [tAmazonAuroraOutput_1_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_1_in", false);
				start_Hash.put("tAmazonAuroraOutput_1_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_in";

				int tos_count_tAmazonAuroraOutput_1_in = 0;

				/**
				 * [tAmazonAuroraOutput_1_in begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
					String firmName;
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				statCatcherOutputStruct statCatcherOutput_tmp = new statCatcherOutputStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row17.pid = pid;
					row17.root_pid = rootPid;
					row17.father_pid = fatherPid;
					row17.project = projectName;
					row17.job = jobName;
					row17.context = contextStr;
					row17.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row17.message = scm.getMessage();
					row17.duration = scm.getDuration();
					row17.moment = scm.getMoment();
					row17.message_type = scm.getMessageType();
					row17.job_version = scm.getJobVersion();
					row17.job_repository_id = scm.getJobId();
					row17.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tMap_6 main ] start
					 */

					currentComponent = "tMap_6";

					boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_6 = false;
					boolean mainRowRejected_tMap_6 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_6__Struct Var = Var__tMap_6;
						Var.firmName = context.inputDir.substring(
								context.inputDir.indexOf("/") + 1,
								context.inputDir.indexOf("/",
										context.inputDir.indexOf("/") + 1));// ###############################
																			// ###############################
																			// #
																			// Output
																			// tables

						statCatcherOutput = null;

						// # Output table : 'statCatcherOutput'
						statCatcherOutput_tmp.moment = row17.moment;
						statCatcherOutput_tmp.project = row17.project;
						statCatcherOutput_tmp.job = row17.job;
						statCatcherOutput_tmp.job_version = row17.job_version;
						statCatcherOutput_tmp.context = row17.context;
						statCatcherOutput_tmp.message_type = row17.message_type;
						statCatcherOutput_tmp.message = row17.message;
						statCatcherOutput_tmp.duration = row17.duration;
						statCatcherOutput_tmp.firmName = Var.firmName;
						statCatcherOutput = statCatcherOutput_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_6 = false;

					tos_count_tMap_6++;

					/**
					 * [tMap_6 main ] stop
					 */
					// Start of branch "statCatcherOutput"
					if (statCatcherOutput != null) {

						/**
						 * [tAmazonAuroraOutput_1_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_1";

						currentComponent = "tAmazonAuroraOutput_1_in";

						row_tAmazonAuroraOutput_1_in = statCatcherOutput;

						tos_count_tAmazonAuroraOutput_1_in++;

						/**
						 * [tAmazonAuroraOutput_1_in main ] stop
						 */

						/**
						 * [tAmazonAuroraOutput_1_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_1";

						currentComponent = "tAmazonAuroraOutput_1_out";

						whetherReject_tAmazonAuroraOutput_1 = false;
						if (row_tAmazonAuroraOutput_1_in.moment != null) {
							date_tAmazonAuroraOutput_1 = row_tAmazonAuroraOutput_1_in.moment
									.getTime();
							if (date_tAmazonAuroraOutput_1 < year1_tAmazonAuroraOutput_1
									|| date_tAmazonAuroraOutput_1 >= year10000_tAmazonAuroraOutput_1) {
								pstmt_tAmazonAuroraOutput_1.setString(1,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tAmazonAuroraOutput_1.setTimestamp(1,
										new java.sql.Timestamp(
												date_tAmazonAuroraOutput_1));
							}
						} else {
							pstmt_tAmazonAuroraOutput_1.setNull(1,
									java.sql.Types.DATE);
						}

						if (row_tAmazonAuroraOutput_1_in.project == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(2,
									row_tAmazonAuroraOutput_1_in.project);
						}

						if (row_tAmazonAuroraOutput_1_in.job == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(3,
									row_tAmazonAuroraOutput_1_in.job);
						}

						if (row_tAmazonAuroraOutput_1_in.job_version == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(4,
									row_tAmazonAuroraOutput_1_in.job_version);
						}

						if (row_tAmazonAuroraOutput_1_in.context == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(5,
									row_tAmazonAuroraOutput_1_in.context);
						}

						if (row_tAmazonAuroraOutput_1_in.message_type == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(6,
									row_tAmazonAuroraOutput_1_in.message_type);
						}

						if (row_tAmazonAuroraOutput_1_in.message == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(7,
									row_tAmazonAuroraOutput_1_in.message);
						}

						if (row_tAmazonAuroraOutput_1_in.duration == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(8,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_1.setLong(8,
									row_tAmazonAuroraOutput_1_in.duration);
						}

						if (row_tAmazonAuroraOutput_1_in.firmName == null) {
							pstmt_tAmazonAuroraOutput_1.setNull(9,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_1.setString(9,
									row_tAmazonAuroraOutput_1_in.firmName);
						}

						pstmt_tAmazonAuroraOutput_1.addBatch();
						nb_line_tAmazonAuroraOutput_1++;

						batchSizeCounter_tAmazonAuroraOutput_1++;
						if (batchSize_tAmazonAuroraOutput_1 <= batchSizeCounter_tAmazonAuroraOutput_1) {
							try {
								int countSum_tAmazonAuroraOutput_1 = 0;
								for (int countEach_tAmazonAuroraOutput_1 : pstmt_tAmazonAuroraOutput_1
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_1 = 0;
								for (int countEach_tAmazonAuroraOutput_1 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
											: countEach_tAmazonAuroraOutput_1);
								}
								insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tAmazonAuroraOutput_1 = 0;
						}
						commitCounter_tAmazonAuroraOutput_1++;

						if (commitEvery_tAmazonAuroraOutput_1 <= commitCounter_tAmazonAuroraOutput_1) {

							try {
								int countSum_tAmazonAuroraOutput_1 = 0;
								for (int countEach_tAmazonAuroraOutput_1 : pstmt_tAmazonAuroraOutput_1
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_1 = 0;
								for (int countEach_tAmazonAuroraOutput_1 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
											: countEach_tAmazonAuroraOutput_1);
								}
								insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;
								System.err.println(e.getMessage());

							}
							conn_tAmazonAuroraOutput_1.commit();
							commitCounter_tAmazonAuroraOutput_1 = 0;

						}

						tos_count_tAmazonAuroraOutput_1_out++;

						/**
						 * [tAmazonAuroraOutput_1_out main ] stop
						 */

					} // End of branch "statCatcherOutput"

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_in";

				ok_Hash.put("tAmazonAuroraOutput_1_in", true);
				end_Hash.put("tAmazonAuroraOutput_1_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_1_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_1 != 0) {
						int countSum_tAmazonAuroraOutput_1 = 0;

						for (int countEach_tAmazonAuroraOutput_1 : pstmt_tAmazonAuroraOutput_1
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_1 = 0;
					for (int countEach_tAmazonAuroraOutput_1 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_1 += (countEach_tAmazonAuroraOutput_1 < 0 ? 0
								: countEach_tAmazonAuroraOutput_1);
					}

					insertedCount_tAmazonAuroraOutput_1 += countSum_tAmazonAuroraOutput_1;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_1 = 0;

				if (pstmt_tAmazonAuroraOutput_1 != null) {

					pstmt_tAmazonAuroraOutput_1.close();

				}

				if (commitCounter_tAmazonAuroraOutput_1 > 0) {

					conn_tAmazonAuroraOutput_1.commit();

				}

				conn_tAmazonAuroraOutput_1.close();

				resourceMap.put("finish_tAmazonAuroraOutput_1", true);

				nb_line_deleted_tAmazonAuroraOutput_1 = nb_line_deleted_tAmazonAuroraOutput_1
						+ deletedCount_tAmazonAuroraOutput_1;
				nb_line_update_tAmazonAuroraOutput_1 = nb_line_update_tAmazonAuroraOutput_1
						+ updatedCount_tAmazonAuroraOutput_1;
				nb_line_inserted_tAmazonAuroraOutput_1 = nb_line_inserted_tAmazonAuroraOutput_1
						+ insertedCount_tAmazonAuroraOutput_1;
				nb_line_rejected_tAmazonAuroraOutput_1 = nb_line_rejected_tAmazonAuroraOutput_1
						+ rejectedCount_tAmazonAuroraOutput_1;

				globalMap.put("tAmazonAuroraOutput_1_NB_LINE",
						nb_line_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_1);
				globalMap.put("tAmazonAuroraOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_1);

				ok_Hash.put("tAmazonAuroraOutput_1_out", true);
				end_Hash.put("tAmazonAuroraOutput_1_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_1_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_in";

				/**
				 * [tAmazonAuroraOutput_1_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_1_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_1";

				currentComponent = "tAmazonAuroraOutput_1_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_1") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_1) {
							String errorMessage_tAmazonAuroraOutput_1 = "failed to close the connection in tAmazonAuroraOutput_1 :"
									+ sqlEx_tAmazonAuroraOutput_1.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_1);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_1_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row_tAmazonAuroraOutput_2_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraOutput_2_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraOutput_2_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class logCatcherOutputStruct implements
			routines.system.IPersistableRow<logCatcherOutputStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public String firmName;

		public String getFirmName() {
			return this.firmName;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

					this.firmName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

				// String

				writeString(this.firmName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append(",firmName=" + firmName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(logCatcherOutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();
				logCatcherOutputStruct logCatcherOutput = new logCatcherOutputStruct();
				logCatcherOutputStruct row_tAmazonAuroraOutput_2_in = logCatcherOutput;

				/**
				 * [tAmazonAuroraOutput_2_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_2_out", false);
				start_Hash.put("tAmazonAuroraOutput_2_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				int tos_count_tAmazonAuroraOutput_2_out = 0;

				int nb_line_tAmazonAuroraOutput_2 = 0;
				int nb_line_update_tAmazonAuroraOutput_2 = 0;
				int nb_line_inserted_tAmazonAuroraOutput_2 = 0;
				int nb_line_deleted_tAmazonAuroraOutput_2 = 0;
				int nb_line_rejected_tAmazonAuroraOutput_2 = 0;

				int deletedCount_tAmazonAuroraOutput_2 = 0;
				int updatedCount_tAmazonAuroraOutput_2 = 0;
				int insertedCount_tAmazonAuroraOutput_2 = 0;

				int rejectedCount_tAmazonAuroraOutput_2 = 0;

				String tableName_tAmazonAuroraOutput_2 = "logcatcher";
				boolean whetherReject_tAmazonAuroraOutput_2 = false;

				java.util.Calendar calendar_tAmazonAuroraOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonAuroraOutput_2 = calendar_tAmazonAuroraOutput_2
						.getTime().getTime();
				calendar_tAmazonAuroraOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonAuroraOutput_2 = calendar_tAmazonAuroraOutput_2
						.getTime().getTime();
				long date_tAmazonAuroraOutput_2;

				java.sql.Connection conn_tAmazonAuroraOutput_2 = null;
				String dbProperties_tAmazonAuroraOutput_2 = "noDatetimeStringSync=true";
				String url_tAmazonAuroraOutput_2 = null;
				if (dbProperties_tAmazonAuroraOutput_2 == null
						|| dbProperties_tAmazonAuroraOutput_2.trim().length() == 0) {
					url_tAmazonAuroraOutput_2 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonAuroraOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tAmazonAuroraOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonAuroraOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonAuroraOutput_2 = "jdbc:mysql://" + context.host
							+ ":" + context.port + "/" + context.commondb + "?"
							+ properties_tAmazonAuroraOutput_2;
				}
				String driverClass_tAmazonAuroraOutput_2 = "org.gjt.mm.mysql.Driver";

				String dbUser_tAmazonAuroraOutput_2 = context.username;

				final String decryptedPassword_tAmazonAuroraOutput_2 = context.password;

				String dbPwd_tAmazonAuroraOutput_2 = decryptedPassword_tAmazonAuroraOutput_2;
				java.lang.Class.forName(driverClass_tAmazonAuroraOutput_2);

				conn_tAmazonAuroraOutput_2 = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraOutput_2,
								dbUser_tAmazonAuroraOutput_2,
								dbPwd_tAmazonAuroraOutput_2);

				resourceMap.put("conn_tAmazonAuroraOutput_2",
						conn_tAmazonAuroraOutput_2);
				conn_tAmazonAuroraOutput_2.setAutoCommit(false);
				int commitEvery_tAmazonAuroraOutput_2 = 10000;
				int commitCounter_tAmazonAuroraOutput_2 = 0;

				int count_tAmazonAuroraOutput_2 = 0;

				String insert_tAmazonAuroraOutput_2 = "INSERT INTO `"
						+ "logcatcher"
						+ "` (`moment`,`project`,`job`,`context`,`priority`,`type`,`origin`,`message`,`code`,`firmName`) VALUES (?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tAmazonAuroraOutput_2 = 100;
				int batchSizeCounter_tAmazonAuroraOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tAmazonAuroraOutput_2 = conn_tAmazonAuroraOutput_2
						.prepareStatement(insert_tAmazonAuroraOutput_2);

				/**
				 * [tAmazonAuroraOutput_2_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraOutput_2_in", false);
				start_Hash.put("tAmazonAuroraOutput_2_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				int tos_count_tAmazonAuroraOutput_2_in = 0;

				/**
				 * [tAmazonAuroraOutput_2_in begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
					String firmName;
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				logCatcherOutputStruct logCatcherOutput_tmp = new logCatcherOutputStruct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row18.type = lcm.getType();
					row18.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row18.priority = lcm.getPriority();
					row18.message = lcm.getMessage();
					row18.code = lcm.getCode();

					row18.moment = java.util.Calendar.getInstance().getTime();

					row18.pid = pid;
					row18.root_pid = rootPid;
					row18.father_pid = fatherPid;

					row18.project = projectName;
					row18.job = jobName;
					row18.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tMap_7 main ] start
					 */

					currentComponent = "tMap_7";

					boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_7 = false;
					boolean mainRowRejected_tMap_7 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_7__Struct Var = Var__tMap_7;
						Var.firmName = context.inputDir.substring(
								context.inputDir.indexOf("/") + 1,
								context.inputDir.indexOf("/",
										context.inputDir.indexOf("/") + 1));// ###############################
																			// ###############################
																			// #
																			// Output
																			// tables

						logCatcherOutput = null;

						// # Output table : 'logCatcherOutput'
						logCatcherOutput_tmp.moment = row18.moment;
						logCatcherOutput_tmp.project = row18.project;
						logCatcherOutput_tmp.job = row18.job;
						logCatcherOutput_tmp.context = row18.context;
						logCatcherOutput_tmp.priority = row18.priority;
						logCatcherOutput_tmp.type = row18.type;
						logCatcherOutput_tmp.origin = row18.origin;
						logCatcherOutput_tmp.message = row18.message;
						logCatcherOutput_tmp.code = row18.code;
						logCatcherOutput_tmp.firmName = Var.firmName;
						logCatcherOutput = logCatcherOutput_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_7 = false;

					tos_count_tMap_7++;

					/**
					 * [tMap_7 main ] stop
					 */
					// Start of branch "logCatcherOutput"
					if (logCatcherOutput != null) {

						/**
						 * [tAmazonAuroraOutput_2_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_2";

						currentComponent = "tAmazonAuroraOutput_2_in";

						row_tAmazonAuroraOutput_2_in = logCatcherOutput;

						tos_count_tAmazonAuroraOutput_2_in++;

						/**
						 * [tAmazonAuroraOutput_2_in main ] stop
						 */

						/**
						 * [tAmazonAuroraOutput_2_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraOutput_2";

						currentComponent = "tAmazonAuroraOutput_2_out";

						whetherReject_tAmazonAuroraOutput_2 = false;
						if (row_tAmazonAuroraOutput_2_in.moment != null) {
							date_tAmazonAuroraOutput_2 = row_tAmazonAuroraOutput_2_in.moment
									.getTime();
							if (date_tAmazonAuroraOutput_2 < year1_tAmazonAuroraOutput_2
									|| date_tAmazonAuroraOutput_2 >= year10000_tAmazonAuroraOutput_2) {
								pstmt_tAmazonAuroraOutput_2.setString(1,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tAmazonAuroraOutput_2.setTimestamp(1,
										new java.sql.Timestamp(
												date_tAmazonAuroraOutput_2));
							}
						} else {
							pstmt_tAmazonAuroraOutput_2.setNull(1,
									java.sql.Types.DATE);
						}

						if (row_tAmazonAuroraOutput_2_in.project == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(2,
									row_tAmazonAuroraOutput_2_in.project);
						}

						if (row_tAmazonAuroraOutput_2_in.job == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(3,
									row_tAmazonAuroraOutput_2_in.job);
						}

						if (row_tAmazonAuroraOutput_2_in.context == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(4,
									row_tAmazonAuroraOutput_2_in.context);
						}

						if (row_tAmazonAuroraOutput_2_in.priority == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(5,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_2.setInt(5,
									row_tAmazonAuroraOutput_2_in.priority);
						}

						if (row_tAmazonAuroraOutput_2_in.type == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(6,
									row_tAmazonAuroraOutput_2_in.type);
						}

						if (row_tAmazonAuroraOutput_2_in.origin == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(7,
									row_tAmazonAuroraOutput_2_in.origin);
						}

						if (row_tAmazonAuroraOutput_2_in.message == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(8,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(8,
									row_tAmazonAuroraOutput_2_in.message);
						}

						if (row_tAmazonAuroraOutput_2_in.code == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(9,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tAmazonAuroraOutput_2.setInt(9,
									row_tAmazonAuroraOutput_2_in.code);
						}

						if (row_tAmazonAuroraOutput_2_in.firmName == null) {
							pstmt_tAmazonAuroraOutput_2.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tAmazonAuroraOutput_2.setString(10,
									row_tAmazonAuroraOutput_2_in.firmName);
						}

						pstmt_tAmazonAuroraOutput_2.addBatch();
						nb_line_tAmazonAuroraOutput_2++;

						batchSizeCounter_tAmazonAuroraOutput_2++;
						if (batchSize_tAmazonAuroraOutput_2 <= batchSizeCounter_tAmazonAuroraOutput_2) {
							try {
								int countSum_tAmazonAuroraOutput_2 = 0;
								for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_2 = 0;
								for (int countEach_tAmazonAuroraOutput_2 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
											: countEach_tAmazonAuroraOutput_2);
								}
								insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tAmazonAuroraOutput_2 = 0;
						}
						commitCounter_tAmazonAuroraOutput_2++;

						if (commitEvery_tAmazonAuroraOutput_2 <= commitCounter_tAmazonAuroraOutput_2) {

							try {
								int countSum_tAmazonAuroraOutput_2 = 0;
								for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
										.executeBatch()) {
									countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
											: 1);
								}
								insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tAmazonAuroraOutput_2 = 0;
								for (int countEach_tAmazonAuroraOutput_2 : e
										.getUpdateCounts()) {
									countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
											: countEach_tAmazonAuroraOutput_2);
								}
								insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;
								System.err.println(e.getMessage());

							}
							conn_tAmazonAuroraOutput_2.commit();
							commitCounter_tAmazonAuroraOutput_2 = 0;

						}

						tos_count_tAmazonAuroraOutput_2_out++;

						/**
						 * [tAmazonAuroraOutput_2_out main ] stop
						 */

					} // End of branch "logCatcherOutput"

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				ok_Hash.put("tAmazonAuroraOutput_2_in", true);
				end_Hash.put("tAmazonAuroraOutput_2_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_2_in end ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				try {
					if (batchSizeCounter_tAmazonAuroraOutput_2 != 0) {
						int countSum_tAmazonAuroraOutput_2 = 0;

						for (int countEach_tAmazonAuroraOutput_2 : pstmt_tAmazonAuroraOutput_2
								.executeBatch()) {
							countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tAmazonAuroraOutput_2 = 0;
					for (int countEach_tAmazonAuroraOutput_2 : e
							.getUpdateCounts()) {
						countSum_tAmazonAuroraOutput_2 += (countEach_tAmazonAuroraOutput_2 < 0 ? 0
								: countEach_tAmazonAuroraOutput_2);
					}

					insertedCount_tAmazonAuroraOutput_2 += countSum_tAmazonAuroraOutput_2;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tAmazonAuroraOutput_2 = 0;

				if (pstmt_tAmazonAuroraOutput_2 != null) {

					pstmt_tAmazonAuroraOutput_2.close();

				}

				if (commitCounter_tAmazonAuroraOutput_2 > 0) {

					conn_tAmazonAuroraOutput_2.commit();

				}

				conn_tAmazonAuroraOutput_2.close();

				resourceMap.put("finish_tAmazonAuroraOutput_2", true);

				nb_line_deleted_tAmazonAuroraOutput_2 = nb_line_deleted_tAmazonAuroraOutput_2
						+ deletedCount_tAmazonAuroraOutput_2;
				nb_line_update_tAmazonAuroraOutput_2 = nb_line_update_tAmazonAuroraOutput_2
						+ updatedCount_tAmazonAuroraOutput_2;
				nb_line_inserted_tAmazonAuroraOutput_2 = nb_line_inserted_tAmazonAuroraOutput_2
						+ insertedCount_tAmazonAuroraOutput_2;
				nb_line_rejected_tAmazonAuroraOutput_2 = nb_line_rejected_tAmazonAuroraOutput_2
						+ rejectedCount_tAmazonAuroraOutput_2;

				globalMap.put("tAmazonAuroraOutput_2_NB_LINE",
						nb_line_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_UPDATED",
						nb_line_update_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tAmazonAuroraOutput_2);
				globalMap.put("tAmazonAuroraOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonAuroraOutput_2);

				ok_Hash.put("tAmazonAuroraOutput_2_out", true);
				end_Hash.put("tAmazonAuroraOutput_2_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraOutput_2_out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_in";

				/**
				 * [tAmazonAuroraOutput_2_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraOutput_2_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraOutput_2";

				currentComponent = "tAmazonAuroraOutput_2_out";

				if (resourceMap.get("finish_tAmazonAuroraOutput_2") == null) {
					if (resourceMap.get("conn_tAmazonAuroraOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonAuroraOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonAuroraOutput_2) {
							String errorMessage_tAmazonAuroraOutput_2 = "failed to close the connection in tAmazonAuroraOutput_2 :"
									+ sqlEx_tAmazonAuroraOutput_2.getMessage();

							System.err
									.println(errorMessage_tAmazonAuroraOutput_2);
						}
					}
				}

				/**
				 * [tAmazonAuroraOutput_2_out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class ErrorRejectStruct implements
			routines.system.IPersistableRow<ErrorRejectStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String errorStackTrace;

		public String getErrorStackTrace() {
			return this.errorStackTrace;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.PriceDate = readDate(dis);

					this.AccountNumber = readString(dis);

					this.AccountId = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MarketValue = null;
					} else {
						this.MarketValue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedSTGL = null;
					} else {
						this.PositionYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedLTGL = null;
					} else {
						this.PositionYTDRealizedLTGL = dis.readFloat();
					}

					this.errorMessage = readString(dis);

					this.errorStackTrace = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// java.util.Date

				writeDate(this.PriceDate, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountId, dos);

				// Float

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Float

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				// Float

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.errorStackTrace, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append(",errorMessage=" + errorMessage);
			sb.append(",errorStackTrace=" + errorStackTrace);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ErrorRejectStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outToFirmStruct implements
			routines.system.IPersistableRow<outToFirmStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];

		public int accountId;

		public int getAccountId() {
			return this.accountId;
		}

		public int SecurityId;

		public int getSecurityId() {
			return this.SecurityId;
		}

		public int orionFirmId;

		public int getOrionFirmId() {
			return this.orionFirmId;
		}

		public int externalId;

		public int getExternalId() {
			return this.externalId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		public float price;

		public float getPrice() {
			return this.price;
		}

		public java.util.Date priceDate;

		public java.util.Date getPriceDate() {
			return this.priceDate;
		}

		public float marketValue;

		public float getMarketValue() {
			return this.marketValue;
		}

		public float quantity;

		public float getQuantity() {
			return this.quantity;
		}

		public float PositionYTDRealizedSTGL;

		public float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public float PositionYTDRealizedLTGL;

		public float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		public boolean isDeleted;

		public boolean getIsDeleted() {
			return this.isDeleted;
		}

		public java.util.Date createdDate;

		public java.util.Date getCreatedDate() {
			return this.createdDate;
		}

		public int createdBy;

		public int getCreatedBy() {
			return this.createdBy;
		}

		public java.util.Date editedDate;

		public java.util.Date getEditedDate() {
			return this.editedDate;
		}

		public int editedBy;

		public int getEditedBy() {
			return this.editedBy;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.accountId = dis.readInt();

					this.SecurityId = dis.readInt();

					this.orionFirmId = dis.readInt();

					this.externalId = dis.readInt();

					this.orionEclipseFirmId = readInteger(dis);

					this.price = dis.readFloat();

					this.priceDate = readDate(dis);

					this.marketValue = dis.readFloat();

					this.quantity = dis.readFloat();

					this.PositionYTDRealizedSTGL = dis.readFloat();

					this.PositionYTDRealizedLTGL = dis.readFloat();

					this.isDeleted = dis.readBoolean();

					this.createdDate = readDate(dis);

					this.createdBy = dis.readInt();

					this.editedDate = readDate(dis);

					this.editedBy = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.accountId);

				// int

				dos.writeInt(this.SecurityId);

				// int

				dos.writeInt(this.orionFirmId);

				// int

				dos.writeInt(this.externalId);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

				// float

				dos.writeFloat(this.price);

				// java.util.Date

				writeDate(this.priceDate, dos);

				// float

				dos.writeFloat(this.marketValue);

				// float

				dos.writeFloat(this.quantity);

				// float

				dos.writeFloat(this.PositionYTDRealizedSTGL);

				// float

				dos.writeFloat(this.PositionYTDRealizedLTGL);

				// boolean

				dos.writeBoolean(this.isDeleted);

				// java.util.Date

				writeDate(this.createdDate, dos);

				// int

				dos.writeInt(this.createdBy);

				// java.util.Date

				writeDate(this.editedDate, dos);

				// int

				dos.writeInt(this.editedBy);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("accountId=" + String.valueOf(accountId));
			sb.append(",SecurityId=" + String.valueOf(SecurityId));
			sb.append(",orionFirmId=" + String.valueOf(orionFirmId));
			sb.append(",externalId=" + String.valueOf(externalId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append(",price=" + String.valueOf(price));
			sb.append(",priceDate=" + String.valueOf(priceDate));
			sb.append(",marketValue=" + String.valueOf(marketValue));
			sb.append(",quantity=" + String.valueOf(quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append(",isDeleted=" + String.valueOf(isDeleted));
			sb.append(",createdDate=" + String.valueOf(createdDate));
			sb.append(",createdBy=" + String.valueOf(createdBy));
			sb.append(",editedDate=" + String.valueOf(editedDate));
			sb.append(",editedBy=" + String.valueOf(editedBy));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outToFirmStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class noDataFound_positionStruct implements
			routines.system.IPersistableRow<noDataFound_positionStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					this.Symbol = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.PriceDate = readDate(dis);

					this.AccountNumber = readString(dis);

					this.AccountId = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MarketValue = null;
					} else {
						this.MarketValue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedSTGL = null;
					} else {
						this.PositionYTDRealizedSTGL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedLTGL = null;
					} else {
						this.PositionYTDRealizedLTGL = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// String

				writeString(this.Symbol, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// java.util.Date

				writeDate(this.PriceDate, dos);

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountId, dos);

				// Float

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Float

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				// Float

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Symbol=" + Symbol);
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(noDataFound_positionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.PriceDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedSTGL = null;
					} else {
						this.PositionYTDRealizedSTGL = dis.readFloat();
					}

					this.AccountNumber = readString(dis);

					this.AccountId = readString(dis);

					this.Symbol = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MarketValue = null;
					} else {
						this.MarketValue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedLTGL = null;
					} else {
						this.PositionYTDRealizedLTGL = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// java.util.Date

				writeDate(this.PriceDate, dos);

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Float

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.Symbol, dos);

				// Float

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				// Float

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",Symbol=" + Symbol);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_1_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_1_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.PriceDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedSTGL = null;
					} else {
						this.PositionYTDRealizedSTGL = dis.readFloat();
					}

					this.AccountNumber = readString(dis);

					this.AccountId = readString(dis);

					this.Symbol = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MarketValue = null;
					} else {
						this.MarketValue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedLTGL = null;
					} else {
						this.PositionYTDRealizedLTGL = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// java.util.Date

				writeDate(this.PriceDate, dos);

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Float

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.Symbol, dos);

				// Float

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				// Float

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",Symbol=" + Symbol);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_1_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tAmazonAuroraInput_1Struct implements
			routines.system.IPersistableRow<after_tAmazonAuroraInput_1Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];

		public Integer OrionFirmId;

		public Integer getOrionFirmId() {
			return this.OrionFirmId;
		}

		public Integer ExternalId;

		public Integer getExternalId() {
			return this.ExternalId;
		}

		public Float Price;

		public Float getPrice() {
			return this.Price;
		}

		public java.util.Date PriceDate;

		public java.util.Date getPriceDate() {
			return this.PriceDate;
		}

		public Float Quantity;

		public Float getQuantity() {
			return this.Quantity;
		}

		public Float PositionYTDRealizedSTGL;

		public Float getPositionYTDRealizedSTGL() {
			return this.PositionYTDRealizedSTGL;
		}

		public String AccountNumber;

		public String getAccountNumber() {
			return this.AccountNumber;
		}

		public String AccountId;

		public String getAccountId() {
			return this.AccountId;
		}

		public String Symbol;

		public String getSymbol() {
			return this.Symbol;
		}

		public Float MarketValue;

		public Float getMarketValue() {
			return this.MarketValue;
		}

		public Float PositionYTDRealizedLTGL;

		public Float getPositionYTDRealizedLTGL() {
			return this.PositionYTDRealizedLTGL;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.OrionFirmId = readInteger(dis);

					this.ExternalId = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readFloat();
					}

					this.PriceDate = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Quantity = null;
					} else {
						this.Quantity = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedSTGL = null;
					} else {
						this.PositionYTDRealizedSTGL = dis.readFloat();
					}

					this.AccountNumber = readString(dis);

					this.AccountId = readString(dis);

					this.Symbol = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MarketValue = null;
					} else {
						this.MarketValue = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PositionYTDRealizedLTGL = null;
					} else {
						this.PositionYTDRealizedLTGL = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OrionFirmId, dos);

				// Integer

				writeInteger(this.ExternalId, dos);

				// Float

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price);
				}

				// java.util.Date

				writeDate(this.PriceDate, dos);

				// Float

				if (this.Quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Quantity);
				}

				// Float

				if (this.PositionYTDRealizedSTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedSTGL);
				}

				// String

				writeString(this.AccountNumber, dos);

				// String

				writeString(this.AccountId, dos);

				// String

				writeString(this.Symbol, dos);

				// Float

				if (this.MarketValue == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MarketValue);
				}

				// Float

				if (this.PositionYTDRealizedLTGL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PositionYTDRealizedLTGL);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrionFirmId=" + String.valueOf(OrionFirmId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",PriceDate=" + String.valueOf(PriceDate));
			sb.append(",Quantity=" + String.valueOf(Quantity));
			sb.append(",PositionYTDRealizedSTGL="
					+ String.valueOf(PositionYTDRealizedSTGL));
			sb.append(",AccountNumber=" + AccountNumber);
			sb.append(",AccountId=" + AccountId);
			sb.append(",Symbol=" + Symbol);
			sb.append(",MarketValue=" + String.valueOf(MarketValue));
			sb.append(",PositionYTDRealizedLTGL="
					+ String.valueOf(PositionYTDRealizedLTGL));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tAmazonAuroraInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_1_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tAmazonAuroraInput_4_inProcess(globalMap);
				tAmazonAuroraInput_3_inProcess(globalMap);
				tAmazonAuroraInput_2_inProcess(globalMap);

				row_tAmazonAuroraInput_1_inStruct row_tAmazonAuroraInput_1_in = new row_tAmazonAuroraInput_1_inStruct();
				row_tAmazonAuroraInput_1_inStruct row30 = row_tAmazonAuroraInput_1_in;
				ErrorRejectStruct ErrorReject = new ErrorRejectStruct();
				outToFirmStruct outToFirm = new outToFirmStruct();
				noDataFound_positionStruct noDataFound_position = new noDataFound_positionStruct();

				/**
				 * [tAmazonMysqlOutput_3 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_3", false);
				start_Hash.put("tAmazonMysqlOutput_3",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_3";

				int tos_count_tAmazonMysqlOutput_3 = 0;

				int nb_line_tAmazonMysqlOutput_3 = 0;
				int nb_line_update_tAmazonMysqlOutput_3 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_3 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_3 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_3 = 0;

				int deletedCount_tAmazonMysqlOutput_3 = 0;
				int updatedCount_tAmazonMysqlOutput_3 = 0;
				int insertedCount_tAmazonMysqlOutput_3 = 0;

				int rejectedCount_tAmazonMysqlOutput_3 = 0;

				String tableName_tAmazonMysqlOutput_3 = "importError_Position";
				boolean whetherReject_tAmazonMysqlOutput_3 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_3 = calendar_tAmazonMysqlOutput_3
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_3 = calendar_tAmazonMysqlOutput_3
						.getTime().getTime();
				long date_tAmazonMysqlOutput_3;

				java.sql.Connection conn_tAmazonMysqlOutput_3 = null;
				String dbProperties_tAmazonMysqlOutput_3 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_3 = null;
				if (dbProperties_tAmazonMysqlOutput_3 == null
						|| dbProperties_tAmazonMysqlOutput_3.trim().length() == 0) {
					url_tAmazonMysqlOutput_3 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_3 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_3;
				}
				String dbUser_tAmazonMysqlOutput_3 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_3 = context.password;

				String dbPwd_tAmazonMysqlOutput_3 = decryptedPassword_tAmazonMysqlOutput_3;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_3 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_3,
								dbUser_tAmazonMysqlOutput_3,
								dbPwd_tAmazonMysqlOutput_3);

				resourceMap.put("conn_tAmazonMysqlOutput_3",
						conn_tAmazonMysqlOutput_3);

				conn_tAmazonMysqlOutput_3.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_3 = 1000000;
				int commitCounter_tAmazonMysqlOutput_3 = 0;

				int count_tAmazonMysqlOutput_3 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_3 = conn_tAmazonMysqlOutput_3
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_3 = dbMetaData_tAmazonMysqlOutput_3
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_3 = false;
				while (rsTable_tAmazonMysqlOutput_3.next()) {
					String table_tAmazonMysqlOutput_3 = rsTable_tAmazonMysqlOutput_3
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_3
							.equalsIgnoreCase("importError_Position")) {
						whetherExist_tAmazonMysqlOutput_3 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_3.close();
				if (!whetherExist_tAmazonMysqlOutput_3) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_3 = conn_tAmazonMysqlOutput_3
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_3
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_3
									+ "`(`OrionFirmId` INT(11)  ,`ExternalId` INT(11)  ,`Symbol` VARCHAR(30)  ,`Price` FLOAT(10,0)  ,`PriceDate` DATETIME ,`AccountNumber` VARCHAR(50)  ,`AccountId` VARCHAR(50)  ,`MarketValue` FLOAT(10,0)  ,`Quantity` FLOAT(10,2)  ,`PositionYTDRealizedSTGL` FLOAT(10,0)  ,`PositionYTDRealizedLTGL` FLOAT(10,0)  ,`errorMessage` VARCHAR(2555)  ,`errorStackTrace` VARCHAR(2555)  )");
					stmtCreate_tAmazonMysqlOutput_3.close();
				}

				String insert_tAmazonMysqlOutput_3 = "INSERT INTO `"
						+ "importError_Position"
						+ "` (`OrionFirmId`,`ExternalId`,`Symbol`,`Price`,`PriceDate`,`AccountNumber`,`AccountId`,`MarketValue`,`Quantity`,`PositionYTDRealizedSTGL`,`PositionYTDRealizedLTGL`,`errorMessage`,`errorStackTrace`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_3 = conn_tAmazonMysqlOutput_3
						.prepareStatement(insert_tAmazonMysqlOutput_3);

				/**
				 * [tAmazonMysqlOutput_3 begin ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_1", false);
				start_Hash.put("tAmazonMysqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_1";

				int tos_count_tAmazonMysqlOutput_1 = 0;

				int nb_line_tAmazonMysqlOutput_1 = 0;
				int nb_line_update_tAmazonMysqlOutput_1 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_1 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_1 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_1 = 0;

				int deletedCount_tAmazonMysqlOutput_1 = 0;
				int updatedCount_tAmazonMysqlOutput_1 = 0;
				int insertedCount_tAmazonMysqlOutput_1 = 0;

				int rejectedCount_tAmazonMysqlOutput_1 = 0;

				String tableName_tAmazonMysqlOutput_1 = "position";
				boolean whetherReject_tAmazonMysqlOutput_1 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_1 = calendar_tAmazonMysqlOutput_1
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_1 = calendar_tAmazonMysqlOutput_1
						.getTime().getTime();
				long date_tAmazonMysqlOutput_1;

				java.sql.Connection conn_tAmazonMysqlOutput_1 = null;
				String dbProperties_tAmazonMysqlOutput_1 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_1 = null;
				if (dbProperties_tAmazonMysqlOutput_1 == null
						|| dbProperties_tAmazonMysqlOutput_1.trim().length() == 0) {
					url_tAmazonMysqlOutput_1 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_1 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_1;
				}
				String dbUser_tAmazonMysqlOutput_1 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_1 = context.password;

				String dbPwd_tAmazonMysqlOutput_1 = decryptedPassword_tAmazonMysqlOutput_1;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_1 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_1,
								dbUser_tAmazonMysqlOutput_1,
								dbPwd_tAmazonMysqlOutput_1);

				resourceMap.put("conn_tAmazonMysqlOutput_1",
						conn_tAmazonMysqlOutput_1);

				conn_tAmazonMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_1 = 1000000;
				int commitCounter_tAmazonMysqlOutput_1 = 0;

				int count_tAmazonMysqlOutput_1 = 0;

				String insert_tAmazonMysqlOutput_1 = "INSERT INTO `"
						+ "position"
						+ "` (`accountId`,`SecurityId`,`orionFirmId`,`externalId`,`orionEclipseFirmId`,`price`,`priceDate`,`marketValue`,`quantity`,`PositionYTDRealizedSTGL`,`PositionYTDRealizedLTGL`,`isDeleted`,`createdDate`,`createdBy`,`editedDate`,`editedBy`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_1 = conn_tAmazonMysqlOutput_1
						.prepareStatement(insert_tAmazonMysqlOutput_1);

				/**
				 * [tAmazonMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tAmazonMysqlOutput_2", false);
				start_Hash.put("tAmazonMysqlOutput_2",
						System.currentTimeMillis());

				currentComponent = "tAmazonMysqlOutput_2";

				int tos_count_tAmazonMysqlOutput_2 = 0;

				int nb_line_tAmazonMysqlOutput_2 = 0;
				int nb_line_update_tAmazonMysqlOutput_2 = 0;
				int nb_line_inserted_tAmazonMysqlOutput_2 = 0;
				int nb_line_deleted_tAmazonMysqlOutput_2 = 0;
				int nb_line_rejected_tAmazonMysqlOutput_2 = 0;

				int deletedCount_tAmazonMysqlOutput_2 = 0;
				int updatedCount_tAmazonMysqlOutput_2 = 0;
				int insertedCount_tAmazonMysqlOutput_2 = 0;

				int rejectedCount_tAmazonMysqlOutput_2 = 0;

				String tableName_tAmazonMysqlOutput_2 = "noDataFound_Position";
				boolean whetherReject_tAmazonMysqlOutput_2 = false;

				java.util.Calendar calendar_tAmazonMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tAmazonMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tAmazonMysqlOutput_2 = calendar_tAmazonMysqlOutput_2
						.getTime().getTime();
				calendar_tAmazonMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tAmazonMysqlOutput_2 = calendar_tAmazonMysqlOutput_2
						.getTime().getTime();
				long date_tAmazonMysqlOutput_2;

				java.sql.Connection conn_tAmazonMysqlOutput_2 = null;
				String dbProperties_tAmazonMysqlOutput_2 = "noDatetimeStringSync=true";
				String url_tAmazonMysqlOutput_2 = null;
				if (dbProperties_tAmazonMysqlOutput_2 == null
						|| dbProperties_tAmazonMysqlOutput_2.trim().length() == 0) {
					url_tAmazonMysqlOutput_2 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tAmazonMysqlOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tAmazonMysqlOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tAmazonMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tAmazonMysqlOutput_2 = "jdbc:mysql://"
							+ context.serverIp + ":" + context.port + "/"
							+ context.database + "?"
							+ properties_tAmazonMysqlOutput_2;
				}
				String dbUser_tAmazonMysqlOutput_2 = context.username;

				final String decryptedPassword_tAmazonMysqlOutput_2 = context.password;

				String dbPwd_tAmazonMysqlOutput_2 = decryptedPassword_tAmazonMysqlOutput_2;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				conn_tAmazonMysqlOutput_2 = java.sql.DriverManager
						.getConnection(url_tAmazonMysqlOutput_2,
								dbUser_tAmazonMysqlOutput_2,
								dbPwd_tAmazonMysqlOutput_2);

				resourceMap.put("conn_tAmazonMysqlOutput_2",
						conn_tAmazonMysqlOutput_2);

				conn_tAmazonMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tAmazonMysqlOutput_2 = 1000000;
				int commitCounter_tAmazonMysqlOutput_2 = 0;

				int count_tAmazonMysqlOutput_2 = 0;

				java.sql.DatabaseMetaData dbMetaData_tAmazonMysqlOutput_2 = conn_tAmazonMysqlOutput_2
						.getMetaData();
				java.sql.ResultSet rsTable_tAmazonMysqlOutput_2 = dbMetaData_tAmazonMysqlOutput_2
						.getTables(null, null, null, new String[] { "TABLE" });
				boolean whetherExist_tAmazonMysqlOutput_2 = false;
				while (rsTable_tAmazonMysqlOutput_2.next()) {
					String table_tAmazonMysqlOutput_2 = rsTable_tAmazonMysqlOutput_2
							.getString("TABLE_NAME");
					if (table_tAmazonMysqlOutput_2
							.equalsIgnoreCase("noDataFound_Position")) {
						whetherExist_tAmazonMysqlOutput_2 = true;
						break;
					}
				}
				rsTable_tAmazonMysqlOutput_2.close();
				if (!whetherExist_tAmazonMysqlOutput_2) {
					java.sql.Statement stmtCreate_tAmazonMysqlOutput_2 = conn_tAmazonMysqlOutput_2
							.createStatement();
					stmtCreate_tAmazonMysqlOutput_2
							.execute("CREATE TABLE `"
									+ tableName_tAmazonMysqlOutput_2
									+ "`(`OrionFirmId` INT(11)  ,`ExternalId` INT(11)  ,`Symbol` VARCHAR(30)  ,`Price` FLOAT(10,0)  ,`PriceDate` DATETIME ,`AccountNumber` VARCHAR(50)  ,`AccountId` VARCHAR(50)  ,`MarketValue` FLOAT(10,0)  ,`Quantity` FLOAT(10,2)  ,`PositionYTDRealizedSTGL` FLOAT(10,0)  ,`PositionYTDRealizedLTGL` FLOAT(10,0)  )");
					stmtCreate_tAmazonMysqlOutput_2.close();
				}

				String insert_tAmazonMysqlOutput_2 = "INSERT INTO `"
						+ "noDataFound_Position"
						+ "` (`OrionFirmId`,`ExternalId`,`Symbol`,`Price`,`PriceDate`,`AccountNumber`,`AccountId`,`MarketValue`,`Quantity`,`PositionYTDRealizedSTGL`,`PositionYTDRealizedLTGL`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tAmazonMysqlOutput_2 = conn_tAmazonMysqlOutput_2
						.prepareStatement(insert_tAmazonMysqlOutput_2);

				/**
				 * [tAmazonMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) globalMap
						.get("tHash_Lookup_row31"));

				row31Struct row31HashKey = new row31Struct();
				row31Struct row31Default = new row31Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) globalMap
						.get("tHash_Lookup_row32"));

				row32Struct row32HashKey = new row32Struct();
				row32Struct row32Default = new row32Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) globalMap
						.get("tHash_Lookup_row39"));

				row39Struct row39HashKey = new row39Struct();
				row39Struct row39Default = new row39Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ErrorRejectStruct ErrorReject_tmp = new ErrorRejectStruct();
				outToFirmStruct outToFirm_tmp = new outToFirmStruct();
				noDataFound_positionStruct noDataFound_position_tmp = new noDataFound_positionStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_out", false);
				start_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				int tos_count_tAmazonAuroraInput_1_out = 0;

				/**
				 * [tAmazonAuroraInput_1_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_1_in", false);
				start_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				int tos_count_tAmazonAuroraInput_1_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_1_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_1_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_1_in = calendar_tAmazonAuroraInput_1_in
						.getTime();
				int nb_line_tAmazonAuroraInput_1_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_1_in = null;
				String driverClass_tAmazonAuroraInput_1_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_1_in);
				String dbUser_tAmazonAuroraInput_1_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_1_in = context.password;

				String dbPwd_tAmazonAuroraInput_1_in = decryptedPassword_tAmazonAuroraInput_1_in;

				String url_tAmazonAuroraInput_1_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_1_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_1_in,
								dbUser_tAmazonAuroraInput_1_in,
								dbPwd_tAmazonAuroraInput_1_in);

				java.sql.Statement stmt_tAmazonAuroraInput_1_in = conn_tAmazonAuroraInput_1_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_1_in = "select  OrionFirmId , ExternalId , Price , PriceDate   , Quantity , PositionYTDRealizedSTGL ,AccountNumber , AccountId  , Symbol , MarketValue ,PositionYTDRealizedLTGL  from positionInsert  where id between 1 and 200000";

				globalMap.put("tAmazonAuroraInput_1_QUERY",
						dbquery_tAmazonAuroraInput_1_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_1_in = null;
				try {
					rs_tAmazonAuroraInput_1_in = stmt_tAmazonAuroraInput_1_in
							.executeQuery(dbquery_tAmazonAuroraInput_1_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_1_in = rs_tAmazonAuroraInput_1_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_1_in = rsmd_tAmazonAuroraInput_1_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_1_in = null;

					while (rs_tAmazonAuroraInput_1_in.next()) {
						nb_line_tAmazonAuroraInput_1_in++;

						if (colQtyInRs_tAmazonAuroraInput_1_in < 1) {
							row_tAmazonAuroraInput_1_in.OrionFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(1) != null) {
								row_tAmazonAuroraInput_1_in.OrionFirmId = rs_tAmazonAuroraInput_1_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_1_in.OrionFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 2) {
							row_tAmazonAuroraInput_1_in.ExternalId = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(2) != null) {
								row_tAmazonAuroraInput_1_in.ExternalId = rs_tAmazonAuroraInput_1_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_1_in.ExternalId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 3) {
							row_tAmazonAuroraInput_1_in.Price = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(3) != null) {
								row_tAmazonAuroraInput_1_in.Price = rs_tAmazonAuroraInput_1_in
										.getFloat(3);
							} else {
								row_tAmazonAuroraInput_1_in.Price = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 4) {
							row_tAmazonAuroraInput_1_in.PriceDate = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getString(4) != null) {
								String dateString_tAmazonAuroraInput_1_in = rs_tAmazonAuroraInput_1_in
										.getString(4);
								if (!("0000-00-00")
										.equals(dateString_tAmazonAuroraInput_1_in)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tAmazonAuroraInput_1_in)) {
									row_tAmazonAuroraInput_1_in.PriceDate = rs_tAmazonAuroraInput_1_in
											.getTimestamp(4);
								} else {
									row_tAmazonAuroraInput_1_in.PriceDate = (java.util.Date) year0_tAmazonAuroraInput_1_in
											.clone();
								}
							} else {
								row_tAmazonAuroraInput_1_in.PriceDate = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 5) {
							row_tAmazonAuroraInput_1_in.Quantity = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(5) != null) {
								row_tAmazonAuroraInput_1_in.Quantity = rs_tAmazonAuroraInput_1_in
										.getFloat(5);
							} else {
								row_tAmazonAuroraInput_1_in.Quantity = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 6) {
							row_tAmazonAuroraInput_1_in.PositionYTDRealizedSTGL = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(6) != null) {
								row_tAmazonAuroraInput_1_in.PositionYTDRealizedSTGL = rs_tAmazonAuroraInput_1_in
										.getFloat(6);
							} else {
								row_tAmazonAuroraInput_1_in.PositionYTDRealizedSTGL = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 7) {
							row_tAmazonAuroraInput_1_in.AccountNumber = null;
						} else {

							row_tAmazonAuroraInput_1_in.AccountNumber = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 7,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 8) {
							row_tAmazonAuroraInput_1_in.AccountId = null;
						} else {

							row_tAmazonAuroraInput_1_in.AccountId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 8,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 9) {
							row_tAmazonAuroraInput_1_in.Symbol = null;
						} else {

							row_tAmazonAuroraInput_1_in.Symbol = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_1_in, 9,
											false);
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 10) {
							row_tAmazonAuroraInput_1_in.MarketValue = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(10) != null) {
								row_tAmazonAuroraInput_1_in.MarketValue = rs_tAmazonAuroraInput_1_in
										.getFloat(10);
							} else {
								row_tAmazonAuroraInput_1_in.MarketValue = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_1_in < 11) {
							row_tAmazonAuroraInput_1_in.PositionYTDRealizedLTGL = null;
						} else {

							if (rs_tAmazonAuroraInput_1_in.getObject(11) != null) {
								row_tAmazonAuroraInput_1_in.PositionYTDRealizedLTGL = rs_tAmazonAuroraInput_1_in
										.getFloat(11);
							} else {
								row_tAmazonAuroraInput_1_in.PositionYTDRealizedLTGL = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_1_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

						tos_count_tAmazonAuroraInput_1_in++;

						/**
						 * [tAmazonAuroraInput_1_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_1_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_out";

						row30 = row_tAmazonAuroraInput_1_in;

						tos_count_tAmazonAuroraInput_1_out++;

						/**
						 * [tAmazonAuroraInput_1_out main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row31"
						// /////////////////////////////////////////////

						boolean forceLooprow31 = false;

						row31Struct row31ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row31HashKey.symbol = row30.Symbol;

							row31HashKey.hashCodeDirty = true;

							tHash_Lookup_row31.lookup(row31HashKey);

							if (!tHash_Lookup_row31.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row31 != null
								&& tHash_Lookup_row31.getCount(row31HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row31' and it contains more one result from keys :  row31.symbol = '"
							// + row31HashKey.symbol + "'");
						} // G 071

						row31Struct row31 = null;

						row31Struct fromLookup_row31 = null;
						row31 = row31Default;

						if (tHash_Lookup_row31 != null
								&& tHash_Lookup_row31.hasNext()) { // G 099

							fromLookup_row31 = tHash_Lookup_row31.next();

						} // G 099

						if (fromLookup_row31 != null) {
							row31 = fromLookup_row31;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row32"
						// /////////////////////////////////////////////

						boolean forceLooprow32 = false;

						row32Struct row32ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row32HashKey.accountId = row30.AccountId;

							row32HashKey.hashCodeDirty = true;

							tHash_Lookup_row32.lookup(row32HashKey);

							if (!tHash_Lookup_row32.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row32 != null
								&& tHash_Lookup_row32.getCount(row32HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row32' and it contains more one result from keys :  row32.accountId = '"
							// + row32HashKey.accountId + "'");
						} // G 071

						row32Struct row32 = null;

						row32Struct fromLookup_row32 = null;
						row32 = row32Default;

						if (tHash_Lookup_row32 != null
								&& tHash_Lookup_row32.hasNext()) { // G 099

							fromLookup_row32 = tHash_Lookup_row32.next();

						} // G 099

						if (fromLookup_row32 != null) {
							row32 = fromLookup_row32;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row39"
						// /////////////////////////////////////////////

						boolean forceLooprow39 = false;

						row39Struct row39ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row39HashKey.orionConnectFirmId = row30.OrionFirmId;

							row39HashKey.hashCodeDirty = true;

							tHash_Lookup_row39.lookup(row39HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row39 != null
								&& tHash_Lookup_row39.getCount(row39HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row39' and it contains more one result from keys :  row39.orionConnectFirmId = '"
							// + row39HashKey.orionConnectFirmId + "'");
						} // G 071

						row39Struct row39 = null;

						row39Struct fromLookup_row39 = null;
						row39 = row39Default;

						if (tHash_Lookup_row39 != null
								&& tHash_Lookup_row39.hasNext()) { // G 099

							fromLookup_row39 = tHash_Lookup_row39.next();

						} // G 099

						if (fromLookup_row39 != null) {
							row39 = fromLookup_row39;
						}

						try {
							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								ErrorReject = null;
								outToFirm = null;
								noDataFound_position = null;

								if (!rejectedInnerJoin_tMap_1) {

									// # Output table : 'outToFirm'
									outToFirm_tmp.accountId = row32.id;
									outToFirm_tmp.SecurityId = row31.id;
									outToFirm_tmp.orionFirmId = row30.OrionFirmId;
									outToFirm_tmp.externalId = row30.ExternalId;
									outToFirm_tmp.orionEclipseFirmId = row39.orionEclipseFirmId;
									outToFirm_tmp.price = row30.Price;
									outToFirm_tmp.priceDate = row30.PriceDate;
									outToFirm_tmp.marketValue = row30.MarketValue;
									outToFirm_tmp.quantity = row30.Quantity;
									outToFirm_tmp.PositionYTDRealizedSTGL = row30.PositionYTDRealizedSTGL;
									outToFirm_tmp.PositionYTDRealizedLTGL = row30.PositionYTDRealizedLTGL;
									outToFirm_tmp.isDeleted = false;
									outToFirm_tmp.createdDate = TalendDate
											.getCurrentDate();
									outToFirm_tmp.createdBy = 1;
									outToFirm_tmp.editedDate = TalendDate
											.getCurrentDate();
									outToFirm_tmp.editedBy = 1;
									outToFirm = outToFirm_tmp;
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table :
								// 'noDataFound_position'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_1) {
									noDataFound_position_tmp.OrionFirmId = row30.OrionFirmId;
									noDataFound_position_tmp.ExternalId = row30.ExternalId;
									noDataFound_position_tmp.Symbol = row30.Symbol;
									noDataFound_position_tmp.Price = row30.Price;
									noDataFound_position_tmp.PriceDate = row30.PriceDate;
									noDataFound_position_tmp.AccountNumber = row30.AccountNumber;
									noDataFound_position_tmp.AccountId = row30.AccountId;
									noDataFound_position_tmp.MarketValue = row30.MarketValue;
									noDataFound_position_tmp.Quantity = row30.Quantity;
									noDataFound_position_tmp.PositionYTDRealizedSTGL = row30.PositionYTDRealizedSTGL;
									noDataFound_position_tmp.PositionYTDRealizedLTGL = row30.PositionYTDRealizedLTGL;
									noDataFound_position = noDataFound_position_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

						} catch (java.lang.Exception e) {
							// if anohter java.lang.Exception when processing an
							// java.lang.Exception

							try {// EE
								Var__tMap_1__Struct Var = Var__tMap_1;

								ErrorReject_tmp.OrionFirmId = row30.OrionFirmId;
								ErrorReject_tmp.ExternalId = row30.ExternalId;
								ErrorReject_tmp.Symbol = row30.Symbol;
								ErrorReject_tmp.Price = row30.Price;
								ErrorReject_tmp.PriceDate = row30.PriceDate;
								ErrorReject_tmp.AccountNumber = row30.AccountNumber;
								ErrorReject_tmp.AccountId = row30.AccountId;
								ErrorReject_tmp.MarketValue = row30.MarketValue;
								ErrorReject_tmp.Quantity = row30.Quantity;
								ErrorReject_tmp.PositionYTDRealizedSTGL = row30.PositionYTDRealizedSTGL;
								ErrorReject_tmp.PositionYTDRealizedLTGL = row30.PositionYTDRealizedLTGL;
								ErrorReject = ErrorReject_tmp;
								ErrorReject.errorMessage = e.getMessage();
								ErrorReject.errorStackTrace = ResumeUtil
										.getExceptionStackTrace(e);

								outToFirm = null;
								noDataFound_position = null;
							} catch (java.lang.Exception ee) {// EE

								ee.printStackTrace();
								outToFirm = null;
								noDataFound_position = null;
							}// EE
						}// end catch

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "ErrorReject"
						if (ErrorReject != null) {

							/**
							 * [tAmazonMysqlOutput_3 main ] start
							 */

							currentComponent = "tAmazonMysqlOutput_3";

							whetherReject_tAmazonMysqlOutput_3 = false;
							if (ErrorReject.OrionFirmId == null) {
								pstmt_tAmazonMysqlOutput_3.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonMysqlOutput_3.setInt(1,
										ErrorReject.OrionFirmId);
							}

							if (ErrorReject.ExternalId == null) {
								pstmt_tAmazonMysqlOutput_3.setNull(2,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonMysqlOutput_3.setInt(2,
										ErrorReject.ExternalId);
							}

							if (ErrorReject.Symbol == null) {
								pstmt_tAmazonMysqlOutput_3.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonMysqlOutput_3.setString(3,
										ErrorReject.Symbol);
							}

							if (ErrorReject.Price == null) {
								pstmt_tAmazonMysqlOutput_3.setNull(4,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_3.setFloat(4,
										ErrorReject.Price);
							}

							if (ErrorReject.PriceDate != null) {
								date_tAmazonMysqlOutput_3 = ErrorReject.PriceDate
										.getTime();
								if (date_tAmazonMysqlOutput_3 < year1_tAmazonMysqlOutput_3
										|| date_tAmazonMysqlOutput_3 >= year10000_tAmazonMysqlOutput_3) {
									pstmt_tAmazonMysqlOutput_3.setString(5,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tAmazonMysqlOutput_3.setTimestamp(5,
											new java.sql.Timestamp(
													date_tAmazonMysqlOutput_3));
								}
							} else {
								pstmt_tAmazonMysqlOutput_3.setNull(5,
										java.sql.Types.DATE);
							}

							if (ErrorReject.AccountNumber == null) {
								pstmt_tAmazonMysqlOutput_3.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonMysqlOutput_3.setString(6,
										ErrorReject.AccountNumber);
							}

							if (ErrorReject.AccountId == null) {
								pstmt_tAmazonMysqlOutput_3.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonMysqlOutput_3.setString(7,
										ErrorReject.AccountId);
							}

							if (ErrorReject.MarketValue == null) {
								pstmt_tAmazonMysqlOutput_3.setNull(8,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_3.setFloat(8,
										ErrorReject.MarketValue);
							}

							if (ErrorReject.Quantity == null) {
								pstmt_tAmazonMysqlOutput_3.setNull(9,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_3.setFloat(9,
										ErrorReject.Quantity);
							}

							if (ErrorReject.PositionYTDRealizedSTGL == null) {
								pstmt_tAmazonMysqlOutput_3.setNull(10,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_3.setFloat(10,
										ErrorReject.PositionYTDRealizedSTGL);
							}

							if (ErrorReject.PositionYTDRealizedLTGL == null) {
								pstmt_tAmazonMysqlOutput_3.setNull(11,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_3.setFloat(11,
										ErrorReject.PositionYTDRealizedLTGL);
							}

							if (ErrorReject.errorMessage == null) {
								pstmt_tAmazonMysqlOutput_3.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonMysqlOutput_3.setString(12,
										ErrorReject.errorMessage);
							}

							if (ErrorReject.errorStackTrace == null) {
								pstmt_tAmazonMysqlOutput_3.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonMysqlOutput_3.setString(13,
										ErrorReject.errorStackTrace);
							}

							try {
								nb_line_tAmazonMysqlOutput_3++;
								insertedCount_tAmazonMysqlOutput_3 = insertedCount_tAmazonMysqlOutput_3
										+ pstmt_tAmazonMysqlOutput_3
												.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tAmazonMysqlOutput_3 = true;
								System.err.print(e.getMessage());
							}
							commitCounter_tAmazonMysqlOutput_3++;
							if (commitEvery_tAmazonMysqlOutput_3 <= commitCounter_tAmazonMysqlOutput_3) {

								conn_tAmazonMysqlOutput_3.commit();

								commitCounter_tAmazonMysqlOutput_3 = 0;
							}

							tos_count_tAmazonMysqlOutput_3++;

							/**
							 * [tAmazonMysqlOutput_3 main ] stop
							 */

						} // End of branch "ErrorReject"

						// Start of branch "outToFirm"
						if (outToFirm != null) {

							/**
							 * [tAmazonMysqlOutput_1 main ] start
							 */

							currentComponent = "tAmazonMysqlOutput_1";

							whetherReject_tAmazonMysqlOutput_1 = false;
							pstmt_tAmazonMysqlOutput_1.setInt(1,
									outToFirm.accountId);

							pstmt_tAmazonMysqlOutput_1.setInt(2,
									outToFirm.SecurityId);

							pstmt_tAmazonMysqlOutput_1.setInt(3,
									outToFirm.orionFirmId);

							pstmt_tAmazonMysqlOutput_1.setInt(4,
									outToFirm.externalId);

							if (outToFirm.orionEclipseFirmId == null) {
								pstmt_tAmazonMysqlOutput_1.setNull(5,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonMysqlOutput_1.setInt(5,
										outToFirm.orionEclipseFirmId);
							}

							pstmt_tAmazonMysqlOutput_1.setFloat(6,
									outToFirm.price);

							if (outToFirm.priceDate != null) {
								date_tAmazonMysqlOutput_1 = outToFirm.priceDate
										.getTime();
								if (date_tAmazonMysqlOutput_1 < year1_tAmazonMysqlOutput_1
										|| date_tAmazonMysqlOutput_1 >= year10000_tAmazonMysqlOutput_1) {
									pstmt_tAmazonMysqlOutput_1.setString(7,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tAmazonMysqlOutput_1.setTimestamp(7,
											new java.sql.Timestamp(
													date_tAmazonMysqlOutput_1));
								}
							} else {
								pstmt_tAmazonMysqlOutput_1.setNull(7,
										java.sql.Types.DATE);
							}

							pstmt_tAmazonMysqlOutput_1.setFloat(8,
									outToFirm.marketValue);

							pstmt_tAmazonMysqlOutput_1.setFloat(9,
									outToFirm.quantity);

							pstmt_tAmazonMysqlOutput_1.setFloat(10,
									outToFirm.PositionYTDRealizedSTGL);

							pstmt_tAmazonMysqlOutput_1.setFloat(11,
									outToFirm.PositionYTDRealizedLTGL);

							pstmt_tAmazonMysqlOutput_1.setBoolean(12,
									outToFirm.isDeleted);

							if (outToFirm.createdDate != null) {
								date_tAmazonMysqlOutput_1 = outToFirm.createdDate
										.getTime();
								if (date_tAmazonMysqlOutput_1 < year1_tAmazonMysqlOutput_1
										|| date_tAmazonMysqlOutput_1 >= year10000_tAmazonMysqlOutput_1) {
									pstmt_tAmazonMysqlOutput_1.setString(13,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tAmazonMysqlOutput_1.setTimestamp(13,
											new java.sql.Timestamp(
													date_tAmazonMysqlOutput_1));
								}
							} else {
								pstmt_tAmazonMysqlOutput_1.setNull(13,
										java.sql.Types.DATE);
							}

							pstmt_tAmazonMysqlOutput_1.setInt(14,
									outToFirm.createdBy);

							if (outToFirm.editedDate != null) {
								date_tAmazonMysqlOutput_1 = outToFirm.editedDate
										.getTime();
								if (date_tAmazonMysqlOutput_1 < year1_tAmazonMysqlOutput_1
										|| date_tAmazonMysqlOutput_1 >= year10000_tAmazonMysqlOutput_1) {
									pstmt_tAmazonMysqlOutput_1.setString(15,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tAmazonMysqlOutput_1.setTimestamp(15,
											new java.sql.Timestamp(
													date_tAmazonMysqlOutput_1));
								}
							} else {
								pstmt_tAmazonMysqlOutput_1.setNull(15,
										java.sql.Types.DATE);
							}

							pstmt_tAmazonMysqlOutput_1.setInt(16,
									outToFirm.editedBy);

							try {
								nb_line_tAmazonMysqlOutput_1++;
								insertedCount_tAmazonMysqlOutput_1 = insertedCount_tAmazonMysqlOutput_1
										+ pstmt_tAmazonMysqlOutput_1
												.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tAmazonMysqlOutput_1 = true;
								System.err.print(e.getMessage());
							}
							commitCounter_tAmazonMysqlOutput_1++;
							if (commitEvery_tAmazonMysqlOutput_1 <= commitCounter_tAmazonMysqlOutput_1) {

								conn_tAmazonMysqlOutput_1.commit();

								commitCounter_tAmazonMysqlOutput_1 = 0;
							}

							tos_count_tAmazonMysqlOutput_1++;

							/**
							 * [tAmazonMysqlOutput_1 main ] stop
							 */

						} // End of branch "outToFirm"

						// Start of branch "noDataFound_position"
						if (noDataFound_position != null) {

							/**
							 * [tAmazonMysqlOutput_2 main ] start
							 */

							currentComponent = "tAmazonMysqlOutput_2";

							whetherReject_tAmazonMysqlOutput_2 = false;
							if (noDataFound_position.OrionFirmId == null) {
								pstmt_tAmazonMysqlOutput_2.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonMysqlOutput_2.setInt(1,
										noDataFound_position.OrionFirmId);
							}

							if (noDataFound_position.ExternalId == null) {
								pstmt_tAmazonMysqlOutput_2.setNull(2,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tAmazonMysqlOutput_2.setInt(2,
										noDataFound_position.ExternalId);
							}

							if (noDataFound_position.Symbol == null) {
								pstmt_tAmazonMysqlOutput_2.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonMysqlOutput_2.setString(3,
										noDataFound_position.Symbol);
							}

							if (noDataFound_position.Price == null) {
								pstmt_tAmazonMysqlOutput_2.setNull(4,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_2.setFloat(4,
										noDataFound_position.Price);
							}

							if (noDataFound_position.PriceDate != null) {
								date_tAmazonMysqlOutput_2 = noDataFound_position.PriceDate
										.getTime();
								if (date_tAmazonMysqlOutput_2 < year1_tAmazonMysqlOutput_2
										|| date_tAmazonMysqlOutput_2 >= year10000_tAmazonMysqlOutput_2) {
									pstmt_tAmazonMysqlOutput_2.setString(5,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tAmazonMysqlOutput_2.setTimestamp(5,
											new java.sql.Timestamp(
													date_tAmazonMysqlOutput_2));
								}
							} else {
								pstmt_tAmazonMysqlOutput_2.setNull(5,
										java.sql.Types.DATE);
							}

							if (noDataFound_position.AccountNumber == null) {
								pstmt_tAmazonMysqlOutput_2.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonMysqlOutput_2.setString(6,
										noDataFound_position.AccountNumber);
							}

							if (noDataFound_position.AccountId == null) {
								pstmt_tAmazonMysqlOutput_2.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tAmazonMysqlOutput_2.setString(7,
										noDataFound_position.AccountId);
							}

							if (noDataFound_position.MarketValue == null) {
								pstmt_tAmazonMysqlOutput_2.setNull(8,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_2.setFloat(8,
										noDataFound_position.MarketValue);
							}

							if (noDataFound_position.Quantity == null) {
								pstmt_tAmazonMysqlOutput_2.setNull(9,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_2.setFloat(9,
										noDataFound_position.Quantity);
							}

							if (noDataFound_position.PositionYTDRealizedSTGL == null) {
								pstmt_tAmazonMysqlOutput_2.setNull(10,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_2
										.setFloat(
												10,
												noDataFound_position.PositionYTDRealizedSTGL);
							}

							if (noDataFound_position.PositionYTDRealizedLTGL == null) {
								pstmt_tAmazonMysqlOutput_2.setNull(11,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tAmazonMysqlOutput_2
										.setFloat(
												11,
												noDataFound_position.PositionYTDRealizedLTGL);
							}

							try {
								nb_line_tAmazonMysqlOutput_2++;
								insertedCount_tAmazonMysqlOutput_2 = insertedCount_tAmazonMysqlOutput_2
										+ pstmt_tAmazonMysqlOutput_2
												.executeUpdate();
							} catch (java.lang.Exception e) {
								whetherReject_tAmazonMysqlOutput_2 = true;
								System.err.print(e.getMessage());
							}
							commitCounter_tAmazonMysqlOutput_2++;
							if (commitEvery_tAmazonMysqlOutput_2 <= commitCounter_tAmazonMysqlOutput_2) {

								conn_tAmazonMysqlOutput_2.commit();

								commitCounter_tAmazonMysqlOutput_2 = 0;
							}

							tos_count_tAmazonMysqlOutput_2++;

							/**
							 * [tAmazonMysqlOutput_2 main ] stop
							 */

						} // End of branch "noDataFound_position"

						/**
						 * [tAmazonAuroraInput_1_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_1";

						currentComponent = "tAmazonAuroraInput_1_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_1_in != null) {
						rs_tAmazonAuroraInput_1_in.close();
					}
					stmt_tAmazonAuroraInput_1_in.close();
					if (conn_tAmazonAuroraInput_1_in != null
							&& !conn_tAmazonAuroraInput_1_in.isClosed()) {

						conn_tAmazonAuroraInput_1_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_1_NB_LINE",
						nb_line_tAmazonAuroraInput_1_in);

				ok_Hash.put("tAmazonAuroraInput_1_in", true);
				end_Hash.put("tAmazonAuroraInput_1_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				ok_Hash.put("tAmazonAuroraInput_1_out", true);
				end_Hash.put("tAmazonAuroraInput_1_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_1_out end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row31 != null) {
					tHash_Lookup_row31.endGet();
				}
				globalMap.remove("tHash_Lookup_row31");

				if (tHash_Lookup_row32 != null) {
					tHash_Lookup_row32.endGet();
				}
				globalMap.remove("tHash_Lookup_row32");

				if (tHash_Lookup_row39 != null) {
					tHash_Lookup_row39.endGet();
				}
				globalMap.remove("tHash_Lookup_row39");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_3 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_3";

				if (pstmt_tAmazonMysqlOutput_3 != null) {
					pstmt_tAmazonMysqlOutput_3.close();
				}

				if (commitCounter_tAmazonMysqlOutput_3 > 0) {

					conn_tAmazonMysqlOutput_3.commit();

				}

				conn_tAmazonMysqlOutput_3.close();

				resourceMap.put("finish_tAmazonMysqlOutput_3", true);

				nb_line_deleted_tAmazonMysqlOutput_3 = nb_line_deleted_tAmazonMysqlOutput_3
						+ deletedCount_tAmazonMysqlOutput_3;
				nb_line_update_tAmazonMysqlOutput_3 = nb_line_update_tAmazonMysqlOutput_3
						+ updatedCount_tAmazonMysqlOutput_3;
				nb_line_inserted_tAmazonMysqlOutput_3 = nb_line_inserted_tAmazonMysqlOutput_3
						+ insertedCount_tAmazonMysqlOutput_3;
				nb_line_rejected_tAmazonMysqlOutput_3 = nb_line_rejected_tAmazonMysqlOutput_3
						+ rejectedCount_tAmazonMysqlOutput_3;

				globalMap.put("tAmazonMysqlOutput_3_NB_LINE",
						nb_line_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_3);
				globalMap.put("tAmazonMysqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_3);

				ok_Hash.put("tAmazonMysqlOutput_3", true);
				end_Hash.put("tAmazonMysqlOutput_3", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_3 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_1";

				if (pstmt_tAmazonMysqlOutput_1 != null) {
					pstmt_tAmazonMysqlOutput_1.close();
				}

				if (commitCounter_tAmazonMysqlOutput_1 > 0) {

					conn_tAmazonMysqlOutput_1.commit();

				}

				conn_tAmazonMysqlOutput_1.close();

				resourceMap.put("finish_tAmazonMysqlOutput_1", true);

				nb_line_deleted_tAmazonMysqlOutput_1 = nb_line_deleted_tAmazonMysqlOutput_1
						+ deletedCount_tAmazonMysqlOutput_1;
				nb_line_update_tAmazonMysqlOutput_1 = nb_line_update_tAmazonMysqlOutput_1
						+ updatedCount_tAmazonMysqlOutput_1;
				nb_line_inserted_tAmazonMysqlOutput_1 = nb_line_inserted_tAmazonMysqlOutput_1
						+ insertedCount_tAmazonMysqlOutput_1;
				nb_line_rejected_tAmazonMysqlOutput_1 = nb_line_rejected_tAmazonMysqlOutput_1
						+ rejectedCount_tAmazonMysqlOutput_1;

				globalMap.put("tAmazonMysqlOutput_1_NB_LINE",
						nb_line_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_1);
				globalMap.put("tAmazonMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_1);

				ok_Hash.put("tAmazonMysqlOutput_1", true);
				end_Hash.put("tAmazonMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_1 end ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_2 end ] start
				 */

				currentComponent = "tAmazonMysqlOutput_2";

				if (pstmt_tAmazonMysqlOutput_2 != null) {
					pstmt_tAmazonMysqlOutput_2.close();
				}

				if (commitCounter_tAmazonMysqlOutput_2 > 0) {

					conn_tAmazonMysqlOutput_2.commit();

				}

				conn_tAmazonMysqlOutput_2.close();

				resourceMap.put("finish_tAmazonMysqlOutput_2", true);

				nb_line_deleted_tAmazonMysqlOutput_2 = nb_line_deleted_tAmazonMysqlOutput_2
						+ deletedCount_tAmazonMysqlOutput_2;
				nb_line_update_tAmazonMysqlOutput_2 = nb_line_update_tAmazonMysqlOutput_2
						+ updatedCount_tAmazonMysqlOutput_2;
				nb_line_inserted_tAmazonMysqlOutput_2 = nb_line_inserted_tAmazonMysqlOutput_2
						+ insertedCount_tAmazonMysqlOutput_2;
				nb_line_rejected_tAmazonMysqlOutput_2 = nb_line_rejected_tAmazonMysqlOutput_2
						+ rejectedCount_tAmazonMysqlOutput_2;

				globalMap.put("tAmazonMysqlOutput_2_NB_LINE",
						nb_line_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tAmazonMysqlOutput_2);
				globalMap.put("tAmazonMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tAmazonMysqlOutput_2);

				ok_Hash.put("tAmazonMysqlOutput_2", true);
				end_Hash.put("tAmazonMysqlOutput_2", System.currentTimeMillis());

				/**
				 * [tAmazonMysqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row31");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row39");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row32");

			try {

				/**
				 * [tAmazonAuroraInput_1_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_in";

				/**
				 * [tAmazonAuroraInput_1_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_1_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_1";

				currentComponent = "tAmazonAuroraInput_1_out";

				/**
				 * [tAmazonAuroraInput_1_out finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_3 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_3";

				if (resourceMap.get("finish_tAmazonMysqlOutput_3") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_3") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_3")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_3) {
							String errorMessage_tAmazonMysqlOutput_3 = "failed to close the connection in tAmazonMysqlOutput_3 :"
									+ sqlEx_tAmazonMysqlOutput_3.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_3);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_3 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_1 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_1";

				if (resourceMap.get("finish_tAmazonMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_1) {
							String errorMessage_tAmazonMysqlOutput_1 = "failed to close the connection in tAmazonMysqlOutput_1 :"
									+ sqlEx_tAmazonMysqlOutput_1.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_1);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_1 finally ] stop
				 */

				/**
				 * [tAmazonMysqlOutput_2 finally ] start
				 */

				currentComponent = "tAmazonMysqlOutput_2";

				if (resourceMap.get("finish_tAmazonMysqlOutput_2") == null) {
					if (resourceMap.get("conn_tAmazonMysqlOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tAmazonMysqlOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tAmazonMysqlOutput_2) {
							String errorMessage_tAmazonMysqlOutput_2 = "failed to close the connection in tAmazonMysqlOutput_2 :"
									+ sqlEx_tAmazonMysqlOutput_2.getMessage();

							System.err
									.println(errorMessage_tAmazonMysqlOutput_2);
						}
					}
				}

				/**
				 * [tAmazonMysqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE", 1);
	}

	public static class row31Struct implements
			routines.system.IPersistableComparableLookupRow<row31Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.symbol == null) ? 0 : this.symbol.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row31Struct other = (row31Struct) obj;

			if (this.symbol == null) {
				if (other.symbol != null)
					return false;

			} else if (!this.symbol.equals(other.symbol))

				return false;

			return true;
		}

		public void copyDataTo(row31Struct other) {

			other.id = this.id;
			other.symbol = this.symbol;

		}

		public void copyKeysDataTo(row31Struct other) {

			other.symbol = this.symbol;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.symbol = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.symbol, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",symbol=" + symbol);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.symbol, other.symbol);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_2_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_2_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String symbol;

		public String getSymbol() {
			return this.symbol;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_tAmazonAuroraInput_2_inStruct other = (row_tAmazonAuroraInput_2_inStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row_tAmazonAuroraInput_2_inStruct other) {

			other.id = this.id;
			other.symbol = this.symbol;

		}

		public void copyKeysDataTo(row_tAmazonAuroraInput_2_inStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.symbol = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.symbol, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",symbol=" + symbol);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_2_inStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_2_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_2_inStruct row_tAmazonAuroraInput_2_in = new row_tAmazonAuroraInput_2_inStruct();
				row_tAmazonAuroraInput_2_inStruct row31 = row_tAmazonAuroraInput_2_in;

				/**
				 * [tAdvancedHash_row31 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row31", false);
				start_Hash.put("tAdvancedHash_row31",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row31";

				int tos_count_tAdvancedHash_row31 = 0;

				// connection name:row31
				// source node:tAmazonAuroraInput_2_out -
				// inputs:(row_tAmazonAuroraInput_2_in) outputs:(row31,row31) |
				// target node:tAdvancedHash_row31 - inputs:(row31) outputs:()
				// linked node: tMap_1 - inputs:(row30,row31,row39,row32)
				// outputs:(ErrorReject,outToFirm,noDataFound_position)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row31 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row31Struct> getLookup(matchingModeEnum_row31);

				globalMap.put("tHash_Lookup_row31", tHash_Lookup_row31);

				/**
				 * [tAdvancedHash_row31 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_2_out", false);
				start_Hash.put("tAmazonAuroraInput_2_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				int tos_count_tAmazonAuroraInput_2_out = 0;

				/**
				 * [tAmazonAuroraInput_2_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_2_in", false);
				start_Hash.put("tAmazonAuroraInput_2_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_in";

				int tos_count_tAmazonAuroraInput_2_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_2_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_2_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_2_in = calendar_tAmazonAuroraInput_2_in
						.getTime();
				int nb_line_tAmazonAuroraInput_2_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_2_in = null;
				String driverClass_tAmazonAuroraInput_2_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_2_in);
				String dbUser_tAmazonAuroraInput_2_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_2_in = context.password;

				String dbPwd_tAmazonAuroraInput_2_in = decryptedPassword_tAmazonAuroraInput_2_in;

				String url_tAmazonAuroraInput_2_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_2_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_2_in,
								dbUser_tAmazonAuroraInput_2_in,
								dbPwd_tAmazonAuroraInput_2_in);

				java.sql.Statement stmt_tAmazonAuroraInput_2_in = conn_tAmazonAuroraInput_2_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_2_in = "SELECT \n  \n  `security`.`id`, \n  `security`.`symbol`\n\n \nFROM `security`";

				globalMap.put("tAmazonAuroraInput_2_QUERY",
						dbquery_tAmazonAuroraInput_2_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_2_in = null;
				try {
					rs_tAmazonAuroraInput_2_in = stmt_tAmazonAuroraInput_2_in
							.executeQuery(dbquery_tAmazonAuroraInput_2_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_2_in = rs_tAmazonAuroraInput_2_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_2_in = rsmd_tAmazonAuroraInput_2_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_2_in = null;

					while (rs_tAmazonAuroraInput_2_in.next()) {
						nb_line_tAmazonAuroraInput_2_in++;

						if (colQtyInRs_tAmazonAuroraInput_2_in < 1) {
							row_tAmazonAuroraInput_2_in.id = 0;
						} else {

							if (rs_tAmazonAuroraInput_2_in.getObject(1) != null) {
								row_tAmazonAuroraInput_2_in.id = rs_tAmazonAuroraInput_2_in
										.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_2_in < 2) {
							row_tAmazonAuroraInput_2_in.symbol = null;
						} else {

							row_tAmazonAuroraInput_2_in.symbol = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_2_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_2_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_in";

						tos_count_tAmazonAuroraInput_2_in++;

						/**
						 * [tAmazonAuroraInput_2_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_out";

						row31 = row_tAmazonAuroraInput_2_in;

						tos_count_tAmazonAuroraInput_2_out++;

						/**
						 * [tAmazonAuroraInput_2_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row31 main ] start
						 */

						currentComponent = "tAdvancedHash_row31";

						row31Struct row31_HashRow = new row31Struct();

						row31_HashRow.id = row31.id;

						row31_HashRow.symbol = row31.symbol;

						tHash_Lookup_row31.put(row31_HashRow);

						tos_count_tAdvancedHash_row31++;

						/**
						 * [tAdvancedHash_row31 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_2_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_2";

						currentComponent = "tAmazonAuroraInput_2_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_2_in != null) {
						rs_tAmazonAuroraInput_2_in.close();
					}
					stmt_tAmazonAuroraInput_2_in.close();
					if (conn_tAmazonAuroraInput_2_in != null
							&& !conn_tAmazonAuroraInput_2_in.isClosed()) {

						conn_tAmazonAuroraInput_2_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_2_NB_LINE",
						nb_line_tAmazonAuroraInput_2_in);

				ok_Hash.put("tAmazonAuroraInput_2_in", true);
				end_Hash.put("tAmazonAuroraInput_2_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_2_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				ok_Hash.put("tAmazonAuroraInput_2_out", true);
				end_Hash.put("tAmazonAuroraInput_2_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_2_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row31 end ] start
				 */

				currentComponent = "tAdvancedHash_row31";

				tHash_Lookup_row31.endPut();

				ok_Hash.put("tAdvancedHash_row31", true);
				end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row31 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_2_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_in";

				/**
				 * [tAmazonAuroraInput_2_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_2_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_2";

				currentComponent = "tAmazonAuroraInput_2_out";

				/**
				 * [tAmazonAuroraInput_2_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row31 finally ] start
				 */

				currentComponent = "tAdvancedHash_row31";

				/**
				 * [tAdvancedHash_row31 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_2_in_SUBPROCESS_STATE", 1);
	}

	public static class row39Struct implements
			routines.system.IPersistableComparableLookupRow<row39Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.orionConnectFirmId == null) ? 0
								: this.orionConnectFirmId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row39Struct other = (row39Struct) obj;

			if (this.orionConnectFirmId == null) {
				if (other.orionConnectFirmId != null)
					return false;

			} else if (!this.orionConnectFirmId
					.equals(other.orionConnectFirmId))

				return false;

			return true;
		}

		public void copyDataTo(row39Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;
			other.orionEclipseFirmId = this.orionEclipseFirmId;

		}

		public void copyKeysDataTo(row39Struct other) {

			other.orionConnectFirmId = this.orionConnectFirmId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.orionEclipseFirmId = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.orionEclipseFirmId, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.orionConnectFirmId,
					other.orionConnectFirmId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_3_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_3_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];

		public Integer orionConnectFirmId;

		public Integer getOrionConnectFirmId() {
			return this.orionConnectFirmId;
		}

		public Integer orionEclipseFirmId;

		public Integer getOrionEclipseFirmId() {
			return this.orionEclipseFirmId;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.orionConnectFirmId = readInteger(dis);

					this.orionEclipseFirmId = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.orionConnectFirmId, dos);

				// Integer

				writeInteger(this.orionEclipseFirmId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("orionConnectFirmId="
					+ String.valueOf(orionConnectFirmId));
			sb.append(",orionEclipseFirmId="
					+ String.valueOf(orionEclipseFirmId));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_3_inStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_3_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_3_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_3_inStruct row_tAmazonAuroraInput_3_in = new row_tAmazonAuroraInput_3_inStruct();
				row_tAmazonAuroraInput_3_inStruct row39 = row_tAmazonAuroraInput_3_in;

				/**
				 * [tAdvancedHash_row39 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row39", false);
				start_Hash.put("tAdvancedHash_row39",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row39";

				int tos_count_tAdvancedHash_row39 = 0;

				// connection name:row39
				// source node:tAmazonAuroraInput_3_out -
				// inputs:(row_tAmazonAuroraInput_3_in) outputs:(row39,row39) |
				// target node:tAdvancedHash_row39 - inputs:(row39) outputs:()
				// linked node: tMap_1 - inputs:(row30,row31,row39,row32)
				// outputs:(ErrorReject,outToFirm,noDataFound_position)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row39 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row39Struct> getLookup(matchingModeEnum_row39);

				globalMap.put("tHash_Lookup_row39", tHash_Lookup_row39);

				/**
				 * [tAdvancedHash_row39 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_3_out", false);
				start_Hash.put("tAmazonAuroraInput_3_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				int tos_count_tAmazonAuroraInput_3_out = 0;

				/**
				 * [tAmazonAuroraInput_3_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_3_in", false);
				start_Hash.put("tAmazonAuroraInput_3_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_in";

				int tos_count_tAmazonAuroraInput_3_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_3_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_3_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_3_in = calendar_tAmazonAuroraInput_3_in
						.getTime();
				int nb_line_tAmazonAuroraInput_3_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_3_in = null;
				String driverClass_tAmazonAuroraInput_3_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_3_in);
				String dbUser_tAmazonAuroraInput_3_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_3_in = context.password;

				String dbPwd_tAmazonAuroraInput_3_in = decryptedPassword_tAmazonAuroraInput_3_in;

				String url_tAmazonAuroraInput_3_in = "jdbc:mysql://"
						+ context.host + ":" + context.port + "/"
						+ context.commondb + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_3_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_3_in,
								dbUser_tAmazonAuroraInput_3_in,
								dbPwd_tAmazonAuroraInput_3_in);

				java.sql.Statement stmt_tAmazonAuroraInput_3_in = conn_tAmazonAuroraInput_3_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_3_in = "select orionConnectFirmId , orionEclipseFirmId from firm";

				globalMap.put("tAmazonAuroraInput_3_QUERY",
						dbquery_tAmazonAuroraInput_3_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_3_in = null;
				try {
					rs_tAmazonAuroraInput_3_in = stmt_tAmazonAuroraInput_3_in
							.executeQuery(dbquery_tAmazonAuroraInput_3_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_3_in = rs_tAmazonAuroraInput_3_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_3_in = rsmd_tAmazonAuroraInput_3_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_3_in = null;

					while (rs_tAmazonAuroraInput_3_in.next()) {
						nb_line_tAmazonAuroraInput_3_in++;

						if (colQtyInRs_tAmazonAuroraInput_3_in < 1) {
							row_tAmazonAuroraInput_3_in.orionConnectFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(1) != null) {
								row_tAmazonAuroraInput_3_in.orionConnectFirmId = rs_tAmazonAuroraInput_3_in
										.getInt(1);
							} else {
								row_tAmazonAuroraInput_3_in.orionConnectFirmId = null;
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_3_in < 2) {
							row_tAmazonAuroraInput_3_in.orionEclipseFirmId = null;
						} else {

							if (rs_tAmazonAuroraInput_3_in.getObject(2) != null) {
								row_tAmazonAuroraInput_3_in.orionEclipseFirmId = rs_tAmazonAuroraInput_3_in
										.getInt(2);
							} else {
								row_tAmazonAuroraInput_3_in.orionEclipseFirmId = null;
							}
						}

						/**
						 * [tAmazonAuroraInput_3_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_in";

						tos_count_tAmazonAuroraInput_3_in++;

						/**
						 * [tAmazonAuroraInput_3_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_out";

						row39 = row_tAmazonAuroraInput_3_in;

						tos_count_tAmazonAuroraInput_3_out++;

						/**
						 * [tAmazonAuroraInput_3_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row39 main ] start
						 */

						currentComponent = "tAdvancedHash_row39";

						row39Struct row39_HashRow = new row39Struct();

						row39_HashRow.orionConnectFirmId = row39.orionConnectFirmId;

						row39_HashRow.orionEclipseFirmId = row39.orionEclipseFirmId;

						tHash_Lookup_row39.put(row39_HashRow);

						tos_count_tAdvancedHash_row39++;

						/**
						 * [tAdvancedHash_row39 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_3_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_3";

						currentComponent = "tAmazonAuroraInput_3_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_3_in != null) {
						rs_tAmazonAuroraInput_3_in.close();
					}
					stmt_tAmazonAuroraInput_3_in.close();
					if (conn_tAmazonAuroraInput_3_in != null
							&& !conn_tAmazonAuroraInput_3_in.isClosed()) {

						conn_tAmazonAuroraInput_3_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_3_NB_LINE",
						nb_line_tAmazonAuroraInput_3_in);

				ok_Hash.put("tAmazonAuroraInput_3_in", true);
				end_Hash.put("tAmazonAuroraInput_3_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_3_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				ok_Hash.put("tAmazonAuroraInput_3_out", true);
				end_Hash.put("tAmazonAuroraInput_3_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_3_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row39 end ] start
				 */

				currentComponent = "tAdvancedHash_row39";

				tHash_Lookup_row39.endPut();

				ok_Hash.put("tAdvancedHash_row39", true);
				end_Hash.put("tAdvancedHash_row39", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row39 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_3_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_in";

				/**
				 * [tAmazonAuroraInput_3_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_3_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_3";

				currentComponent = "tAmazonAuroraInput_3_out";

				/**
				 * [tAmazonAuroraInput_3_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row39 finally ] start
				 */

				currentComponent = "tAdvancedHash_row39";

				/**
				 * [tAdvancedHash_row39 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_3_in_SUBPROCESS_STATE", 1);
	}

	public static class row32Struct implements
			routines.system.IPersistableComparableLookupRow<row32Struct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.accountId == null) ? 0 : this.accountId
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row32Struct other = (row32Struct) obj;

			if (this.accountId == null) {
				if (other.accountId != null)
					return false;

			} else if (!this.accountId.equals(other.accountId))

				return false;

			return true;
		}

		public void copyDataTo(row32Struct other) {

			other.id = this.id;
			other.accountId = this.accountId;

		}

		public void copyKeysDataTo(row32Struct other) {

			other.accountId = this.accountId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.accountId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.accountId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",accountId=" + accountId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.accountId, other.accountId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_tAmazonAuroraInput_4_inStruct implements
			routines.system.IPersistableRow<row_tAmazonAuroraInput_4_inStruct> {
		final static byte[] commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		static byte[] commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String accountId;

		public String getAccountId() {
			return this.accountId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row_tAmazonAuroraInput_4_inStruct other = (row_tAmazonAuroraInput_4_inStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row_tAmazonAuroraInput_4_inStruct other) {

			other.id = this.id;
			other.accountId = this.accountId;

		}

		public void copyKeysDataTo(row_tAmazonAuroraInput_4_inStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length) {
					if (length < 1024
							&& commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm.length == 0) {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[1024];
					} else {
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length);
				strReturn = new String(
						commonByteArray_RELIAZEDGAINLOSS_position_parallel_stagingtofirm,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RELIAZEDGAINLOSS_position_parallel_stagingtofirm) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.accountId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// String

				writeString(this.accountId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",accountId=" + accountId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_tAmazonAuroraInput_4_inStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAmazonAuroraInput_4_inProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_tAmazonAuroraInput_4_inStruct row_tAmazonAuroraInput_4_in = new row_tAmazonAuroraInput_4_inStruct();
				row_tAmazonAuroraInput_4_inStruct row32 = row_tAmazonAuroraInput_4_in;

				/**
				 * [tAdvancedHash_row32 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row32", false);
				start_Hash.put("tAdvancedHash_row32",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row32";

				int tos_count_tAdvancedHash_row32 = 0;

				// connection name:row32
				// source node:tAmazonAuroraInput_4_out -
				// inputs:(row_tAmazonAuroraInput_4_in) outputs:(row32,row32) |
				// target node:tAdvancedHash_row32 - inputs:(row32) outputs:()
				// linked node: tMap_1 - inputs:(row30,row31,row39,row32)
				// outputs:(ErrorReject,outToFirm,noDataFound_position)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row32 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row32Struct> getLookup(matchingModeEnum_row32);

				globalMap.put("tHash_Lookup_row32", tHash_Lookup_row32);

				/**
				 * [tAdvancedHash_row32 begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_4_out", false);
				start_Hash.put("tAmazonAuroraInput_4_out",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				int tos_count_tAmazonAuroraInput_4_out = 0;

				/**
				 * [tAmazonAuroraInput_4_out begin ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_in begin ] start
				 */

				ok_Hash.put("tAmazonAuroraInput_4_in", false);
				start_Hash.put("tAmazonAuroraInput_4_in",
						System.currentTimeMillis());

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_in";

				int tos_count_tAmazonAuroraInput_4_in = 0;

				java.util.Calendar calendar_tAmazonAuroraInput_4_in = java.util.Calendar
						.getInstance();
				calendar_tAmazonAuroraInput_4_in.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tAmazonAuroraInput_4_in = calendar_tAmazonAuroraInput_4_in
						.getTime();
				int nb_line_tAmazonAuroraInput_4_in = 0;
				java.sql.Connection conn_tAmazonAuroraInput_4_in = null;
				String driverClass_tAmazonAuroraInput_4_in = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tAmazonAuroraInput_4_in);
				String dbUser_tAmazonAuroraInput_4_in = context.username;

				final String decryptedPassword_tAmazonAuroraInput_4_in = context.password;

				String dbPwd_tAmazonAuroraInput_4_in = decryptedPassword_tAmazonAuroraInput_4_in;

				String url_tAmazonAuroraInput_4_in = "jdbc:mysql://"
						+ context.serverIp + ":" + context.port + "/"
						+ context.database + "?" + "noDatetimeStringSync=true";

				conn_tAmazonAuroraInput_4_in = java.sql.DriverManager
						.getConnection(url_tAmazonAuroraInput_4_in,
								dbUser_tAmazonAuroraInput_4_in,
								dbPwd_tAmazonAuroraInput_4_in);

				java.sql.Statement stmt_tAmazonAuroraInput_4_in = conn_tAmazonAuroraInput_4_in
						.createStatement();

				String dbquery_tAmazonAuroraInput_4_in = "select id , accountId from account";

				globalMap.put("tAmazonAuroraInput_4_QUERY",
						dbquery_tAmazonAuroraInput_4_in);

				java.sql.ResultSet rs_tAmazonAuroraInput_4_in = null;
				try {
					rs_tAmazonAuroraInput_4_in = stmt_tAmazonAuroraInput_4_in
							.executeQuery(dbquery_tAmazonAuroraInput_4_in);
					java.sql.ResultSetMetaData rsmd_tAmazonAuroraInput_4_in = rs_tAmazonAuroraInput_4_in
							.getMetaData();
					int colQtyInRs_tAmazonAuroraInput_4_in = rsmd_tAmazonAuroraInput_4_in
							.getColumnCount();

					String tmpContent_tAmazonAuroraInput_4_in = null;

					while (rs_tAmazonAuroraInput_4_in.next()) {
						nb_line_tAmazonAuroraInput_4_in++;

						if (colQtyInRs_tAmazonAuroraInput_4_in < 1) {
							row_tAmazonAuroraInput_4_in.id = 0;
						} else {

							if (rs_tAmazonAuroraInput_4_in.getObject(1) != null) {
								row_tAmazonAuroraInput_4_in.id = rs_tAmazonAuroraInput_4_in
										.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tAmazonAuroraInput_4_in < 2) {
							row_tAmazonAuroraInput_4_in.accountId = null;
						} else {

							row_tAmazonAuroraInput_4_in.accountId = routines.system.JDBCUtil
									.getString(rs_tAmazonAuroraInput_4_in, 2,
											false);
						}

						/**
						 * [tAmazonAuroraInput_4_in begin ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_in main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_in";

						tos_count_tAmazonAuroraInput_4_in++;

						/**
						 * [tAmazonAuroraInput_4_in main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_out main ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_out";

						row32 = row_tAmazonAuroraInput_4_in;

						tos_count_tAmazonAuroraInput_4_out++;

						/**
						 * [tAmazonAuroraInput_4_out main ] stop
						 */

						/**
						 * [tAdvancedHash_row32 main ] start
						 */

						currentComponent = "tAdvancedHash_row32";

						row32Struct row32_HashRow = new row32Struct();

						row32_HashRow.id = row32.id;

						row32_HashRow.accountId = row32.accountId;

						tHash_Lookup_row32.put(row32_HashRow);

						tos_count_tAdvancedHash_row32++;

						/**
						 * [tAdvancedHash_row32 main ] stop
						 */

						/**
						 * [tAmazonAuroraInput_4_in end ] start
						 */

						currentVirtualComponent = "tAmazonAuroraInput_4";

						currentComponent = "tAmazonAuroraInput_4_in";

					}
				} finally {
					if (rs_tAmazonAuroraInput_4_in != null) {
						rs_tAmazonAuroraInput_4_in.close();
					}
					stmt_tAmazonAuroraInput_4_in.close();
					if (conn_tAmazonAuroraInput_4_in != null
							&& !conn_tAmazonAuroraInput_4_in.isClosed()) {

						conn_tAmazonAuroraInput_4_in.close();

					}

				}

				globalMap.put("tAmazonAuroraInput_4_NB_LINE",
						nb_line_tAmazonAuroraInput_4_in);

				ok_Hash.put("tAmazonAuroraInput_4_in", true);
				end_Hash.put("tAmazonAuroraInput_4_in",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_4_in end ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out end ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				ok_Hash.put("tAmazonAuroraInput_4_out", true);
				end_Hash.put("tAmazonAuroraInput_4_out",
						System.currentTimeMillis());

				/**
				 * [tAmazonAuroraInput_4_out end ] stop
				 */

				/**
				 * [tAdvancedHash_row32 end ] start
				 */

				currentComponent = "tAdvancedHash_row32";

				tHash_Lookup_row32.endPut();

				ok_Hash.put("tAdvancedHash_row32", true);
				end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row32 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tAmazonAuroraInput_4_in finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_in";

				/**
				 * [tAmazonAuroraInput_4_in finally ] stop
				 */

				/**
				 * [tAmazonAuroraInput_4_out finally ] start
				 */

				currentVirtualComponent = "tAmazonAuroraInput_4";

				currentComponent = "tAmazonAuroraInput_4_out";

				/**
				 * [tAmazonAuroraInput_4_out finally ] stop
				 */

				/**
				 * [tAdvancedHash_row32 finally ] start
				 */

				currentComponent = "tAdvancedHash_row32";

				/**
				 * [tAdvancedHash_row32 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAmazonAuroraInput_4_in_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final position_parallel_stagingtofirm position_parallel_stagingtofirmClass = new position_parallel_stagingtofirm();

		int exitCode = position_parallel_stagingtofirmClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = position_parallel_stagingtofirm.class
					.getClassLoader().getResourceAsStream(
							"reliazedgainloss/position_parallel_stagingtofirm_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.serverIp = (String) context.getProperty("serverIp");
			context.database = (String) context.getProperty("database");
			context.filepath_advisor = (String) context
					.getProperty("filepath_advisor");
			context.positionpath = (String) context.getProperty("positionpath");
			context.custodianpath = (String) context
					.getProperty("custodianpath");
			context.taxlotpath = (String) context.getProperty("taxlotpath");
			context.transactionpath = (String) context
					.getProperty("transactionpath");
			context.securitypath = (String) context.getProperty("securitypath");
			context.accountpath = (String) context.getProperty("accountpath");
			context.inputDir = (String) context.getProperty("inputDir");
			context.username = (String) context.getProperty("username");
			context.password = (String) context.getProperty("password");
			context.contextDir = (String) context.getProperty("contextDir");
			context.stagingdb = (String) context.getProperty("stagingdb");
			context.commondb = (String) context.getProperty("commondb");
			context.localpath = (String) context.getProperty("localpath");
			context.port = (String) context.getProperty("port");
			context.host = (String) context.getProperty("host");
			context.teamPreferenceOption = (String) context
					.getProperty("teamPreferenceOption");
			try {
				context.rowCountTSV = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountTSV"));
			} catch (NumberFormatException e) {
				context.rowCountTSV = null;
			}
			try {
				context.rowCountStaging = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountStaging"));
			} catch (NumberFormatException e) {
				context.rowCountStaging = null;
			}
			try {
				context.rowCountFirm = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountFirm"));
			} catch (NumberFormatException e) {
				context.rowCountFirm = null;
			}
			context.firm = (String) context.getProperty("firm");
			try {
				context.rowCountUpdated = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("rowCountUpdated"));
			} catch (NumberFormatException e) {
				context.rowCountUpdated = null;
			}
			try {
				context.rowCountRejectedFirm = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("rowCountRejectedFirm"));
			} catch (NumberFormatException e) {
				context.rowCountRejectedFirm = null;
			}
			context.firmId = (String) context.getProperty("firmId");
			context.date = (String) context.getProperty("date");
			context.filestorage = (String) context.getProperty("filestorage");
			context.filestorage2 = (String) context.getProperty("filestorage2");
			context.pathforlocal = (String) context.getProperty("pathforlocal");
			context.firmint3 = (String) context.getProperty("firmint3");
			try {
				context.a = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("a"));
			} catch (NumberFormatException e) {
				context.a = null;
			}
			try {
				context.b = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("b"));
			} catch (NumberFormatException e) {
				context.b = null;
			}
			try {
				context.c = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("c"));
			} catch (NumberFormatException e) {
				context.c = null;
			}
			try {
				context.d = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("d"));
			} catch (NumberFormatException e) {
				context.d = null;
			}
			try {
				context.e = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("e"));
			} catch (NumberFormatException e) {
				context.e = null;
			}
			try {
				context.f = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("f"));
			} catch (NumberFormatException e) {
				context.f = null;
			}
			try {
				context.g = routines.system.ParserUtils.parseTo_Boolean(context
						.getProperty("g"));
			} catch (NumberFormatException e) {
				context.g = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("serverIp")) {
				context.serverIp = (String) parentContextMap.get("serverIp");
			}
			if (parentContextMap.containsKey("database")) {
				context.database = (String) parentContextMap.get("database");
			}
			if (parentContextMap.containsKey("filepath_advisor")) {
				context.filepath_advisor = (String) parentContextMap
						.get("filepath_advisor");
			}
			if (parentContextMap.containsKey("positionpath")) {
				context.positionpath = (String) parentContextMap
						.get("positionpath");
			}
			if (parentContextMap.containsKey("custodianpath")) {
				context.custodianpath = (String) parentContextMap
						.get("custodianpath");
			}
			if (parentContextMap.containsKey("taxlotpath")) {
				context.taxlotpath = (String) parentContextMap
						.get("taxlotpath");
			}
			if (parentContextMap.containsKey("transactionpath")) {
				context.transactionpath = (String) parentContextMap
						.get("transactionpath");
			}
			if (parentContextMap.containsKey("securitypath")) {
				context.securitypath = (String) parentContextMap
						.get("securitypath");
			}
			if (parentContextMap.containsKey("accountpath")) {
				context.accountpath = (String) parentContextMap
						.get("accountpath");
			}
			if (parentContextMap.containsKey("inputDir")) {
				context.inputDir = (String) parentContextMap.get("inputDir");
			}
			if (parentContextMap.containsKey("username")) {
				context.username = (String) parentContextMap.get("username");
			}
			if (parentContextMap.containsKey("password")) {
				context.password = (String) parentContextMap.get("password");
			}
			if (parentContextMap.containsKey("contextDir")) {
				context.contextDir = (String) parentContextMap
						.get("contextDir");
			}
			if (parentContextMap.containsKey("stagingdb")) {
				context.stagingdb = (String) parentContextMap.get("stagingdb");
			}
			if (parentContextMap.containsKey("commondb")) {
				context.commondb = (String) parentContextMap.get("commondb");
			}
			if (parentContextMap.containsKey("localpath")) {
				context.localpath = (String) parentContextMap.get("localpath");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (String) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("host")) {
				context.host = (String) parentContextMap.get("host");
			}
			if (parentContextMap.containsKey("teamPreferenceOption")) {
				context.teamPreferenceOption = (String) parentContextMap
						.get("teamPreferenceOption");
			}
			if (parentContextMap.containsKey("rowCountTSV")) {
				context.rowCountTSV = (Integer) parentContextMap
						.get("rowCountTSV");
			}
			if (parentContextMap.containsKey("rowCountStaging")) {
				context.rowCountStaging = (Integer) parentContextMap
						.get("rowCountStaging");
			}
			if (parentContextMap.containsKey("rowCountFirm")) {
				context.rowCountFirm = (Integer) parentContextMap
						.get("rowCountFirm");
			}
			if (parentContextMap.containsKey("firm")) {
				context.firm = (String) parentContextMap.get("firm");
			}
			if (parentContextMap.containsKey("rowCountUpdated")) {
				context.rowCountUpdated = (Integer) parentContextMap
						.get("rowCountUpdated");
			}
			if (parentContextMap.containsKey("rowCountRejectedFirm")) {
				context.rowCountRejectedFirm = (Integer) parentContextMap
						.get("rowCountRejectedFirm");
			}
			if (parentContextMap.containsKey("firmId")) {
				context.firmId = (String) parentContextMap.get("firmId");
			}
			if (parentContextMap.containsKey("date")) {
				context.date = (String) parentContextMap.get("date");
			}
			if (parentContextMap.containsKey("filestorage")) {
				context.filestorage = (String) parentContextMap
						.get("filestorage");
			}
			if (parentContextMap.containsKey("filestorage2")) {
				context.filestorage2 = (String) parentContextMap
						.get("filestorage2");
			}
			if (parentContextMap.containsKey("pathforlocal")) {
				context.pathforlocal = (String) parentContextMap
						.get("pathforlocal");
			}
			if (parentContextMap.containsKey("firmint3")) {
				context.firmint3 = (String) parentContextMap.get("firmint3");
			}
			if (parentContextMap.containsKey("a")) {
				context.a = (Boolean) parentContextMap.get("a");
			}
			if (parentContextMap.containsKey("b")) {
				context.b = (Boolean) parentContextMap.get("b");
			}
			if (parentContextMap.containsKey("c")) {
				context.c = (Boolean) parentContextMap.get("c");
			}
			if (parentContextMap.containsKey("d")) {
				context.d = (Boolean) parentContextMap.get("d");
			}
			if (parentContextMap.containsKey("e")) {
				context.e = (Boolean) parentContextMap.get("e");
			}
			if (parentContextMap.containsKey("f")) {
				context.f = (Boolean) parentContextMap.get("f");
			}
			if (parentContextMap.containsKey("g")) {
				context.g = (Boolean) parentContextMap.get("g");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tAmazonAuroraInput_1_inProcess(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tAmazonAuroraInput_1_in) {
					globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_1_in.printStackTrace();

				} catch (java.lang.Error e_tAmazonAuroraInput_1_in) {
					globalMap.put("tAmazonAuroraInput_1_in_SUBPROCESS_STATE",
							-1);

					e_tAmazonAuroraInput_1_in.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : position_parallel_stagingtofirm");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 303771 characters generated by Talend Open Studio for Data Integration on the
 * October 24, 2016 5:34:19 PM IST
 ************************************************************************************************/
