'use strict';

module.exports = {

    logout: 'You have been successfully logged out',
    userFirmAssociationNotFound: 'User and Firm association not found',
    taxLotNotFound:'Tax Lot not Found for security',
    NoPermissionForLoginAs: 'User does not have permission to LoginAs in this Firm',
    noRoleTeamAssociate: 'Can not login, User does not have an active Role and Team associated',
    alreadyLogInWithSameFirm: 'User already Logged in with same username in same Firm',
    alreadyLogInAs: 'Can not LoginAs, please revert and try again',
    notLoggedInAs: 'You are not logged in as another user',
    inactiveUser: 'User is not active so can not login',
    jsonParserError: 'Invalid JSON response, please verify data',
    redisDeleteError: 'Error occurred in redis DELETE operation',
    redisPutError: 'Error occurred in redis PUT operation',
    redisGetError: 'Error occurred in redis GET operation',
    notLoggedIn: 'You are not logged in anymore',
    invalidHeaders: 'Invalid Authorization Header',
    invalidToken: 'Invalid Token',
    invalidFirm: 'Invalid Firm',
    unauthenticated: 'Unauthenticated: Access is denied due to invalid credentials',
    unauthorized: 'User does not have permission',
    userDoNotHavePermission: 'User does not have any permission',
    accessDenied: 'Access Denied',
    notFound: 'Not Found',
    badRequest: 'Bad Request: Verify request data',
    errorChangeStatus: 'Error in scheduler during change status',
    internalServerError: 'Your request can not be processed at the moment, please verify parameters',
    notImplemented: 'Not Implemented',

    //Role Messages
    roleAdded: 'Role created successfully',
    roleUpdated: 'Role updated successfully',
    roleDeleted: 'Role deleted successfully',
    roleNotFound: 'Role does not exist',
    roleAssigned: 'Role assigned successfully',
    roleAssignedUpdated: 'Role assigned updated successfully',
    roleNotFoudOrDeleted: 'Role does not exist or already deleted',
    roleReassigned: 'Role reassigned successfully',
    roleAlreadyExist: 'Role exist with same name',
    roleTypeNotFound: 'RoleType does not exist',
    userAssociated: 'Role has user associated with it so can not be deleted',
    noUserAssociatedWithRole: 'No user associated with role',
    diffRoleType: 'Roles do not have same roleType',
    invalidPrivilegeForRoleType: 'Invalid privilege Ids',

    //Privileges Messages
    privilegesAdded: 'Privileges added successfully',
    missingParameters: 'Missing required parameters',
    privilegeNotFoud: 'Privilege do not exist',
    interServerError: 'Your request can not be processed at this moment',

    //Preferences messages
    preferencesDataNotFound: 'Unable to find records',
    preferencesInvalidParameters: 'Invalid or wrong query parameters',
    preferencesInvalidList: 'Invalid or wrong list passed',
    invalidPreferencePrivileg: 'User does not has privileges',
    preferenceRecordIdNotExist: 'Invalid record id',
    preferenceLevelIdNotExist: 'Invalid level id',
    preferenceLevelNameNotExist: 'Invalid level name',
    preferenceLevelInvalidBitValue: 'Invalid bit value',
    preferencesUpdatedSuccess: 'Preferences updated successfully',
    priceSourcePreferenceNotSet:'Price Source preference not set',
    noPortfolioAccountFound:'No portfolio or account found for dynamic models',
    securityPriceUpdated: 'Security prices updated successfully',
    //firm messages
    firmNotFound: 'Firm does not exist',
    firmAssigned: 'Firm assigned successfully',

    //team messages
    teamNotFound: 'Team does not exist',
    teamNotFoudOrDeleted: 'Team does not exist or already deleted',
    teamDeleted: 'Team deleted successfully',
    teamAssigned: 'Team assigned successfully',
    teamAlreadyExist: 'Team already exists with same name',
    userAssignToTeam: 'User assigned to team successfully',
    portfolioAssignToTeam: 'Portfolio assigned to team successfully',
    advisorAssignToTeam: 'Advisor assigned to team successfully',
    modelAssignToTeam: 'Model assigned to team successfully',
    accountAssignToTeam: 'Account assigned to team successfully',
    teamUserAssociated: 'Team has user associated with it so can not be deleted',
    accountUnAssignFromTeam: 'Account unassociated from team successfully',
    modelUnAssignFromTeam: 'Model unassociated from team successfully',
    advisorUnAssignFromTeam: 'Advisor unassociated from team successfully',
    portfolioUnAssignFromTeam: 'Portfolio unassociated from team successfully',
    userUnAssignFromTeam: 'User unassociated from team successfully',
    advisorAssignToTeamUpdate: 'Advisor assigned to team updated successfully',
    userAssignToTeamUpdate: 'User assigned to team updated successfully',
    modelAssignToTeamUpdate: 'Model assigned to team updated successfully',
    portfolioAssignToTeamUpdate: 'Portfolio assigned to team updated successfully',
    teamReassigned: 'Team reassigned successfully',
    noUserAssociatedWithTeam: 'No user associated with team',
    oldAndNewSameId: 'oldId and newId can not be the same',
    primaryPortfolioMissing: 'Team is associated as primary team to missing portfolio Ids',
    teamAssignedAsPrimary: 'Team is associated as primary team to some portfolios so it can not be deleted',
    //user messages
    userNotFound: 'User does not exist',
    userNotFoudOrDeleted: 'User does not exist or already deleted',
    userFirmNotFound: 'Could not find current User Firm',
    userDeleted: 'User deleted successfully',
    userPrivilegeNotFound: 'No privilege exist for user',
    userAlreadyExist: 'User already exist with same orionUserId',
    userNotFoundOnConnect: 'User does not exist on Connect',
    noPoolFound: 'No Pool for Database',
    userAlreadyAssigned: 'User is already assigned',
    userAssigned: 'User is not assigned.',
    onlyOneAssignedUser: 'Strategist has only one user, Can not be deleted',
    atleastOneUserRequired: 'Strategist should have atleast one user',

    //Custodian messages
    custodianNotFound: 'Custodian does not exist',
    custodianAlreadyExist: 'Custodian already exist with same externalId',
    duplicateTradeExecution: 'You can not send both tradeExecutionTypeId and tradeExecutions parameter',
    custodianDeleted: 'Custodian deleted successfully',
    custodianNotFoudOrDeleted: 'Custodian does not exist or already deleted',
    accountAssociated: 'Custodian has account associated to it so it can not be deleted',
    tradeExecutionsNotFound: 'Trade executions do not exist',

    //Subclass messages
    subClassNameExists: 'SubClass name already exists',
    importedSubClassUpdateFail: 'Imported SubClass cannot be updated',
    importedSubClassRemoveFail: 'Imported SubClass cannot be removed',
    nonExistingSubClassRemoveFail: 'SubClass does not exist',
    associatedSubClassRemoveFail: 'SubClass can not be removed as it is associated with security',
    subClassRemoved: 'SubClass deleted Successfully',

    // class messages
    classNameExists: 'Class name already exist',
    importedClassUpdateFail: 'Imported Class can not be updated',
    importedClassRemoveFail: 'Imported Class can not be removed',
    nonExistingClassRemoveFail: 'Class does not exist',
    associatedClassRemoveFail: 'Class can not be removed as it is associated with security',
    classRemoved: 'Class deleted Successfully',

    // Category messages
    categoryNameExists: 'Category name already exists',
    importedCategoryUpdateFail: 'Imported Category can not be updated',
    importedCategoryRemoveFail: 'Imported Category can not be removed',
    nonExistingCategoryRemoveFail: 'Category does not exist',
    associatedCategoryRemoveFail: 'Category can not be removed as it is associated with security',
    categoryRemoved: 'Category deleted Successfully',

    // Security messages
    securityExists: 'Security already exists',
    securityDeleted: 'Security deleted successfully',
    securityNotFoudOrDeleted: 'Security does not exist',
    nonExistingSecurityRemoveFail: 'Security does not exist',
    securityNotFound: 'Security Not Found',
    securityPriceNotFound: 'Security Price Not Found',
    noSecurityToUpdate: 'No security found to update',
    securityPricesUpdated: 'Security prices updated successfully',
    securityIsFoundInAccount: 'Security Found in following accounts: ',
    securityCannotBeDeleted: 'Security can not be deleted as the security is associated with a SecuritySet',
    securityStatusCannotBeUpdated: 'Security status can not be updated as the security is associated with a SecuritySet',
    securityTypeIdDoesNotExists: 'Security Type associated with security does not exist, Please import it first',
    securitySymbolDuplicateConstraint: 'Security Symbol already exists',
    custodianForSecurityDoesNotExists: 'Custodians you are adding does not exist',
    custodianSymbolAlreadyExistsForOtherSecurity: 'Custodian security symbol you are trying to add already exists with other securities',
    userDoNotHavePermissionToUpdateSecurityPrice: 'User does not have permission to update Security Price',
    userDoNotHavePermissionToUpdateSecurityType: 'User does not have permission to update Security Type',
    securityCorporateActionDoesNotExists: 'corporate action does not exists.',
    // SecuritySet messages
    securitySetDeleted: 'SecuritySet deleted successfully',
    securitySetNotFoudOrDeleted: 'SecuritySet does not exist or already deleted',
    securitySetNotFound: 'SecuritySet Not Found',
    securitySetTargetPercentageNot100: 'targetAllowPercentage sum should be 100%',
    securitySetSecurityCannotBeAddedBecauseTheyAreDeleted: 'Securities which are being added in SecuritySet does not exist or have status other than OPEN',
    securitySetSecurityCannotBeAddedBecauseOfStatus: 'Securities which are being added in SecuritySet does not exist or have status other than OPEN',
    securitySetSecurityCannotBeDeletedBecauseOfModel: 'SecuritySet Can not be deleted as it associated with model',
    notAbleToSecuritySetAsFavorite: 'SecuritySet is not set/unset as favorite',
    favoriteSecuritySet: 'SecuritySet is set/unset as favorite',
    // Data import process messages
    dataImportServerError: 'Unable to notify import process, please contact administrator',
    importSucessful: 'Successfully notified data import startup process',
    importRunning: "import process is running…...40%",
    importCompleted: "import process completed…...100%",
    WrongImportType: 'Wrong Import type selected',

    // DB Error
    badFieldError: 'Unknown column',
    parseError: 'Syntax error',
    noSuchTable: 'Table or Database Not Found',
    rowIsReferenced: 'Foreign key constraint failed',
    tooLongIdent: 'Identifier name is too long',
    dupEntry: 'Duplicate entry',
    dupUnique: 'Unique constraint',
    requiresPrimaryKey: 'This table type requires a primary key',
    //Model messages

    modelValidations: {
        modelTypeHierarchy: 'should have modelTypeId from following: ',
        assetCategoriesNotExists: 'SubModel with modelType CATEGORY does not exists. Categories are: ',
        assetClassNotExists: 'SubModel with modelType CLASS does not exists. Classes are: ',
        assetSubClassNotExists: 'SubModel with modelType SUB-CLASS does not exists. SubClasses are: ',
        assetSecuritySetNotExists: 'SubModel with modelType SECURITY-SET does not exists. SecuritySet are: ',
        securitySetisDynamicFlagDoesNotMatch: 'Model and securitySet isDynamic flag does not match',
        targetPercentSumOfChildrenIsNot100: 'TargetPercent sum of children is not 100%',
        percentCannotBeNegative: 'Percentage cannot be negative',
        amountCannotBeNegative: 'Amount cannot be negative',
        nodeAtLevelMustBeSame : "All Nodes at same level should have same model Type. Outlier is present at level: "
    },
    modelNotification : {
    	modelApprovalSubject : "Model Needs Approval",
    	modelApprovalBody : "Model needs approval with id: ",
    	modelAssignmentApprovalSubject : "Model Assignment Needs Approval",
    	modelAssignmentApprovalBody : "Model Assignment needs approval with id: "
    },
    modelNameRequired: "Model Name is required",
    modelManagementStyleRequired: "Model Management Style is required",
    modelEmptyImportFile: "Model Import file is empty",
    modelNotFound: 'Model does not exist',
    subModelNotFound: 'Sub-Model does not exist',
    modelFilterNotDefined: "Model filter types are not defined",
    subModelCannotBeDeleted: 'Sub-Model can not be deleted. Sub-Model is Used in Model',
    subModelListExistenceCheck: "Sub-Models Does not exists with ids: ",
    modelDeletedSuccessfully: 'Model deleted Successfully',
    subModelDeletedSuccessfully: 'Sub-Model deleted Successfully',
    modelHasPortfolio: 'The model cannot be deleted as it is being currently used by other Portfolios',
    modelHasSMA: 'The model cannot be deleted as it has SMA\'s',
    canDeleteModel: 'Model can be deleted',
    canDeleteSubModel: 'Sub-Model can be deleted',
    modelFlagForFavoriteUpdated: "Model flag for favorite updated",
    tempModelDoesNotExist: 'No model exist to approve or reject',
    modelNameConstraintWithinNamespace: 'Duplicate Name. Please use a different name to save the model',
    submodelNameConstraintWithinNamespace: 'Duplicate Name. Please use a different name to save the submodel',
    modelStatusCannotBeChangedByUser: 'User cannot change the model status',
    userCannotEditCommunityModel: 'Community Model cannot be changed',
    modelStatusCannotBeChangedByUserPrivilegedUserOnly: 'User cannot change the model status. Only privileged User can',
    modelStatusCannotBeChangedByUserToDraft: 'User cannot change the model status to DRAFT',
    modelStatusCannotBeChangedByUserFromNotActive: 'User cannot change the model status. Only FirmAdmin can change status From NOT_ACTIVE',
    modelStatusCannotBeChangedByUserFromDraft: 'User cannot change the model status From Draft',
    modelStatusCannotBeChangedByUserFromNotApproved: 'User cannot change the model status. Only Waiting For approval models can be APPROVED',
    subModelStructureNotFound: 'This submodel does not have Structure',
    modelAssignedToPortfolios: "Approved",
    modelAssignedToSleevedAccount: "Model assigned to sleeved account",
    modelPortfolioRelationAlreadyExists: "Model is already assigned with portfolio",
    modelAssignedToPortfoliosButWaitingForApproval: "Awaiting Approval",
    modelUnAssignedToPortfolios: "Model unassigned from Portfolios",
    tempModelUnAssignedToPortfolios: "Model rejected from Portfolios",
    modelRejectedForPortfolio: "Model rejected for Portfolios",
    modelApprovedForPortfolio: "Model approved for Portfolios",
    modelForPortfolioFailed: "Model approved/rejected failed for Portfolios",
    noModelPortfolioRelationWaitingForApproval: 'Portfolio you are sending are already approved',
    modelCannotBeAssignedToPortfolio: 'Model cannot be assigned to portfolio',
    modelCannotBeApprovedWithPortfolio: 'Model-Portfolio association cannot be approved as model is not Approved',
    modelRejected: "Model is rejected.",
    modelApproved: "Model is approved.",
    securityAssetOfModelTypeNotExists: "Security Asset does not exists in ModelType with id: ",
    tempModelIsNotWaitingForApproval: " Pending model is not in Waiting For Approval status",
    dynamicModelSecuritiesQuantityUpdated: "dynamic model securities updated",
    //Portfolio messages
    portfolioNameEmpty: 'Portfolio name can not be null or empty',
    portfolioNotFound: 'Portfolio does not exist',
    NoAccountExistInPortfolio: 'No account exist in portfolio',
    PortfolioNotFoundOrDeleted: 'Portfolio does not exist or already deleted',
    portfolioAlreadyExist: 'Portfolio already exist with same name',
    portfolioNotAssignedWithAccounts: 'Portfolio is not assigned with accounts',
    portfolioAssignedToAccounts: 'Portfolio assigned to accounts successfully',
    portfolioUnAssignedFromAccounts: 'Portfolio unassigned from accounts successfully',
    portfolioNotUnAssignedFromAccounts: 'Failed to unassign Portfolio from accounts or No accounts are assigned with this portfolio',
    portfolioUnAssignedFromAccount: 'Portfolio unassigned from account successfully',
    portfolioNotUnAssignedFromAccount: 'Failed to unassign Portfolio from account or this portfolio is not assigned to this account',
    portfolioDeleted: 'Portfolio deleted successfully',
    portfoliosDeleted: 'Portfolios deleted successfully',
    portfolioAccountAssociated: 'Portfolio is associated with account so can not be deleted',
    primaryTeamIdNotFound: 'PrimaryTeamId does not exist in teamIds list',
    portfolioNotCreated: 'Failed to Create Portfolio',
    sleevedPortfolioNotBeDeleted: 'Sleeved portfolios can not be deleted',
    sleevedPortfolioNotBeUpdated: 'Sleeved Portfolios can not be updated',
    AccountIdsNotFound: 'Account Ids does not exist or disabled',
    teamIdNotFound: 'One or more teams are not active or deleted',
    portfolioTeamIdsEmpty: 'teamIds can not be null or empty',
    portfolioModelNotFound: 'Model is not active or does not exist',
    //Advisor messages
    advisorNotFound: 'Advisor does not exist',
    //strategist messages
    strategistNotFound: 'Strategist does not exist',
    strategistNoRecord: 'No Record Found',
    strategistDeleted: 'Strategist is deleted successfully',
    strategistAdded: 'Strategist is added successfully',
    strategistUpdated: 'Strategist is updated successfully',
    strategistFound: 'A record with Strategist id found',
    strategistModelAdded: 'Models is added successfully',
    strategistModelUpdated: 'Models is updated successfully',
    strategistModeldeleted: 'Models is deleted successfully',

    //Community Model
    communityModelNotFound: 'Model does not exist',
    communityNoRecord: 'No Record Found',
    communityModelAlreadyExist: 'Model already exist with same name',
    communityModelDeleted: 'Model deleted successfully',
    communityModelNotFoudOrDeleted: 'Model does not exist or already deleted',
    modelDuplicate: 'Duplicate entry model',
    //Community security
    securityNoRecord: 'No Record Found',
    communitysecurityNotFound: 'Security does not exist',

    //Account
    accountNoRecord: 'No Record Found',
    accountNotFound: 'Account does not exist',
    rebalanceError: 'Rebalance request not executed successfully',
    asideDeleted: 'Set aside cash deleted successfully',
    asideNotExist: 'Aside cash does not exist',
    cashAmountTypeNotExist: 'Cash amount type does not exist',
    expirationTypeNotExist: 'Expiration type  does not exist',
    transactionTypeNotExist: 'Expiration value does not exist',
    onlyExpirationValueNotAllowed: 'Only expiration value not allowed',
    dateFormatNotValid: 'Date format not valid',
    asideCashAmount: 'Cash amount should be in positive',
    toleranceValue: 'Tolerance value should be in positive',
    dateValid: 'Please provide future date',
    cashPercentNotBe:"Cash percent should not be more then 100 ",




    //Views
    viewNotFound: 'View does not exist',
    viewTypeNotFound: 'View Type does not exist',
    viewNotUpdated: 'Failed to update View',
    viewNotCreated: 'Failed to create new View',
    viewAccessDenied: 'You do not have permission to delete this view',
    viewDeleted: 'View deleted successfully',
    viewAlreadyExist: 'View already exists with same name',
    //Holding
    holdingNotFound: 'Holding does not exist',

    //Sleeve
    sleeveImportSucess: 'Sleeve Sync process completed successfully',
    sleeveImportError: 'Unable to start sleeve sync import process, please contact administrator',
    tradeDisableSuccess: 'Trades disabled successfully',
    tradeDisableError: 'Failed to disabled the trades',
    tradeEnableSuccess: 'Trades enabled successfully',
    tradeEnableError: 'Failed to enable the trades',
    tradeDeleteSuccess: 'Trades deleted successfully',
    tradeNotFoudOrDeleted: 'Trade does not exist or already deleted',
    tradeExists: 'Trade exists',
    tradesEnableWarning: 'Few trades do not enabled successfully, may be deleted or not accessable',
    tradesDisableWarning: 'Few trades do not disable successfully, may be deleted or not accessable',
    tradeGenerationError:'Failed to generate trade',
    tradeGenerationSuccess : 'Trade generated successfully',
    tradePermissionNotFound: 'Trade Permission not found',
    tradeActionNotFound: 'Action is invalid',
    duplicateTrade:"Trade already exist",
    tradeAlreadyExistWarning : "This account/ticker has open orders in instance id ",
    invalidAction : "Invalid Action",
    invalidPortfolio : "Invalid portfolio parameter",
    invalidAccount : "Invalid account parameter",
    
    //Notification
    readNotificationSuccess: 'Notification read successfully by User',
    invalidNotificationForUser: 'Invalid notificationId for logged in User',
    userNotificationDeleted: 'Notification deleted successfully',
    notficationNotFoundOrAlreadyDeleted: 'Notification does not exist or already deleted',
    notificationCategoryTypeDeleted: 'NotificationCategoryType master list deleted successfully',
    notificationCategorySubscribed: 'Notification Category Types subscribed successfully',
    notificationCategoryNotSubscribed: 'Notification category type id is not subscribed for user',
    notificationCategoryUnsubscribed: 'Notification category type unsubscribed successfully',
    activityNotFound: 'Activity does not exist',
    userAssignedToActivity: 'User assigned to activity successfully',

    // Trade tool
    NORowFound:'No trade found',
    invalidFileAttributeName: 'Invalid name specified for input type file',
    fileNotFound: 'The file specified, is not found',
    fileDataNotFound: 'File is not present in request',
    fileHeadersNotValid: 'File headers are not valid',
    inValidFileFormat: 'Please check file format or create a new file',
    canNotSellSndBuySameSecurities: 'Can not sell and buy same securities',
    cannotSellMoreThan: 'Trade percent can not be more than 100% of a Security',
    tradePercentCanNotBeZero: 'Trade percent can not be zero or negative',
    sellSecurityPercent: 'Total of sell security percent can not be more than 100%',
    buySecurityPercent: 'Total of buy security percent can not be more than 100%',
    sellSecurityNotFound: 'Sell security does not exist',
    buySecurityNotFound: 'Buy security does not exist',
    NoTradeMethodProvide: 'Please provide account for trade',
    NoAccountFoundForModels: 'No account found for models',
    calculationEmpty: " Calculation empty",
    tradeList : "Trade list empty ",

    //Search Message
    searchPageAdded: 'Search Page added successfully',
    searchModuleAdded: 'Search Module added successfully',

    //Trade Files
    invalidDateFormat: 'Please Enter a valid date format(MM/DD/YYYY)',
    tradeFileNotFound: 'Trade File does not exist',
    failedToUpdateStatus: 'Failed to update Trade File Status to sent',
    failedToDeleteFile: 'Failed to delete Trade File',
    tradeFileDeleted: 'Trade File deleted successfully',
    tradeCannotEdit: "Trade can not be edit due to privilages or already processed",

    //Trade Order
    invalidTradeOrderTypeId: 'Invalid trade order type id',
    accountNotExist: 'The Account does not exist, or you do not have rights to the specified account',
    accountTradeBlocked: 'Account is trade blocked',
    accountInactive: 'Account is not active',
    noPriceForSecurity: 'No price found for product',
    cantSellDisownedPosition: 'Cannot sell a position that is not owned',
   // securityNotFound: 'Security not found',
    noSecurityFound: 'No security found',
    noPositionFound: 'No position found',
    tradeAmountGreaterThenAvailable: 'The requested trade amount is more than what is available. The value is <>',
    shortTermFeeWarning: 'Short Term Fee Warning',
    overspendCashWarning: 'The selected buy amount will overspend cash. The current cash value is ',
    unableToSavingTradeInstance: 'Unable to saving  trade instance',
    unableToGenerateTradeOrders: 'Unable to generate  trade orders',
    cantBuyPercentSecurity: 'You cant buy any percent for security',
    moreTransactionCost: 'Transaction cost is more then the limit set',
    lessTradeValue: 'Trade value is less then the minimum transaction amount',
    moreTradeValue: 'Trade value is more then the maximum transaction amount',
    lessTradePercent: 'Trade value is less then the minimum transaction percent',
    moreTradePercent: 'Trade value is more then the maximum transaction percent',
    noTradeOrder: 'No trade order to genrate',
    noAccountToGenerateTradeFound: 'No account found to generate trade',

    // POST IMPORT ANALYSIS
    fullImportError: "Error in Post Import analysis process!!! Please Try Again!!!",
    importErrorStatus: "Error",
    importError:"Error during data analytics process",
    partialImportError: "Error in data analytics process!!! Please Try Again!!!",
    importSubject: "Post Import Analysis!!!",
    notificationFullAnalysisType: "PostImport Analysis",
    notificationFullAnalysisMessage: "Post Import Anlaysis is running",
    notificationPartialAnalysisMessage: "Data Analytics in progress",
    notificationInProgressStatus: "In-Progress",
    notificationCompletedStatus: "Completed",
    notificationCompletionAnalysisMessage: "Analysis ran successfully!!!",
    
    //SMA Node
    smaNodeDeleted: 'SMA Node deleted successfully'

};


